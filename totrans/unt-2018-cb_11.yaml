- en: Webserver Communication and Online Version-Control
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a leaderboard using PHP and a database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unity game communication with a web-server leaderboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and cloning a GitHub repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a Unity project to a Git repository, and pushing it up to GitHub
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unity project version-control using GitHub for Unity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preventing your game from running on unknown servers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A **Server** waits for messages requesting something for a **Client**, and when
    one is received, it attempts to interpret and act upon the message, and send back
    an appropriate response to the **Client**. A **Client** is a computer program
    that can communicate with other **Clients** and/or Servers. **Clients** send **Requests**,
    and receive **Responses**.
  prefs: []
  type: TYPE_NORMAL
- en: It us useful to keep these concepts of **Client**/**Server**/**Request**/**Response**
    in mind when thinking about and working with **Client**-**Server** achitectures.
  prefs: []
  type: TYPE_NORMAL
- en: The Big Picture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The world is networked, which involves many different **Clients** communicating
    with other **Clients**, and also with **Servers**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each of the Unity deployment platforms illustrates an example of a **Client**:'
  prefs: []
  type: TYPE_NORMAL
- en: WebGL (running in a web browser)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows and Mac applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nintendo Switch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Microsoft Xbox
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sony Playstation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Servers** that these games can communicate with include dedicated multiplayer
    **Game Servers**, regular webservers, and online database servers. Multiplayer
    game development is the topic for a whole book of its own.
  prefs: []
  type: TYPE_NORMAL
- en: Web and database servers can play many roles with game development and Runtime
    interaction. One form of Unity game interaction with web servers involves a game
    communicating with an online **Server** for data, such as high scores, inventories,
    player profiles, and chat forums.
  prefs: []
  type: TYPE_NORMAL
- en: Another kind of **Client**-**Server** relationship is for **Distributed Version
    Control Systems** (**DVCS**), where content on a local computer (laptop or desktop)
    can be synchronized with an online server, both for backup and historical change
    purposes, and also to allow the sharing, and collaborative authoring, of code
    projects with other people. Private repositories are used within commercial game
    companies, and public repositories are used for **Open Source** projects, allowing
    anyone access to the contents.
  prefs: []
  type: TYPE_NORMAL
- en: The recipes in this chapter explore a range of these **Client-Server** communication
    scenarios in relation to the Unity game development, online Run-Time communication,
    and cloud code version-control and sharing.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a leaderboard using PHP and a database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Games are more fun when there is a leaderboard of high scores that the players
    have achieved. Even single-player games can communicate with a shared web-based
    leaderboard. This recipe creates the web **Server-Side** (PHP) scripts to set
    and get player scores from a SQL database. The recipe after this one then creates
    a Unity game **Client** that can communicate with this web leaderboard **Server**.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes that you either have your own web hosting, or are running
    a local web server. You could use the built-in PHP web **Server**, or a web **Server**
    such as Apache or Nginx. For the database, you could use a SQL database Server
    such as MySQL or MariaDB, however, we've tried to keep things simple using SQLLite—a
    file-based database system. So all you actually need on your computer is PHP 7,
    since it has a built-in web **Server** and can talk to SQLite databases, which
    is the setup on which this recipe was tested.
  prefs: []
  type: TYPE_NORMAL
- en: All the PHP scripts for this recipe, and the SQLLite database file, can be found
    in the `12_01` folder.
  prefs: []
  type: TYPE_NORMAL
- en: If you do want to install a web server and database server application, a great
    choice is XAMPP. It is a free, cross-platform collection of everything you need
    to set up a database and web server on your local computer. The download page
    also contains FAQs and installation instructions for Windows, Mac, and Linux: [https://www.apachefriends.org/download.html](https://www.apachefriends.org/download.html).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To set up a leaderboard using PHP and a database, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the provided PHP project to where you will be running your webserver:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Live website hosting**: Copy the files to the live web folder on your server
    (often `www` or `httdocs)`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Running on local machine**: At the comment line, you can use the Composer
    script shortcut to run the PHP built-in web server by typing **composer run:**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/63c43c18-90f0-48e8-9547-da18b99140d5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Open a web browser to your website location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Live website hosting**: Visit the URL for your hosted domain'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Running on local machine**: Visit the `localhost:8000` URL:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/38fc311f-1c1e-48ca-b739-5c14d4594fa9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Create/reset the database by clicking the last bulleted link: reset database.
    You should see a page with message database has been reset, and a link back to
    the home page (click that link).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To view the leaderboard scores as a web page in your web browser, click the
    second link: list players (HTML):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/56f76b73-e922-461d-9860-4e954bba3aef.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Try the fifth link – list players (TXT) – to retrieve the leaderboard data
    as a text file. Note how it looks different viewed in the web browser (which ignores
    line breaks), than when you view the actual source file returned from the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a455da29-6ebc-4653-84b1-01af528919ae.png)'
  prefs: []
  type: TYPE_IMG
- en: Do the same with the JSON and XML options – to see how our **Server** can return
    the contents of the database wrapped up as HTML, plain text (TXT), XML, or JSON.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the sixth link – create (username = mattilda, score=800). When you next
    retrieve the contents, you'll see that there is a new database record for player
    mattilda with a score of 800\. This shows that our server can receive data and
    change the contents of the database, as a well as just returning values from it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The player's scores are stored in a SQLLite database. Access to the database
    is facilitated through the PHP scripts provided. In our example, all the PHP scripts
    were placed in a folder on our local machine, from which we'll run the Server
    (it can be anywhere when using the PHP built-in server). So, the scripts are accessed
    via `http://localhost:8000`.
  prefs: []
  type: TYPE_NORMAL
- en: All the access is through the PHP filem called `index.php`. This is called a
    Front Controller, acting like a receptionist in a building, interpreting Requests
    and asking the appropriate function to execute some actions and return a result
    in **Response** to the **Request**.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are five actions implemented, and each is indicated by adding the action
    name at the end of the URL (this is the GET HTTP method, which is sometimes used
    for web forms. Take a look at the address bar of your browser next time you search
    Google for example). The actions and their parameters (if any) are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**action = list & format = HTML / TXT / XML / JSON**: This action asks for
    a listing all player scores to be returned. Depending on the value of second variable
    format (html/txt/xml/json), the list of users and their scores is returned in
    different text file formats.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**action = reset**: This action asks for a set of default player names and
    score values to replace the current contents of the database table. This action
    takes no argument. It returns some HTML stating that the database has been reset,
    and a link to the homepage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: "**action = get & username = & format = HTML / TXT**: This action asks for the\
    \ integer score of the named player that \Lis to be found. It returns the \Lscore\
    \ integer. There are two formats: HTML, for a webpage giving the player's score,\
    \ and TXT, where the numeric value is the only content in the HTTP message returned."
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: "**action = update & username = <usermame> & score = <score>**: This action\
    \ asks for the provided score of the named player to be stored in the database\
    \ (but only if this new score is greater than the currently-stored score). It\
    \ returns the word success (if the database update was successful), otherwise\
    \ -1 \L(to indicate that no update took place)."
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here are some ways to go further with this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: SQLite, PHP, and database servers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The PHP code in this recipe used the PDO data objects functions to communicate
    with a SQLite local file-based database. Learn more about PHP and SQLite at [http://www.sqlitetutorial.net/sqlite-php/](http://www.sqlitetutorial.net/sqlite-php/).
  prefs: []
  type: TYPE_NORMAL
- en: When SQLite isn't a solution (not suported by a web-hosting package), you may
    need to develop locally with a SQL Server, such as MySQL Community Edition or
    MariaDB, and then deploy with a live database **Server** from your hosting company.
  prefs: []
  type: TYPE_NORMAL
- en: A good solution to try things out on your local machine can be a combined web
    application collection, such as XAMP/WAMP/MAMP. Your web **Server** needs to support
    PHP, and you also need to be able to create the MySQL databases.
  prefs: []
  type: TYPE_NORMAL
- en: PHPLiteAdmin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When writing code that talks to database files and database **Servers**, it
    can be frustrating when things are not working to not be able to see inside the
    database. Therefore, database **Clients** exist to allow you to interact with
    database **Servers** without having to use code.
  prefs: []
  type: TYPE_NORMAL
- en: 'A lightweight (single file!) solution when using PHP and SQLLite is PHPLiteAdmin,
    which is free to use (although you may consider donating if you use it a lot).
    It is included in the `phpLiteAdmin` folder with this recipe''s PHP scripts. It
    can be run using the Composer script shortcut command—**composer dbadmin—**and
    will run locally at `localhost:8001.` Once running, just click on the link for
    the players table to see the data for each player''s score in the database file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2f8a200b-1125-4b41-81db-aac4559b85c1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Learn more about PHPLiteAdmin at the project''s GitHub repository and website:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/phpLiteAdmin/pla](https://github.com/phpLiteAdmin/pla)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.phpliteadmin.org/](https://www.phpliteadmin.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unity game communication with web-server leaderboard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, we create a Unity game **Client** that can communicate, via
    UI buttons, with our web server leaderboard from the previous recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c95c4897-97eb-476b-a2d0-05220b91c7e5.png)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since the scene contains several UI elements and the code of the recipe is the
    communication with the PHP scripts and SQL database, in the `12_02` folder, we
    have provided a Unity package called `UnityLeaderboardClient`, containing a scene
    with everything set up for the Unity project.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create a Unity game that communicates with the web-server leaderboard, do
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Import the provided Unity package, `UnityLeaderboardClient`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the provided **Scene**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure your PHP leaderboard is up and running.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you are not running locally (`localhost:8000`), you''ll need to update the
    URL by selecting the **Main Camera** in the Hierarchy, and then editing the **Leader
    Board URL** text for the **Web Leaderboard (Script)** component in the **Inspector**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b5dc80ae-de0f-4cc5-9995-657d839dd1d7.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on the **UI Buttons** to make Unity communicate with the PHP scripts that
    have access to the highscore database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The player's scores are stored in an SQL database. Access to the database is
    facilitated through the PHP scripts provided by the web server project that was
    set up in the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: In our example, all the PHP scripts were placed in a web **Server** folder for
    a local webserver. So, the scripts are accessed via `http://localhost:8000/`.
    However, since the URL is a public string variable, this can be set before running
    to the location of your Server and site code.
  prefs: []
  type: TYPE_NORMAL
- en: "There are buttons in the Unity scene (corresponding to the actions the web\
    \ leaderboard understands) that set up the corresponding action and the parameters\
    \ to be added to the URL, for the next call to the web **Server**, via the `LoadWWW()`\
    \ method. The `OnClick()` actions have been set up for each button \Lto call the\
    \ corresponding methods of the `WebLeaderBoard` C# script of the **Main Camera**."
  prefs: []
  type: TYPE_NORMAL
- en: There are also several **UI Text** objects. One displays the most recent URL
    string sent to the server. Another displays the integer value that was extracted
    from the response message that was received from the server (or a message as **not
    an integer** if some other data was received).
  prefs: []
  type: TYPE_NORMAL
- en: The third **UI Text** object is inside a **UI Panel**, and has been made large
    enough to display a full, multiline text string received from the Server (which
    is stored inside the textFileContents variable).
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see that the contents of the HTTP text Reponse message are simply an
    integer when a random score is set for player Matt, when the Get score for player
    ''matt'' (TXT) button is clicked, and a text file containing `505` is returned:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/65f17bea-2f99-4c8a-b0aa-040e1854cb91.png)'
  prefs: []
  type: TYPE_IMG
- en: The **UI Text** objects have been assigned to public variables of the `WebLeaderBoard`
    C# script for the Main Camera. When any of the UI Buttons are clicked, the corresponding
    method of the `WebLeaderBoard` method is called, which builds the URL string with
    parameters, and then calls the `LoadWWW()` method. This method sends the Request
    to the URL, and waits (by virtue of being a coroutine) until a Response is received.
    It then stores the content, received in the `textFileContents` variable, and calls
    the `UpdateUI()` method. There is a prettification of the text received, inserting
    newline characters to make the JSON, HTML, and XML easier to read.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here are some ways to go further with this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Extracting the full leaderboard data for display within Unity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The XML/JSON text that can be retrieved from the PHP web server provides a useful
    method for allowing a Unity game to retrieve the full set of the leaderboard data
    from the database. Then, the leaderboard can be displayed to the user in the Unity
    game (perhaps, in a nice 3D fashion, or through a game-consistent UI).
  prefs: []
  type: TYPE_NORMAL
- en: See Chapter [Working with Plain Text, XML, and JSON Text Files](https://cdp.packtpub.com/unity_2017_cookbook/wp-admin/post.php?post=490&action=edit)
    in this cookbook to learn how to process data in XML and JSON formats.
  prefs: []
  type: TYPE_NORMAL
- en: Using the secret game codes to secure your leaderboard scripts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Unity and PHP code that is presented illustrates a simple, unsecured web-based
    leaderboard. To prevent players hacking into the board with false scores, we should
    encode some form of secret game code (or key) into the communications. Only update
    requests that include the correct code will actually cause a change to the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Unity code will combine the secret key (in this example, the **harrypotter **string)
    with something related to the communication – for example, the same MySQL/PHP
    leaderboard may have different database records for different games that are identified
    with a game ID:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: "The server-side PHP code will receive both the encrypted game code, and the\
    \ piece \Lof game data that is used to create that encrypted code. In this example,\
    \ it is the game ID and MD5 hashing function, which is available in both Unity\
    \ and in PHP. You can learn more about MD5 hashing on Wikipedia: [https://en.wikipedia.org/wiki/MD5](https://en.wikipedia.org/wiki/MD5)."
  prefs: []
  type: TYPE_NORMAL
- en: 'The secret key (**harrypotter**) is used with the game ID to create an encrypted
    code that can be compared with the code received from the Unity game (or whatever
    user agent or browser is attempting to communicate with the leaderboard **Server**
    scripts). The database actions will only be executed if the game code created
    on the **Server** matches that sent along with the request for a database action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Creating and cloning a GitHub repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Distributed Version Control Systems** (**DVCS**) are becoming a bread-and-butter
    everyday tool for software developers. An issue with Unity projects can be the
    many binary files in each project. There are also many files in a local system''s
    Unity project directory that are not needed for archiving/sharing, such as OS-specific
    thumbnail files and trash files. Finally, some Unity project folders themselves
    do not need to be archived, such as Temp and Library.'
  prefs: []
  type: TYPE_NORMAL
- en: While Unity provides its own **Unity Teams** online collaboration, many small
    game developers chose not to pay for this extra feature. Also, Git and Mercurial
    (the most common DVCSs) are free, and work with any set of documents that are
    to be maintained (programs in any programming language, text-files, and so on).
    So, it makes sense to learn how to work with a third-party, industry-standard
    DVCS for the Unity projects. In fact, the documents for this very book were all
    archived and version-controlled using a private **GitHub** repository!
  prefs: []
  type: TYPE_NORMAL
- en: In this project, we'll create a new online project repository using the free
    **GitHub** server, and then clone (duplicate) a copy onto a local computer. The
    recipe that follows will then transfer a Unity project into the local project
    repository, and use the stored link from the cloning to push the changed files
    back up to the **GitHub** online server.
  prefs: []
  type: TYPE_NORMAL
- en: 'NOTE: **All** the projects from this Cookbook have been archived on **GitHub**
    in public repositories for you to read, download, edit, and run on your computer.
    Depsite a hard disk crash during the authoring of this book, no code was lost,
    since the steps of this recipe were being followed for every part of this book.'
  prefs: []
  type: TYPE_NORMAL
- en: 'NOTE: **Git** is a version-control system, **GitHub** is one of several online
    systems that host projects archived in the **Git** format. A popular alternative
    to **GitHub** is **BitBucket**, which can host both **Git** and **Mercurial**
    version-control project formats.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since this recipe illustrates hosting code on **GitHub**, you'll need to create
    a (free) **GitHub** account at GitHub.com if you do not already have one.
  prefs: []
  type: TYPE_NORMAL
- en: 'If not already installed, you''ll need to install **Git** on your local computer
    as part of this recipe. Learn how, and download the client from the following
    links:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://git-scm.com/book/en/Getting-Started-Installing-Git](http://git-scm.com/book/en/Getting-Started-Installing-Git)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://git-scm.com/downloads/guis](http://git-scm.com/downloads/guis)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The screenshots for this recipe were created on a Mac. On Windows, you would
    use the Git BASH (see [https://gitforwindows.org/](https://gitforwindows.org/))
    or Powershell (see [https://docs.microsoft.com/en-us/powershell/](https://docs.microsoft.com/en-us/powershell/))
    Terminal windows for command-line Git operations.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create and clone a **GitHub** repository, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install **Git** for the command line on your computer. As usual, it is good
    practice to do a system backup before installing any new application: [https://git-scm.com/book/en/v2/Getting-Started-Installing-Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Test that you have **Git** installed, by typing **git** at the command line
    in a terminal window. You should see text help displayed, showing a list of possible
    command options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0acf7549-4a4b-4a80-8193-ac96380b222f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Open a web browser and nagivate to your **GitHub** repositories page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bdd9dc78-c86f-4879-a8e7-3c59d79b1c71.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click the green button to start creating a new repository (such as my-github-demo):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a name for the new repository, such as **my-github-demo**
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click the option to create a **README** (important, so you can clone the files
    to a local computer)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Add a `.gitignore` file – choose the Unity one:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/73601e73-1d55-4b9e-b2ca-e71f5e8fadf5.png)'
  prefs: []
  type: TYPE_IMG
- en: The `.gitignore` file is a special file; it tells the version control system
    which files do not need to be archived. For example, we don't need to record the
    Windows or Mac image thumbnail files (`DS_STORE` or `Thumbs.db`).
  prefs: []
  type: TYPE_NORMAL
- en: With the options selected, click the green Create Repository button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should now be taken to the repository contents page. Click the green dropdown
    named Clone or download, and then click the URL copy-to-clipboard tool button.
    This has copied the special **GitHub** URL needed for connecting to GitHub and
    copying the files to your local computer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/22ee34b0-6bb5-4576-864e-03b9e0e31ec1.png)'
  prefs: []
  type: TYPE_IMG
- en: Open a command-line **Terminal** window, and navigate to the location where
    you wish to clone your **GitHub** project repository (such as Desktop or Unity-projects).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the CLI (Command-Line Interface), type `**git clone**`, and then paste the
    URL from your clipboard, it will be something like [https://github.com/dr-matt-smith/my-unity-github-demo.git](https://github.com/dr-matt-smith/my-unity-github-demo.git):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cd7109d1-5911-4fb2-8930-199c5c07c249.png)'
  prefs: []
  type: TYPE_IMG
- en: Change into your cloned directory, such as `cd my-unity-github-demo`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'List the files. You should see your `README.md`, and if you have the option
    to see hidden folders and files, you''ll also see `.git` and `.gitignore`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/092753d4-3335-4e26-8d65-038ae7238032.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Use the `git remote -v` command to see the stored link from this copy of the
    project files on your computer, then back up to the GitHub online repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You learned how to create a new empty repository on the **GitHub** web server.
    You then cloned it to your local computer.
  prefs: []
  type: TYPE_NORMAL
- en: You also checked to see that this clone had a link back to its remote origin.
  prefs: []
  type: TYPE_NORMAL
- en: If you have simply downloaded and decompressed the ZIP file, you would not have
    the `.git` folder, nor would you have the remote links back to its GitHub origin.
  prefs: []
  type: TYPE_NORMAL
- en: The .git file actually contains the entire history of changes to the project
    repository files – and using different Git commands, you can update the folder
    to re-instance any of the committed snapshots for the project repository contents.
  prefs: []
  type: TYPE_NORMAL
- en: "The special file called `.gitignore` lists all the files and directories that\
    \ are **not** \Lto be archived. At the time of writing, here are the contents\
    \ of files that do not need to be archived (they are either unnecessary or can\
    \ be regenerated when a project is loaded into Unity):"
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, folders such as **Library** and **Temp** are not to be archived.
    Note that if you have a project with a lot of resources (such as those using the
    2D or 3D Gamekits), rebuilding the **Library** may take some minutes depending
    on the speed of your computer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that the recommended files to ignore for **Git** change from time to time
    as Unity changes its project folder structure. **GitHub** has a master recommended
    `.gitignore` for Unity, and it is recommended you review it from time to time,
    especially when upgrading to a new version of the Unity editor: [https://github.com/github/gitignore/blob/master/Unity.gitignore](https://github.com/github/gitignore/blob/master/Unity.gitignore).'
  prefs: []
  type: TYPE_NORMAL
- en: If you are using an older (pre-2018) version of Unity, you may need to look
    up what the appropriate `.gitignore` contents should be. The details given in
    this recipe were up to date for the 2018.2 version of the Unity editor.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here are some ways to go further with this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Learn more about DVCS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here is a short video introduction to DVCS: [http://youtu.be/1BbK9o5fQD4](http://youtu.be/1BbK9o5fQD4).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that the Fogcreek Kiln "harmony" feature now allows seamless work between
    **Git** and **Mercurial** with the same Kiln repository: [http://blog.fogcreek.com/kiln-harmony-internals-the-basics/](http://blog.fogcreek.com/kiln-harmony-internals-the-basics/).'
  prefs: []
  type: TYPE_NORMAL
- en: Learn more about Git at the command line
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are new to working with a **CLI**, it is well worth following up some
    online resources to improve your skills. Any serious software development will
    probably involve some work at a command line at some point.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since both **Git** and **Mercurial** are open source, there are lots of great,
    free online resources available. The following are some good sources to get you
    started:'
  prefs: []
  type: TYPE_NORMAL
- en: "Learn all about Git, download free GUI clients, and even get free online access\
    \ to \LThe Pro Git book (by Scott Chacon), available through Creative Commons\
    \ license: [http://git-scm.com/book](http://git-scm.com/book)."
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You will find an online interactive Git command line to practice in: [https://try.github.io/levels/1/challenges/1](https://try.github.io/levels/1/challenges/1).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Bitbucket and SourceTree visual applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Unity offers a good tutorial on version-control using the Bitbucket website
    and the SourceTree application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://unity3d.com/learn/tutorials/topics/cloud-build/creating-your-first-source-control-repository](https://unity3d.com/learn/tutorials/topics/cloud-build/creating-your-first-source-control-repository)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'SourceTree is a free Mercurial and Git GUI client, available at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.sourcetreeapp.com/](http://www.sourcetreeapp.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning about Mercurial rather than Git
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: "The main Mercurial website, including free online access to *Mercurial*: \L\
    *The Definitive Guide* *(by Bryan O'Sullivan)* is available through the Open Publication\
    \ License at [http://mercurial.selenic.com/](http://mercurial.selenic.com/)."
  prefs: []
  type: TYPE_NORMAL
- en: Adding a Unity project to a local Git repository, and pushing files up to GitHub
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, you created a new online project repository using the
    free **GitHub Server**, and then cloned (duplicate) a copy onto a local computer.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will transfer a Unity project into the local project repository,
    and use the stored link from the cloning to push the changed files back up to
    the Guthub online **Server**.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe follows on from the previous one, so ensure you've completed that
    receipe before beginning this one.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To add a Unity project to a **Git** repository, and push it up to **GitHub**,
    do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new Unity project (or make use of an old one), save the **Scene**,
    and quit Unity. For example, we created a project named **project-for-version-control**
    that contains the default `SampleScene` and a Material named `m_red`. It is the
    asset files in the Project panel that are the files that are stored on disk, and
    are the ones you'll be version controlling with **Git** and **GitHub**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It is important that all work has been saved and the Unity application is not
    running when you are archiving your Unity project, since if Unity is open there
    may be unsaved changes that will not get correctly recorded.
  prefs: []
  type: TYPE_NORMAL
- en: 'On your computer, copy the following folders into the folder of your cloned
    **GitHub** repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The folder after copying these contents is illustrated below:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/300f8fcf-197e-4d50-ad51-cfcc125c6c6a.png)'
  prefs: []
  type: TYPE_IMG
- en: At the **CLI**, type git status to see a list of folders/files that have changed
    and need to be committed to the next snapshot of project contents for out **Git**
    version-control system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add all these files by typing `git add`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Commit our new snapshot with the `git commit -m "files added to project"` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We have created a snapshop of the new files and folders, so now we can push
    this new committed snapshot up to the GitHub cloud servers. Type `git push origin
    master`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'NOTE: The first time you do this, you''ll be asked for your **GitHub** username
    and password.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Visit **GitHub**, you should see that there is a new commit, and that your
    Unity files and folders have been uploaded to the **GitHub** online repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bbf22bda-2a24-403b-8947-d02d98f1c773.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, you had created a project repository on the **GitHub**
    cloud **Server**, and then cloned it to your local machine. You then added the
    files from a (closed) Unity application to the cloned project repository folder.
    These new files were added and committed to a new **snapshot** of the folder,
    and the updated contents pushed up to the **GitHub Server**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Due to the way Unity works, it creates a new folder when a new project is created.
    Therefore, we had to turn the contents of this the Unity project folder into a
    **Git** repository. There are two ways to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: Copy the files from the Unity project to a cloned **GitHub** repository (so
    it has remote links set up for pushing back to the **GitHub** server).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make the Unity project folder into a **Git** repository, and then either link
    it to a remote **GitHub** repository, or push the folder contents to the **GitHub**
    server and create a new online repository at that point in time
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For people new to Git and GitHub, the first procedure, which we followed in
    this recipe, is probably the simplest to understand. Also, it is the easiest to
    fix if something goes wrong – since a new GitHub repo can be created, cloned to
    the local machine, and the Unity project files copied there, and then pushed up
    to GitHub (and the old repo deleted), by pretty much following the same set of
    steps.
  prefs: []
  type: TYPE_NORMAL
- en: Interestingly, the second approach is recommended when using the **Open Source
    GitHub for Unity** package – which is explored in the next recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Unity project version-control using GitHub for Unity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**GitHub** has released an **Open Source** tool integrating **Git** and **GitHub**
    into Unity, which we''ll explore in this recipe.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You will need **Git** installed at the command line on your computer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://git-scm.com/book/en/v2/Getting-Started-Installing-Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You may need to install Git LFS (Large File Storage) for the GitHub for Unity
    package to work correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://git-lfs.github.com/](https://git-lfs.github.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You may wish to create a .gitattributes file to specify which files should be
    used with Git **Large File Storage** (**LFS)**. For some guidance, check out Rob
    Reilly's useful article, *How to Git With Unity*: [https://robots.thoughtbot.com/how-to-git-with-unity](https://robots.thoughtbot.com/how-to-git-with-unity).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To manage Unity project version-control using GitHUb for Unity, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Start a new Unity project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the Asset Store panel, choose menu: Window | General | Asset Store.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Asset Store, search for GitHub for Unity, download and import this into
    your project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0b96b117-9240-46e5-8557-9cbd4d0926d2.png)'
  prefs: []
  type: TYPE_IMG
- en: If there is a popup about a newer version, accept it and download the newer
    version. This will download as a Unity package (probably in your Downloads folder),
    which you can then import into your Unity project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once imported, you should see a Plugins | GitHub folder in your Project panel.
    You will also now see two new items on your Window menu, for GitHub and GitHub
    Command Line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/79ae288e-f6f7-4110-b7cf-b31f544d7342.png)'
  prefs: []
  type: TYPE_IMG
- en: Choosing the Window | GitHub Command Line allows you to use the Git commands
    listed in the previous two recipes (it will open at the directory of your Unity
    project).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Choosing the Window | GitHub menu item will result in a GitHub panel being
    displayed. Initially this project is not a **Git** repository, so it will need
    to be initialized as a new **Git** project, which can be performed by clicking
    the Initialize as a git repository for this project button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/72052137-e4b6-425b-ac20-bd79eda27d15.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You will be able to see that there is one commit, for the snapshot for this
    initialization of the Git version-control-tracking for this project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b4670f6e-6197-43b0-89f5-2c8629907734.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Sign in with your **GitHub** username and password:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2bdadd82-34f2-4aac-9c67-c1420cd3e117.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Open a web browser, log in to your **GitHub** account, and create a new empty
    repository (with no extra files, that is, no `README`, `.gitignore`, or `Licence`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/75622bc4-371c-4f7e-9d58-b54b988d880a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Copy the URL for the new repository onto your clipboard:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/88730c9a-09ed-43cd-853e-f95af23dd5eb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Back in Unity, for the **GitHub** panel, click the Settings button, paste the
    URL for the `Remote: origin` property, and click the Save Repository button to
    save this change. Your Unity project is now linked to the remote **GitHub** cloud
    repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e2d33ec0-d421-44e5-a526-d2aa31f6bcca.png)'
  prefs: []
  type: TYPE_IMG
- en: You may now commit and push changes from your Unity project up to **GitHub**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add some new assets (such as a new C# script and a **Material** named **m_red**).
    Click the Changes tab in the GitHub panel, ensure the complete `Assets` folder
    is checked (and all its contents), write a brief summary of the changes, and click
    the Commit to [master] button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e1083a39-f50d-43be-aa50-5ab836d1f5bc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You now have a commited snapshot of the new Unity project contents on your
    computer. Push this new committed snapshot up to the **GitHub** server by clicking
    the Push (1) button. The (1) indicates that there is one new commited snapshot
    locally that has not yet been pushed, that is, the local machine is 1 commit ahead
    of the master on the **GitHub Server**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ae7cd615-2616-4ad0-ac0f-bb2869dfc75e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Visit the repository on **GitHub** in your web browser, and you''ll see the
    new committed snapshot of the Unity project contents have been pushed up from
    your computer to the **GitHub** cloud **Servers**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5aef0fb7-796c-48d4-9559-34a0bc770be6.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The **GitHub for Unity** package adds a special panel with functionality for
    the following **Git**/**GitHub** actions:'
  prefs: []
  type: TYPE_NORMAL
- en: Initializing a new **Git** project repository for the current Unity Project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Signing in with your **GitHub** username and password credentials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Linking your Unity project's **Git** history to a remote **GitHub** online repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Committing a snapshot of the changes in the Unity project you wish to record
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pushing committed changes to the remove **GitHub** online repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here are some ways to go further with this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading about GitHub for Unity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Check out the following links for more information:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The project website: [https://unity.github.com/](https://unity.github.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Quick Start guide: [https://github.com/github-for-unity/Unity/blob/master/docs/using/quick-guide.md](https://github.com/github-for-unity/Unity/blob/master/docs/using/quick-guide.md)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pulling down updates from other developers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **GitHub** plugin also provides the feature of being able to pull down changes
    from the remote **GitHub** repository to your computer (useful if you are working
    on multiple computers, or a fellow game developer is helping add features to your
    game).
  prefs: []
  type: TYPE_NORMAL
- en: If you are working with other game developers, it is very useful to learn about
    Git branches. Also, before starting work on a new feature, perform a pull to ensure
    you are then working with the most up-to-date version of the project.
  prefs: []
  type: TYPE_NORMAL
- en: Unity Collaborate from Unity Technologies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although **Git** and **GitHub** are used for many Unity projects, they are general-purpose
    version-control technologies. Unity Technologies offers its own online system
    for developers and teams to collaboratively work on the same Unity projects, however
    this is a feature that is no longer in the free Unity licence plan.
  prefs: []
  type: TYPE_NORMAL
- en: 'Learn more about **Unity Collaborate** and **Unity Teams** on the Unity website:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://unity3d.com/unity/features/collaborate](https://unity3d.com/unity/features/collaborate)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://unity3d.com/teams](https://unity3d.com/teams)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preventing your game from running on unknown servers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After all the hard work you've had to go through to complete your web game project,
    it wouldn't be fair if it ended up generating traffic and income on someone else's
    website. In this recipe, we will create a script that prevents the main game menu
    from showing up unless it's hosted by an authorized **Server**.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, you will need access to a webspace provider where you can host
    the game. However, you can test locally using a localhost web **Server**, such
    as the built-in PHP one, or an AMP Apache or Nginx web server.
  prefs: []
  type: TYPE_NORMAL
- en: You also will need to have installed the Unity **WebGL** build target.
  prefs: []
  type: TYPE_NORMAL
- en: 'NOTE: At the time of writing (summer 2018), for macOS computers, there is still
    an issue adding the **WebGL** package if it is not included at the time of original
    installation via Unity Hub. The macOS WebGL package requires the Unity application
    to be in the Applications | Unity folder. When installed via Unity Hub, it is
    actually in Applications | Unity | Hub | Editor | 2018.2.2f1\. If you have multiple
    versions, they will each be in the Editor folder. The solution for installing
    WebGL for a particular Unity version is to temporarily move the Applications |
    Unity | Hub folder somewhere else (such as the desktop), and then to copy (or
    temporarily move) the contents of your Unity version folder (for me it was 2018
    .2.2f1) into Applications | Unity. Then you can run the WebGL package installer
    successfully and it will add to the `PlaybackEngines` folder in Applications |
    Unity. Finally, you can move the Unity applications back where they were for **Unity
    Hub** to continue working.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To prevent your web game from being pirated, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'From the Hierarchy, create a **UI Text** GameObject named Text-loading-warning,
    choosing menu: Create | UI | Text.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Inspector for the **Text** component enter Loading...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the properties for the **Text (Script)** component in the **Inspector**
    set the **Horizontal** and **Vertical Overflow** to **Overflow**, and use the
    Rect Transform to align the object in the center of the **Scene**. Make the font
    size nice and big (50).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new C# script class named `BlockAccess`, and add an instance object
    as a component to the **Text-loading-warning** GameObject:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'From the Inspector, leave the Full URL option checked, increase Size of Domain
    List to `1`, and fill out Element 0 with the complete URL for your game. In the
    Warning field, type in "This is not a valid game copy":'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c255da69-1d7c-416a-8c5a-b856de5fa159.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Save your Scene as `scene0-loading`. Add this Scene to the Build (menu: File
    | Build Settings...). It should be the first one, with index 0.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new Scene, change its Main Camera background color to black, and add
    a UI Text message saying Game would play now.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save this second Scene as `scene1-gamePlaying`. Add this Scene to the Build –
    it should be the second one, with index 1.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s build our **WebGL** files. Again, open the Build Settings panel, and
    this time ensure that the deployment platform is WebGL. Click the Build button,
    and choose the name and folder to be the location for your built files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1315da9d-4162-4abe-b3ea-df0b2981d554.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You should now have a folder containing an HTML file (`index.html`) and the `Build`
    and `TemplateData` folders:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cdccb393-a549-4fe7-a2da-4b2f22b63848.png)'
  prefs: []
  type: TYPE_IMG
- en: Copy these folder contents to the public folder on your web **Server**, and
    use the browser to access the web page through the web **Server**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If your URL is in the list, you'll see the game play (possible with a short
    view of the **Loading... Scene message**). If your URL is not in the list, you'll
    see the **This is not a valid game copy** message, and the game will not start
    playing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you try to open the file using your web browser, you will probably get a
    WebGL not working error. You must be visiting the HTML page through a web server
    (such as `localhost:8000` or from your publicly-hosted page).
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As soon as the **Scene** starts, the script compares the actual URL of the location
    of the running Unity-generated **WebGL** webpage to the ones listed in the **BlockAccess**
    scripted component. If they don't match, the next level in the build is not loaded
    and a message appears on the screen. If they do match, the next scene from the
    build list will be loaded.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here are some ways to go further with this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling WebGL in Google Chrome
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this recipe, you''ll need **WebGL** enabled in your web browser. At present,
    our test browser (Google Chrome) has WebGL disabled by default. To enabled **WebGL**
    in Google Chrome, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Open Google Chrome and enter the `chrome://flags` URL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Locate the **Web GL Draft Extensions** (search for **WebGL**).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the drop-down menu to change from **Disabled** to **Enabled.**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the **RELAUNCH NOW** button to restart the application with the new settings
    as active:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/45b908bc-2706-44a3-913c-b7916b7dc7d6.png)'
  prefs: []
  type: TYPE_IMG
- en: You should now be able to use web pages with embedded **WebGL** content.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Improving security by using full URLs in your domain list
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Your game will be more secure if you fill out the domain list with complete
    URLs, such as [http://www.myDomain.com/unitygame/index.html](http://www.myDomain.com/unitygame/index.html),
    rather than just the main domain, such as www.myDomain.com. In fact, it's recommended
    that you leave the Full URL option selected so that your game won't be stolen
    and published under a URL such as www.stolenGames.com/yourgame.html?www.myDomain.com.
  prefs: []
  type: TYPE_NORMAL
