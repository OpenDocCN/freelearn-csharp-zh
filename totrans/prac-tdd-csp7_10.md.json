["```cs\nimport * as errorTypes from '../reducers/errorTypes';\n\n export default class FetchSpeakerService {\n   constructor() { }\n\n   create(speaker) {\n     return;\n   }\n\n   getAll() {\n     return;\n   }\n\n   getById(id) {\n     return;\n   }\n }\n```", "```cs\nimport FetchSpeakerService from './fetchSpeakerService';\n\n export default class ServiceFactory {\n   constructor() {\n     this._speakerService = null;\n   }\n\n   static createSpeakerService() {\n     return this._speakerService = \n       this._speakerService || new FetchSpeakerService();\n   }\n }\n```", "```cs\nexport default class SpeakerService {\n   create(speaker) {\n     throw new Error(\"Not Implemented!\")\n   }\n\n   getAll() {\n     throw new Error(\"Not Implemented!\")\n   }\n\n   getById(id) {\n     throw new Error(\"Not Implemented!\")\n   }\n }\n```", "```cs\nimport SpeakerService from './speakerService';\n\n export default class MockSpeakerService extends SpeakerService {\n   constructor() {\n     super();\n\n     this._speakers = [];\n  }\n …\n```", "```cs\nimport SpeakerService from './speakerService';\n\n export default class FetchSpeakerService extends SpeakerService {\n   constructor() {\n     super();\n   }\n …\n```", "```cs\nit('returns a speaker service', () => {\n   // act\n   let result = factory.createSpeakerService();\n\n   // assert\n   expect(result).to.be.an.instanceOf(SpeakerService);\n });\n```", "```cs\nbeforeEach(() => {\n   let service = factory.createSpeakerService();\n   let mockService = new MockSpeakerService();\n\n   getAll = sinon.stub(service, \"getAll\");\n   getAll.callsFake(mockService.getAll.bind(mockService));\n\n   mockStore = configureMockStore(middleware);\n });\n```", "```cs\nafterEach(() => {\n   getAll.restore();\n });\n```", "```cs\nbeforeEach(() => {\n   let service = factory.createSpeakerService();\n   let mockService = new MockSpeakerService();\n\n   getAll = sinon.stub(service, \"getAll\");\n   getAll.callsFake(mockService.getAll.bind(mockService));\n\n   getById = sinon.stub(service, \"getById\");\n   getById.callsFake(mockService.getById.bind(mockService));\n\n   create = sinon.stub(service, \"create\");\n   create.callsFake(mockService.create.bind(mockService));\n\n   mockStore = configureMockStore(middleware);\n });\n\n afterEach(() => {\n   create.restore();\n   getAll.restore();\n   getById.restore();\n });\n```", "```cs\ndescribe('Fetch Speaker Service', () => {\n   it('exits', () => {\n     expect(FetchSpeakerService).to.exist;\n   });\n });\n```", "```cs\nit('can be constructed', () => {\n   // arrange\n   let service = new FetchSpeakerService();\n\n   // assert\n   expect(service).to.be.an.instanceof(FetchSpeakerService);\n });\n```", "```cs\ndescribe('After Initialization', () => {\n   let service = null;\n\n   beforeEach(() => {\n     service = new FetchSpeakerService();\n   });\n\n   describe('Create', () => {\n     it('exists', () => {\n       expect(service.create).to.exist;\n     });\n   });\n });\n```", "```cs\ndescribe('Get All', () => {\n   it('exists', () => {\n     // assert\n     expect(service.getAll).to.exist;\n   });\n });\n```", "```cs\ndescribe.skip('No Speakers Exist', () => {\n   it('returns an empty array', () => {\n     // act\n     let promise = service.getAll();\n\n     // assert\n     return promise.then((result) => {\n       expect(result).to.have.lengthOf(0);\n     });\n   });\n });\n```", "```cs\nconstructor(baseUrl) {\n   super();\n\n   this.baseUrl = baseUrl;\n }\n\n getAll() {\n   return fetch(`${this.baseUrl}/speakers`).then(r => {\n     return r.json();\n   });\n }\n```", "```cs\n>npm install fetch-ponyfill\n```", "```cs\nimport { JSDOM } from'jsdom';\nimport Enzyme from 'enzyme';\nimport Adapter from 'enzyme-adapter-react-16';\nimport fetchPonyfill from 'fetch-ponyfill';\nconst { fetch } = fetchPonyfill(); \nconst jsdom = new JSDOM('<!doctype html><html><body></body></html>');\nconst { window } = jsdom;\nwindow.fetch = window.fetch || fetch; \n…\n\nglobal.window = window;\nglobal.document = window.document;\nglobal.fetch = window.fetch;\n```", "```cs\nbeforeEach(() => {\n   service = new FetchSpeakerService('http://localhost');\n });\n```", "```cs\nlet fetch = null;\n\n beforeEach(() => {\n   fetch = sinon.stub(global, 'fetch');\n   service = new FetchSpeakerService('http://localhost');\n });\n\n afterEach(() => {\n   fetch.restore();\n });\n```", "```cs\nimport fetchPonyfill from 'fetch-ponyfill';\n const {\n   Response,\n   Headers\n } = fetchPonyfill();\n```", "```cs\nit('returns an empty array', () => {\n   // arrange\n   fetch.returns(new Promise((resolve, reject) => {\n     let response = new Response();\n     response.headers = new Headers({\n       'Content-Type': 'application/json'\n     });\n     response.ok = true;\n     response.status = 200;\n     response.statusText = 'OK';\n     response.body = JSON.stringify([]);\n\n     resolve(response);\n   }));\n\n   // act\n   let promise = service.getAll();\n\n   // assert\n   return promise.then((result) => {\n     expect(result).to.have.lengthOf(0);\n   });\n });\n```", "```cs\ndescribe('Speaker Listing', () => {\n     it('returns speakers', () => {\n       // arrange\n       fetch.returns(new Promise((resolve, reject) => {\n         let response = new Response();\n         response.headers = new Headers({\n           'Content-Type': 'application/json'\n         });\n         response.ok = true;\n         response.status = 200;\n         response.statusText = 'OK';\n         response.body = JSON.stringify([{}]);\n\n         resolve(response);\n       }));\n\n       // act\n       let promise = service.getAll();\n\n       // assert\n       return promise.then((result) => {\n         expect(result).to.have.lengthOf(1);\n       });\n     });\n   });\n });\n```", "```cs\nfunction okResponse(body) {\n   return new Promise((resolve, reject) => {\n     let response = new Response();\n     response.headers = new Headers({\n       'Content-Type': 'application/json'\n     });\n     response.ok = true;\n     response.status = 200;\n     response.statusText = 'OK';\n     response.body = JSON.stringify(body);\n\n     resolve(response);\n   });\n }\n```", "```cs\ngetById(id) {\n   return fetch(`${this.baseUrl}/speakers/${id}`);\n }\n```", "```cs\n// arrange\n fetch.returns(new Promise((resolve, reject) => {\n   let response = new Response();\n   response.headers = new Headers({\n     'Content-Type': 'application/json'\n   });\n   response.ok = false;\n   response.status = 404;\n   response.statusText = 'NOT FOUND';\n\n   resolve(response);\n }));\n```", "```cs\n// assert\n return promise}).then(() => {\n   throw { type: 'Error not returned' };\n }).catch((error) => {\n   expect(error.type).to.equal(errorTypes.SPEAKER_NOT_FOUND);\n });\n```", "```cs\ngetById(id) {\n   return new Promise((resolve, reject) => {\n     fetch(`${this.baseUrl}/speakers/${id}`).then((response) => {\n       if (!response.ok) {\n         reject({\n           type: errorTypes.SPEAKER_NOT_FOUND\n         });\n       }\n     });\n   });\n }\n```", "```cs\nfunction baseResponse() {\n   let response = new Response();\n   response.headers = new Headers({\n     'Content-Type': 'application/json'\n   });\n   response.ok = true;\n   response.status = 200;\n   response.statusText = 'OK';\n\n   return response;\n }\n\n function okResponse(body) {\n   return new Promise((resolve, reject) => {\n     let response = baseResponse();       \n     response.body = JSON.stringify(body);\n\n     resolve(response);\n   });\n }\n\n function notFoundResponse() {\n   return new Promise((resolve, reject) => {\n     let response = baseResponse();\n     response.ok = false;\n     response.status = 404;\n     response.statusText = 'NOT FOUND';\n\n     resolve(response);\n   })\n }\n```", "```cs\ndescribe('Speaker Exists', () => {\n   it('returns the speaker', () => {\n     // arrange\n     const speaker = {\n       id: 'test-speaker'\n     };\n     fetch.returns(okResponse(speaker));\n\n     // act\n     let promise = service.getById('test-speaker');\n\n     // assert\n     return promise.then((speaker) => {\n       expect(speaker).to.not.be.null;\n       expect(speaker.id).to.equal('test-speaker');\n     });\n   });\n });\n```", "```cs\ngetById(id) {\n   return new Promise((resolve, reject) => {\n     fetch(`${this.baseUrl}/speakers/${id}`).then((response) => {\n       if (response.ok) {\n         resolve(response.json());\n       } else {\n         reject({\n           type: errorTypes.SPEAKER_NOT_FOUND\n         });\n       }\n     });\n   });\n }\n```", "```cs\n[Fact]\npublic void ItExists()\n{\n  var options = new DbContextOptions<SpeakerMeetContext>();\n  var context = new SpeakerMeetContext(options);\n\n  var repository = new Repository.Repository<Speaker>(context);\n}\n```", "```cs\n[Fact]\npublic void ItExists()\n{\n  var options = new DbContextOptionsBuilder<SpeakerMeetContext>()\n      .UseInMemoryDatabase(\"SpeakerMeetInMemory\")\n      .Options;\n\n  var context = new SpeakerMeetContext(options);\n\n  var repository = new Repository.Repository<Speaker>(context);\n}\n```", "```cs\n[Fact]\npublic void GivenSpeakersThenQueryableSpeakersReturned()\n{\n  using (var context = new SpeakerMeetContext(_options))\n  {\n    // Arrange\n    var repository = new Repository.Repository<Speaker>(context);\n\n    // Act\n    var speakers = repository.GetAll();\n\n    // Assert\n    Assert.NotNull(speakers);\n    Assert.IsAssignableFrom<IQueryable<Speaker>>(speakers);\n  }\n}\n```", "```cs\n[Fact]\npublic void GivenSpeakerNotFoundThenSpeakerNull()\n{\n  using (var context = new SpeakerMeetContext(_options))\n  {\n    // Arrange\n    var repository = new Repository.Repository<Speaker>(context);\n\n    // Act\n    var speaker = repository.Get(-1);\n\n    // Assert\n    Assert.Null(speaker);\n  }\n}\n```", "```cs\n[Fact]\npublic void GivenSpeakerFoundThenSpeakerReturned()\n{\n  using (var context = new SpeakerMeetContext(_options))\n  {\n    // Arrange\n    var repository = new Repository.Repository<Speaker>(context);\n\n    // Act\n    var speaker = repository.Get(1);\n\n    // Assert\n    Assert.NotNull(speaker);\n    Assert.IsAssignableFrom<Speaker>(speaker);\n  }\n}\n```", "```cs\nusing (var context = new SpeakerMeetContext(_options))\n{\n  context.Speakers.Add(new Speaker { Id = 1, Name = \"Test\"... });\n  context.SaveChanges();\n}\n```", "```cs\n[Fact]\npublic void ItExists()\n{\n  var options = new DbContextOptionsBuilder<SpeakerMeetContext>()\n      .UseInMemoryDatabase(\"SpeakerMeetInMemory\")\n      .Options;\n\n  var context = new SpeakerMeetContext(options);\n\n  var repository = new Repository<Speaker>(context);\n  var gravatarService = new GravatarService();\n\n  var speakerService = new SpeakerService(repository, gravatarService);\n}\n```", "```cs\npublic class ContextFixture : IDisposable\n{\n  public SpeakerMeetContext Context { get; }\n\n  public ContextFixture()\n  {\n    var options = new DbContextOptionsBuilder<SpeakerMeetContext>()\n        .UseInMemoryDatabase(\"SpeakerMeetContext\")\n        .Options;\n\n    Context = new SpeakerMeetContext(options);\n\n    if (!Context.Speakers.Any())\n    {\n      Context.Speakers.Add(new Speaker {Id = 1, Name = \"Test\"...});\n      Context.SaveChanges();\n    }\n  }\n\n  public void Dispose()\n  {\n    Context.Dispose();\n  }\n}\n```", "```cs\n[Collection(\"Service\")]\n[Trait(\"Category\", \"Integration\")]\npublic class GetAll : IClassFixture<ContextFixture>\n{\n  private readonly IRepository<Speaker> _repository;\n  private readonly IGravatarService _gravatarService;\n\n  public GetAll(ContextFixture fixture)\n  {\n    _repository = new Repository<Speaker>(fixture.Context);\n    _gravatarService = new GravatarService();\n  }\n\n  [Fact]\n  public void ItExists()\n  {\n    var speakerService = new SpeakerService(_repository, _gravatarService);\n  }\n}\n```", "```cs\n[Fact]\npublic void ItReturnsCollectionOfSpeakerSummary()\n{\n  // Arrange\n  var speakerService = new SpeakerService(_repository, _gravatarService);\n\n  // Act\n  var speakers = speakerService.GetAll();\n\n  // Assert\n  Assert.NotNull(speakers);\n  Assert.IsAssignableFrom<IEnumerable<SpeakerSummary>>(speakers);\n}\n```", "```cs\n[Fact]\npublic void GivenSpeakerNotFoundThenSpeakerNotFoundException()\n{\n  // Arrange\n  var speakerService = new SpeakerService(_repository, _gravatarService);\n\n  // Act\n  var exception = Record.Exception(() => speakerService.Get(-1));\n\n  // Assert\n  Assert.IsAssignableFrom<SpeakerNotFoundException>(exception);\n}\n```", "```cs\n[Fact]\npublic void GivenSpeakerFoundThenSpeakerDetailReturned()\n{\n  // Arrange\n  var speakerService = new SpeakerService(_repository, _gravatarService);\n\n  // Act\n  var speaker = speakerService.Get(1);\n\n  // Assert\n  Assert.NotNull(speaker);\n  Assert.IsAssignableFrom<SpeakerDetail>(speaker);\n}\n```", "```cs\n[Fact]\npublic async void ItShouldCallGetSpeakers()\n{\n  // Arrange\n  var server = new TestServer(new WebHostBuilder()\n      .UseStartup<Startup>()\n      .ConfigureServices(services =>\n      {\n        services.AddDbContext<SpeakerMeetContext>(o =>\n          o.UseInMemoryDatabase(\"SpeakerMeetInMemory\"));\n      }));\n\n  var client = server.CreateClient();\n\n  // Act\n  var response = await client.GetAsync(\"/api/speaker\");\n\n  // Assert\n  Assert.NotNull(response);\n}\n```", "```cs\npublic class ServerFixture : IDisposable\n{\n  public TestServer Server { get; }\n  public HttpClient Client { get; }\n\n  public ServerFixture()\n  {\n    Server = new TestServer(new WebHostBuilder()\n             .UseStartup<Startup>()\n             .ConfigureServices(services =>\n             {\n               services.AddDbContext<SpeakerMeetContext>(o =>\n                 o.UseInMemoryDatabase(\"SpeakerMeetContext\"));\n             }));\n\n    if (Server.Host.Services.GetService(typeof(SpeakerMeetContext)) is SpeakerMeetContext context)\n    {\n      context.Speakers.Add(new Speaker {Id = 1, Name = \"Test\"...});\n      context.SaveChanges();\n    }\n\n    Client = Server.CreateClient();\n  }\n\n  public void Dispose()\n  {\n```", "```cs\n    Server.Dispose();\n    Client.Dispose();\n  }\n}\n```", "```cs\n[Collection(\"Controllers\")]\n[Trait(\"Category\", \"Integration\")]\npublic class GetAll : IClassFixture<ServerFixture>\n{\n  private readonly HttpClient _client;\n\n  public GetAll(ServerFixture fixture)\n  {\n    _client = fixture.Client;\n  }\n\n  [Fact]\n  public async void ItShouldCallGetSpeakers()\n  {\n    // Act\n    var response = await _client.GetAsync(\"/api/speaker\");\n\n    Assert.NotNull(response);\n  }\n}\n```", "```cs\n[Fact]\npublic async void ItShouldReturnSuccess()\n{\n  // Act\n  var response = await _client.GetAsync(\"/api/speaker/\");\n  response.EnsureSuccessStatusCode();\n\n  // Assert\n  Assert.Equal(HttpStatusCode.OK, response.StatusCode);\n}\n```", "```cs\n[Fact]\npublic async void ItShouldReturnSpeakers()\n{\n  // Act\n  var response = await _client.GetAsync(\"/api/speaker\");\n  response.EnsureSuccessStatusCode();\n\n  var responseString = await response.Content.ReadAsStringAsync();\n  var speakers = JsonConvert.DeserializeObject<List<SpeakerSummary>>(responseString);\n\n  // Assert\n  Assert.Equal(1, speakers[0].Id);\n}\n```", "```cs\npublic static class Extensions\n{\n  public static async Task<T> ReadAsJsonAsync<T>(this HttpContent content)\n  {\n    var json = await content.ReadAsStringAsync();\n\n    return JsonConvert.DeserializeObject<T>(json);\n  }\n}\n```", "```cs\n[Fact]\npublic async void ItShouldReturnSpeakers()\n{\n  // Act\n  var response = await _client.GetAsync(\"/api/speaker\");\n  response.EnsureSuccessStatusCode();\n\n  var speakers = await response.Content.ReadAsJsonAsync<List<SpeakerSummary>>();\n\n  // Assert\n  Assert.Equal(1, speakers[0].Id);\n}\n```", "```cs\n[Fact]\npublic async void ItShouldCallGetSpeaker()\n{\n  // Act\n  var response = await _client.GetAsync(\"/api/speaker/-1\");\n\n  Assert.NotNull(response);\n}\n```", "```cs\n[Fact]\npublic async void ItShouldReturnError()\n{\n  // Act\n  var response = await _client.GetAsync(\"/api/speaker/-1\");\n\n  // Assert\n  Assert.Equal(HttpStatusCode.NotFound, response.StatusCode);\n}\n```", "```cs\n[Fact]\npublic async void ItShouldReturnSuccess()\n{\n  // Act\n  var response = await _client.GetAsync(\"/api/speaker/1\");\n  response.EnsureSuccessStatusCode();\n\n  // Assert\n  Assert.Equal(HttpStatusCode.OK, response.StatusCode);\n}\n```", "```cs\n[Fact]\npublic async void ItShouldReturnSpeaker()\n{\n  // Act\n  var response = await _client.GetAsync(\"/api/speaker/1\");\n  response.EnsureSuccessStatusCode();\n\n  var speakerSummary = await response.Content.ReadAsJsonAsync<SpeakerDetail>();\n\n  // Assert\n  Assert.Equal(1, speakerSummary.Id);\n}\n```"]