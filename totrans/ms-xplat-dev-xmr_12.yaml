- en: Chapter 12. ALM – App Stores and Publishing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter explains the processes related to app package preparation and
    release, which constitutes the last step of the application lifecycle. General
    information about application packages and bundles is followed by information
    about different release channels and release management tools. The chapter is
    divided into the following sections:'
  prefs: []
  type: TYPE_NORMAL
- en: Release packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Distribution options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line of business apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Release packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: On each Xamarin target platform, release packages differ in several ways from
    the development packages prepared during the development and testing phases. Release
    packages are optimized to take up less space and consume less resources in the
    runtime (both processing time and memory resources). They also do not contain
    symbol files or inter-process communication channels (such as **Java Debug Wire
    Protocol** (**JDWP**)) required for **just-in-time** (**JIT**) debugging. It is
    also important to mention that Xamarin.iOS and Xamarin.Android projects, once
    built for release, are virtually no different from applications built with native
    development tools.
  prefs: []
  type: TYPE_NORMAL
- en: In order to prepare the application for release, developers need to take several
    preparation steps before actually building the application. These steps differ
    slightly on each platform.
  prefs: []
  type: TYPE_NORMAL
- en: Xamarin.Android app package (.apk)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Developers preparing Xamarin.Android application release packages should follow
    a certain checklist to create an optimized package for release.
  prefs: []
  type: TYPE_NORMAL
- en: Disabling debugging
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The initial step of preparing a Xamarin.Android application for release is to
    disable the debugging channel, called Java Debug Wire Protocol, used by Xamarin
    tools or `adb` to communicate with the **Java Virtual Machine** (**JVM**). If
    not disabled, this channel can pose a security risk.
  prefs: []
  type: TYPE_NORMAL
- en: 'JDWP can be disabled by using either the application manifest or the `AssemblyInfo.cs`
    file. In order to disable debugging using the application manifest, the `android:debuggable`
    attribute needs to be set to `false` on the application node:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The entry in the `AssemblyInfo.cs` looks similar:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that debug builds contain certain permissions, such as storage access and
    Internet usage, automatically enabled. Once the application is built with a release
    configuration, it is a good idea to run the application through another round
    of regression testing and, if necessary, modify the explicit permission declarations
    in the application manifest.
  prefs: []
  type: TYPE_NORMAL
- en: Linking
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: During the development phase, application deployments generally contain the
    whole set of Xamarin.Android runtime assemblies (no linking). Linking is the process
    where only the required components are introduced into the application package
    to reduce the application package's size. A static analysis algorithm (that is,
    ahead-of-time compilation) is used during the linking process, in which the dependencies
    are identified and included in the bundle.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three available options that define which assemblies will be put
    through the process of linking:'
  prefs: []
  type: TYPE_NORMAL
- en: '**None**: This is the default configuration value for debug builds. No linking
    is performed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sdk Assemblies Only**: Only Xamarin.Android runtime assemblies are linked.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sdk and User Assemblies**: Both Xamarin.Android runtime assemblies and the
    application libraries are statically analyzed for code reach.![Linking](img/B04693_12_01.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Figure 1: Linker options'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In order to ensure that certain types and namespaces are included in the final
    package, even though they are not statically reachable, a simple public class
    declaration with public methods using the required types as parameters can create
    the necessary code reachability (see `LinkerPleaseInclude.cs`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Linking certain types and methods can also be achieved using a link description
    file. In order to create a link description file, an XML file with the build action
    set to `LinkDescription` should be created in the Xamarin.Android project. The
    file schema for `LinkDescription` uses a simple declarative structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the application is built and the package is exported, comparing the size
    of the signed `apk` packages for `None`, `Sdk`, and `All` assemblies shows a noticeable
    reduction in size:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Linking](img/B04693_12_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2: Android linker results'
  prefs: []
  type: TYPE_NORMAL
- en: Just like the release build, after the linking step, it is highly advised to
    run another setup regression test to see if the application features are functioning
    as expected.
  prefs: []
  type: TYPE_NORMAL
- en: Packing options
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Important application package-related configuration values can be found in the
    **Packaging** section of the **Android Options** tab of the **Project Properties**
    page. In spite of the fact that most of the configuration values are disabled
    by default in a normal release build, they might be used for optimizing the release
    package in certain scenarios. **Use Shared Runtime** and **Use Fast Deployment**
    are, under normal circumstances, intended for debug builds and are used to increase
    the productivity of developers.
  prefs: []
  type: TYPE_NORMAL
- en: '**Bundle assemblies into native code**: This option instructs the mono compiler
    to bundle the application assemblies into a native shared library as a security
    measure (only available with an Enterprise license).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Generate one package (.apk) per selected ABI**: Each selected **Application
    Binary Interface** (**ABI**) will cause the compiler to generate a separate package.
    For instance, if armeabi-v7a and x86 CPU architectures are selected, two application
    packages will be generated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AOT Compilation** (experimental): Ahead-of-time compilation converts the
    application assemblies into native code to decrease the initialization time for
    the application while increasing the application package size (only available
    with Business or Enterprise licenses).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enable Multi-Dex**: In order to work around the DEX method count limit, the
    Multi-Dex feature was introduced in the Android Lollipop (API 21) release and
    a retroactive support library was released for API levels 4 through 20\. This
    option enables the use of multiple DEX files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Android application packages contain an executable bytecode file called the
    Dalvik Executable file (DEX). This file contains the compiled code used in the
    application runtime and has a limit of 64*210 (65536) methods referenced (including
    Android framework methods, library methods, and custom code introduced by the
    application).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Enable ProGuard**: ProGuard is another option that can help reduce the size
    of the application and the DEX declarations. For applications developed with a
    native toolset, ProGuard can also obfuscate the application code, but this option
    is currently not available for Xamarin.Android applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Packaging
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Once the preparation steps are complete, Xamarin.Android application packages
    can be created either with Visual Studio or Xamarin Studio. Xamarin Studio offers
    the option of archiving the builds so that they can be easily signed and pushed
    to available channels.
  prefs: []
  type: TYPE_NORMAL
- en: The application package can be archived using the **Archive for Publishing**
    option in the project context menu. (Similarly, the **View Archives** button can
    be used to access previous archives.) In the archives view, the selected application
    package can be signed and ready for store submission or ad-hoc (see *Distribution
    options*) distribution.
  prefs: []
  type: TYPE_NORMAL
- en: '![Packaging](img/B04693_12_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3: Xamarin Studio package archives'
  prefs: []
  type: TYPE_NORMAL
- en: Packages created with the `Export Android Package` option using Visual Studio
    are signed with the debug key. These packages should not, and in most cases cannot,
    be distributed through normal channels. In order to create the release-ready package,
    the unsigned package from the build directory should be located and the package
    should be signed using the `jarsigner` utility from Java SDK.
  prefs: []
  type: TYPE_NORMAL
- en: Xamarin.iOS app bundle (.ipa)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before any iOS application can be published to the App Store, there are several
    configuration values that need to be configured and revised. More importantly,
    the build process should be configured as a release build and the package should
    be signed with a proper identity before it can be submitted through iTunes Connect.
  prefs: []
  type: TYPE_NORMAL
- en: Build options
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For a release build (ad-hoc or app-store), once the active build configuration
    is set, some of the values are automatically adjusted to the developers' convenience.
    For instance, options related to debugging such as **Enable Profiling** and **Enable
    incremental builds** are automatically disabled. These options, together with
    the **Enable Debugging** option, produce larger application packages that are
    not valid for store submission.
  prefs: []
  type: TYPE_NORMAL
- en: Other than the debugging options, the supported CPU architectures must be carefully
    configured. While it is possible to combine the selections (such as ARMv7 + ARM64,
    as seen in the figure below), each architecture targets a certain iPhone or iPad
    model. ARMv6 was the initial CPU architecture that was used in iPhone 3G. This
    architecture is no longer supported by iOS compilers. Starting with iPhone 3GS,
    up until iPhone 5, including iPads, the CPU architecture used was ARMv7\. ARMv7s
    and ARM64 were used in iPhone 5 and iPhone 5s respectively. iPhone 6 uses ARMv8,
    which is another 64-bit processor (that is, the build requirement would be ARM64).
  prefs: []
  type: TYPE_NORMAL
- en: '![Build options](img/B04693_12_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4: iOS build configuration'
  prefs: []
  type: TYPE_NORMAL
- en: '**Low Level Virtual Machine** (**LLVM**) is the name of the set of tools/libraries
    designed for the compile-time optimization of programs written in various programming
    languages. It was released under an open source license. During the development
    phase, Xamarin tools only utilize mono compiler (`mtouch`). Mono compiler produces
    less optimized but more "accessible" binaries that make them possible to debug
    and diagnose. However, for release builds using LLVM, it can generate much more
    optimized results.'
  prefs: []
  type: TYPE_NORMAL
- en: While LLVM provides both package size and runtime enhancements, the Thumb-2
    instruction set is simply an executable size improvement. ARMv7 and ARMv7s processors
    use this compact instruction set. It can provide a significant reduction in the
    package size at the expense of slower execution time.
  prefs: []
  type: TYPE_NORMAL
- en: Linking
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Linking works in a similar way as in Xamarin.Android platform. In addition to
    arbitrary class creation with public methods to avoid certain classes being linked
    out, on Xamarin.iOS, `Preserve` attribute can be used on class declarations to
    inform the compiler about the necessity of a certain class and its members (such
    as `[Preserve(AllMembers = true)]`).
  prefs: []
  type: TYPE_NORMAL
- en: Provisioning profile
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Provisioning profiles are used to set up the entitlements and package signing
    information for iOS applications. In order to create a publishing-ready iOS package,
    users first need to create the application metadata on Apple's iOS provisioning
    portal.
  prefs: []
  type: TYPE_NORMAL
- en: On the provisioning portal, developers should first choose a unique application
    name and a bundle ID. These will be used to identify the application once it is
    published. Additionally, the App Services that are required by the application
    should be selected.
  prefs: []
  type: TYPE_NORMAL
- en: Other than the App ID, a distribution profile should be created for the application.
    In order to create the distribution profile, one would need to select the Provision->Distribution
    node on the application portal navigation tree. Using the **+** button, a new
    distribution profile can be created. In the distribution profile wizard, the user
    need to select the distribution type (that is, **App Store** or **Ad Hoc**), select
    the App ID that was previously created, possible deployment devices, and a signing
    certificate (a signing certificate can be requested from Apple's Members Center).
  prefs: []
  type: TYPE_NORMAL
- en: Once the App ID and provisioning profile are created, the application metadata
    should be set up in the Xamarin.iOS project settings in the iOS **Application
    Settings** section (`Info.plist` and `Entitlements.plist` files can also be directly
    configured).
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the **Archive for Publishing** button can be used to create the release
    package. Once the build is complete, the new package will be shown in the archives
    window. Selecting the correct application and using the **Sign and Distribute**
    option will open the publishing wizard where the previously configured provisioning
    profile can be selected and applied to the current build package.
  prefs: []
  type: TYPE_NORMAL
- en: Windows Phone app package (.appx)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Windows Phone and Windows Store application packages are prepared using the
    available toolset for Windows app developers in Visual Studio. In the release
    preparation phase, Windows Phone applications do not require or interact with
    any Xamarin components.
  prefs: []
  type: TYPE_NORMAL
- en: Distribution options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just like the beta builds, there are different distribution options for the
    release versions of Xamarin applications. Public app stores are the easiest and
    the most convenient way to distribute mobile applications, targeting the general
    public. On the other hand, private application distribution channels may be needed
    for enterprise application distribution scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: App store(s)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For Xamarin.iOS and Windows Phone applications, the only official distribution
    stores are application stores maintained by Apple and Microsoft respectively.
    Each of these application stores has a well-defined submission flow involving
    both content validation (that is, whether the application meet the content guidelines)
    and technical validation (that is, does the application meets the quality criteria).
    It is highly advisable to read the appropriate application certification guidelines
    before submitting the release-ready package to either of these stores. In order
    to distribute applications using iTunes Connect tools and Apple App Store, developers
    need to apply for a developer account and pay an annual subscription fee. Windows
    App Store requires a developer account subscription, which at the moment is free
    of charge.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, Android developers have a big pool of options as public app
    distribution channels. The most popular stores are the Google Play and Amazon
    App stores. Both of these stores allow developers to publish both paid and free
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: The Google Play store serves as the official app store for the Android operating
    system. It was originally called the Android Market and later on merged with two
    other Google products, namely Google Music and Google eBookstore. The Google Play
    store requires developers to sign up with a small subscription fee before they
    can distribute applications. Security and quality testing is one of the most essential
    steps of the app certification process, which makes this store the most trusted
    among Android users.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, the Amazon App store was initially created for Amazon Kindle
    Fire devices specifically, and yet it became the second biggest store for Android
    applications. Developers can sign up for a free developer account, and the revenue
    share model is the same as other popular stores (that is, 70% developer/30% store).
  prefs: []
  type: TYPE_NORMAL
- en: Other than the two biggest stores, there are other application stores for Android
    applications. The most intriguing app store provider is the F-Droid store, which
    focuses on free and open source software (FOSS) for the Android operating system.
    This store attracts many users since the store policy dictates that there is no
    tracking, advertising, or dependencies in distributed applications.
  prefs: []
  type: TYPE_NORMAL
- en: Ad-hoc
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ad-hoc distribution is the name given to the process by which application packages
    are distributed to users for testing or private use through various communication
    channels (such as shared storage, online sharing, e-mail, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: This type of distribution was mentioned in the beta testing part of the previous
    chapter, but at times, applications built only for internal use can be distributed
    in this manner.
  prefs: []
  type: TYPE_NORMAL
- en: 'The ad-hoc distribution concept can be divided into two categories: signed
    and unsigned distribution. The official way of distributing application packages
    over the air is to digitally sign the application packages with a trusted certificate
    (that is, the signing identity should be created using the official channels such
    as signing certificate providers). Once the application package is digitally signed
    with a certificate from a trusted provider, the app can be sideloaded to mobile
    devices. Sideloading is the process of installing an app without using a public
    or private store.'
  prefs: []
  type: TYPE_NORMAL
- en: If the application is signed by a self-signed certificate, the application publisher
    would simply be unidentifiable. In this type of scenario, either the owner of
    the device should allow applications to be installed from unknown sources (on
    Android and Windows 10 mobile devices) or the device should be developer unlocked
    (on Windows Phone) or jailbroken (on iOS). While unlocking a device is an official
    process on Windows Phone devices, jailbreaking violates the end-user license agreement
    for iOS.
  prefs: []
  type: TYPE_NORMAL
- en: Line of Business apps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Line of Business applications, or LOB apps, is a term generally used synonymously
    with enterprise applications. These applications are either developed in-house,
    or outsourced for the specific needs of a company. In other words, LOB apps can
    be categorized as business rather than consumer applications. They are generally
    domain-specific and target a small group with a specific need.
  prefs: []
  type: TYPE_NORMAL
- en: Private channel distribution (Android)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One way of distributing LOB applications built for Android platform is to use
    the Google Play private channels. Applications distributed through these channels
    are restricted to users of a specific domain. In order to use private channels,
    one needs to have a subscription to either Google Play for Work, Google Apps for
    Business, Education, or Government.
  prefs: []
  type: TYPE_NORMAL
- en: While app pricing and other distribution settings may still apply to these private
    apps, the testing and validation steps are skipped in the store submission process.
    App submissions can either be done by the owner of the channel or the permissions
    can be delegated to another user in the same domain.
  prefs: []
  type: TYPE_NORMAL
- en: Apple Developer Enterprise Program
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Apple Developer Enterprise Program is Apple's initiative to support companies
    to develop and distribute in-house applications. This program is only available
    for companies that exist as a legal entity (the D-U-N-S number is required). Once
    the organization is enrolled in the Enterprise Program, development and release
    management team members can be assigned roles, as well as digital certificates
    and provisioning profiles. However, these provisioning profiles cannot contain
    the App Store distribution method (that is, the only available provisioning profiles
    are in-house and ad-hoc).
  prefs: []
  type: TYPE_NORMAL
- en: '![Apple Developer Enterprise Program](img/B04693_12_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5: Provisioning profile for Apple Developer Enterprise Program'
  prefs: []
  type: TYPE_NORMAL
- en: The applications built under the enterprise program can be distributed through
    native or third-party **Mobile Device Management** (**MDM**) solutions, as well
    as ad-hoc packages.
  prefs: []
  type: TYPE_NORMAL
- en: Windows Phone private distribution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Windows Phone applications can be developed and distributed for in-house utilization,
    using the application signing certificate purchased from Symantec (Symantec is
    currently the only provider of this type of certificate). Using the mobile signing
    certificate, application packages can signed and distributed through MDMs or sideloaded
    into company devices.
  prefs: []
  type: TYPE_NORMAL
- en: Most MDM providers, such as Microsoft Intune, come equipped with a company store
    application that can be used to provide applications for company devices. Device
    management systems also make it possible to install the company applications directly
    for domain users.
  prefs: []
  type: TYPE_NORMAL
- en: It is also possible to install the signing certificate on devices, which will
    benefit from in-house applications and distribute applications through custom
    company hub applications.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we briefly went over the package preparation process for Xamarin.Android
    and Xamarin.iOS applications (and also Windows Phone). As you can see, preparing
    the release package is a little more complicated then pressing the **Debug** button
    on the development IDE of choice. However, each of these platforms have well-defined
    application certification guidelines and online resources.
  prefs: []
  type: TYPE_NORMAL
- en: Once the release packages are prepared, it is up to the developer to choose
    between different distribution options, including but not limited to, the public
    and private stores that can be used to publish the release packages. Public store
    applications can be delivered to the general public, while private distribution
    channels or ad-hoc deployments, involving sideloading and MDMs, can be used for
    LOB applications.
  prefs: []
  type: TYPE_NORMAL
