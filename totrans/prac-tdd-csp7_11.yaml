- en: Changes in Requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As progress is made on any application, new and different requirements will
    likely be added. Sometimes these requirements enhance the existing functionality
    of the application. At other times, these new requirements may conflict with the
    existing functionalities. When requirements conflict, it's important that issues
    are resolved so that the proper functionality can be built.
  prefs: []
  type: TYPE_NORMAL
- en: So, what are the changes in requirements you might expect to see? Changes often
    consist of alterations to a business rule, new features or enhancements, or modifications
    needed to resolve a bug or defect discovered in the system.
  prefs: []
  type: TYPE_NORMAL
- en: As time goes on, there will often be a need to modify an existing business rule.
    This may be in response to user feedback, clarification from the business, or
    a need discovered through use of the system. When the need for change is discovered,
    then the existing application will need to change. A comprehensive test suite
    will ensure that the rest of the system still operates as expected once the new
    changes are implemented. Start by modifying and/or creating new tests to cover
    the new desired functionality of the system.
  prefs: []
  type: TYPE_NORMAL
- en: There's a common saying in software development that *software is never finished;
    it is merely abandoned*. That is to say that an application will continue to grow
    and evolve through new development if it is to continue to be useful. If new features
    aren't being added, then it is likely that the project has simply been abandoned.
    If an application is to continue to be of use, then you can expect that new features
    will need to be implemented. Again, start with the tests and add new tests which
    will help guide your implementation of any and all new features.
  prefs: []
  type: TYPE_NORMAL
- en: When a bug is discovered and the root cause identified, then a change will need
    to be made to resolve the issue. In order to prevent this bug from appearing again
    in the future, a new test, or series of tests, should be written to cover any
    potential scenarios that would result in the erroneous behavior.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will gain an understanding of:'
  prefs: []
  type: TYPE_NORMAL
- en: Changing requirements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A new feature
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dealing with defects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changes to Speaker Meet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Premature optimization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hello World
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Stepping back to one of our first examples, take a look at the sample *Hello
    World* application. Remember that, depending on the time of day, a different message
    is displayed to the user. Before noon, the user is greeted with Good morning,
    and after noon, Good afternoon is returned to the user.
  prefs: []
  type: TYPE_NORMAL
- en: A change in requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Depending on the time of day, the user is greeted with Good morning or Good
    afternoon. To extend the functionality and introduce a new feature, let's address
    the user with Good evening if the time of day is between 6 p.m. and midnight.
  prefs: []
  type: TYPE_NORMAL
- en: Good evening
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to introduce this new feature, begin with the tests. Modification of
    an existing test will be needed, as well as adding one or more new tests to cover
    the change in requirements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Modify the `Theory` data provided to `GivenAfternoon_ThenAfternoonMessage`
    so that only noon through 6 p.m. are included for this test. Now, create a new
    test method, `GivenEvening_ThenEveningMessage`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now make the `Theory` pass by modifying the existing code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This is a fairly simple example, for sure. The implementation is starting to
    grow a design with which you may or may not be satisfied. Feel free to experiment
    with alternative implementations. You should now have sufficient tests that you
    feel safe to refactor to a pattern with which you're happier. If you break the
    implementation or discover a bug you may have introduced, add a test for this
    scenario.
  prefs: []
  type: TYPE_NORMAL
- en: FizzBuzz
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Moving on to the FizzBuzz example from [Chapter 2](part0069.html#21PMQ0-d186949d2da74f5c95dd1712efae1195),
    *Setting Up the .NET Test Environment*, extend the classic behavior of this code
    kata and introduce some new behavior.
  prefs: []
  type: TYPE_NORMAL
- en: A new feature
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A new requirement has been added to the classic FizzBuzz kata. The new requirement
    states that when a number is not divisible by 3 or 5, and is greater than 1, then
    the message Number not found should be returned. This should be easy enough. Start,
    once again, with the tests, and make the necessary modifications.
  prefs: []
  type: TYPE_NORMAL
- en: Number not found
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To get started, a new test method is needed to verify that the Number not found message
    is returned:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, make the test pass by modifying the existing code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This covers the first instance. However, does this satisfy the new requirement?
    Create a `Theory` set to force the proper solution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Make the test pass, the right way. Modify the existing code so that the desired
    results are returned:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Note that all the existing tests should continue to pass throughout this exercise.
    If you find a bug, write a new test to verify the scenario, and correct the code
    accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: TODO app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *TODO* app was another one of our early TDD examples. This app is far from
    complete, and we have received new requirements from the business, asking to add
    a feature to the application.
  prefs: []
  type: TYPE_NORMAL
- en: The business now wants the ability to complete a task in the TODO list. This
    feature is *schedule current sprint* and is the next story for us to work on.
  prefs: []
  type: TYPE_NORMAL
- en: Mark complete
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For the *Mark complete* story, we have been asked to allow the user to complete
    any of the tasks in the TODO list. Adding this feature should be much like any
    other TDD exercise in this book. Before reading our solution to this problem,
    try to complete this one on your own. After you have passing tests, come back
    and look at the solution in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Adding tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the `ToDoApplicationTests` file, we have added a `yak shaving` test to force
    us to create the complete method. This test also helps to define the API for the
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This causes us to create a method stub in the `TodoList` class. To get this
    test to pass, we had to remove the not implemented exception from the generated
    method. After creating the method, we added a skip to this test, similar to the
    previous `yak shaving` test in the same file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we needed to create a `TodoListCompleteTests` file to house the functionality
    tests for the complete method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: After writing this first test and implementing the code to make it pass, we
    were hard pressed to write another test that would fail. So, we assume that we
    are done for now.
  prefs: []
  type: TYPE_NORMAL
- en: Production code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The code to make the tests for completing a task is quite simple and only requires
    a single line method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: That is all we need. We are now ready for the sprint demo.
  prefs: []
  type: TYPE_NORMAL
- en: But don't remove from the list!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: During the sprint demo, our product owner asked what happened to the task when
    it was completed. We explained that it was removed from this list. This was not
    good. The product owner was hoping that we could provide metrics on tasks further
    down the road. She would like for us to track the completion of the task instead
    of deleting it.
  prefs: []
  type: TYPE_NORMAL
- en: After some discussion with the other developers, we have decided the task will
    gain a completed attribute and be hidden from the list. To accomplish this, we
    will have to do a bit of refactoring and add new tests. Again, try to complete
    this exercise on your own and then look at our solution for comparison.
  prefs: []
  type: TYPE_NORMAL
- en: Adding tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This change required quite a few new tests. Before we could make new tests,
    though, we had to first rename our existing completion test to represent the correct
    functionality. Adding two more tests to the `TodoListCompleteTests` file, we verify
    both that the item is marked complete and that it is not removed from the TODO
    list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to add `ShowComplete`, we created a `yak shaving` test in the `ToDoApplicationTests`
    file for completeness:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We also had to add a similar test to the `TodoModelTests` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Production code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For such a small code base, the changes required by the new tests caused a
    fairly significant change. First, we added an `IsComplete` property to the `Todo`
    model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The rest of the changes affect the `TodoList` class. A boolean property was
    added to toggle the visibility of completed items, the `Complete` method was modified
    to only mark the item as complete, and a `where` clause was added to the items
    retrieved from the list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Changes to Speaker Meet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Change is inevitable with any application. Requirements change as a result of
    a new business rule, feature enhancement, discovery and remediation of a defect,
    and so on. Change is especially certain when test driving an application. Luckily,
    through the process of TDD, your application should be easily and safely modifiable.
  prefs: []
  type: TYPE_NORMAL
- en: If a system is loosely coupled, then changes to one part of a system should,
    in theory, have little to no impact on the rest of the system. A comprehensive
    suite of unit tests should alleviate the fear of making changes.
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, the tests are only valid for the scenarios which they define.
    If sufficient tests aren't written to cover certain scenarios or edge cases, then
    it is certainly possible that a bug could find its way into production. If the
    TDD approach is not taken, or worse, tests aren't written at all, then you may
    discover that it is quite easy for a bug to make it through all of the checks
    of your code review process and CI/CD build pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: Take a look at the new requirements for the Speaker Meet application.
  prefs: []
  type: TYPE_NORMAL
- en: Changes to the back-end
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As the Speaker Meet application progressed, a new requirement was introduced.
    Speakers had to be *approved* before they were visible in parts of the system.
    This included the full listing of speakers, returning of speaker detail information,
    and through search results.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this scenario, a developer came in to help out with the implementation.
    This developer was not familiar with TDD and did not write tests to validate his
    work. The new requirement was implemented and a code review was submitted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'And a change to the class was added:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Can you spot the issue?
  prefs: []
  type: TYPE_NORMAL
- en: The code was reviewed and comments left. However, the comments were misunderstood
    (or just flatly ignored) and the code was committed, merged, and pushed through
    the deployment process. A breakdown for sure, but one that happens from time to
    time.
  prefs: []
  type: TYPE_NORMAL
- en: The CI server ran the test suite. The existing tests passed. The bug was not
    discovered, as there was no existing scenario that would have caught the error.
    Since new tests were not created, there was no test failure. The CD process ran
    and the code made it into production.
  prefs: []
  type: TYPE_NORMAL
- en: 'So what test can be added to ensure the proper code is implemented? When dealing
    with bugs, it is often best to simply write the test that verifies the incorrect
    behavior. In this case, we want an error to be thrown. So, the below test should
    assert that the correct error is thrown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Make this new test pass by modifying the service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: However, with this change, a number of existing tests will now break. This is
    because the default value for the `IsActive` property is `false`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To quickly get these tests to pass, you could do something like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: This could potentially introduce unexpected results, so be sure to create some
    guard tests to verify correctness.
  prefs: []
  type: TYPE_NORMAL
- en: This explains why this bug wasn't initially caught. The `IsActive` property
    was added to the database with a default value of `true`. The bug wasn't discovered
    until new speakers were added to the database with a value of `false` in the `IsActive`
    column. Once the incorrect behavior was discovered, the defect was easily identified
    and remedied.
  prefs: []
  type: TYPE_NORMAL
- en: Changes to the front-end
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is no difference, from a concept or approach perspective, for changes
    to the front-end. You will need to write the appropriate test to ensure the desired
    behavior from the application and then write the production code to make the test
    pass.
  prefs: []
  type: TYPE_NORMAL
- en: As a quick example though, let's add a new feature to the front-end code we
    have been working on.
  prefs: []
  type: TYPE_NORMAL
- en: Sorted by rating on client side
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The feature we are going to add is sorting the speakers by rating. In previous
    chapters, rating was not discussed or even enforced, so modifications will need
    to happen to include rating in the model that has been built so far. That is,
    of course, if you have not already completed the full model as defined by the
    C# code.
  prefs: []
  type: TYPE_NORMAL
- en: As with earlier examples in this chapter, try to add this behavior yourself
    and then look at our following solution .
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `speakerReducer.spec.js` file, we have added a single test for default
    sorting of speakers by rank. The test can be added to the describe block for the
    speaker reducer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'And the code to make this test pass is in the `speakerReducer.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: What now?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Moving forward, it should be easy to implement any change necessary. This might
    include a new feature, a change in requirements, or a discovered defect. That
    isn't to say that the application is complete or error-free, but you should have
    some level of confidence that the application behaves in the ways accounted for
    with the existing test suite.
  prefs: []
  type: TYPE_NORMAL
- en: Premature optimization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For the purpose of clarification, we are defining optimization as anything that
    obfuscates the code, making it less clear or more difficult to understand, or
    anything that limits the possibilities further than the test requires. A premature
    optimization is an optimization that is done for any reason other than specified
    by a requirement.
  prefs: []
  type: TYPE_NORMAL
- en: Typically, optimizations are done using performance as an excuse. Before these
    types of modifications of the code are done, a requirement specifying the need
    for the change should exist.
  prefs: []
  type: TYPE_NORMAL
- en: Even through the practice of Test-Driven Development, it is possible to paint
    yourself into a corner. Often during refactoring or during the process of designing
    your next test, it is possible to solve too much of the problem at once or refactor
    too much.
  prefs: []
  type: TYPE_NORMAL
- en: Always keep in mind that, in TDD, we want to break a problem down into the smallest
    steps possible. Also, don't go for the solution in the first test if the solution
    is more than a line or two. At the same time, even for small solutions, if the
    solution is calculation or algorithm heavy, it should still be broken down, even
    if the eventual solution is a single line of production code.
  prefs: []
  type: TYPE_NORMAL
- en: Beware of premature optimizations.
  prefs: []
  type: TYPE_NORMAL
- en: Refactoring, according to Kent Beck, is the process of removing duplication.
    Remember that while refactoring your tests. By only removing duplication, we can
    avoid premature optimization via refactoring. It is completely possible, and even
    attractive at times, to refactor a solution and reduce the code significantly,
    or even to use a fancy new language feature or Linq expression to make your test
    pass. These solutions are fine in the long run, but while the tests are still
    being built, these hidden optimizations can cause you and your tests to become
    derailed extremely quickly.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can now see how a change in requirements, a new feature request, or a defect
    might require an application to change. Through TDD and a comprehensive suite
    of unit tests, these changes can be made safely and easily.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 12](part0386.html#BG3P40-d186949d2da74f5c95dd1712efae1195), *The
    Legacy Problem*, we'll discuss how to deal with a legacy application that may
    not have been written with testing in mind.
  prefs: []
  type: TYPE_NORMAL
