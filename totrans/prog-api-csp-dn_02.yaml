- en: '2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What We’ll Build
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will provide a context for the rest of the book. That context
    is a simple application for buying and selling cars. We will not build out this
    application but, in fact, we’ll have only one type of object ( **Car** ) and one
    table in our database. This will allow us to focus on the API rather than getting
    hung up on database design.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What an API is and what it is for
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The backend database that we will use throughout the book
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The application that we will build throughout the book
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Car** object that we will use to demonstrate CRUD operations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will use only free software, as shown in the *Technical requirements* section,
    and we will take advantage of open source utilities such as Dapper and AutoMapper,
    both introduced in [*Chapter 1*](B21998_01.xhtml#_idTextAnchor013) .
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this chapter, you’ll need **Visual Studio** and **SQL Server Management
    Studio** ( **SSMS** ), as well as **Postman** . Remember that SSMS was installed
    with Visual Studio.
  prefs: []
  type: TYPE_NORMAL
- en: Note that you can also manage your database from within Visual Studio using
    the Server Explorer and the SQL Server Object Explorer.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code files for this book are available in the book’s GitHub repository
    : [https://github.com/PacktPublishing/Programming-APIs-with-C-Sharp-and-.NET/tree/main/Chapter02](https://github.com/PacktPublishing/Programming-APIs-with-C-Sharp-and-.NET/tree/main/Chapter02)'
  prefs: []
  type: TYPE_NORMAL
- en: What is an API and what is it for?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The purpose of an API is to decouple the backend of an application (e.g., a
    database) from the frontend (e.g., a web application or mobile application), as
    illustrated in *Figure 2* *.1* .
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.1 – Separation of concerns](img/B21988_02_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.1 – Separation of concerns
  prefs: []
  type: TYPE_NORMAL
- en: The client does not talk directly to the database but rather talks to the API,
    which, in turn, talks to the database. The huge advantage of this approach is
    that you can modify the database and the client does not have to change. Alternatively,
    you can modify the front end (for example, a website) without changing the database.
  prefs: []
  type: TYPE_NORMAL
- en: These modifications take place throughout the development of a large project
    and continue after delivery. It is imperative, especially with a mobile application,
    that you can modify the backend without forcing the user to update the application.
    Even with web applications, however, this can be critical, as the team maintaining
    the database may well not be the team maintaining the client.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the database
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To illustrate all the aspects of an API, we will create an incredibly simple
    database and we’ll use Postman to stand in for our client. Postman lets you call
    into the API and see what the client would get back. Actually, it can do a lot
    more, but that is the principal way we’ll use it.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll keep both the backend and the frontend as simple as we can so that we
    can focus on the API.
  prefs: []
  type: TYPE_NORMAL
- en: The application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The database we’ll be creating will be used in a simple (fictional) application
    for buying and selling cars. The database will keep a list of automobiles along
    with details of their engine, performance, and so on. A short example of this
    data is shown in *Figure 2* *.2* .
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.2 – A subset of the data table we’ll be using](img/B21988_02_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.2 – A subset of the data table we’ll be using
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Car Table
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The data for the **Car** table is from the free *Automobile* dataset at [https://kaggle.com](https://kaggle.com)
    . Download the data and import it into a database named **Cars** and a table named
    **Car** . The columns should take care of themselves.
  prefs: []
  type: TYPE_NORMAL
- en: 'The datasets on Kaggle change frequently, so your list of cars may look a bit
    different. All the datasets are all presented as **.csv** files, so just download
    one and open **SSMS** in order to do the import. Here are the steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log into SSMS and create a database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a table named **CARS** .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the **Import Data Wizard** . To do so, right-click on the table, and from
    the context menu select **Import Data** .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Choose a Data Source** dialog will appear. Select **Flat File Source**
    and click on **Browse** to find and select the CSV you got from Kaggle.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will be asked for the destination. Choose **SQL Server** **Native Client**
    .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Review your settings and click **Save** .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After you complete the import, you will need to add two columns: **is_deleted**
    (initialize all rows to **0** ) and **id** , which should be your primary key
    and which should increment automatically.'
  prefs: []
  type: TYPE_NORMAL
- en: We’re ready to write a small application that will support the basic CRUD operations
    against our shiny new database.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you run into a crisis and can’t get it to work, try one of the following
    two options to get you up and running fast:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to stackoverflow.com and look for importing csv into flat database or
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Grab the code from the [*Chapter 3*](B21998_03.xhtml#_idTextAnchor038) folder
    of this book’s repository, which will have the database already set up
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The problem with the second alternative is that you’ll have code we won’t yet
    have explained. But not to worry, if you follow the steps above all should be
    fine. (“ *Open the pod bay* *doors Hal.* ”)
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '**CRUD** is an acronym for **Create, Read, Update, and Delete** . That is,
    create new records, read the records that match criteria, update records, and
    mark records as deleted.'
  prefs: []
  type: TYPE_NORMAL
- en: Database structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our database consists of just one table: **Car** . As shown in *Figure 2* *.2*
    , that table must store various attributes of each car (name, miles per gallon,
    number of cylinders, and so on). *Figure 2* *.3* shows the table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.3 – Car table columns](img/B21988_02_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.3 – Car table columns
  prefs: []
  type: TYPE_NORMAL
- en: Notice the **is_deleted** column. We’ll be using “soft delete” – that is, rather
    than removing a row on deletion we’ll just set **is_deleted** to true ( **1**
    ). That allows us to easily restore that column just by changing that value back
    to **0** (false).
  prefs: []
  type: TYPE_NORMAL
- en: Other than **id** , all of the columns are strings, which will make working
    with them easier.
  prefs: []
  type: TYPE_NORMAL
- en: Car object
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Corresponding to the **Car** table, our code has a **Car** entity ( **Cars/Data/Entities/Car.cs**
    ):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We won’t bother with **Data Transfer Objects** ( **DTOs** ) in this example,
    if only to keep things simple, though we will use them later in the book.
  prefs: []
  type: TYPE_NORMAL
- en: The ASP.NET application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To get started, create a new ASP.NET project using the ASP.NET Core Web API
    template. Put the files wherever is convenient for you and choose the latest version
    of .NET (this book was written with . NET 8).
  prefs: []
  type: TYPE_NORMAL
- en: 'The basic structure of our application will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Controllers with endpoints
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Repositories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We’ll review endpoints and all the rest of this as we go.
  prefs: []
  type: TYPE_NORMAL
- en: Program.cs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You won’t have to edit **Program.cs** for this application but it is worth
    a few minutes of your time to review it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: One thing to notice right away is the references to Swagger. We’ll be using
    Swagger to automatically generate documentation for our project, as you’ll see
    as we go.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting to the database
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The out-of-the-box project cannot know how to connect to your database. This
    information is contained in **appsettings.json** and in **appsettings.Development.json**
    (to get to the latter, expand the former).
  prefs: []
  type: TYPE_NORMAL
- en: '**appsettings.json** is pretty simple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The key here is the **DefaultConnection** string, which sets up using the **Cars**
    database in the localhost.
  prefs: []
  type: TYPE_NORMAL
- en: 'The actual connection string is in **appsettings.Development.json** :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The two other files you’ll need to complete this connection are **DatabaseConnectionFactory**
    and **DbSettings** . These are provided for you.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following refers to objects in **DbSettings.cs** :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, under **Properties** , you’ll find the **launchsettings.json** file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: All of this is worth a look but don’t fret about it; almost all of it is supplied
    for you, and all of it is in the sample code in our repository.
  prefs: []
  type: TYPE_NORMAL
- en: Folders
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To organize our application, we will create the following folders:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Controllers**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Interfaces**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Repositories**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Services**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s briefly explain what these are:'
  prefs: []
  type: TYPE_NORMAL
- en: The *client* is the application calling the API (for example, the website or
    mobile application). The **Controllers** folder will hold methods that act as
    *endpoints* (an endpoint is what the client connects to via a URL).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Data** folder will hold the definition of our *entities* – in our case,
    the **Car** object shown earlier.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The **Interfaces** folder is just what it sounds like: it will hold the interfaces
    to our C# objects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Repositories** folder will hold the code between our methods and the database
    calls.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Services** folder will hold supporting code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The flow will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The client calls a method in a controller.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The method calls a service to handle the business logic.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The service calls a method in the repository, which, in turn, calls into the
    database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Again, we’ll examine the details as we go, starting in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you saw what an API is and how it is used to separate the front
    end (e.g., a web site) from the backend (e.g., a database). We also looked at
    the simple database and application that we’ll use throughout the book.
  prefs: []
  type: TYPE_NORMAL
- en: In order to demonstrate CRUD operations, we’ll build a simple application focused
    on a **Car** object as if we were working with an inventory of cars. We imported
    it from [https://kaggle.com](https://kaggle.com) .
  prefs: []
  type: TYPE_NORMAL
- en: This lays the groundwork for the rest of the chapters and for the simple application
    that we will build. Our focus will be strictly on creating APIs, so we will spend
    little time on database technology or even on the frontend.
  prefs: []
  type: TYPE_NORMAL
- en: You try it
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is a good time to create your application and the database. If you are
    adventurous, create a similar but different application, database, and data entity.
    This will ensure that you cement the elements we’ll be using.
  prefs: []
  type: TYPE_NORMAL
