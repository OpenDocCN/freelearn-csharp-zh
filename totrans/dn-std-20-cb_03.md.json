["```cs\n$ lsb_release -a\n```", "```cs\n $ curl https://packages.microsoft.com/keys/microsoft.asc | \n      gpg --dearmor > microsoft.gpg\n```", "```cs\n $ sudo apt-get install curl \n```", "```cs\n $ sudo mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg\n```", "```cs\n $ sudo sh -c 'echo \"deb [arch=amd64] \n      https://packages.microsoft.com/repos/\n      microsoft-ubuntu-xenial-prod xenial main\" > \n      /etc/apt/sources.list.d/dotnetdev.list'\n```", "```cs\n $ sudo apt-get update\n```", "```cs\n $ sudo apt-get install dotnet-sdk-2.0.2\n```", "```cs\n $ dotnet --version \n```", "```cs\n      $ dotnet new sln -o Chapter3 -n Chapter3.LogFile\n```", "```cs\n $ cd Chapter3\n```", "```cs\n $ dotnet new classlib -o Chapter3.LogFile.LogLib\n```", "```cs\n $ code .\n```", "```cs\n      using System;\n\n      namespace Chapter3.LogFile.LogLib\n      {\n          public class TextLog\n          {\n          }\n      }\n```", "```cs\n $ dotnet sln Chapter3.LogFile.sln  \n      add Chapter3.LogFile.LogLib/Chapter3.LogFile.LogLib.csproj\n```", "```cs\n      $ dotnet build \n```", "```cs\n      using System.IO;\n```", "```cs\n      private string logFileName = \"server_log.txt\";\n      private StreamWriter logFile;\n```", "```cs\n      public TextLog()\n      {\n          if (!File.Exists(logFileName))\n          {\n              logFile = File.CreateText(logFileName);\n          }\n          else\n          {\n              logFile = File.AppendText(logFileName);\n          } \n      }\n```", "```cs\n      public void WriteLog(string message)\n      {\n          logFile.WriteLine($\"{DateTime.Now} Log Message: {message} \");\n      }\n```", "```cs\n      public void CloseLog()\n      {\n          logFile.Close();\n      }\n```", "```cs\n $ dontnet build\n```", "```cs\n<Project Sdk=\"Microsoft.NET.Sdk\">\n    <PropertyGroup>\n        <TargetFramework>netstandard2.0</TargetFramework>\n    </PropertyGroup>\n</Project>\n```", "```cs\n$ dotnet sln list \n```", "```cs\n      $ dotnet new mvc -o Chapter3.LogFile.LogAppMvc\n```", "```cs\n     $ dotnet sln add \n Chapter3.LogFile.LogAppMvc/Chapter3.LogFile.LogAppMvc.csproj\n```", "```cs\n      $ dotnet build\n```", "```cs\n      $ cd Chapter3.LogFile.LogAppMvc/\n```", "```cs\n $ dotnet run\n```", "```cs\n $ dotnet add reference \n      ../Chapter3.LogFile.LogLib/Chapter3.LogFile.LogLib.csproj \n```", "```cs\n      $ cd ..\n```", "```cs\n      $ code . \n```", "```cs\n      using Chapter3.LogFile.LogLib;\n```", "```cs\n      TextLog logFile = new TextLog();\n      logFile.WriteLog(\"You are in the Index action.\");\n      logFile.CloseLog();\n```", "```cs\n      TextLog logFile = new TextLog();\n      logFile.WriteLog(\"You are in the About action.\");\n      logFile.CloseLog();\n```", "```cs\n      TextLog logFile = new TextLog();\n      logFile.WriteLog(\"You are in the Contact action.\");\n      logFile.CloseLog();\n```", "```cs\n $ cd Chapter3.LogFile.LogAppMvc/\n```", "```cs\n      $ dotnet run\n```", "```cs\ndotnet sln list \n```", "```cs\n      $ dotnet --version\n```", "```cs\n      $ dotnet new sln -o Chapter3.CsvFile\n```", "```cs\n      $ cd Chapter3.CsvFile\n```", "```cs\n      $ dotnet new classlib -o Chapter3.CsvFile.CsvReader\n```", "```cs\n      $ dotnet sln add \n      Chapter3.CsvFile.CsvReader/Chapter3.CsvFile.CsvReader.csproj\n```", "```cs\n      using System.IO;\n      using System.Collections.Generics;\n\n```", "```cs\n      private string _fileName; \n```", "```cs\n      public CsvFileLib(string csvFile)\n      {\n          _fileName = csvFile;\n      }\n```", "```cs\n      public List<string> ReadCsvFile()\n      {\n          var fileContents = new List<string>();\n\n          using (var csvFile = File.OpenRead(_fileName))\n          {\n              var fileStream = new StreamReader(csvFile);\n\n              while(!fileStream.EndOfStream)\n              {\n                  fileContents.Add(fileStream.ReadLine());\n              }\n              fileStream.Close();\n          }\n\n          return fileContents;\n      }\n```", "```cs\n      $ dotnet build\n```", "```cs\n      using (var csvFile = File.OpenRead(_fileName))\n      {\n          var fileStream = new StreamReader(csvFile);\n\n          while(!fileStream.EndOfStream)\n          {\n              fileContents.Add(fileStream.ReadLine());\n          }\n\n          fileStream.Close();\n      }\n```", "```cs\n$ dotnet build\n```", "```cs\n      $ dotnet new console -o Chapter3.CsvFile.ConsoleApp\n```", "```cs\n      $ ls\n```", "```cs\n      $ dotnet sln add \n Chapter3.CsvFile.Console/Chapter3.CsvFile.ConsoleApp.csproj \n\n $ dotnet build\n```", "```cs\n      $ dotnet add reference \n ../Chapter3.CsvFile.CsvReader/Chapter3.CsvFile.CsvReader.csproj\n```", "```cs\n      using Chapter3.CsvFile.CsvReader;\n```", "```cs\n      var moviesFile = new CsvFileLib(\"movies.txt\");\n      var moviesList = moviesFile.ReadCsvFile();\n\n      foreach (var movie in moviesList)\n      {\n          var row = movie.Split(',');\n          Console.WriteLine($\"ID: {row[0]} Title : \n              {row[1]} Year : {row[2]}\");\n      }\n```", "```cs\n      $ dotnet build \n```", "```cs\n      $ dotnet run \n```", "```cs\n      using System.Collections.Generic;\n      using System.IO.Compression;\n```", "```cs\n      private string _sourcePath;\n```", "```cs\n      public Zipper(string sourcePath)\n      {\n          _sourcePath = sourcePath;\n      }\n```", "```cs\n      public void CompressFile(string zipPath)\n      {\n          ZipFile.CreateFromDirectory(zipPath, _sourcePath);\n      }\n```", "```cs\n      public List<string> ListArchive(string zipFile)\n      {\n          var fileList = new List<string>()\n\n          using (ZipArchive archive = ZipFile.OpenRead(zipFile)\n          {\n              foreach(var entry in archive.Entries)\n              {\n                  fileList.Add(entry.Name);\n              }\n          }\n\n          return fileList;\n      }\n```", "```cs\nvar fileList = new List<string>()\n\n    using (ZipArchive archive = ZipFile.OpenRead(zipFile)\n    {\n        foreach(var entry in archive.Entries)\n        {\n            fileList.Add(entry.Name);\n        }\n    }\n\n    return fileList;\n```", "```cs\n      using Chapter3.Compress.CompressLib;\n```", "```cs\n      if (ZipFolder.ShowDialog() == DialogResult.OK)\n      {\n          FolderTextBox.Text = ZipFolder.SelectedPath;\n\n          string zipFileName = \n              @\"C:\\Projects\\Chapter3\\TestFolder\\result.zip\";\n\n          var zipFile = new Zipper(zipFileName);\n          zipFile.CompressFile(FolderTextBox.Text);\n\n          MessageBox.Show(\"You folder has been zipped.\", \n              \"Information\", MessageBoxButtons.OK, \n              MessageBoxIcon.Information);\n\n          var fileList = zipFile.ListArchive(zipFileName);\n\n          FileListBox.Items.AddRange(fileList.ToArray());\n      }\n```", "```cs\nFolderTextBox.Text = ZipFolder.SelectedPath;\n\nstring zipFileName = @\"C:\\Projects\\Chapter3\\TestFolder\\result.zip\";\n```", "```cs\nvar zipFile = new Zipper(zipFileName);\nzipFile.CompressFile(FolderTextBox.Text);\n\nMessageBox.Show(\"You folder has been zipped.\", \n    \"Information\", MessageBoxButtons.OK, MessageBoxIcon.Information);\n```", "```cs\nvar fileList = zipFile.ListArchive(zipFileName);\nFileListBox.Items.AddRange(fileList.ToArray());\n```", "```cs\n      using System.IO;\n```", "```cs\n      private string _fileName;\n```", "```cs\n      public CryptFile(string fileName)\n      {\n          _fileName = fileName;\n      }\n```", "```cs\n      public void EncryptFile()\n      {\n          File.Encrypt(_fileName);\n      }\n```", "```cs\n      public void DecryptFile()\n      {\n          File.Decrypt(_fileName);\n      }\n```", "```cs\n      using Chapter3.SecureFile.CryptLib;\n```", "```cs\n      if (OpenDialog.ShowDialog() == DialogResult.OK)\n      {\n          var textFileName = OpenDialog.FileName;\n          var secureFile = new CryptFile(textFileName);\n\n          secureFile.EncryptFile();\n\n          MessageBox.Show(\"File encrypted\", \"Information\", \n              MessageBoxButtons.OK,     \n              MessageBoxIcon.Information);\n      }\n```", "```cs\n      if (OpenDialog.ShowDialog() == DialogResult.OK)\n      {\n\n          var textFileName = OpenDialog.FileName;\n          var secureFile = new CryptFile(textFileName);\n\n          secureFile.DecryptFile();\n\n          MessageBox.Show(\"File decrypted\", \"Information\", \n              MessageBoxButtons.OK,\n              MessageBoxIcon.Information);\n      }\n```"]