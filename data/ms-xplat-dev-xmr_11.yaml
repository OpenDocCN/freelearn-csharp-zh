- en: Chapter 11. ALM – Project and Release Management
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 11 章. ALM – 项目和发布管理
- en: 'This chapter explains the essentials of version control and automated continuous
    integration workflows. Source control options, as well as automated build strategies,
    will be demonstrated for Xamarin projects. Additional topics such as live telemetry
    collection and beta application distribution hubs will also be covered. This chapter
    is divided into the following sections:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章解释了版本控制和自动化持续集成工作流程的基本知识。将为 Xamarin 项目演示版本控制选项以及自动化构建策略。还将涵盖其他主题，如实时遥测收集和测试应用分发中心。本章分为以下几节：
- en: Source control
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 版本控制
- en: Continuous integration
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续集成
- en: Automated testing
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化测试
- en: Beta deployment
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试版部署
- en: Live telemetry
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实时遥测
- en: Source control
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 版本控制
- en: Regardless of working as a team or as an individual, source control or version
    control remains a fundamental element of a software project development pipeline.
    Source code repository is the term used to describe the code management storage
    that deals with the versioning and consolidation of the code base. Additional
    features of source code repositories may include, but are not limited to, branching,
    reviews, shelves, and similar productivity-related capabilities. However, these
    items apply to any type of software development project and are out of the scope
    of this book.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 无论作为团队还是个人工作，版本控制或版本管理始终是软件开发项目开发流程的基本要素。源代码仓库是描述处理代码库版本控制和合并的代码管理存储的术语。源代码仓库的附加功能可能包括但不限于分支、审查、暂存和类似的生产力相关功能。然而，这些项目适用于任何类型的软件开发项目，并且超出本书的范围。
- en: For Xamarin projects, developers can utilize several types of repositories.
    The selection of a repository generally depends on the environment setup of choice
    (that is, operating system, development IDE, and so on).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Xamarin 项目，开发者可以利用几种类型的仓库。仓库的选择通常取决于所选的环境设置（即操作系统、开发 IDE 等）。
- en: TFVC
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TFVC
- en: '**Team Foundation Version Control** (**TFVC**) is the name given to the native
    repository provided by Team Foundation Server and its cloud-based counterpart
    Visual Studio Team Services (formerly, Visual Studio Online). TFVC is a centralized
    version control system where the version history is kept in a centralized server
    repository and the clients have only one version (that is, the workspace version)
    of each file.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**团队基础版版本控制**（**TFVC**）是 Team Foundation Server 及其基于云的对应产品 Visual Studio Team
    Services（以前称为 Visual Studio Online）提供的本地仓库的名称。TFVC 是一个集中式版本控制系统，其中版本历史记录保存在集中式服务器仓库中，客户端每个文件只有一个版本（即工作区版本）。'
- en: TFVC provides a very familiar source code management toolset for Xamarin developers
    accustomed to the Microsoft development stack. For Xamarin developers using Windows
    and Visual Studio, TFVC is an ideal choice since it has native integration to
    Visual Studio. Source code management is implemented on the premise of "check-in"
    and "check-out" actions. Each code check-in can additionally include references
    to project metadata artifacts such as tasks, features, and bugs. Associating change
    sets (that is, a bundle of source code files to be checked-in) and project metadata
    provides an ideal development pipeline for developers working in a team.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: TFVC 为习惯于 Microsoft 开发堆栈的 Xamarin 开发者提供了一个非常熟悉的源代码管理工具集。对于使用 Windows 和 Visual
    Studio 的 Xamarin 开发者来说，TFVC 是一个理想的选择，因为它与 Visual Studio 具有原生集成。源代码管理是在“签入”和“签出”操作的基础上实现的。每次代码签入还可以包括对项目元数据工件（如任务、功能、错误等）的引用。将更改集（即要签入的源代码文件集合）与项目元数据关联为团队中的开发者提供了一个理想的发展管道。
- en: For developers using Xamarin Studio on Windows or Mac OS, the only available
    option to use TFVC is to install Team Explorer Everywhere. Team Explorer Everywhere
    is an Eclipse plugin, which can be installed on Mac OS and employed to check in
    and check out source code items. Developers using Xamarin Studio on Windows can
    still install and use the free editions of Visual Studio to access TFS servers.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 对于在 Windows 或 Mac OS 上使用 Xamarin Studio 的开发者，使用 TFVC 的唯一选项是安装 Team Explorer
    Everywhere。Team Explorer Everywhere 是一个 Eclipse 插件，可以安装在 Mac OS 上，并用于签入和签出源代码项。在
    Windows 上使用 Xamarin Studio 的开发者仍然可以安装并使用免费版的 Visual Studio 来访问 TFS 服务器。
- en: Git
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Git
- en: '**Git**, unlike TFVC, is a distributed version control system where each developer
    has a clone of the entire source repository, and each clone is managed locally
    until the changes are published to the central server. Developers are also free
    to create private local branches and switch from one branch to another without
    much hassle. Branches can be merged, published, or closed according to the requirements.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**Git**与TFVC不同，是一个分布式版本控制系统，其中每个开发者都有一个整个源仓库的克隆，每个克隆都本地管理，直到更改发布到中央服务器。开发者也可以自由创建私有本地分支，并在不同的分支之间轻松切换。根据需要，分支可以被合并、发布或关闭。'
- en: Xamarin Studio has native support for Git and developer commands such as `pull`,
    `clone`, `commit`, and `push` can be executed within the IDE. This native support
    makes Git repositories ideal candidates for developers using a Mac-based development
    environment.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin Studio原生支持Git以及如`pull`、`clone`、`commit`和`push`等开发者命令，可以在IDE内执行。这种原生支持使得Git仓库成为使用基于Mac的开发环境的开发者的理想选择。
- en: Visual Studio also supports Git repositories and the classic Pull-Commit-Push
    flow. In addition to Visual Studio support, with recent updates to Visual Studio
    Team Services it is possible to create team projects using a Git repository. The
    selection of the Version Control type does not interfere with other project related
    options or the build setup. However, it is currently not possible to use the project
    management related features (for example, associating change sets with task items)
    using a Git repository.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio也支持Git仓库和经典的Pull-Commit-Push流程。除了Visual Studio支持外，随着Visual Studio
    Team Services的最新更新，现在可以使用Git仓库创建团队项目。版本控制类型的选取不会干扰其他项目相关选项或构建设置。然而，目前无法使用与项目相关的功能（例如，将更改集与任务项关联）使用Git仓库。
- en: '![Git](img/B04693_11_01.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![Git](img/B04693_11_01.jpg)'
- en: 'Figure 1: Team Foundation Server with Git'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图1：带有Git的团队基金会服务器
- en: It is also possible to set up a team project that utilizes multiple types of
    repositories. These repositories can be accessed using only the latest version
    of Visual Studio (that is, Visual Studio 2015 Update 1) at the moment.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 目前也可以设置一个使用多种类型仓库的团队项目。这些仓库目前只能使用最新版本的Visual Studio（即Visual Studio 2015 Update
    1）访问。
- en: The next section provides additional integration options for scenarios involving
    TFS and Git repositories.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个部分提供了涉及TFS和Git仓库的更多集成选项。
- en: TFS/Git scenarios
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TFS/Git场景
- en: In certain scenarios, developers can choose, or are obliged to use, Git repositories
    together with a centralized TFVC repository (for example, developers with a Mac
    OS development setup do not have direct integration with TFVC). In this kind of
    a situation, there are several available utilities and implementation patterns
    that can help teams prepare their development infrastructure.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些场景中，开发者可以选择或被迫使用Git仓库与集中式的TFVC仓库一起使用（例如，具有Mac OS开发设置的开发者没有直接与TFVC集成）。在这种情况下，有几种可用的实用工具和实现模式可以帮助团队准备他们的开发基础设施。
- en: Git bridge
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Git桥接
- en: One of the integration paths that can be employed is the Git-TF tool maintained
    on CodePlex by Microsoft. The Git-TF tool is a platform agnostic tool written
    in Java. It utilizes TFVC APIs to enable developers to use a TFS repository together
    with a local Git repository.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 可以采用的一种集成路径是微软在CodePlex上维护的Git-TF工具。Git-TF工具是一个用Java编写的平台无关的工具。它利用TFVC API来允许开发者使用TFS仓库与本地Git仓库一起使用。
- en: In this integration path, either a single member or several members of a Xamarin
    development team can use a local or shared Git repository synchronized with the
    central repository using the Git-TF tool.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个集成路径中，Xamarin开发团队的单一成员或多个成员可以使用Git-TF工具与中央仓库同步的本地或共享Git仓库。
- en: 'For a setup in which the individual developer uses a local Git repository in
    sync with TFVC, the TFS repository first needs to be cloned to the local machine:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 对于个人开发者使用与TFVC同步的本地Git仓库的设置，首先需要将TFS仓库克隆到本地机器：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'After cloning, development can continue on the local machine using the Git
    repository. Local commit executions will not be reflected on the central repository.
    In the meantime, the central repository can be merged with the local repository
    using the `pull` command of Git-TF:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 克隆后，可以在本地机器上使用Git仓库继续开发。本地提交的执行不会反映在中央仓库上。在此期间，可以使用Git-TF的`pull`命令将中央仓库与本地仓库合并：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Once the development task is complete, the code can be checked in to TFS using
    the `checkin` command (instead of `git push`):'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦开发任务完成，可以使用`checkin`命令将代码签入TFS（而不是`git push`）：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Git-TF provides the option to associate/resolve work items on TFS and include
    check-in comments similar to a standard code check-in.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Git-TF提供了将TFS上的工作项关联/解决并包含类似于标准代码签入的签入注释的选项。
- en: '![Git bridge](img/B04693_11_02.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![Git桥接](img/B04693_11_02.jpg)'
- en: 'Figure 2: Git with TFVC repository'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图2：Git与TFVC仓库
- en: Another possibility would be to configure a shared Git repository for several
    team members so that each developer can clone it to their local environment and
    use it as a branch. In this setup, code merging and synchronization between the
    central repository (TFVC) and the shared Git repository would have to be handled
    by an administrator.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种可能性是为几个团队成员配置一个共享的Git仓库，这样每个开发者都可以将其克隆到本地环境中并用作分支。在这种配置中，中央仓库（TFVC）和共享Git仓库之间的代码合并和同步必须由管理员处理。
- en: Similarly, the Git-TFS tool maintained on GitHub is an open-source project written
    in .NET and provides a bidirectional integration between TFS and Git repositories.
    However, this tool currently does not have a version available for Mac OS. Git-TFS
    provides support for some advanced TFS scenarios related to workspace handling
    and shelvesets.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，GitHub上维护的Git-TFS工具是一个用.NET编写的开源项目，它提供了TFS和Git仓库之间的双向集成。然而，这个工具目前还没有适用于Mac
    OS的版本。Git-TFS为与工作空间处理和 shelvesets 相关的一些高级TFS场景提供了支持。
- en: NuGet packages
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: NuGet包
- en: As previously discussed, NuGet packages are one of the code sharing strategies
    in cross-platform projects using Xamarin. NuGet packages can also be utilized
    to create the bridge between TFVC and Git, possibly by providing PCL libraries
    for Xamarin target platforms.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，NuGet包是使用Xamarin的跨平台项目中的一种代码共享策略。NuGet包还可以用来创建TFVC和Git之间的桥梁，可能通过为Xamarin目标平台提供PCL库来实现。
- en: For instance, we can consider a scenario where shared projects between Windows
    Store applications and Xamarin.iOS are implemented on a Windows-based development
    environment, whereas Xamarin.iOS development team members use a Mac OS development
    setup with Xamarin Studio. The team project in this example can include a TFVC
    repository (for shared code and Windows Store app implementation) and a Git repository
    (for Xamarin.iOS development). The synchronization between the two servers can
    be handled through NuGet packages.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以考虑一个场景，其中Windows Store应用程序和Xamarin.iOS之间的共享项目是在基于Windows的开发环境中实现的，而Xamarin.iOS开发团队成员使用带有Xamarin
    Studio的Mac OS开发设置。在这个例子中，团队项目可以包括TFVC仓库（用于共享代码和Windows Store应用程序实现）和一个Git仓库（用于Xamarin.iOS开发）。两个服务器之间的同步可以通过NuGet包来处理。
- en: NuGet packages can be built and deployed with **Continuous Integration** (**CI**)
    build processes using out-of-the-box TFS build task definitions, making the NuGet
    process part of the development pipeline and continuous integration.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用TFS的内置构建任务定义来构建和部署NuGet包，使用**持续集成**（**CI**）构建过程，使NuGet过程成为开发管道和持续集成的一部分。
- en: '![NuGet packages](img/B04693_11_03.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![NuGet包](img/B04693_11_03.jpg)'
- en: 'Figure 3: Automated build for NuGet packages'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图3：NuGet包的自动化构建
- en: For NuGet package distribution, on top of the commercially available products
    (for example, the Artifactory server), Visual Studio Team Services can also be
    used to create NuGet source feeds and publish them privately for members of the
    development team.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 对于NuGet包的分发，除了商业产品（例如，Artifactory服务器）之外，Visual Studio Team Services还可以用来创建NuGet源馈送并将它们私下发布给开发团队成员。
- en: Subversion (SVN)
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Subversion (SVN)
- en: Subversion is another source control repository type, generally referred to
    as SVN or Apache Subversion. Subversion repositories can be readily created in
    Mac OS developer environments using XCode development tools. Xamarin Studio has
    native support for SVN (version 1.6 or higher). Subversion can be an easy solution
    for individual Xamarin developers who prefer a Mac-based development environment.
    Even though there are publicly available Visual Studio extensions and integration
    tools for the Windows environment enabling the use of SVN, natively supported
    Git and TFVC are generally preferred over SVN.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Subversion是另一种源代码存储库类型，通常称为SVN或Apache Subversion。使用XCode开发工具，可以在Mac OS开发环境中轻松创建Subversion存储库。Xamarin
    Studio原生支持SVN（版本1.6或更高）。对于偏好基于Mac的开发环境的个人Xamarin开发者来说，Subversion可以是一个简单的解决方案。尽管有公开可用的Visual
    Studio扩展和集成工具，可以在Windows环境中使用SVN，但通常还是更倾向于使用原生支持的Git和TFVC，而不是SVN。
- en: Continuous integration
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持续集成
- en: Continuous integration (CI) is the name for the software practice involving
    the aforementioned source control management strategies, together with automated
    build/deploy and testing phases. Nowadays, CI generally refers to the automated
    build/deploy and testing phases of **Application Lifecycle Management** (**ALM**).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 持续集成（CI）是指涉及上述源代码管理策略的软件实践，包括自动化的构建/部署和测试阶段。如今，CI通常指的是**应用程序生命周期管理**（**ALM**）的自动化构建/部署和测试阶段。
- en: For Xamarin projects, software engineers are free to use a vast number of CI
    management tools, available both commercially and with freemium licensing (that
    is, limited features for free usage).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Xamarin项目，软件工程师可以自由使用大量CI管理工具，这些工具既有商业版也有免费增值许可（即免费使用有限功能）。
- en: Visual Studio Team Services
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Visual Studio Team Services
- en: '**Visual Studio Team Services** (**VSTS**) is the cloud-based version of Team
    Foundation Server and provides convenient features for Xamarin developers. Currently
    available as a freemium subscription-based service, teams are free to manage a
    limited number projects with a limited number of team members.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**Visual Studio Team Services**（**VSTS**）是Team Foundation Server的云版本，为Xamarin开发者提供了方便的功能。目前作为免费增值订阅服务提供，团队可以免费管理有限数量的项目，每个团队成员数量也有限。'
- en: In VSTS team projects, both Git and TFVC development repositories can be managed,
    planned, automatically built, tested, and possibly deployed (see the Beta deployment
    section for VSTS integration).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在VSTS团队项目中，可以管理、规划、自动构建、测试Git和TFVC开发存储库，并且可能部署（有关VSTS集成的Beta部署部分请参阅）。
- en: '![Visual Studio Team Services](img/B04693_11_04.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![Visual Studio Team Services](img/B04693_11_04.jpg)'
- en: 'Figure 4: TFS automated Xamarin builds'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图4：TFS自动化的Xamarin构建
- en: Out-of-the-box build templates that include Xamarin.iOS and Xamarin.Android
    projects can be executed on hosted build agents. While the latter build template
    can be executed with a shared hosted build agent, Xamarin.iOS needs a specialized
    build host with Xamarin.iOS capabilities to be associated with the team project.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 包含Xamarin.iOS和Xamarin.Android项目的开箱即用的构建模板可以在托管构建代理上执行。虽然后者构建模板可以使用共享托管构建代理执行，但Xamarin.iOS需要一个具有Xamarin.iOS功能的专用构建主机，以便与团队项目关联。
- en: '![Visual Studio Team Services](img/B04693_11_05.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![Visual Studio Team Services](img/B04693_11_05.jpg)'
- en: 'Figure 5: VSTS hosted Android build agent'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图5：VSTS托管Android构建代理
- en: For the Xamarin.Android build template, developers are required to insert Xamarin
    license details. However the build agent does not occupy a license seat except
    for the duration of the build. The build definition template includes an activation
    step where the build agent is registered as an occupant of the Xamarin license,
    and another step after the build is complete to remove the license.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Xamarin.Android构建模板，开发者需要插入Xamarin许可证详情。然而，构建代理在构建期间不会占用许可证座位。构建定义模板包括一个激活步骤，其中构建代理被注册为Xamarin许可证的占用者，并在构建完成后进行另一个步骤以移除许可证。
- en: In VSTS, Xamarin Test Cloud can also be integrated to execute automated acceptance
    tests using the default build template.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在VSTS中，还可以集成Xamarin Test Cloud，使用默认构建模板执行自动验收测试。
- en: TeamCity
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TeamCity
- en: TeamCity (JetBrains) is another CI server, which provides automated builds and
    a great number of integration scenarios for various platforms. TeamCity can be
    downloaded and installed locally on multiple operating systems (including OS X
    and Windows) and is available as a freemium product (with limited free build agent
    installations and build configurations).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: TeamCity（JetBrains）是另一个CI服务器，它为各种平台提供了自动构建和大量的集成场景。TeamCity可以下载并安装到多个操作系统上（包括OS
    X和Windows），并且作为一个免费增值产品（带有有限的免费构建代理安装和构建配置）。
- en: For Xamarin development teams, the biggest advantage of TeamCity is the fact
    that it can be installed on Mac OS. Once the build server is configured (it can
    be on the same machine as the server running the TeamCity server), builds for
    Xamarin.Android and Xamarin.iOS can be triggered on various actions, such as repository
    changes and schedules.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Xamarin开发团队来说，TeamCity最大的优势是它可以安装在Mac OS上。一旦构建服务器配置完成（它可以在运行TeamCity服务器的同一台机器上），就可以在Xamarin.Android和Xamarin.iOS上触发各种动作的构建，例如仓库更改和计划。
- en: '![TeamCity](img/B04693_11_06.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![TeamCity](img/B04693_11_06.jpg)'
- en: 'Figure 6: TeamCity with Xamarin projects'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图6：TeamCity与Xamarin项目
- en: Additional possible integration scenarios and build steps in terms of Xamarin
    projects involve the Calabash instrumentation of application packages and Xamarin
    Test Cloud submission.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在Xamarin项目中，关于可能的集成场景和构建步骤，还包括应用程序包的Calabash仪器化和Xamarin Test Cloud提交。
- en: Other
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他
- en: Xamarin development teams have the luxury to be able to use many other online/cloud-based
    SaaS (Software-as-a-Service) providers, available for both internal and open source
    development. The most popular of these services is GitHub, which provides both
    private and public repositories as a subscription-based service. CI build providers
    such as AppVeyor and Travis CI have native integration with GitHub and can be
    readily used for various platform-specific build configurations.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin开发团队有使用许多其他在线/云基础SaaS（软件即服务）提供商的奢侈，这些提供商适用于内部和开源开发。其中最受欢迎的服务是GitHub，它提供基于订阅的私有和公共仓库。CI构建提供商如AppVeyor和Travis
    CI与GitHub有原生集成，可以用于各种平台特定的构建配置。
- en: Finally, Jenkins is another CI server which is available for free and commercial
    installations. Jenkins can be integrated with various repositories and can be
    configured to build and test Xamarin projects.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，Jenkins是另一个免费和商业安装都适用的CI服务器。Jenkins可以与各种仓库集成，并可以配置为构建和测试Xamarin项目。
- en: Automated testing
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化测试
- en: Automated testing, in other words running the unit tests or coded UI tests established
    as part of the development effort, is a fundamental part of the continuous integration
    cycle in most development projects.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化测试，换句话说，就是运行作为开发工作一部分建立的单元测试或代码UI测试，是大多数开发项目中持续集成周期的一个基本部分。
- en: To prepare a test fixture for a Xamarin project, developers can use various
    frameworks such as Visual Studio testing suite, nUnit, and xUnit. Moreover, Xamarin
    development teams have the freedom to choose from the available list of source
    control repositories and CI platforms. Fortunately, each of these aspects of a
    CI pipeline can be integrated without much hassle, due to the fact that the aforementioned
    testing frameworks provide test adapters for various configurations (except for
    the native Visual Studio testing framework).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 为了准备Xamarin项目的测试固定装置，开发者可以使用各种框架，如Visual Studio测试套件、nUnit和xUnit。此外，Xamarin开发团队有从可用的源控制仓库和CI平台列表中进行选择的自由。幸运的是，由于上述测试框架为各种配置提供了测试适配器（除了本地的Visual
    Studio测试框架），因此这些CI管道的各个方面都可以轻松集成。
- en: For instance, let us consider a Xamarin project hosted on the TFVC repository
    on Visual Studio Team Services, where the unit test fixture is written utilizing
    the xUnit framework. As a first step, in order for the TFS build agent to facilitate
    the xUnit adapter to run the unit test fixture, the test adapter has to be installed
    as a NuGet package for the solution.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，让我们考虑一个托管在Visual Studio Team Services上TFVC仓库的Xamarin项目，其中单元测试固定装置是利用xUnit框架编写的。作为第一步，为了让TFS构建代理帮助xUnit适配器运行单元测试固定装置，测试适配器必须作为解决方案的NuGet包安装。
- en: '![Automated testing](img/B04693_11_07.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![自动化测试](img/B04693_11_07.jpg)'
- en: 'Figure 7: xUnit test adapter'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图7：xUnit测试适配器
- en: After the adapter package is deployed to the source control repository, the
    team build can now include the testing step using the custom adapter.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在适配器包部署到源代码控制仓库后，团队构建现在可以包括使用自定义适配器的测试步骤。
- en: In Visual Studio team builds, if the custom adapter is not defined, the tests
    are run using the default adapter. The build step, in this case, would report
    that no tests could be found.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在Visual Studio团队构建中，如果未定义自定义适配器，则测试将使用默认适配器运行。在这种情况下，构建步骤将报告找不到测试。
- en: '![Automated testing](img/B04693_11_08.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![自动化测试](img/B04693_11_08.jpg)'
- en: 'Figure 8: xUnit test adapter setup'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图8：xUnit测试适配器设置
- en: In this configuration, the `packages` folder of the solution for NuGet packages
    was used as the source directory (for example, `$(Build.SourcesDirectory)\Xamarin.Master.Fibonacci\packages\<path>`).
    It is also possible to use the `binaries` folder of the test project to access
    the adapter binary. It is also important to note that the MSBuild task prior to
    the Visual Studio Test task for the test projects is essential before executing
    the actual test fixture.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在此配置中，解决方案中NuGet包的`packages`文件夹被用作源目录（例如，`$(Build.SourcesDirectory)\Xamarin.Master.Fibonacci\packages\<path>`）。也可以使用测试项目的`binaries`文件夹来访问适配器二进制文件。还应注意，在执行实际的测试用例之前，测试项目在Visual
    Studio测试任务之前的MSBuild任务是必不可少的。
- en: Beta deployment
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Beta部署
- en: Beta testing is an essential part of a Xamarin development pipeline. Using beta
    testing distribution hubs such as HockeyApp, Crashlytics, or Testflight, application
    packages can be delivered to beta users/testers. For Windows Phone 8.1 and Android,
    the distribution of application packages using simple networking methods is also
    possible (for example, using shared network locations, download links, and so
    on).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Beta测试是Xamarin开发流程的一个关键部分。通过使用Beta测试分发中心，如HockeyApp、Crashlytics或Testflight，可以将应用程序包发送给测试用户/测试者。对于Windows
    Phone 8.1和Android，也可以使用简单的网络方法来分发应用程序包（例如，使用共享网络位置、下载链接等）。
- en: HockeyApp
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HockeyApp
- en: HockeyApp stands out as the only beta distribution hub that supports all Xamarin
    target platforms, including Windows Runtime, and has integration capabilities
    for various CI configurations.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: HockeyApp作为唯一支持所有Xamarin目标平台（包括Windows Runtime）的Beta分发中心，具有各种CI配置的集成能力。
- en: Initially a beta testing platform for iOS and Android, the Stuttgart-based company
    expanded their SDK to support Microsoft mobile development platforms. HockeyApp
    was ultimately acquired by Microsoft. However, it continues to support various
    mobile platforms, including Mac OS.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 初始时，Stuttgart公司是一家为iOS和Android提供Beta测试平台的公司，后来扩展了其SDK以支持Microsoft移动开发平台。HockeyApp最终被Microsoft收购。然而，它继续支持包括Mac
    OS在内的各种移动平台。
- en: '![HockeyApp](img/B04693_11_09.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![HockeyApp](img/B04693_11_09.jpg)'
- en: 'Figure 9: HockeyApp app dashboard'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图9：HockeyApp应用仪表板
- en: Application packages for the HockeyApp distribution hub can be uploaded directly
    from the web interface. Team members and/or beta testers should download the HockeyApp
    application to their mobile devices to be able to download the latest packages
    from the server.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 可以直接从Web界面上传HockeyApp分发中心的应用程序包。团队成员和/或测试者应将HockeyApp应用程序下载到他们的移动设备上，以便从服务器下载最新的包。
- en: 'In addition to manual release, HockeyApp provides two public APIs: one for
    clients and one for developers. The Client API is used to communicate with the
    server to deliver application runtime-related analytics, while the Developer API
    provides developers with the necessary functionality to upload and distribute
    application packages.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 除了手动发布外，HockeyApp还提供了两个公共API：一个用于客户端，一个用于开发者。客户端API用于与服务器通信，以提供应用程序运行时相关的分析，而开发者API为开发者提供了上传和分发应用程序包所需的功能。
- en: For Visual Studio Team Services (Visual Studio Online) and Jenkins, there are
    integration modules that make it possible to publish applications as part of CI
    builds.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Visual Studio Team Services（Visual Studio Online）和Jenkins，有集成模块可以使将应用程序作为CI构建的一部分发布成为可能。
- en: '![HockeyApp](img/B04693_11_10.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![HockeyApp](img/B04693_11_10.jpg)'
- en: 'Figure 10: HockeyApp TFS build step'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图10：HockeyApp TFS构建步骤
- en: HockeyApp suite also includes crash analytics features that can be integrated
    into bug tracking systems such as Visual Studio Team Services, Assembla, BaseCamp,
    BitBucket, and so on.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: HockeyApp套件还包括可以集成到Visual Studio Team Services、Assembla、BaseCamp、BitBucket等缺陷跟踪系统中的崩溃分析功能。
- en: HockeyApp offers free and enterprise licensing options.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: HockeyApp提供免费和企业许可选项。
- en: Crashlytics
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Crashlytics
- en: Crashlytics is another beta analysis platform, which provides distribution and
    crash reporting features for Xamarin.iOS and Xamarin.Android applications.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Crashlytics是另一个测试分析平台，为Xamarin.iOS和Xamarin.Android应用提供分发和崩溃报告功能。
- en: Crashlytics provides integration with other collaboration tools such as PivotalTracker,
    JIRA, GitHub, and BitBucket. It also offers a public API, providing service hooks
    for various integration scenarios.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: Crashlytics提供了与其他协作工具的集成，例如PivotalTracker、JIRA、GitHub和BitBucket。它还提供了一个公开的API，为各种集成场景提供服务钩子。
- en: Crashlytics was recently purchased by Twitter and continues to support the two
    Xamarin target platform applications. Crashlytics is currently part of the Twitter
    fabric development platform and is offered as a free service.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Crashlytics最近被Twitter收购，并继续支持两个Xamarin目标平台应用。Crashlytics目前是Twitter fabric开发平台的一部分，并提供免费服务。
- en: TestFlight
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TestFlight
- en: TestFlight, started as a beta testing platform for iOS and Android applications,
    immediately cancelled support for Android applications after their acquisition
    by Apple. It is now part of the Apple Developer Program and is only accessible
    through iTunes Connect.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: TestFlight最初是iOS和Android应用的测试平台，在被苹果收购后立即取消了Android应用的支持。现在它是苹果开发者计划的一部分，并且只能通过iTunes
    Connect访问。
- en: Submissions to TestFlight are no different from actual Apple Store application
    packages. The final distributable package (`.ipa`) should be prepared for submission
    and uploaded using the Application Loader to Apple servers (see [Chapter 12](ch12.html
    "Chapter 12. ALM – App Stores and Publishing"), *ALM – App Stores and Publishing*,
    for further information).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 提交给TestFlight的内容与实际苹果商店应用包没有区别。最终的可分发包（`.ipa`）应准备提交，并使用Application Loader上传到苹果服务器（有关更多信息，请参阅[第12章](ch12.html
    "第12章。ALM – 应用商店和发布")，*ALM – 应用商店和发布*）。
- en: Unfortunately, this process cannot currently be automated as there are no build
    integration options and no public API.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 很遗憾，这个过程目前无法自动化，因为没有构建集成选项，也没有公开的API。
- en: Package distribution
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 软件包分发
- en: In contrast to iOS devices, both Android and Windows Phone devices can install
    and run application packages that are distributed via the Internet or mobile storage.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 与iOS设备相比，Android和Windows Phone设备都可以安装和运行通过互联网或移动存储分发的应用包。
- en: 'For Windows Phone 8 and 8.1, the testing device should be configured as a developer
    device using the Windows Phone SDK. In order for a developer to unlock Windows
    Phone devices, a Windows developer account is necessary (this is a free subscription):'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Windows Phone 8和8.1，测试设备应使用Windows Phone SDK配置为开发者设备。为了开发者能够解锁Windows Phone设备，需要一个Windows开发者账户（这是一个免费订阅）：
- en: '![Package distribution](img/B04693_11_11.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![软件包分发](img/B04693_11_11.jpg)'
- en: 'Figure 11: Windows Phone developer unlock'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图11：Windows Phone开发者解锁
- en: After the registration step, developers can install application packages either
    using the SDK tools or, if there is hardware support, using an SD card and the
    default store application.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在注册步骤之后，开发者可以使用SDK工具安装应用包，或者如果有硬件支持，可以使用SD卡和默认的商店应用。
- en: For Android platform, there are available freeware tools that can be used to
    install `.apk` packages. The default package manager can also be used to install
    custom application packages shared as a network resource.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Android平台，有可用的免费工具可以用来安装`.apk`包。默认的包管理器也可以用来安装作为网络资源共享的自定义应用包。
- en: Live telemetry
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实时遥测
- en: Live telemetry is the term used to define the analytical information collected
    from applications being used by their target audience or beta testers. These analytic
    values are invaluable for feature rich mobile applications to identify how the
    customers are actually engaging with these applications on different hardware
    configurations, since Xamarin applications may be targeting devices running iOS,
    Android, or Windows Phone with various hardware configurations and peripherals.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 实时遥测是指用于定义从目标受众或测试人员使用中的应用程序收集的分析信息。这些分析值对于功能丰富的移动应用来说是无价的，因为Xamarin应用可能针对运行iOS、Android或Windows
    Phone且具有各种硬件配置和外围设备的设备。
- en: With telemetry, development teams can gather information about user input patterns
    in different scenarios, application utilization flows, and platform impediments/strengths.
    While statistical information such as this is essential for UX design, values
    such as crash/exception details, network connectivity, memory consumption, and
    other diagnostic data on real-world usage scenarios can be useful as health indicators
    for the application.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 通过遥测，开发团队能够收集有关不同场景中用户输入模式、应用程序利用流程和平台障碍/优势的信息。虽然此类统计信息对于 UX 设计至关重要，但有关实际使用场景的崩溃/异常详细信息、网络连接、内存消耗和其他诊断数据等值可以作为应用程序的健康指标。
- en: There are numerous telemetry providers and frameworks for Xamarin target platforms.
    These frameworks can be included in Xamarin applications through binding packages
    (for example, Google Analytics for Android applications), and telemetry platforms
    targeting Xamarin applications, such as Xamarin Insights and/or Microsoft Application
    Insights, can be included in Xamarin implementations.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Xamarin 目标平台，有大量的遥测提供者和框架。这些框架可以通过绑定包（例如，Android 应用程序的 Google Analytics）包含在
    Xamarin 应用程序中，并且针对 Xamarin 应用程序的遥测平台（如 Xamarin Insights 和/或 Microsoft Application
    Insights）可以包含在 Xamarin 实现中。
- en: Xamarin Insights
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Xamarin Insights
- en: Xamarin Insights is the analytics and crash reporting platform built specifically
    for Xamarin target platforms. Xamarin Insights implementations can be used in
    each Xamarin platform project including Xamarin.Forms applications and Windows
    Runtime. This is a subscription-based service and live telemetry can be seen on
    the web-based dashboard.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin Insights 是专为 Xamarin 目标平台构建的分析和崩溃报告平台。Xamarin Insights 的实现可以用于每个 Xamarin
    平台项目，包括 Xamarin.Forms 应用程序和 Windows Runtime。这是一个基于订阅的服务，可以在基于网络的仪表板上看到实时遥测数据。
- en: In order to start using Xamarin Insights in a cross-platform application solution,
    Xamarin Insights NuGet package(s) should be included in platform-specific projects.
    After the framework client assemblies are introduced, Xamarin.Insights runtime
    can be initialized using the subscription key.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在跨平台应用程序解决方案中开始使用 Xamarin Insights，应在特定平台的项目中包含 Xamarin Insights NuGet 包。在引入框架客户端程序集后，可以使用订阅密钥初始化
    Xamarin.Insights 运行时。
- en: 'For instance, if we were to include and initialize the Xamarin Insights module
    in a Xamarin.Android application using MVVMCross implementation, the initialization
    can be included in the application setup:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们使用 MVVMCross 实现将 Xamarin Insights 模块包含并初始化到 Xamarin.Android 应用程序中，初始化可以包含在应用程序设置中：
- en: '[PRE3]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In this implementation, the `Identify` method is an optional call. It is used
    to identify user-specific traits rather than general usage patterns.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在此实现中，`Identify` 方法是一个可选调用。它用于识别用户特定的特征，而不是通用使用模式。
- en: Note
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: No matter which platform is running the Xamarin Insights content, the application
    should be enabled to use the Internet connection (that is, application manifest).
    It is also advised to enable permissions such as `BATTERY_STATS`, `READ_LOGS`,
    `ACCESS_WIFI_STATE`, and so on, on a Xamarin.Android application to collect additional
    information. Similarly, on Windows Phone 8, `ID_CAP_IDENTIFY_DEVICE` capability
    must be added to identify the specific device while recording telemetry.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 无论哪个平台运行着 Xamarin Insights 内容，应用程序都应该启用使用互联网连接（即，应用程序清单）。还建议在 Xamarin.Android
    应用程序上启用诸如 `BATTERY_STATS`、`READ_LOGS`、`ACCESS_WIFI_STATE` 等权限，以收集更多信息。同样，在 Windows
    Phone 8 上，必须在记录遥测时添加 `ID_CAP_IDENTIFY_DEVICE` 功能来识别特定设备。
- en: Once the Xamarin Insights context is initialized, additional reporting calls
    can be executed on shared libraries (for example, ViewModel implementations).
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦初始化了 Xamarin Insights 上下文，就可以在共享库（例如，ViewModel 实现）上执行额外的报告调用。
- en: Application Insights
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Application Insights
- en: Application Insights is another subscription based service/platform that can
    be used with Xamarin applications. This cloud-based suite was initially released
    by Microsoft for web applications, but it slowly made its way into mobile applications.
    The application insights NuGet package(s) can be used with Xamarin.Android (API
    level 15 and higher) and Xamarin.iOS (version 6 and higher) applications. Application
    Insights, with a limited feature set, can be used on an unlimited number of devices
    with a limited amount of data processing for free.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: Application Insights是另一个可以与Xamarin应用程序一起使用的基于订阅的服务/平台。这个基于云的套件最初由微软为Web应用程序发布，但逐渐进入了移动应用程序领域。Application
    Insights的NuGet包可以用于Xamarin.Android（API级别15及以上）和Xamarin.iOS（版本6及以上）应用程序。功能有限的Application
    Insights可以免费用于无限数量的设备，并有限地处理数据。
- en: 'Application Insights usage scenarios are, in essence, very similar to Xamarin
    Insights. The initial step is to use the platform-specific initializer to start
    the telemetry session. Once the telemetry context is created, an instance of a
    `TelemetryClient` can be used to either start automatic diagnostic recording or
    send manual data to the insights server:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: Application Insights的使用场景本质上与Xamarin Insights非常相似。第一步是使用平台特定的初始化器来启动遥测会话。一旦创建了遥测上下文，就可以使用`TelemetryClient`实例来启动自动诊断记录或向见解服务器发送手动数据：
- en: '[PRE4]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Together with crash analytics provided by HockeyApp, usage statics and server-side
    data (if any) with Application Insights for mobile application, live telemetry
    can provide valuable insights about Xamarin applications.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 与HockeyApp提供的崩溃分析相结合，使用Application Insights移动应用程序的用法统计和服务器端数据（如果有），实时遥测可以提供关于Xamarin应用程序的宝贵见解。
- en: Note
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Application Insights is slowly being transitioned out in favor of HockeyApp.
    This transition was first announced in November 2015 during the Connect() conference.
    As of April 2016, Microsoft will stop accepting new submissions for Xamarin applications
    as well as Windows Store and Windows Phone apps. In June 2016, the application
    insights data for mobile apps is completely being migrated to the HockeyApp.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: Application Insights正在逐渐被HockeyApp取代。这一转变最初在2015年11月的Connect()会议上宣布。截至2016年4月，微软将停止接受Xamarin应用程序以及Windows
    Store和Windows Phone应用程序的新提交。2016年6月，移动应用程序的应用程序见解数据将完全迁移到HockeyApp。
- en: Summary
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Overall, tools available for the .NET platform can be easily utilized to manage
    and streamline the development pipeline tasks. On top of the Microsoft-based offerings,
    there are a number of service providers with the freemium subscription model.
    This can create great opportunities for individual/independent developers.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，可用于.NET平台的工具可以轻松地用于管理和简化开发管道任务。除了基于微软的提供之外，还有许多采用免费订阅模式的提供商。这为个人/独立开发者创造了巨大的机会。
- en: For source control, the most logical choices are Git and TFVC. While TFVC is
    an ideal solution for developers with a Windows-based development environment
    setup, Git provide native integration to Xamarin Studio on both Windows and Mac
    OS environments.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 对于源代码控制，最合理的选择是Git和TFVC。虽然TFVC对于基于Windows的开发环境设置的开发者来说是一个理想的解决方案，但Git为Windows和Mac
    OS环境中的Xamarin Studio提供了原生集成。
- en: Independent from the repository choice, Visual Studio Team Services or other
    CI platforms such as TeamCity can be employed to create automated testing and
    build workflows.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 不论是选择哪个仓库，Visual Studio Team Services或其他CI平台，如TeamCity，都可以用于创建自动测试和构建工作流程。
- en: Finally, beta testing and collected telemetry are fundamental elements for Xamarin
    projects. With real use-cases and analytical data on usage patterns, developers
    can fine-tune their applications and avoid problems before the actual release.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，beta测试和收集的遥测数据是Xamarin项目的根本要素。通过实际用例和用法模式的分析数据，开发者可以微调他们的应用程序，并在实际发布前避免问题。
- en: In the final chapter, we will be discussing the preparation steps for store
    submission and distribution options for Xamarin applications.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一章中，我们将讨论Xamarin应用程序提交到商店的准备步骤和分发选项。
