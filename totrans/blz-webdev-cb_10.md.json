["```cs\n    <ItemGroup>\n      <ProjectReference\n        Include= \"..\\SmartComponents\\\n        SmartComponents.AspNetCore\\\n        SmartComponents.AspNetCore.csproj\" />\n      <ProjectReference\n        Include= \"..\\SmartComponents\\\n        SmartComponents.Inference.OpenAI\\\n        SmartComponents.Inference.OpenAI.csproj\" />\n    </ItemGroup>\n    ```", "```cs\n    using SmartComponents.Inference.OpenAI;\n    //...other service registrations\n    builder.Services\n        .AddSmartComponents()\n        .WithInferenceBackend<OpenAIInferenceBackend>();\n    ```", "```cs\n    {\n      \"SmartComponents\": {\n        \"ApiKey\": \"YOUR_API_KEY\",\n        \"Endpoint\": \"YOUR_ENDPOINT\",\n        \"DeploymentName\": \"YOUR_MODEL_DEPLOYMENT\"\n      }\n    }\n    ```", "```cs\n    <ItemGroup>\n      <ProjectReference\n        Include=\"..\\SmartComponents\\\n        SmartComponents.AspNetCore.Components\\\n        SmartComponents.AspNetCore.Components.csproj\" />\n    </ItemGroup>\n    ```", "```cs\n    @page \"/ch10r02\"\n    @using SmartComponents\n    ```", "```cs\n    @code {\n        [SupplyParameterFromForm]\n        public ClaimViewModel Claim { get; set; } = new();\n    }\n    ```", "```cs\n    <EditForm Model=\"@Claim\" FormName=\"claim-form\">\n        @* we will continue here *@\n    </EditForm>\n    ```", "```cs\n    <p>\n        Event name:\n        <InputText @bind-Value=\"@Claim.Event\" />\n    </p>\n    <p>Date: <InputText @bind-Value=\"@Claim.Date\" /></p>\n    <p>\n        Customer name:\n        <InputText @bind-Value=\"@Claim.Customer.Name\" />\n    </p>\n    <p>\n        Customer email:\n        <InputText @bind-Value=\"@Claim.Customer.Email\" />\n    </p>\n    ```", "```cs\n    <button type=\"submit\">Submit</button>\n    ```", "```cs\n    <SmartPasteButton DefaultIcon />\n    ```", "```cs\n{\n  \"SmartComponents\": {\n    \"ApiKey\": \"YOUR_API_KEY\",\n    \"DeploymentName\": \"gpt-4o\"\n  }\n}\n```", "```cs\n    const string replier =\n        \"An event organizer support team member replying\n        to a claim request.\";\n    ```", "```cs\n    <p>\n        <SmartTextArea\n            @bind-Value=\"@Claim.Message\"\n            rows=\"5\" cols=\"50\"\n            UserRole=\"@replier\" />\n    </p>\n    ```", "```cs\npublic class ClaimReplyInference : SmartTextAreaInference\n{\n    public override ChatParameters BuildPrompt(\n        SmartTextAreaConfig config,\n        string textBefore, string textAfter\n    )\n    {\n        var prompt = base.BuildPrompt(\n            config, textBefore, textAfter\n        );\n        var systemMessage = new ChatMessage(\n            ChatMessageRole.System,\n            \"Make suggestions in a professional tone.\"\n        );\n        prompt.Messages.Add(systemMessage);\n        prompt.Temperature = 0.7f;\n        return prompt;\n    }\n}\n```", "```cs\nbuilder.Services.AddSingleton<SmartTextAreaInference,\n    ClaimReplyInference>()\n```", "```cs\n    <ItemGroup>\n      <PackageReference\n        Include=\"Azure.AI.OpenAI\"\n        Version=\"2.0.0-beta.2\" />\n    </ItemGroup>\n    ```", "```cs\n    {\n      \"ChatBot\": {\n        \"ApiKey\": \"YOUR_API_KEY\",\n        \"Endpoint\": \"YOUR_ENDPOINT\",\n        \"DeploymentName\": \"YOUR_MODEL_DEPLOYMENT\"\n      }\n    }\n    ```", "```cs\n    var endpoint = builder\n        .Configuration[\"ChatBot:Endpoint\"];\n    var apiKey = builder\n        .Configuration[\"ChatBot:ApiKey\"];\n    var deploymentName = builder\n        .Configuration[\"ChatBot:DeploymentName\"];\n    ```", "```cs\n    builder.Services.AddSingleton(\n        new AzureOpenAIClient(\n            new Uri(endpoint),\n            new AzureKeyCredential(apiKey)\n    ));\n    ```", "```cs\n    builder.Services\n        .AddScoped(services =>\n        {\n            var openAI = services\n                .GetRequiredService<AzureOpenAIClient>();\n            return openAI.GetChatClient(deploymentName);\n        });\n    ```", "```cs\n    @page \"/ch10r04\"\n    @rendermode InteractiveServer\n    @using OpenAI.Chat\n    ```", "```cs\n    @code {\n        [Inject] private ChatClient Chat { get; init; }\n    }\n    ```", "```cs\n    protected InputModel Model = new();\n    protected List<string> Messages = [];\n    ```", "```cs\n    private List<ChatMessage> _messages =\n    [\n        new SystemChatMessage(\n            \"Act as a friendly salesman for the Blazor Web\n            Development Cookbook written by Pawel\n            Bazyluk.\"\n        )\n    ];\n    ```", "```cs\n    private async Task SendMessage()\n    {\n        if (!Model.IsValid) return;\n        var message = new UserChatMessage(Model.Value);\n        Messages.Add($\"You: {Model.Value}\");\n        _messages.Add(message);\n        //continue here...\n    }\n    ```", "```cs\n    var chatResponse = await Chat\n        .CompleteChatAsync(_messages);\n    var response = chatResponse.Value.Content[0].Text;\n    // continue here...\n    ```", "```cs\n    _messages.Add(new AssistantChatMessage(response));\n    Messages.Add($\"OpenAI: {response}\");\n    Model.Value = string.Empty;\n    ```", "```cs\n    <h3>What can I help you with?</h3>\n    <EditForm Model=\"@Model\" FormName=\"chat-input\"\n              OnSubmit=\"@SendMessage\">\n        <InputText @bind-Value=\"@Model.Value\" />\n        <button type=\"submit\">Send</button>\n    </EditForm>\n    ```", "```cs\n    <hr />\n    @foreach (var message in Messages)\n    {\n        <p>@message</p>\n    }\n    ```", "```cs\n    \"Search\": {\n      \"ApiKey\": \"YOUR_API_KEY\",\n      \"Endpoint\": \"YOUR_ENDPOINT\",\n      \"Index\": \"YOUR_INDEX_NAME\"\n    }\n    ```", "```cs\n    var searchEndpoint = builder\n        .Configuration[\"Search:Endpoint\"];\n    var searchApiKey = builder\n        .Configuration[\"Search:ApiKey\"];\n    var searchIndex = builder\n        .Configuration[\"Search:Index\"];\n    ```", "```cs\n    builder.Services.AddSingleton(services =>\n    {\n        var dataSource = new AzureSearchChatDataSource\n        {\n            Endpoint = new Uri(searchEndpoint),\n            IndexName = searchIndex,\n            Authentication = DataSourceAuthentication\n                .FromApiKey(searchApiKey)\n        };\n        ChatCompletionOptions completionOptions = new();\n        completionOptions.AddDataSource(dataSource);\n        return completionOptions;\n    });\n    ```", "```cs\n    #pragma warning disable AOAI001\n    ```", "```cs\n    [Inject]\n    private ChatCompletionOptions ChatOptions\n    {\n        get; init;\n    }\n    ```", "```cs\n    var chatResponse = await Chat\n        .CompleteChatAsync(_messages, ChatOptions);\n    ```"]