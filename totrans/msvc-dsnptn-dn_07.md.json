["```cs\n{\n    \"AppointmentId\":\"5d83d288-6404-4cd5-8526-7af6eabd97b3\",\n    \"Date\":\"2022-09-01 08:000\",\n    \"Room\":{\n        \"Id\":\"4fff8260-85ce-45cd-919e-35f0aaf7d51e\",\n        \"Name\":\"Room 1\"\n    },\n    \"Customer\": {\n        \"Id\":\"4fff8260-85ce-45cd-919e-35f0aaf7d51e\",\n        \"FirstName\":\"John\",\n        \"LastName\":\"Higgins\"\n    }\n}\n```", "```cs\ndotnet add package Microsoft.EntityFrameworkCore.Sqlite\ndotnet add package Microsoft.EntityFrameworkCore.Design\n```", "```cs\npublic class ApplicationDatabaseContext : DbContext\n  {\n    public DbSet<Patient> Patients { get; set; }\n    protected override void OnConfiguring\n        (DbContextOptionsBuilder optionsBuilder)\n    {\n      optionsBuilder.UseSqlite(\"Data Source=patients.db\");\n    }\n  }\n```", "```cs\npublic class Patient\n  {\n    // EF Core will add auto increment and Primary Key\n        constraints to the Id property automatically\n    public int Id { get; set; }\n    public string FirstName { get; set; }\n    public string LastName { get; set; }\n    public string TaxId { get; set; }\n   // Using ? beside a data type indicates to the database\n        that the field is nullable\n    public DateTime? DateOfBirth { get; set; }\n  }\n```", "```cs\n// initialize a connection to the database\n  using var context = new ApplicationDatabaseContext();\n// Go to the database a retrieve a list of patients\n  var patients = await context.Patients.ToListAsync();\n// Iterate through the list and print to the screen\n  foreach (var patient in patients)\n{\n  Console.WriteLine($\"{patient.FirstName}\n     {patient.LastName}\");\n}\n```", "```cs\ndotnet ef dbcontext scaffold \"DataSource=PATH_TO_FILE\"\n  Microsoft.EntityFrameworkCore.Sqlite -o Models\n```", "```cs\nScaffold-DbContext \"DataSource=PATH_TO_FILE\"\n  Microsoft.EntityFrameworkCore.Sqlite --output-dir Models\n```", "```cs\ndotnet ef migrations add InitialCreate\n```", "```cs\nAdd-Migration InitialCreate\n```", "```cs\ndotnet ef migrations remove\n```", "```cs\nRemove-Migration\n```", "```cs\ndotnet ef database update\n```", "```cs\nUpdate-Database\n```", "```cs\n    [Route(\"api/[controller]\")]\n    [ApiController]\n    public class PatientsController : ControllerBase\n    {\n        private readonly ApplicationDatabaseContext\n            _context;\n        public PatientsController\n            (ApplicationDatabaseContext context)\n        {\n            _context = context;\n        }\n        // GET: api/Patients\n        [HttpGet]\n        public async Task<ActionResult<Ienumerable\n            <Patient>>> GetPatients()\n        {\n          if (_context.Patients == null)\n          {\n              return NotFound();\n          }\n            return await _context.Patients.ToListAsync();\n        }\n    }\n```", "```cs\n    public interface IGenericRepository<T> where T : class\n    {\n        Task<T> GetAsync(int? id);\n        Task<List<T>> GetAllAsync();\n        Task<PagedResult<T>> GetAllAsync<T>(QueryParameters\n            queryParameters);\n    }\n```", "```cs\npublic class GenericRepository<T> : IGenericRepository<T>\n    where T : class\n    {\n        protected readonly ApplicationDatabaseContext\n            _context;\n        public GenericRepository(ApplicationDatabaseContext\n           context)\n        {\n            this._context = context;\n       }\n        public async Task<List<T>> GetAllAsync()\n        {\n            return await _context.Set<T>().ToListAsync();\n        }\n        public async Task<PagedResult<T>> GetAllAsync<T>\n            (QueryParameters queryParameters)\n        {\n            var totalSize = await _context.Set<T>()\n                .CountAsync();\n            var items = await _context.Set<T>()\n                .Skip(queryParameters.StartIndex)\n                .Take(queryParameters.PageSize)\n                .ToListAsync();\n            return new PagedResult<T>\n            {\n                Items = items,\n                PageNumber = queryParameters.PageNumber,\n                RecordNumber = queryParameters.PageSize,\n                TotalCount = totalSize\n            };\n        }\n        public async Task<T> GetAsync(int? id)\n        {\n            if (id is null)\n            {\n                return null;\n            }\n            return await _context.Set<T>().FindAsync(id);\n        }\n    }\n```", "```cs\n    [Route(\"api/[controller]\")]\n    [ApiController]\n    public class PatientsController : ControllerBase\n    {\n        private readonly IGenericRepository<Patient>\n            _repository;\n        public PatientsController(IGenericRepository<Patient> \n          repository)\n        {\n            _repository = repository;\n        }\n        // GET: api/Patients\n        [HttpGet]\n        public async Task<ActionResult<Ienumerable\n            <Patient>>> GetPatients()\n        {\n            return await _repository.GetAllAsync();\n        }\n         // GET: api/Patients/?StartIndex=0&pagesize=25\n             &PageNumber=1\n        [HttpGet()]\n        public async Task<ActionResult< PagedResult\n            <Patient>>> GetPatients([FromQuery]\n                QueryParameters queryParameters)\n        {\n            return await _repository.GetAllAsync\n                (queryParameters);\n        }\n```", "```cs\nbuilder.Services.AddScoped(typeof(IGenericRepository<>),\n    typeof(GenericRepository<>));\n```", "```cs\npublic interface IPatientsRepository : IGenericRepository\n    <Patient>\n{\n    Task<Patient> GetByTaxIdAsync(string id);\n}\npublic class PatientsRepository : GenericRepository\n    <Patient>, IPatientsRepository\n{\n    public PatientsRepository(ApplicationDatabaseContext\n        context) : base(context)\n    {}\n    public async Task<Patient> GetByTaxIdAsync(string id)\n    {\n        return await _context.Patients.FirstOrDefaultAsync\n            (q => q.TaxId == id);\n    }\n}\n```", "```cs\nbuilder.Services.AddScoped<IPatientsRepository,\n    PatientsRepository>();\n```", "```cs\npublic class PatientsController : ControllerBase\n{\n    private readonly IPatientsRepository _repository;\n    public PatientsController(IPatientsRepository\n        repository)\n    {\n        _repository = repository;\n    }\n    // GET: api/Patients\n    [HttpGet]\n    public async Task<ActionResult<IEnumerable<Patient>>>\n        GetPatients()\n    {\n        return await _repository.GetAllAsync();\n    }\n    // GET: api/Patients/taxid/1234\n    [HttpGet(\"taxid/{id}\")]\n    public async Task<ActionResult<Patient>>\n        GetPatients(string id)\n    {\n        var patient = await _repository.GetByTaxIdAsync\n            (id);\n        if (patient is null) return NotFound();\n        return patient;\n    }\n    // GET: api/Hotels/?StartIndex=0&pagesize=25\n        &PageNumber=1\n    [HttpGet()]\n    public async Task<ActionResult<PagedResult<Patient>>>\n        GetPatients([FromQuery] QueryParameters\n            queryParameters)\n    {\n        return await _repository.GetAllAsync\n            (queryParameters);\n    }\n}\n```"]