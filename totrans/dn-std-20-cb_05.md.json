["```cs\n        using System.Xml;\n        using System.IO;\n        using System.Xml.Linq;\n        using System.Collections.Generic;\n        using System.Linq;\n```", "```cs\n        private string _xmlFile;\n```", "```cs\n        public XMLLog(string xmlFile)\n        {\n          _xmlFile = xmlFile;\n        }\n```", "```cs\n        public void WriteToLog(string message)\n        {\n\n          if (!File.Exists(_xmlFile))\n          {\n            using (XmlWriter xmlWriter = XmlWriter.Create(_xmlFile))\n            {\n              xmlWriter.WriteStartDocument();\n              xmlWriter.WriteStartElement(\"Log\");\n              xmlWriter.WriteStartElement(\"LogEntry\");\n              xmlWriter.WriteElementString(\"LogDate\", DateTime.Now.ToString());\n              xmlWriter.WriteElementString(\"Message\", message);\n              xmlWriter.WriteEndElement();\n              xmlWriter.WriteEndElement();\n              xmlWriter.WriteEndDocument();\n\n              xmlWriter.Flush();\n              xmlWriter.Close();\n            }\n          }\n          else\n          {\n            XDocument xDoc = XDocument.Load(_xmlFile);\n            XElement root = xDoc.Element(\"Log\");\n            IEnumerable<XElement> rows = root.Descendants(\"LogEntry\");\n\n            XElement lastRow = rows.Last();\n            lastRow.AddAfterSelf(\n              new XElement(\"LogEntry\",\n              new XElement(\"LogDate\", DateTime.Now.ToString()),\n              new XElement(\"Message\", message)));\n\n            xDoc.Save(_xmlFile);\n          }\n        }\n```", "```cs\n        public Dictionary<string, string> ReadLog()\n        {\n\n          var xmlOutPut = new Dictionary<string, string>();\n          var line = 0;\n\n          if (File.Exists(_xmlFile))\n          {\n            using (XmlReader xmlReader = XmlReader.Create(_xmlFile))\n            {\n              while(xmlReader.Read())\n              {\n\n                if (xmlReader.IsStartElement())\n                {\n\n                  switch (xmlReader.Name)\n                  {\n                    case \"LogDate\":\n                      xmlOutPut.Add($\"LogDate - {line}\", xmlReader.ReadElementContentAsString());\n                      break;\n                    case \"Message\":\n                      xmlOutPut.Add($\"Message - {line}\", xmlReader.ReadElementContentAsString());\n                      break;    \n                  }\n                }\n                line++;\n              }\n            }\n\n            return xmlOutPut;\n          }\n        }\n```", "```cs\nusing (XmlWriter xmlWriter = XmlWriter.Create(_xmlFile))\n{\n    xmlWriter.WriteStartDocument();\n    xmlWriter.WriteStartElement(\"Log\");\n    xmlWriter.WriteStartElement(\"LogEntry\");\n    xmlWriter.WriteElementString(\"LogDate\", DateTime.Now.ToString());\n    xmlWriter.WriteElementString(\"Message\", message);\n    xmlWriter.WriteEndElement();\n    xmlWriter.WriteEndElement();\n    xmlWriter.WriteEndDocument();\n\n    xmlWriter.Flush();\n    xmlWriter.Close();\n}\n```", "```cs\nXDocument xDoc = XDocument.Load(_xmlFile);\nXElement root = xDoc.Element(\"Log\");\nIEnumerable<XElement> rows = root.Descendants(\"LogEntry\");\n\nXElement lastRow = rows.Last();\nlastRow.AddAfterSelf(\n    new XElement(\"LogEntry\",\n        new XElement(\"LogDate\", DateTime.Now.ToString()),\n            new XElement(\"Message\", message)));\n\nxDoc.Save(_xmlFile);\n```", "```cs\nwhile(xmlReader.Read())\n{\n    if (xmlReader.IsStartElement())\n    {\n\n        switch (xmlReader.Name)\n        {\n            case \"LogDate\":\n                xmlOutPut.Add($\"LogDate - {line}\", xmlReader.ReadElementContentAsString());\n                break;\n            case \"Message\":\n                xmlOutPut.Add($\"Message - {line}\", xmlReader.ReadElementContentAsString());\n                break;    \n        }\n     }\n     line++;\n }\n```", "```cs\n        using Chapter5.XmlDoc.XmlLib;\n```", "```cs\n        var xmlFile = $\"{Server.MapPath(\"~\")}/testlog.xml\";\n\n        var xmlLog = new XMLLog(xmlFile);\n        xmlLog.WriteToLog(\"Start at the Index() method\");\n        xmlLog.WriteToLog(\"Another log entry here\");\n        xmlLog.WriteToLog(\"Before the return statement\");\n```", "```cs\n        public ActionResult Display()\n        {\n\n            var xmlFile = $\"{Server.MapPath(\"~\")}/testlog.xml\";\n            var xmlLog = new XMLLog(xmlFile);\n\n            ViewBag.LogDetails = xmlLog.ReadLog();\n\n            return View();\n        }\n```", "```cs\n        @{ \n\n            var xmlLogDetails = (Dictionary<string, string>)ViewBag.LogDetails;\n\n            foreach (var log in xmlLogDetails)\n            {\n                <p>@log.Key.Split('-')[0]: @log.Value.Split('-')[0]</p>\n            }\n        }\n```", "```cs\nvar xmlFile = $\"{Server.MapPath(\"~\")}/testlog.xml\";\n```", "```cs\nViewBag.LogDetails = xmlLog.ReadLog();\n```", "```cs\n        using System.Collections.Generic;\n        using System.Xml;\n        using System.Xml.Linq;\n```", "```cs\n        private string _xmlFile;\n```", "```cs\n        public XmlBooks(string xmlFile)\n        {\n            _xmlFile = xmlFile;\n        }\n```", "```cs\n        public List<string> GetBookTitles()\n        {\n\n            var titles = new List<string>();\n            XDocument xDoc = XDocument.Load(_xmlFile);\n\n            var books = xDoc.Descendants(\"book\"); \n\n            foreach (var book in books)\n            {\n                titles.Add(book.Element(\"title\").Value);\n            }\n\n            return titles;\n        }\n```", "```cs\n<?xml version=\"1.0\"?>\n<catalog>\n   <book id=\"bk101\">\n      <author>Gambardella, Matthew</author>\n      <title>XML Developer's Guide</title>\n      <genre>Computer</genre>\n      <price>44.95</price>\n      <publish_date>2000-10-01</publish_date>\n      <description>An in-depth look at creating applications \n      with XML.</description>\n   </book>\n   <book id=\"bk102\">\n      <author>Ralls, Kim</author>\n      <title>Midnight Rain</title>\n      <genre>Fantasy</genre>\n      <price>5.95</price>\n      <publish_date>2000-12-16</publish_date>\n      <description>A former architect battles corporate zombies, \n      an evil sorceress, and her own childhood to become queen \n      of the world.</description>\n   </book>\n   <book id=\"bk103\">\n      <author>Corets, Eva</author>\n      <title>Maeve Ascendant</title>\n      <genre>Fantasy</genre>\n      <price>5.95</price>\n      <publish_date>2000-11-17</publish_date>\n      <description>After the collapse of a nanotechnology \n      society in England, the young survivors lay the \n      foundation for a new society.</description>\n   </book>\n   <book id=\"bk104\">\n      <author>Corets, Eva</author>\n      <title>Oberon's Legacy</title>\n      <genre>Fantasy</genre>\n      <price>5.95</price>\n      <publish_date>2001-03-10</publish_date>\n      <description>In post-apocalypse England, the mysterious \n      agent known only as Oberon helps to create a new life \n      for the inhabitants of London. Sequel to Maeve \n      Ascendant.</description>\n   </book>\n   <book id=\"bk105\">\n      <author>Corets, Eva</author>\n      <title>The Sundered Grail</title>\n      <genre>Fantasy</genre>\n      <price>5.95</price>\n      <publish_date>2001-09-10</publish_date>\n      <description>The two daughters of Maeve, half-sisters, \n      battle one another for control of England. Sequel to \n      Oberon's Legacy.</description>\n   </book>\n</catalog>\n```", "```cs\n        <?xml version=\"1.0\"?>\n        <catalog>\n          <book id=\"bk101\">\n              <author>Gambardella, Matthew</author>\n              <title>XML Developer's Guide</title>\n              <genre>Computer</genre>\n              <price>44.95</price>\n              <publish_date>2000-10-01</publish_date>\n              <description>An in-depth look at creating applications \n              with XML.</description>\n           </book>\n           <book id=\"bk102\">\n              <author>Ralls, Kim</author>\n              <title>Midnight Rain</title>\n              <genre>Fantasy</genre>\n              <price>5.95</price>\n              <publish_date>2000-12-16</publish_date>\n              <description>A former architect battles corporate zombies, \n               an evil sorceress, and her own childhood to become queen \n               of the world.</description>\n           </book>\n           <book id=\"bk103\">\n              <author>Corets, Eva</author>\n              <title>Maeve Ascendant</title>\n              <genre>Fantasy</genre>\n              <price>5.95</price>\n              <publish_date>2000-11-17</publish_date>\n              <description>After the collapse of a nanotechnology \n              society in England, the young survivors lay the \n              foundation for a new society.</description>\n           </book>\n           <book id=\"bk104\">\n              <author>Corets, Eva</author>\n              <title>Oberon's Legacy</title>\n              <genre>Fantasy</genre>\n              <price>5.95</price>\n              <publish_date>2001-03-10</publish_date>\n              <description>In post-apocalypse England, the mysterious \n              agent known only as Oberon helps to create a new life \n              for the inhabitants of London. Sequel to Maeve \n              Ascendant.</description>\n           </book>\n           <book id=\"bk105\">\n              <author>Corets, Eva</author>\n              <title>The Sundered Grail</title>\n              <genre>Fantasy</genre>\n              <price>5.95</price>\n              <publish_date>2001-09-10</publish_date>\n              <description>The two daughters of Maeve, half-sisters, \n              battle one another for control of England. Sequel to \n              Oberon's Legacy.</description>\n           </book>\n        </catalog>\n```", "```cs\n        using Chapter5.XmlLinq.XmlLinqLib;\n```", "```cs\n        var xmlFile = @\"C:\\Projects\\Chapter5\\Chapter5.XmlLinq\\Chapter5.XmlLinq.XmlCore\\books.xml\";\n\n        var books = new XmlBooks(xmlFile);\n        var titles = books.GetBookTitles();\n\n        foreach (var title in titles)\n        {\n\n            Console.WriteLine(title);\n        }\n\n        Console.ReadLine();\n```"]