["```cs\nusing UnityEngine;\nusing UnityEngine.Events;\nusing System;\nusing System.Collections.Generic;\npublic class EventSystem : MonoBehaviour\n{\n    private Dictionary<string, Delegate> _events\n        = new();\n    public void AddListener<T>(\n        string eventName, UnityAction<T> listener)\n    {\n        // UNDONE: Subscribe handler to event name.\n    }\n    public void RemoveListener<T>(\n        string eventName, UnityAction<T> listener)\n    {\n        // UNDONE: Unsubscribe handler from event name.\n    }\n    public void TriggerEvent<T>(string eventName, T arg)\n    {\n        // UNDONE: Invoke handlers for event name.\n    }\n}\n```", "```cs\npublic class EventConstants\n{\n    public const string MyFirstEvent = \"MyFirstEvent\";\n}\n```", "```cs\n    public void AddListener<T>(string eventName,\n        UnityAction<T> listener)\n    {\n        if (!_events.ContainsKey(eventName))\n            _events.Add(eventName, null);\n        _events[eventName] = (UnityAction<T>)_events[eventName]\n            + listener;\n    }\n```", "```cs\n    public void RemoveListener<T>(string eventName,\n        UnityAction<T> listener)\n    {\n        if (_events.ContainsKey(eventName))\n            _events[eventName] =\n                (UnityAction<T>)_events[eventName] - listener;\n    }\n```", "```cs\n    public void TriggerEvent<T>(string eventName, T arg)\n    {\n        if (_events.TryGetValue(eventName, out Delegate del))\n            (del as UnityAction<T>)?.Invoke(arg);\n    }\n```", "```cs\npublic class EventSystem : MonoBehaviour\n{\n    public static EventSystem Instance { get; private set; }\n    …\n    private void Awake()\n    {\n        if (Instance == null)\n            Instance = this;\n        else\n            Destroy(gameObject);\n        DontDestroyOnLoad(gameObject);\n    }\n    …\n```", "```cs\nprivate void Awake() => Instance = this;\n```", "```cs\nusing UnityEngine;\nusing System.Collections.Generic;\npublic class QuestSystem : MonoBehaviour\n{\n    private Dictionary<string, bool> _quests = new();\n    public void StartQuest(string questName)\n    {\n        if (!_quests.ContainsKey(questName))\n            _quests.Add(questName, false);\n    }\n    public void CompleteQuest(string questName)\n    {\n        if (_quests.ContainsKey(questName))\n            _quests[questName] = true;\n    }\n}\n```", "```cs\n    public static QuestSystem Instance { get; private set; }\n    private void Awake()\n    {\n        if (Instance == null)\n            Instance = this;\n        else\n            Destroy(gameObject);\n        DontDestroyOnLoad(gameObject);\n    }\n```", "```cs\n[DefaultExecutionOrder(-500)]\npublic class QuestSystem : MonoBehaviour\n{ …\n```", "```cs\npublic enum QuestNames\n{\n    // Quest name, unique ID.\n    CollectKeysQuest = 10\n}\n```", "```cs\nusing UnityEngine;\npublic abstract class QuestBase : MonoBehaviour\n{\n    public QuestNames QuestName => _questName;\n    [SerializeField]\n    private QuestNames _questName;\n    …\n```", "```cs\n    …\n    public virtual void StartQuest()\n        => QuestSystem.Instance.StartQuest(QuestName.ToString());\n    protected virtual void QuestCompleted(string questName)\n        => Debug.Log($\"Quest '{questName}' completed!\");\n    …\n```", "```cs\n    …\n    private void OnEnable() => AddListeners();\n    private void OnDisable() => RemoveListeners();\n    protected virtual void AddListeners()\n        => EventSystem.Instance.AddListener<string>(\n            EventConstants.OnQuestCompleted, QuestCompleted);\n    protected virtual void RemoveListeners()\n        => EventSystem.Instance.RemoveListener<string>(\n            EventConstants.OnQuestCompleted, QuestCompleted);\n}\n```", "```cs\nusing UnityEngine;\npublic class CollectKeysQuest : QuestBase\n{\n    [SerializeField] private int _numKeysRequired = 3;\n    private int _keysCollected = 0;\n    …\n```", "```cs\n    …\n    protected override void AddListeners()\n    {\n        base.AddListeners();\n        EventSystem.Instance.AddListener<bool>(\n            EventConstants.OnKeyCollected, KeyCollected);\n    }\n    protected override void RemoveListeners()\n    {\n        base.RemoveListeners();\n        EventSystem.Instance.RemoveListener<bool>(\n            EventConstants.OnKeyCollected, KeyCollected);\n    }\n    private void KeyCollected(bool arg0)\n    {\n        _keysCollected++;\n        // UNDONE: Evaluate quest completion.\n    }\n}\n```", "```cs\n    private void KeyCollected(int keyId)\n    {\n        _keysCollected++;\n        if (_keysCollected >= _numKeysRequired)\n        {\n            QuestSystem.Instance.CompleteQuest(\n                QuestName.ToString());\n            EventSystem.Instance.TriggerEvent(\n                EventConstants.OnQuestCompleted, QuestName);\n        }\n    }\n```", "```cs\npublic class EventConstants\n{\n    public const string OnMyEvent = \"OnMyEvent\";\n    // QuestSystem events.\n    public const string OnQuestCompleted = \"OnQuestCompleted\";\n    // Quests' events.\n    public const string OnKeyCollected = \"OnKeyCollected\";\n}\n```", "```cs\n    public bool IsQuestComplete(string questName)\n    {\n        if (_quests.TryGetValue(questName, out bool status))\n            return status;\n        return false;\n    }\n```", "```cs\nusing UnityEngine;\nusing UnityEngine.Events;\npublic class QuestHasCompleted : MonoBehaviour\n{\n    public QuestNames QuestName;\n    public UnityEvent OnQuestComplete;\n    public UnityEvent OnQuestIncomplete;\n    public void CheckQuestComplete()\n    {\n        if (QuestSystem.Instance.\n            IsQuestComplete(QuestName.ToString()))\n        {\n            OnQuestComplete?.Invoke();\n            return;\n        }\n        OnQuestIncomplete?.Invoke();\n    }\n}\n```", "```cs\nusing UnityEngine;\n[RequireComponent (typeof(Collider2D))]\npublic class KeyItem : MonoBehaviour\n{\n    private void OnTriggerEnter2D(Collider2D collision)\n    {\n        if (collision.CompareTag(Tags.Player))\n        {\n            EventSystem.Instance.TriggerEvent(\n                EventConstants.OnKeyCollected, false);\n            Destroy(gameObject);\n        }\n    }\n}\n```", "```cs\nusing UnityEngine;\nusing System.Collections.Generic;\npublic class KeyInstantiator : MonoBehaviour\n{\n    [SerializeField] private KeyItem[] _keyPrefabs;\n    [SerializeField] private Transform[] _spawnPoints;\n    …\n```", "```cs\n    private List<Transform> _availablePoints;\n    private void Start()\n    {\n        _availablePoints = new List<Transform>(_spawnPoints);\n        …\n```", "```cs\n        foreach (var item in _keyPrefabs)\n        {\n            var randomIndex = Random.Range(\n                0, _availablePoints.Count);\n            Instantiate(item,\n                _availablePoints[randomIndex].position,\n                Quaternion.identity);\n            _availablePoints.RemoveAt(randomIndex);\n        }\n    }\n}\n```", "```cs\n    using UnityEngine.EventSystems;\n    ```", "```cs\n    public class ST_PuzzleTile : MonoBehaviour, IPointerClickHandler\n    ```", "```cs\n    public void OnPointerClick(PointerEventData eventData)\n    ```", "```cs\n    using UnityEngine.Events;\n    ```", "```cs\n    public class ST_PuzzleDisplay : MonoBehaviour\n    {\n        …\n        public UnityEvent OnPuzzleComplete;\n    ```", "```cs\n    public IEnumerator CheckForComplete()\n    {\n        …\n        // if we are still complete then all the tiles are correct.\n        if(Complete)\n        {\n            Debug.Log(\"Puzzle Complete!\");\n            OnPuzzleComplete?.Invoke();\n        }\n        …\n    ```"]