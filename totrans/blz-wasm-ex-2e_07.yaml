- en: '7'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building a Shopping Cart Using Application State
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, we need our applications to maintain their state between different
    pages. We can accomplish this by using **dependency injection** (**DI**). DI is
    used to access services that are configured in a central location.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will create a shopping cart. As we add and delete items
    from the shopping cart, the application will maintain a list of the items in the
    shopping cart. The contents of the shopping cart will be retained when we navigate
    to another page and then return to the page with the shopping cart. Also, the
    shopping cart’s total will be displayed on all the pages.
  prefs: []
  type: TYPE_NORMAL
- en: Application state,
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: dependency injection
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: a team built on trust!
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the application state
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding DI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the shopping cart project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To complete this project, you need to have Visual Studio 2022 installed on your
    PC. For instructions on how to install the free Community Edition of Visual Studio
    2022, refer to *Chapter 1*, *Introduction to Blazor WebAssembly*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The source code for this chapter is available in the following GitHub repository:
    [https://github.com/PacktPublishing/Blazor-WebAssembly-by-Example-Second-Edition/tree/main/Chapter07](https://github.com/PacktPublishing/Blazor-WebAssembly-by-Example-Second-Edition/tree/main/Chapter07).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Code in Action video is available here: [https://packt.link/Ch7](https://packt.link/Ch7).'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the application state
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a Blazor WebAssembly app, the browser’s memory is used to hold the application’s
    state. This means that when the user navigates between pages, the state is lost
    unless we preserve it. We will be using the `AppState` pattern to preserve the
    application’s state.
  prefs: []
  type: TYPE_NORMAL
- en: In the `AppState` pattern, a service is added to a DI container to coordinate
    the state between related components. The service contains all the states that
    need to be maintained. Because the service is managed by the DI container, it
    can outlive individual components and retain the state of the application as the
    UI changes.
  prefs: []
  type: TYPE_NORMAL
- en: The service can be a simple class or a complex class. One service can be used
    to manage the state of multiple components across the entire application. One
    benefit of the `AppState` pattern is that it leads to a greater separation between
    presentation logic and business logic.
  prefs: []
  type: TYPE_NORMAL
- en: '**IMPORTANT NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: The application state that is held in the browser’s memory is lost when the
    user reloads the page.
  prefs: []
  type: TYPE_NORMAL
- en: For the project in this chapter, we will use a DI service instance to preserve
    the application’s state.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding DI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DI is a technique in which an object accesses services that have been configured
    in a central location. The central location is the DI container. When using DI,
    each consuming class does not need to create its own instance of the injected
    class that it has a dependency on. It is provided by the framework and is called
    a service. In a Blazor WebAssembly application, the services are defined in the
    `program.cs` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have already used DI in this book with the following services:'
  prefs: []
  type: TYPE_NORMAL
- en: '`HttpClient`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`IJSRuntime`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NavigationManager`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DI containers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When a Blazor WebAssembly application starts, it configures a DI container.
    The DI container is responsible for building the instances of the service and
    it lives until the user closes the tab in the browser that is running the web
    app. In the following example, the `CartService` implementation is registered
    for `ICartService`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'After a service has been added to a DI container, we use the @inject directive
    to inject the service into any classes that depend on it. The `@inject` directive
    takes two parameters, `Type` and `Property`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Type`: This is the type of service.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Property`: This is the name of the property that is receiving the service.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following example shows how to use the `@inject` directive to reference
    the `CartService` that was registered in the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Dependencies are injected after the component instance has been created, but
    before the `OnInitialized` or `OnInitializedAsync` life cycle events are executed.
    This means that you cannot use the injected class in the component’s constructor,
    but you can use it in either the `OnInitialized` or `OnInitializedAsync` method.
  prefs: []
  type: TYPE_NORMAL
- en: The lifetime of each service is designated when it is registered.
  prefs: []
  type: TYPE_NORMAL
- en: Service lifetimes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The lifetime of a service that is injected using DI can be any of the following
    values:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Singleton**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scoped**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Transient**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Singleton
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If the service’s lifetime is defined as `Singleton`, this means that a single
    instance of the class will be created and that instance will be shared throughout
    the application. Any components that use the service will receive an instance
    of the same service. In a Blazor WebAssembly application, this is true for the
    lifetime of the current application that is running in the current tab of the
    browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code will create a shared instance of the `ICartService` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This is the lifetime of the service that we will use to manage the application’s
    state in this chapter’s project.
  prefs: []
  type: TYPE_NORMAL
- en: Scoped
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If the service’s lifetime is defined as `Scoped`, this means that a new instance
    of the class will be created for each scope. Since a Blazor WebAssembly application’s
    concept of the scope coincides with the life cycle of the application, `Scoped`-registered
    services are treated like `Singleton` services.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code will create a shared instance of the `ICartService` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The instance created by the preceding code is identical to the instance created
    by using the `AddSingleton` method.
  prefs: []
  type: TYPE_NORMAL
- en: '**IMPORTANT NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: In the Blazor WebAssembly project templates provided by Microsoft, they use
    a `Scoped` service to create the `HttpClient` instance for data access. This is
    because Microsoft’s project templates use the `Scoped` service lifetime for their
    services for symmetry with server-side Blazor.
  prefs: []
  type: TYPE_NORMAL
- en: Transient
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If the service lifetime of the service is defined as `Transient`, this means
    that a new instance of the class will be created every time an instance of the
    service is requested. When using `Transient` services, the DI container acts as
    a factory that creates unique instances of the class. Once the instance is created
    and injected into the dependent component, the container has no further interest
    in it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code will create a transient instance of the `OneUseService`
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The service’s lifetime is defined in the DI container. A service instance can
    be either scoped or transient.
  prefs: []
  type: TYPE_NORMAL
- en: We can use DI to inject the same service instance into multiple components.
    DI is used by the `AppState` pattern to allow the application to maintain the
    state between components.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s get a quick overview of the project that we are going to build in
    this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the shopping cart project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will build a Blazor WebAssembly app that includes a shopping
    cart. We will be able to add and remove different products from the shopping cart.
    The cart’s total will be displayed on each of the pages in the app.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a screenshot of the completed application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface  Description automatically generated](img/B18471_07_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.1: Shopping cart app'
  prefs: []
  type: TYPE_NORMAL
- en: The build time for this project is approximately 60 minutes.
  prefs: []
  type: TYPE_NORMAL
- en: Project overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `ShoppingCart` project will be created by using Microsoft’s **Blazor WebAssembly
    App Empty** project template to create an empty Blazor WebAssembly project. First,
    we will add logic to add and remove products from the shopping cart. Then, we
    will demonstrate that the cart’s state is lost when we navigate between pages.
    To maintain the cart’s state, we will register a service in the DI container that
    uses the `AppState` pattern. Finally, we will demonstrate that by injecting the
    new service into the relevant components, the cart’s state is not lost.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the shopping cart project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to create a new Blazor WebAssembly app. We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open Visual Studio 2022.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Create a new project** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *Alt*+*S* to enter the search for templates textbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `Blazor` and press the *Enter* key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The following screenshot shows the **Blazor WebAssembly App Empty** project
    template.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, chat or text message  Description
    automatically generated](img/B18471_07_02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 7.2: Blazor WebAssembly App Empty project template'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select the **Blazor WebAssembly App Empty** project template and click on the
    **Next** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `ShoppingCart` in the **Project name** textbox and click on the **Next**
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is a screenshot of the dialog used to configure our new project:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18471_07_03.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 7.3: Configure your new project dialog'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**TIP**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the preceding example, we placed the `ShoppingCart` project into the `E:/Blazor`
    folder. However, the location of this project is not important.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select **.NET 7.0** as the version of the **Framework** to use.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the **Configure for HTTPS** checkbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Uncheck the **ASP.NET Core Hosted** checkbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Uncheck the **Progressive Web Application** checkbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is a screenshot of the dialog used to collect additional information about
    our new project:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18471_07_04.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 7.4: Additional information dialog'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the **Create** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have created an empty `ShoppingCart` Blazor WebAssembly project. We will
    use `Bootstrap` to style our frontend.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Bootstrap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to install `Bootstrap` into our web app. We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the `wwwroot/css` folder and select the **Add**, **Client-Side
    Library** option from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `bootstrap` into the **Library** search textbox and press the *Enter*
    key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Choose specific files**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select `css` files only, as shown in the following screenshot:![Graphical user
    interface, text, application, email  Description automatically generated](img/B18471_07_05.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 7.5: Add Client-Side Library dialog'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**TIP**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Although the preceding screenshot has version 5.2.2 of `Bootstrap` selected,
    you can use any version of `Bootstrap` to complete this project.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the **Install** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**IMPORTANT NOTE**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After you install `Bootstrap`, a new folder will be added to the `wwwroot/css`
    folder. This new folder contains all the CSS files needed for `Bootstrap`. We
    will only be using the `bootstrap.min.css` file in this project.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open the `wwwroot/index.html` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following markup to the `head` element before the link to the `css/app.css`
    stylesheet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the `MainLayout.razor` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update the `main` element to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code uses `Bootstrap` to add padding around the body of the page.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open the `Pages/Index.razor` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete the `h1` element.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code includes a breadcrumb that will be styled by using `Bootstrap`.
    A breadcrumb indicates the page’s current location within a navigational hierarchy.
    The code also includes a button. However, the button does not yet do anything.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Press *Ctrl*+*F5* to start the application without debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is a screenshot of the **Home** page:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![A picture containing text  Description automatically generated](img/B18471_07_06.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 7.6: Home page of the ShoppingCart project'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the **Start Shopping** button to verify that nothing happens.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close the browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the user clicks the **Start Shopping** button, they should navigate to
    the **Store** page. However, the **Store** page does not yet exist.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a Store component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to add a `Store` component. We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the `Pages` folder and select the **Add**, **Razor Component**
    option from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the new component `Store`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete the `H3` element.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following markup before the code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code includes a breadcrumb that we can use to navigate to the
    **Home** page.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open the `Pages/Index.razor` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following `@inject` directive:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `NavigationManager` service is provided by the framework to manage URI navigation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding code, when `OpenStore` is called, the `NavigationManager` will
    navigate to the `Store` page. Since this is a SPA, the page will not need to be
    reloaded.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following `@onclick` event to the **Start Shopping** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Press *Ctrl*+*F5* to start the application without debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Start Shopping** button to navigate to the **Store** page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Home** breadcrumb to return to the **Home** page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close the browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have added the **Store** page. However, it is blank.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a Product class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to add the products that are for sale. We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the `ShoppingCart` project and select the **Add**, **New Folder**
    option from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the new folder `Models`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the `Models` folder and select the **Add**, **Class** option
    from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the new class `Product`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following properties to the `Product` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Right-click on the `wwwroot` folder and select the **Add**, **New Folder** option
    from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the new folder `sample-data`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the `sample-data` folder and select the **Add**, **New Item**
    option from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `json` in the **Search** box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **JSON File**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the file `products.json`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update the file to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**TIP**'
  prefs: []
  type: TYPE_NORMAL
- en: You can copy the `products.json` file from the GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the `wwwroot` folder and select the **Add**, **New Folder** option
    from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the new folder `images`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Copy the following images from the GitHub repository to the `images` folder:
    `Charger.jpg`, `Earbuds.jpg`, `KeyChain.jpg`, `TravelMug.jpg`, and `Tshirt.jpg`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have added a collection of products to our web app. Next, we need to finish
    the `Store` page.
  prefs: []
  type: TYPE_NORMAL
- en: Finishing the Store component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to add a list of the items that are for sale in our store, and we need
    to add the ability to select the items that we would like to purchase. We do this
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `Pages/Store.razor` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following directives:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code to the code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code uses `HttpClient` to populate the list of products from the
    `products.json` file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following `if` statement before the code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code displays the **Loading...** message until the list of products
    is loaded. Once the list of products has loaded, it displays the products and
    the cart.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following markup to the `products` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding markup adds a table that displays all the products that are for
    sale.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following markup to the `cart` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding markup displays all the items in our cart.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the `AddProduct` method to the code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code adds the indicated product to the cart and increments the
    total by the product’s price.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the `DeleteProduct` method to the code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code removes the indicated product from the cart and decrements
    the total by the product’s price.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following `@onlclick` event to the **Add to Cart** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code calls the `AddProduct` method when the button is clicked.
    For more information on handling events, refer to *Chapter 8*, *Building a Kanban
    Board Using Events*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following `@onlclick` event to the **Delete** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code calls the `DeleteProduct` method when the button is clicked.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We have finished updating the **Store** page. Now we need to test it.
  prefs: []
  type: TYPE_NORMAL
- en: Demonstrating that the application state has been lost
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to run our web app in order to test the `Store` page. We do this as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Press *Ctrl*+*F5* to start the application without debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Start Shopping** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a few products to the cart using the **Add to Cart** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete a product from the cart using the **Delete** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Home** option on the navigation menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Return to the **Store** page by clicking on the **Start Shopping** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Confirm that the cart is now empty.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When we navigate between the pages in our web app, the state is lost.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Close the browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can maintain the state by using DI to enable the `AppState` pattern. We will
    add a `CartService` to our project that we will manage using DI.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the the ICartService interface
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to create an `ICartService` interface. We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Return to Visual Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the `ShoppingCart` project and select the **Add**, **New Folder**
    option from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the new folder `Services`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the `Services` folder and select the **Add**, **New Item** option
    from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `interface` in the **Search** box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Interface**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the file `ICartService`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**IMPORTANT NOTE**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Visual Studio will automatically add the following `using` statement:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`using ShoppingCart.Models;`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We have created the `ICartService` interface. Now we need to create a class
    that inherits from it.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the CartService class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to create the `CartService` class. We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `Services` folder and select the **Add**, **Class** option from
    the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the class `CartService`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update the class to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `CartService` class inherits from the `ICartService` interface.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the `NotifyStateChanged` method to the class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding code, the `OnChange` event is invoked when the `NotifyStateChanged`
    method is called.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the `AddProduct` method to the class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code adds the indicated product to the list of products and increments
    the total. It also calls the `NotifyStateChanged` method.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the `DeleteProduct` method to the class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code removes the indicated product from the list of products and
    decrements the total. It also calls the `NotifyStateChanged` method.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We have completed the `CartService` class. Now we need to register `CartService`
    in the DI container.
  prefs: []
  type: TYPE_NORMAL
- en: Registering CartService in the DI container
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to register `CartService` in the DI container before we can inject
    it into our `Store` component. We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `Program.cs` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code after the code that registers `HttpClient`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We have registered `CartService`. Now we need to update the `Store` page to
    use it.
  prefs: []
  type: TYPE_NORMAL
- en: Injecting CartService into the Store component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to inject the `CartService` into the `Store` component. We do this
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `Pages\Store.razor` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following directives:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the `@onclick` event of the **Add to Cart** button to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding markup uses `cartService` to add products to the cart.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the `cart` element to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code replaces references to the `cart` property with references
    to the `cartService`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following `@onclick` event to the **Delete** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding markup uses `cartService` to delete products from the cart.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Delete the `cart` property, the `total` property, the `AddProduct` method, and
    the `DeleteProduct` method from the code block.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *Ctrl*+*F5* to start the application without debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Start Shopping** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a few products to the cart using the **Add to Cart** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete a product from the cart using the **Delete** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Home** option on the navigation menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Return to the **Store** page by clicking on the **Start Shopping** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Confirm that the cart is not empty.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have confirmed that `CartService` is working. Now we need to add the cart
    total to all the pages.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the cart total to all the pages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To view the cart total on all the pages, we need to add the cart total to a
    component that is used on all the pages. Since the `MainLayout` component is used
    by all the pages, we will add the cart total to it. We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Return to Visual Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `Shared\MainLayout.razor` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following `@using` directive:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following `@inject` directive:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following markup above the `main` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Press *Ctrl*+*F5* to start the application without debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a few items to the cart.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Confirm that the **Cart Total** field at the top of the page does not update.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The cart total at the top of the page is not being updated as we add new items
    to the cart. We need to deal with this.
  prefs: []
  type: TYPE_NORMAL
- en: Using the OnChange method
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to notify the component when it needs to be updated. We do this as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Return to Visual Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `Shared\MainLayout.razor` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following `@implements` directive:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following `@code` block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding code, the component’s `StateHasChanged` method is subscribed
    to the `cartService.OnChange` method in the `OnInitialized` method and unsubscribed
    in the `Dispose` method.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Press *Ctrl*+*F5* to start the application without debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a few products to the cart using the **Add to Cart** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Confirm that the **Cart Total** field at the top of the page updates.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete a product from the cart using the **Delete** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Confirm that the **Cart Total** field at the top of the page updates.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Home** option on the navigation menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Confirm that the **Cart Total** field is correctly displayed at the top of the
    **Home** page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have updated the component to call the `StateHasChanged` method whenever
    the `OnChange` method of `CartService` is invoked.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**TIP**'
  prefs: []
  type: TYPE_NORMAL
- en: Do not forget to unsubscribe from the event when you dispose of the component.
  prefs: []
  type: TYPE_NORMAL
- en: You must unsubscribe from the event to prevent the `StateHasChanged` method
    from being invoked every time the `cartService.OnChange` event is raised. Otherwise,
    your application will experience resource leaks.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should now be able to use DI to apply the `AppState` pattern to a Blazor
    WebAssembly app.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we introduced the application state and DI. We explained how
    to use a DI container and how to inject a service into a component. We also discussed
    the differences between the singleton, scoped, and transient service lifetimes.
  prefs: []
  type: TYPE_NORMAL
- en: After that, we used the **Blazor WebAssembly App Empty** project template to
    create a new project. We installed `Bootstrap` to style the frontend. We added
    a `Store` component to the project and demonstrated that the application state
    is lost when we navigate between pages. To maintain the application’s state, we
    registered the `CartService` service in the DI container. Finally, we demonstrated
    that by using the `AppState` pattern, we can maintain the shopping cart’s state.
  prefs: []
  type: TYPE_NORMAL
- en: We can apply our new skills with DI to maintain the application state for any
    Blazor WebAssembly app.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will build a Kanban board using events.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following questions are provided for your consideration:'
  prefs: []
  type: TYPE_NORMAL
- en: Can `localStorage` be used to maintain the cart’s state when the page is reloaded?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why don’t we need to call the `StateHasChanged` method in the `Store` component?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How would you update the cart to allow for the addition of more than one of
    each type of product at a time?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When using DI, what is the difference between the various service lifetimes?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following resources provide more information concerning the topics covered
    in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: For more information on DI, refer to [https://learn.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-7.0](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-7.0).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more information on events, refer to [https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/events/](https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/events/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Join our community on Discord
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Join our community’s Discord space for discussions with the author and other
    readers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/BlazorWASM2e](https://packt.link/BlazorWASM2e)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Discord_QR.png)'
  prefs: []
  type: TYPE_IMG
