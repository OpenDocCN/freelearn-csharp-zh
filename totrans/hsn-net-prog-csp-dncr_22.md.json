["```cs\nGET /some/resource HTTP/1.1\n```", "```cs\n512|1|32\n```", "```cs\ndotnet new console -n CustomProtocolDemo\n```", "```cs\npublic class RockWebRequest : WebRequest {\n    public override Uri RequestUri { get; }\n    ...\n\n    public RockWebRequest(Uri uri) {\n        RequestUri = uri;\n    }\n```", "```cs\npublic enum RockVerb {\n    Delete = 0b00000000000000000000000000000000,\n    Insert = 0b01000000000000000000000000000000,\n    Update = 0b10000000000000000000000000000000\n}\n```", "```cs\npublic RockVerb Verb { get; set; } = RockVerb.Update;\npublic IEnumerable<string> Records { get; set; }\npublic long Fields { get;set; }\n```", "```cs\npublic override WebResponse GetResponse() {\n    var messageString = ConcatenateRecords();\n    var message = Encoding.ASCII.GetBytes(messageString);\n```", "```cs\nprivate string ConcatenateRecords() {\n    StringBuilder messageBuilder = new StringBuilder();\n    foreach (var record in Records) {\n        if (messageBuilder.ToString().Length > 0) {\n            messageBuilder.Append(Environment.NewLine);\n        }\n        messageBuilder.Append(record);\n    }\n    return messageBuilder.ToString();\n}\n```", "```cs\nvar byteList = new List<byte>();\n\nvar checksum = SHA256.Create().ComputeHash(message);\n\nbyteList.AddRange(GetHeaderBytes(message.Length));\nbyteList.AddRange(checksum);\nbyteList.AddRange(message);\n```", "```cs\nprivate IEnumerable<byte> GetHeaderBytes(int messageSize) {\n    var headerBytes = new List<byte>();\n    int verbAndSize = (int)Verb | (messageSize >> 2);\n    headerBytes.AddRange(BitConverter.GetBytes(verbAndSize));\n\n    //Add empty byte padding in the FIELDS header\n    for (var i = 0; i < 20; i++) {\n        headerBytes.Add(0b00000000);\n    }\n\n    headerBytes.AddRange(BitConverter.GetBytes(Fields));\n    return headerBytes;\n}\n```", "```cs\n    TcpClient client = new TcpClient(RequestUri.Host, RequestUri.Port);\n    var stream = client.GetStream();\n    stream.Write(byteList.ToArray(), 0, byteList.Count);\n    return new RockWebResponse(stream);\n}\n```", "```cs\npublic class RockWebResponse : WebResponse {\n    private Stream _responseStream { get; set; }\n    public DateTime TimeStamp { get; set; }\n    public RockStatus Status { get; set; }\n    public int Size { get; set; }\n\n    public RockWebResponse(Stream responseStream) {\n        _responseStream = responseStream;\n\n        byte[] header = new byte[4];\n        _responseStream.Read(header, 0, 4);\n        var isValid = ValidateHeaders(header);\n    }\n\n    public Stream GetResponseStream() {\n        return _responseStream;\n    }\n\n    private bool ValidateHeaders(byte[] header) {\n        //validate headers\n        return true;\n    }\n}\n```", "```cs\npublic class RockWebRequestCreator : IWebRequestCreate {\n    public WebRequest Create(Uri uri) {\n        return new RockWebRequest(uri);\n    }\n}\n```", "```cs\nWebRequest.RegisterPrefix(\"dtrj\", new RockWebRequestCreator());\n```"]