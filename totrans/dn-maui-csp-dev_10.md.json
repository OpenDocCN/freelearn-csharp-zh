["```cs\nusing CommunityToolkit.Mvvm.ComponentModel;\nnamespace ForgetMeNotDemo.Model;\n[ObservableObject]\npublic partial class Invitation\n{\n  [ObservableProperty] private string buddyCode;\n  [ObservableProperty] private int buddyId;\n}\n```", "```cs\n[ObservableObject]\npublic partial class Occasion\n{\n  [ObservableProperty] private string name;\n  [ObservableProperty] private DateTime date;\n  [ObservableProperty] private int numDaysToNotify;\n}\n```", "```cs\n[ObservableObject]\npublic partial class User\n{\n  [ObservableProperty] private string name;\n  [ObservableProperty] private string id;    [1]\n  [ObservableProperty] private List<Buddy> buddies; [2]\n  [ObservableProperty] private List<Invitation>\n    invitations; [3]\n  [ObservableProperty] private List<Preference>\n    preferences; [4]\n```", "```cs\npublic partial class Buddy : User\n{\n  [ObservableProperty] private string emailAddress;\n  [ObservableProperty] private string? phoneNumber;\n  [ObservableProperty] private string? mailingAddressLine1;\n  [ObservableProperty] private string? mailingAddressLine2;\n  [ObservableProperty] private string? website;\n  [ObservableProperty] private string? twitter;\n  [ObservableProperty] private string? facebook;\n  [ObservableProperty] private string? instagram;\n  [ObservableProperty] private string? linkedIn;\n  [ObservableProperty] private string? venmoName;\n  [ObservableProperty] private InvitationStatus status;\n  [ObservableProperty] private List<OccasionModel>\n    occasions;\n  [ObservableProperty] private DateTime buddySince;\n}\n```", "```cs\npublic class User\n{\n    public Guid Id { get; set; }\n    public string FullName { get; set; }\n    public string Email { get; set; }\n    public string HashedPassword { get; set; }\n    public bool IsEmailConfirmed { get; set; }\n    public string Role { get; set; }\n    public List<UserPreference> Preferences { get; set; }\n}\n```", "```cs\npublic static class Roles\n{\n    public static string Admin = \"admin\";\n    public static string User = \"user\";\n}\n```", "```cs\npublic class UserPreference\n{\n    public string PreferencePrompt { get; set; }\n    public string PreferenceValue { get; set; }\n}\n```", "```cs\npublic class Invite\n{\n    public Invite()\n    {\n        Id = Guid.NewGuid();\n    }\n    public Guid Id { get; set; }\n    public User CreatedByUser { get; set; }\n    public User? AcceptedByUser { get; set; }\n    public InvitationStatus Status { get; set; }\n    public DateTime CreationDate { get; set; }\n    public DateTime? EndDate { get; set; }\n    public string InvitedUserName { get; set; }\n    public string InvitedUserCustomMessage { get; set; }\n}\n```", "```cs\npublic enum InvitationStatus\n {\n     Waiting,\n     Expired,\n     Accepted,\n     Rejected\n }\n```", "```cs\npublic class Occasion\n{\n    public Occasion()\n    {\n        Id = Guid.NewGuid();\n    }\n    public Guid Id { get; set; }\n    public User? ForUser { get; set; }\n    public string? OccasionName { get; set; }\n    public DateTime Date { get; set; }\n    public int NumDaysToNotify { get; set; }\n}\n```", "```cs\npublic class Related\n{\n    public Related()\n    {\n        Occasions = new List<Occasion>();\n        Users = new List<User>();\n    }\n    public Guid Id { get; set; }\n    public string RelatedDescription { get; set; }\n    public List<User> Users { get; set; }\n    public List<Occasion> Occasions { get; set; }\n    public DateTime Since { get; set; }\n}\n```", "```cs\nusing ForgetMeNot.Api.Domain;\nnamespace ForgetMeNot.Api.Dto\n{\n    public class BuddyDto\n    {\n        public BuddyDto()\n        {\n        }\n        public BuddyDto(User user)\n        {\n            UserId = user.Id;\n            FullName = user.FullName;\n            Email = user.Email;\n            Preferences = new List<UserPreference>();\n            if (user.Preferences?.Any(p =>\n                p.PreferenceValue != null) ?? false)\n            {\n                Preferences = user.Preferences.Where(p =>\n                    p.PreferenceValue != null).ToList();\n            }\n            Occasions = new List<OccasionDto>();\n        }\n        public Guid UserId { get; set; }\n        public string FullName { get; set; }\n        public string Email { get; set; }\n        public List<UserPreference> Preferences { get; set; }\n        public List<OccasionDto> Occasions { get; set; }\n    }\n}\n```", "```cs\npublic class AccountCreateRequest\n{\n    public string FullName { get; set; }\n    public string Email { get; set; }\n    public string PlainPassword { get; set; }\n}\n```", "```cs\npublic class UserResponse\n{\n  public Guid Id { get; set; }\n  public string FullName { get; set; }\n  public string Email { get; set; }\n  public bool IsEmailConfirmed { get; set; }\n  public string Role { get; set; }\n  public List<UserPreference> Preferences { get; set; }\n  public UserResponse()\n  {\n  }\n  public UserResponse(User user)\n  {\n    Id = user.Id;\n    FullName = user.FullName;\n    Email = user.Email;\n    Role = user.Role;\n    IsEmailConfirmed = user.IsEmailConfirmed;\n    Preferences = user.Preferences;\n  }\n}\n```", "```cs\npublic class ProfileResponse\n{\n  public Guid Id { get; set; }\n  public string FullName { get; set; }\n  public string Email { get; set; }\n  public bool IsEmailConfirmed { get; set; }\n  public string Role { get; set; }\n  public List<UserPreference> Preferences { get; set; }\n  public ProfileResponse(User user)\n  {\n    Id = user.Id;\n    FullName = user.FullName;\n    Email = user.Email;\n    Role = user.Role;\n    IsEmailConfirmed = user.IsEmailConfirmed;\n    Preferences = user.Preferences;\n  }\n}\n```", "```cs\npublic class Client\n{\n    RestClient client; [1]\n    string baseUrl;   [2]\n    string username;   [3]\n    string password;\n```", "```cs\npublic Client(string baseUrl)\n{\n    this.baseUrl = baseUrl;\n    SetClient();\n}\nvoid SetClient()\n{\n    var options = new RestClientOptions(baseUrl)  [1]\n    {\n        ThrowOnAnyError = false,\n        MaxTimeout = 10000\n    };\n    client = new RestClient(options); [2]\n}\n```", "```cs\npublic async Task Login(LoginRequest request)\n{\n    username = request.Username;\n    password = request.Password;\n    await Authenticate();\n}\n```", "```cs\nasync Task Authenticate()\n{\n    var request = new RestRequest(\"auth/gettoken\");\n    request.AddBody(new { username, password });\n    var accessToken = await client.PostAsync<string>\n        (request);\n    client.Authenticator = new OAuth2Authorization\n        RequestHeaderAuthenticator(accessToken, \"Bearer\");\n}\n```", "```cs\npublic Task<string?> Version()\n{\n    var request = new RestRequest(\"util/version\");\n    return client.GetAsync<string?>(request);\n}\n```", "```cs\npublic Task<ProfileResponse?> GetProfile()\n{\n    var request = new RestRequest(\"profile/me\");\n    return client.GetAsync<ProfileResponse?>(request);\n}\n```", "```cs\npublic Task UpdateProfile(ProfileUpdateRequest\n    profileUpdateRequest)\n{\n    var request = new RestRequest(\"profile/me\");\n    request.AddBody(profileUpdateRequest);\n    return client.PutAsync(request);\n}\n```", "```cs\npublic Task<List<BuddyDto>?> GetBuddy()\n{\n    var request = new RestRequest(\"buddy\");\n    return client.GetAsync<List<BuddyDto>?>(request);\n}\n```", "```cs\npublic Task<Guid?> CreateInvitation(InviteCreateRequest\n  inviteCreateRequest)\n{\n    var request = new RestRequest(\"buddy/invite\");\n    request.AddBody(inviteCreateRequest);\n    return client.PostAsync<Guid?>(request);\n}\n```", "```cs\npublic Task<List<UserResponse>?> GetUserList()\n{\n    var request = new RestRequest(\"user\");\n    return client.GetAsync<List<UserResponse>?>(request);\n}\n```", "```cs\npublic App(LoginViewModel loginViewModel) [1]\n{\n  InitializeComponent();\n  MainPage = new LoginPage(loginViewModel); [2]\n}\n```", "```cs\nRouting.RegisterRoute(\"createaccount\",\n  typeof(CreateAccountPage));\n```", "```cs\nusing CommunityToolkit.Maui.Core.Views;\nusing ForgetMeNotDemo.ViewModel;\nnamespace ForgetMeNotDemo.View;\npublic partial class LoginPage : ContentPage\n{\n  public LoginPage(LoginViewModel viewModel)\n  {\n    BindingContext = viewModel;\n    InitializeComponent();\n  }\n}\n```", "```cs\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<ContentPage\n    x:Class=\"ForgetMeNot.View.LoginPage\"\n    xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n    xmlns:iOsSpecific=\"clr-namespace:Microsoft.Maui\n      .Controls.PlatformConfiguration.iOSSpecific;\n        assembly=Microsoft.Maui.Controls\"\n    Title=\"Login\"\n    iOsSpecific:Page.UseSafeArea=\"True\"\n    Shell.NavBarIsVisible=\"False\"\n    Shell.PresentationMode=\"ModalAnimated\">\n    <ContentPage.Resources>\n        <ResourceDictionary>\n            <Style x:Key=\"Prompt\" TargetType=\"Label\">   [1]\n              <Setter Property=\"TextColor\" Value=\"Black\" />\n              <Setter Property=\"FontSize\" Value=\"Medium\" />\n              <Setter Property=\"FontAttributes\"\n                  Value=\"Bold\" />\n                <Setter Property=\"HorizontalTextAlignment\"\n                  Value=\"Center\" />\n                <Setter Property=\"VerticalTextAlignment\"\n                  Value=\"Center\" />\n                <Setter Property=\"VerticalOptions\"\n                  Value=\"Center\" />\n                <Setter Property=\"HorizontalOptions\"\n                  Value=\"End\" />\n            </Style>\n            <Style x:Key=\"LoginButton\" TargetType=\"Button\">\n              <Setter Property=\"BackgroundColor\"\n                Value=\"LightGray\" />\n              <Setter Property=\"Margin\" Value=\"0,20,0,0\" />\n              <Setter Property=\"TextColor\" Value=\"Black\" />\n             <Setter Property=\"WidthRequest\" Value=\"125\" />\n            </Style>\n        </ResourceDictionary>\n    </ContentPage.Resources>\n```", "```cs\n<VerticalStackLayout>\n        <Grid\n            ColumnDefinitions=\"*,*,*\"\n            RowDefinitions=\"Auto,Auto,Auto,Auto\"\n            RowSpacing=\"10\">\n            <Label\n                Grid.Row=\"0\"\n                Grid.Column=\"0\"\n                Style=\"{StaticResource Prompt}\"\n                Text=\"User name\" />\n            <Entry\n                Grid.Row=\"0\"\n                Grid.Column=\"1\"\n                Grid.ColumnSpan=\"2\"\n                Placeholder=\"User name\"\n                Text=\"{Binding LoginName}\"\n                WidthRequest=\"150\" />\n            <Label\n                Grid.Row=\"1\"\n                Grid.Column=\"0\"\n                HorizontalOptions=\"End\"\n                Style=\"{StaticResource Prompt}\"\n                Text=\"Password\" />\n            <Entry\n                Grid.Row=\"1\"\n                Grid.Column=\"1\"\n                Grid.ColumnSpan=\"2\"\n                IsPassword=\"True\"\n                Placeholder=\"Password\"\n                Text=\"{Binding Password}\"\n                WidthRequest=\"150\" />\n            <Button\n                Grid.Row=\"2\"\n                Grid.Column=\"0\"\n                Command=\"{Binding DoLoginCommand}\"\n                Style=\"{StaticResource LoginButton}\"\n                Text=\"Submit\" />  [2]\n```", "```cs\n             <Button\n                Grid.Row=\"2\"\n                Grid.Column=\"1\"\n                Command=\"{Binding DoCreateAccountCommand}\"\n                Style=\"{StaticResource LoginButton}\"\n                Text=\"Create Account\" /> [3]\n            <Button\n                Grid.Row=\"2\"\n                Grid.Column=\"2\"\n                BackgroundColor=\"LightGray\"\n                Command=\"{Binding ForgotPasswordCommand}\"\n                Style=\"{StaticResource LoginButton}\"\n                Text=\"Forgot Password\" /> [4]\n        </Grid>\n        <ActivityIndicator  [6]\n            x:Name=\"activityIndicator\"\n            HeightRequest=\"50\"\n            IsRunning=\"{Binding ShowActivityIndicator}\"\n            Color=\"Blue\" />\n    </VerticalStackLayout>\n</ContentPage>\n```", "```cs\nusing ForgetMeNot.Api.Dto;\nusing ForgetMeNot.ApiClient;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nnamespace ForgetMeNotDemo.Services\n{\n  public class AccountService : IAccountService\n  {\n    readonly Client apiClient;\n    public AccountService(Client apiClient)\n    {\n      this.apiClient = apiClient;\n    }\n    public async Task CreateAccount(AccountCreateRequest\n      accountCreateRequest)\n    {\n      await apiClient.CreateAccount(accountCreateRequest);\n    }\n    public async Task GetNewPassword()\n    {\n    }\n    public async Task Login(LoginRequest request)\n    {\n      await apiClient.Login(request);\n    }\n    public bool IsLoggedIn()\n    {\n      return apiClient.IsAuthenticated;\n    }\n  }\n}\n```", "```cs\nusing CommunityToolkit.Mvvm.ComponentModel;\nusing CommunityToolkit.Mvvm.Input;\nusing ForgetMeNot.API.Dto;\nusing ForgetMeNotDemo.Services;\nusing ForgetMeNotDemo;\nnamespace ForgetMeNotDemo.ViewModel\n{\n  [ObservableObject]\n  public partial class LoginViewModel\n  {\n    private AccountService;           [1]\n    [ObservableProperty] private string loginName;\n    [ObservableProperty] private string password;\n    [ObservableProperty] private bool showActivityIndicator\n      = false;\n```", "```cs\n    public LoginViewModel(AccountService accountService)\n      [2]\n    {\n      this.accountService = accountService;\n    }\n    [RelayCommand]\n    public async Task DoLogin()\n    {\n      try\n      {\n        LoginRequest loginRequest = new LoginRequest [3]\n        {\n          Username = LoginName,\n          Password = Password\n        };\n```", "```cs\n        ShowActivityIndicator = true;\n        await accountService.Login(loginRequest); [4]\n        ShowActivityIndicator = false;\n        if (accountService.IsLoggedIn()) [5]\n        {\n          Application.Current.MainPage = new AppShell();\n          await Shell.Current.GoToAsync(\"mainpage\");\n        }\n        else [6]\n        {\n          await Application.Current.MainPage.DisplayAlert\n            (\"Login failure\",\n              \"Your username and password do not match our\n                records\", \"Ok\");\n        }\n      }\n      catch (Exception exception)\n      {\n        await Application.Current.MainPage.DisplayAlert\n          (\"Authorization failure\",\n            \"Your username and password do not match our\n              records\", \"Ok\");\n        Console.WriteLine(exception);\n      }\n```", "```cs\n    }\n    [RelayCommand]\n    public async Task ForgotPassword()\n    {\n[7]\n    }\n```", "```cs\n    [RelayCommand]\n    public async Task DoCreateAccount() [8]\n    {\n      try\n      {\n        Application.Current.MainPage = new AppShell();\n        await Shell.Current.GoToAsync($\"createaccount\");\n      }\n      catch (Exception e)\n      {\n        Console.WriteLine(e);\n      }\n    }\n  }\n}\n```", "```cs\npublic class LoginRequest\n{\n    public string Username { get; set; }\n    public string Password { get; set; }\n}\n```", "```cs\npublic async Task Login(LoginRequest request) [1]\n{\n  await apiClient.Login(request);\n}\npublic bool IsLoggedIn() [2]\n{\n  return apiClient.IsAuthenticated;\n}\n```", "```cs\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<ContentPage\n    x:Class=\"ForgetMeNotDemo.View.CreateAccountPage\"\n    xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n    xmlns:behaviors=\"http://schemas.microsoft.com/dotnet/\n      2022/maui/toolkit\"\n    Title=\"CreateAccount\">\n    <VerticalStackLayout>\n        <Entry\n            HorizontalOptions=\"FillAndExpand\"\n            Keyboard=\"Text\"\n            Placeholder=\"Enter Name\"\n            Text=\"{Binding Name}\">\n            <Entry.Behaviors>\n                <behaviors:UserStoppedTypingBehavior\n                Command=\"{Binding  ValidateNameCommand}\"\n                StoppedTypingTimeThreshold=\"500\" />  [1]\n            </Entry.Behaviors>\n        </Entry>\n```", "```cs\n        <Label\n            FontSize=\"13\"\n            IsVisible=\"{Binding ShowNameErrorMessage}\"\n              [1]\n            Text=\"{Binding NameErrorMessage}\"\n            TextColor=\"Red\" />\n        <Entry\n            HorizontalOptions=\"FillAndExpand\"\n            Keyboard=\"Email\"\n            Placeholder=\"Enter Email\"\n            Text=\"{Binding Email}\">\n            <Entry.Behaviors>\n                <behaviors:UserStoppedTypingBehavior\n                  Command=\"{Binding ValidateEmailCommand}\"\n                    StoppedTypingTimeThreshold=\"500\" />\n                      [2]\n            </Entry.Behaviors>\n        </Entry>\n```", "```cs\n        <Label\n            FontSize=\"13\"\n            IsVisible=\"{Binding ShowEmailErrorMessage}\"\n            Text=\"{Binding EmailErrorMessage}\"\n            TextColor=\"Red\" />\n        <Entry\n            HorizontalOptions=\"FillAndExpand\"\n            IsPassword=\"True\"   [1]\n            Keyboard=\"Default\"\n            Placeholder=\"Enter Password\"\n            Text=\"{Binding Password}\">\n            <Entry.Behaviors>\n                <behaviors:UserStoppedTypingBehavior\n                Command=\"{Binding ValidatePasswordCommand}\"\n                  StoppedTypingTimeThreshold=\"500\" />\n            </Entry.Behaviors>\n        </Entry>\n        <Label\n            FontSize=\"13\"\n            IsVisible=\"{Binding ShowPasswordErrorMessage}\"\n            Text=\"{Binding PasswordErrorMessage}\"\n            TextColor=\"Red\" />\n        <Button\n            Margin=\"0,30,0,0\"\n            BackgroundColor=\"LightGray\"\n            Command=\"{Binding SignUpCommand}\" [2]\n            CornerRadius=\"5\"\n            HorizontalOptions=\"Center\"\n            IsEnabled=\"{Binding EnableButton}\"\n            Text=\"Sign up\"\n            TextColor=\"Black\"\n            TextTransform=\"None\"\n            WidthRequest=\"100\" />\n    </VerticalStackLayout>\n</ContentPage>\n```", "```cs\n[ObservableProperty] accountService;\n[ObservableProperty] private string name;\n[ObservableProperty] private string email;\n[ObservableProperty] private string password;\n[ObservableProperty] private string nameErrorMessage;\n[ObservableProperty] private string emailErrorMessage;\n[ObservableProperty] private string passwordErrorMessage;\n[ObservableProperty] private bool showNameErrorMessage;\n[ObservableProperty] private bool showEmailErrorMessage;\n[ObservableProperty] private bool showPasswordErrorMessage;\n[ObservableProperty] private bool enableButton;\n[ObservableProperty] private bool isValidName;\n[ObservableProperty] private bool isValidEmail;\n[ObservableProperty] private bool isValidPassword;\n```", "```cs\nvar apiClient = new Client(\"https://forgetmenotapi\n  20230113114628.azurewebsites.net/\");\nbuilder.Services.AddSingleton(apiClient);\nbuilder.Services.AddTransient<AccountService>();\n```", "```cs\npublic CreateAccountViewModel(AccountService\n  accountService)\n{\n  this.accountService = accountService;\n}\n```", "```cs\n[RelayCommand]\npublic Task ValidateName()\n{\n  if (!string.IsNullOrEmpty(Name) && Name.Length >= 2)\n  {\n    IsValidName = true;\n    ShowNameErrorMessage = false;\n    EnableButton = IsValidName && IsValidEmail &&\n      IsValidPassword; [1]\n  }\n  else\n  {\n    NameErrorMessage = \"*Please enter a name with at least\n      two characters\";\n    IsValidName = false;\n    ShowNameErrorMessage = true;  [2]\n    EnableButton = IsValidName && IsValidEmail &&\n      IsValidPassword;\n  }\n  return Task.CompletedTask;\n}\n```", "```cs\npublic class AccountCreateRequest\n{\n    public string FullName { get; set; }\n    public string Email { get; set; }\n    public string PlainPassword { get; set; }\n}\n```", "```cs\n[RelayCommand]\nasync Task SignUp()\n{\n  if (EnableButton)\n  {\n    AccountCreateRequest = new() [1]\n    {\n      Email = this.Email,\n      FullName = Name,\n      PlainPassword = Password\n    };\n    try\n    {\n      await accountService.CreateAccount\n        (accountCreateRequest); [2]\n      await Application.Current.MainPage.DisplayAlert(\n        \"Sign up  completed\",\n          \"Your user has been created successfully\", \"Ok\");\n            [3]\n      await Shell.Current.GoToAsync(\"..\"); [4]\n    }\n    catch (Exception e)\n    {\n      await Application.Current.MainPage.DisplayAlert(\"Sign\n        up failed\",\n          \"We were not able to create an account with that\n            user name\", \"Ok\");\n    }\n  }\n}\n```"]