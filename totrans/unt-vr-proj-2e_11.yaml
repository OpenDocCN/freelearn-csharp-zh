- en: Animation and VR Storytelling
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动画和VR叙事
- en: The stories we tell, and how we tell them, say a lot about who we are and what
    we will become. Storytelling between humans is as primal as any human activity,
    the basis of interpersonal communications, mythology, historical record, entertainment,
    and all of the arts. VR is emerging as one of the newest, and potentially most
    profound, storytelling media formats.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讲述的故事以及我们讲述故事的方式，在很大程度上反映了我们是谁以及我们将成为什么样的人。人类之间的叙事与任何人类活动一样原始，是人际交流、神话、历史记录、娱乐以及所有艺术的基础。VR正在成为最新且可能最深刻的叙事媒体格式之一。
- en: In the previous chapter, we looked at 360-degree media, which itself is becoming
    its own form of VR storytelling, especially for nonfictional documentary, capable
    of transmitting human experience and creating immersive empathy for humanitarian
    crises. Many of the tools and lessons we cover in this chapter can also be used
    with 360 media, but we're going to focus on 3D computer graphics and animation
    here.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们探讨了360度媒体，它本身正在成为VR叙事的一种新形式，尤其是对于非虚构纪录片，能够传递人类经验并为人道主义危机创造沉浸式同理心。我们在这章中涵盖的许多工具和课程也可以用于360度媒体，但我们将重点关注3D计算机图形和动画。
- en: For this project, we are going to create a little VR experience, a simplistic
    story about a bird who gains its wings and learns to fly.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个项目，我们将创建一个简单的VR体验，一个关于一只鸟获得翅膀并学会飞翔的简单故事。
- en: 'In this chapter, we are going to learn about the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习以下主题：
- en: Importing and using external models and animations
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导入和使用外部模型和动画
- en: Using Unity Timelines to activate and animate objects
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Unity时间线激活和动画化对象
- en: Using the Animation editor window for editing property keyframes
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用动画编辑器窗口编辑属性关键帧
- en: Controlling Animation Clips with an Animation Controller
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用动画控制器控制动画片段
- en: Making the story interactive
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使故事互动
- en: Composing our story
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写我们的故事
- en: '*You start in a dark scene and notice a small sapling in the ground in front
    of you. It starts to grow into a tree. As dawn breaks, a bird''s nest appears,
    and we notice it has an egg in it. The egg begins to shake, and then hatches.
    A baby bird emerges, hops around, grows, and tests its wings. Finally, in daylight,
    it flies away to freedom.*'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*你开始在一个黑暗的场景中，注意到你面前地上有一棵小树苗。它开始长成一棵树。随着黎明的到来，一个鸟巢出现在我们面前，我们注意到里面有一个蛋。蛋开始晃动，然后孵化。一只小鸟破壳而出，四处跳跃，成长，并测试它的翅膀。最后，在白天，它飞向自由。*'
- en: Our story is about birth, growth, spreading your wings (literally and figuratively),
    and moving on. We will start with a music soundtrack and animate our graphics
    based on its parts.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的故事是关于出生、成长、展开翅膀（字面和比喻意义上的），以及前进。我们将从一个音乐配乐开始，并根据其部分来动画化我们的图形。
- en: We are using free, off-the-shelf assets. Of course, you can use your own music
    and graphics, but we'll assume you're following along using the ones we have selected,
    which are all available online for free (links are given). As an instructive project,
    it's minimalistic and not embellished with effects that one might expect of a
    polished product. But you'd be very proud of your 9-year old cousin or nephew
    if they made it!
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在使用免费现成的资产。当然，你可以使用你自己的音乐和图形，但我们将假设你正在跟随我们选择的资产进行操作，这些资产都可以在网络上免费获得（链接将在下面提供）。作为一个教学项目，它简约而不加装饰，没有添加一个精良产品可能期望的效果。但如果你9岁的表亲或侄子制作了这个项目，你一定会感到非常自豪！
- en: 'The soundtrack we will use is a rendition of The Beatles and Paul McCartney
    song, "Blackbird". (A download link is in the next section, and a copy is included
    with the files for this chapter for convenience.) Based on our mp3 recording of
    the song, we sketched out a rough timeline plan of our VR experience on a chart,
    shown here:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用的配乐是披头士乐队和保罗·麦卡特尼的歌曲《黑鸟》的演绎版本。（下载链接将在下一节中提供，并且为了方便，本章文件中包含了一份副本。）基于我们对这首歌的mp3录音，我们在图表上草拟了我们的VR体验的大致时间线计划，如下所示：
- en: '![](img/cac93114-28f5-41b7-871f-7af56d20d5a7.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/cac93114-28f5-41b7-871f-7af56d20d5a7.png)'
- en: As indicated, the entire song is 165 seconds (2:45).  It starts with a 35-second
    instrumental intro, then verse one and verse two (also 35 seconds), a 25-second
    instrumental, and then verse three is 35 seconds. We'll use this to divide our
    story into five segments.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如所示，整首歌时长为165秒（2分45秒）。它以35秒的器乐前奏开始，然后是第一段和第二段（也是35秒），接着是一个25秒的器乐部分，然后第三段是35秒。我们将利用这一点将我们的故事分为五个部分。
- en: Plenty of other features ought to be planned out as well. The scene lighting,
    for example, will start in the dark of night and gradually lighten the sky into
    dawn and then daytime.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 还应该计划出许多其他功能。例如，场景照明将从夜晚的黑暗逐渐变亮，直到黎明和白天。
- en: Gathering the assets
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 收集资源
- en: 'As mentioned, we''re going to build our story from a variety of sources of
    free and simplistic assets. I recommend you download and install each of them
    now (or your own substitutions) so they''re accessible as we work:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们将从各种免费和简单的资源中构建我们的故事。我建议你现在下载并安装每个资源（或你自己的替代品），以便我们在工作时可以访问它们：
- en: 'Music: The Beatles and Paul McCartney song, "Blackbird" performed by guitarist
    Salvatore Manalo. Mp3 download:  [http://mp3freeget4.online/play/the-beatles-paul-mccartney-blackbird-cover/chSrubUUdwc.html](http://mp3freeget4.online/play/the-beatles-paul-mccartney-blackbird-cover/chSrubUUdwc.html)'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 音乐：由吉他手Salvatore Manalo演奏的披头士乐队和保罗·麦卡特尼的歌曲 "Blackbird"。MP3下载：[http://mp3freeget4.online/play/the-beatles-paul-mccartney-blackbird-cover/chSrubUUdwc.html](http://mp3freeget4.online/play/the-beatles-paul-mccartney-blackbird-cover/chSrubUUdwc.html)
- en: Scene and tree: Nature Starter Kit, [https://assetstore.unity.com/packages/3d/environments/nature-starter-kit-1-49962](https://assetstore.unity.com/packages/3d/environments/nature-starter-kit-1-49962)
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 场景和树木：自然入门套件，[https://assetstore.unity.com/packages/3d/environments/nature-starter-kit-1-49962](https://assetstore.unity.com/packages/3d/environments/nature-starter-kit-1-49962)
- en: 'Nest and egg: Use the `NestAndEgg` prefab file provided with this book (source:
    tutorial using Cinema 4D: [https://www.youtube.com/watch?v=jzoNZslTQfI](https://www.youtube.com/watch?v=jzoNZslTQfI)
    , .c4d file download, [https://yadi.sk/d/ZQep-K-AMKAc8](https://yadi.sk/d/ZQep-K-AMKAc8))'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 鸟巢和鸡蛋：使用本书提供的 `NestAndEgg` 预制件文件（来源：使用Cinema 4D的教程：[https://www.youtube.com/watch?v=jzoNZslTQfI](https://www.youtube.com/watch?v=jzoNZslTQfI)，.c4d文件下载，[https://yadi.sk/d/ZQep-K-AMKAc8](https://yadi.sk/d/ZQep-K-AMKAc8)）
- en: 'Living Birds: [https://assetstore.unity.com/packages/3d/characters/animals/living-birds-15649](https://assetstore.unity.com/packages/3d/characters/animals/living-birds-15649)'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生活鸟类：[https://assetstore.unity.com/packages/3d/characters/animals/living-birds-15649](https://assetstore.unity.com/packages/3d/characters/animals/living-birds-15649)
- en: Wispy Skybox: [https://assetstore.unity.com/packages/2d/textures-materials/sky/wispy-skybox-21737 ](https://assetstore.unity.com/packages/2d/textures-materials/sky/wispy-skybox-21737)
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 薄雾天空盒：[https://assetstore.unity.com/packages/2d/textures-materials/sky/wispy-skybox-21737](https://assetstore.unity.com/packages/2d/textures-materials/sky/wispy-skybox-21737)
- en: Note that the nest and egg object we are using is modified from the one found
    online. That was in `.c4d` format, and we have converted it to `.fbx`, packaged
    them into a prefab, and made a few other changes.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们使用的鸟巢和鸡蛋对象是从网上找到的修改版本。它原本是 `.c4d` 格式，我们将其转换为 `.fbx`，打包成预制件，并做了一些其他修改。
- en: Creating the initial scene
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建初始场景
- en: 'We''re going to make a simple, minimalist scene using a plane for the ground
    and some rocks from the Nature Starter Kit, a bird''s nest with an egg, and a
    bird:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用一个飞机作为地面和一些来自《Nature Starter Kit》的自然岩石，一个带有鸡蛋的鸟巢和一只鸟来制作一个简单、极简的场景：
- en: Create a new scene (File | New Scene) and name it "Blackbird" (File | Save Scene
    As)
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的场景（文件 | 新场景）并将其命名为 "Blackbird"（文件 | 保存场景为）
- en: Create a 3D Plane named `GroundPlane`, reset its Transform, then Scale it to
    (`10, 10, 10`)
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `GroundPlane` 的3D平面，重置其变换，然后将其缩放到 (`10, 10, 10`)
- en: Create a new Material named `GroundMaterial`, set its Albedo color to an earthy
    brown (such as `#251906ff`), and drag the material onto the plane
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的材质 `GroundMaterial`，将其Albedo颜色设置为土色棕色（例如 `#251906ff`），并将材质拖放到平面上
- en: Set the Main Camera Position to (`0, 2, -3`)
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置主摄像机位置为 (`0, 2, -3`)
- en: You can replace `Main Camera` with the `MeMyselfEye` camera rig we've been using
    throughout the book, but it is not necessary in this project as we will not be
    using device-specific input or other features. The `Main Camera` will provide
    a sufficient VR camera based on the SDK you've selected in Player Settings.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以用我们全书一直在使用的 `MeMyselfEye` 摄像机装置替换 `Main Camera`，但在这个项目中不是必需的，因为我们不会使用特定设备的输入或其他功能。`Main
    Camera` 将根据你在玩家设置中选择的SDK提供足够的VR摄像机。
- en: We are using a simple ground plane, as it gives the aesthetic we want. But this
    could be a good opportunity for you to explore the Unity Terrain system. This
    is another rich and very powerful topic, where you can "paint" complex landscapes
    with trees and grasses. See the manual at [https://docs.unity3d.com/Manual/script-Terrain.html](https://docs.unity3d.com/Manual/script-Terrain.html).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在使用一个简单的地面平面，因为它给出了我们想要的美学效果。但这可能是一个探索 Unity 地形系统的良好机会。这是一个另一个丰富且非常强大的主题，你可以用树木和草地“绘制”复杂的景观。请参阅手册[https://docs.unity3d.com/Manual/script-Terrain.html](https://docs.unity3d.com/Manual/script-Terrain.html)。
- en: 'Now, add a tree and some rocks:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，添加一棵树和一些石头：
- en: From the `Assets/NatureStarterKit/Models/` folder, drag the Tree into the scene.
    Reset its Transform, so it's at the origin.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `Assets/NatureStarterKit/Models/` 文件夹中，将树拖入场景。重置其变换，使其位于原点。
- en: Add a few rocks near the tree, move them so they're partially buried below the
    ground. You might put these under an Empty game object named `Environment`.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在树附近添加几块石头，将它们移动到部分埋在地下。你可能将这些石头放在名为 `Environment` 的空游戏对象下。
- en: Add a Wind Zone (Create | 3D Object | WindZone) , so the Tree object responds
    to wind and rustles its leaves.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个风区（创建 | 3D 对象 | WindZone），使树对象对风做出反应并使树叶沙沙作响。
- en: 'The rocks in my scene are placed as follows (all at Scale `100`):'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我场景中的石头放置如下（所有都在缩放 `100`）：
- en: '| Prefab | Position |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| 预制体 | 位置 |'
- en: '| --- | --- |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `rock03` | `(2.9, -0.6, -0.26)` |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| `rock03` | `(2.9, -0.6, -0.26)` |'
- en: '| `rock03` | `(2.6, -0.7, -3.6)` |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| `rock03` | `(2.6, -0.7, -3.6)` |'
- en: '| `rock04` | `(2.1, -0.65, -3.1)` |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `rock04` | `(2.1, -0.65, -3.1)` |'
- en: '| `rock01` | `(-6, -3.4, -0.6)` |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| `rock01` | `(-6, -3.4, -0.6)` |'
- en: '| `rock04` | `(-5, -0.7, 3.8)` |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| `rock04` | `(-5, -0.7, 3.8)` |'
- en: 'Next, we''ll add the nest:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将添加巢：
- en: Drag a copy of the NestAndEgg model into the scene.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 NestAndEgg 模型的副本拖入场景中。
- en: Scale and Position it on the ground so it's in easy view, near the tree, and
    not too small. We chose Position (`0.5, 0.36, -1.2`) and Scale (`0.2, 0.2, 0.2`).
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在地面上将其缩放和定位，使其易于观看，靠近树，不要太小。我们选择了位置 (`0.5, 0.36, -1.2`) 和缩放 (`0.2, 0.2, 0.2`)。
- en: 'And add a bird. The Living Birds package doesn''t have a blackbird, but it
    does have a bluejay, which is close enough:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 然后添加一只鸟。Living Birds 包含包中没有乌鸦，但它确实有蓝松鸦，这已经足够接近了：
- en: From the Project `Assets/living birds/resources/` folder, drag the `lb_blueJayHQ`
    prefab into the Hierarchy. For convenience, rename it `Bluejay`.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从项目 `Assets/living birds/resources/` 文件夹中，将 `lb_blueJayHQ` 预制体拖入层次结构。为了方便，将其重命名为
    `Bluejay`。
- en: Scale and Position it so it appears full grown and perched on the edge of the
    nest. We chose Scale (`8, 8, 8`), Position (`0.75, 0.4, -1.25`), and Rotation
    (`0, 0, 0`).
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 缩放和定位它，使其看起来成熟并栖息在巢的边缘。我们选择了缩放 (`8, 8, 8`)、位置 (`0.75, 0.4, -1.25`) 和旋转 (`0,
    0, 0`)。
- en: The bird is inserted into the scene in a T pose. It has animations attached,
    which we'll control later in this project. Like most character animations, it
    runs an `Idle` animation initially. (Note, don't rotate the bird object, it messes
    up the flying animations.)
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 鸟以 T 形插入场景。它附加了动画，我们将在本项目的稍后部分控制它们。像大多数角色动画一样，它最初运行一个 `Idle` 动画。（注意，不要旋转鸟对象，这会搞乱飞行动画。）
- en: 'Remember to press Play and check how it looks in VR. It''s always much different
    within VR than the view you see on the flat screen. Our scene and hierarchy is
    shown in the following screen capture. You many also want to adjust the Main Camera
    position now:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 记得按播放键并检查它在 VR 中的外观。在 VR 中的外观总是与你在平面屏幕上看到的外观有很大不同。我们的场景和层次结构如下屏幕截图所示。你现在可能也想调整主相机的位置：
- en: '![](img/7cde9ff0-46d3-4cbf-82e2-e59b954c19d7.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7cde9ff0-46d3-4cbf-82e2-e59b954c19d7.png)'
- en: Timelines and Audio tracks
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 时间线和音频轨道
- en: Earlier, we planned out our movie using a graph paper timeline. Unity provides
    the tools to implement that almost directly. This Timeline feature was introduced
    with Unity 2017.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，我们使用坐标纸时间线规划了我们的电影。Unity 提供了几乎可以直接实现这些工具。这个时间线功能是在 Unity 2017 中引入的。
- en: Timelines consist of one or more tracks that play over time. It's like an Animation
    (which controls the properties of a single game object), but Timelines work with
    many different objects and different types of tracks. As we'll see and explain
    later, Timelines can have Audio Tracks, Activation Tracks, Animation Tracks, and
    Control Tracks.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 时间线由一个或多个随时间播放的轨道组成。它就像一个动画（它控制单个游戏对象的属性），但时间线与许多不同的对象和不同类型的轨道一起工作。正如我们稍后将要看到和解释的，时间线可以有音频轨道、激活轨道、动画轨道和控制轨道。
- en: Timelines are a type of Unity *Playable*. Playables are runtime objects that
    "play" over time, updating each frame based on its prescribed behavior. Animations
    are playables too. For more details, see [https://docs.unity3d.com/ScriptReference/Playables.Playable.html](https://docs.unity3d.com/ScriptReference/Playables.Playable.html).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 时间轴是一种 Unity *可播放* 对象。可播放对象是运行时对象，它们随时间“播放”，根据其预定的行为更新每一帧。动画也是可播放对象。有关更多详细信息，请参阅 [https://docs.unity3d.com/ScriptReference/Playables.Playable.html](https://docs.unity3d.com/ScriptReference/Playables.Playable.html)。
- en: 'Presently we''ll add a Timeline to the project and add an Audio Track. To create
    the Timeline object and open it in the Timeline Editor window, do the following
    steps:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将在项目中添加一个时间轴并添加一个音频轨道。要创建时间轴对象并在时间轴编辑器窗口中打开它，请按照以下步骤操作：
- en: In Hierarchy, create an Empty game object and name it `BlackbirdDirector`.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层次结构中，创建一个空的游戏对象并命名为 `BlackbirdDirector`。
- en: Open the Timeline Editor (Window | Timeline).
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开时间轴编辑器（窗口 | 时间轴）。
- en: In the window you will see a message "*To begin a new timeline with BlackbirdTimeline,
    create a Director component and a Timeline asset*" with a Create button.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在窗口中，您将看到一个消息 "*要开始使用 BlackbirdTimeline 的新时间轴，请创建一个 Director 组件和一个时间轴资产*"，并附带一个创建按钮。
- en: Press the Create button.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下创建按钮。
- en: You are then prompted to save a new Playable asset in your Project *Assets*
    folder. Name it `BlackbirdTimeline`. Press Save.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，您将被提示在项目 *资源* 文件夹中保存一个新的可播放资产。命名为 `BlackbirdTimeline`。按保存。
- en: 'At this point, you may have noticed a few important things just happened:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您可能已经注意到了一些重要的事情刚刚发生：
- en: The `BlackbirdTimeline` asset was created in the `Asset` folder you specified
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BlackbirdTimeline` 资产已创建在您指定的 `Asset` 文件夹中'
- en: A `Playable Director` component was added to the `BlackbirdDirector` game object,
    associating it with that `BlackbirdTimeline`
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已将 `Playable Director` 组件添加到 `BlackbirdDirector` 游戏对象中，并将其与 `BlackbirdTimeline`
    关联
- en: The `Timeline Editor` window is opened for the `BlackbirdTimeline`
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 时间轴编辑器窗口已打开，用于 `BlackbirdTimeline`
- en: 'The next screenshot shows the `BlackbirdDirector` inspector with its `Playable
    Director` component. A Playable Director component controls when and how a Timeline
    instance plays, including whether to Play On Awake, and Wrap Mode (what to do
    when the Timeline is done playing: Hold, Loop, or None):'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个截图显示了 `BlackbirdDirector` 检查器及其 `Playable Director` 组件。`Playable Director`
    组件控制时间轴实例何时以及如何播放，包括是否在唤醒时播放，以及包装模式（当时间轴播放完毕时做什么：保持、循环或无）：
- en: '![](img/7e24ab47-8335-48e6-93b8-1aea94c1aab3.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/7e24ab47-8335-48e6-93b8-1aea94c1aab3.png)'
- en: 'Here is the Timeline Editor window for the `BlackbirdTimeline`:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 `BlackbirdTimeline` 的时间轴编辑器窗口：
- en: '![](img/43c56e6a-8524-4cfc-a2e4-2b2fc39b9bbb.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/43c56e6a-8524-4cfc-a2e4-2b2fc39b9bbb.png)'
- en: 'Let''s now add an Audio Track to the timeline, with our Beatles song:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们向时间轴添加一个音频轨道，使用我们的披头士乐队歌曲：
- en: Locate the mp3 file in your Project Assets, and drag it directly onto the Timeline
    Editor
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的项目资源中定位 mp3 文件，并将其直接拖动到时间轴编辑器中
- en: Press Play to play your scene as normal and now the music should start playing
    as well
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下播放以正常播放场景，此时音乐也应该开始播放。
- en: 'Here is the Timeline Editor now containing the Audio Track:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在的时间轴编辑器中包含音频轨道：
- en: '![](img/714577ec-8e8b-48fd-9963-c36c62d52319.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/714577ec-8e8b-48fd-9963-c36c62d52319.png)'
- en: The white vertical cursor, or *Playhead*, indicates the current time frame.
    The default scale is Frames, but in the previous screenshot we have already changed
    it to Seconds (using the gear-icon in the upper right). You can see this clip
    is set start at `0` and continues to about 165 seconds.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 白色的垂直光标，或 *播放头*，指示当前的时间框架。默认的比例是帧，但在上一个截图我们已经将其更改为秒（使用右上角的齿轮图标）。您可以看到此剪辑从 `0`
    开始，并持续到大约 165 秒。
- en: You can scale the view using the scroll wheel on your mouse. View all by pressing
    "A" on the keyboard. When the Timeline contains multiple tracks, you can focus
    on a specific clip by pressing "F" on the keyboard.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用鼠标滚轮缩放视图。按键盘上的 "A" 键可查看所有内容。当时间轴包含多个轨道时，您可以通过按键盘上的 "F" 键来聚焦于特定的剪辑。
- en: You may notice in the upper left of the Timeline Editor are preview controls.
    These let you play a preview of the Timeline itself, rather than the whole scene
    using the usual Editor Play button.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会注意到时间轴编辑器左上角有一些预览控件。这些控件允许您播放时间轴的预览，而不是使用常规的编辑器播放按钮来播放整个场景。
- en: Unfortunately, at the time of this writing, the Timeline preview play mode does
    not play audio clips. You need to use the Editor Play mode for audio.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，在撰写本文时，时间轴预览播放模式无法播放音频剪辑。您需要使用编辑器播放模式来播放音频。
- en: In this scene, we decided to make the music to be ambient audio. The audio will
    play in 2D mode if no audio source is selected. If you want to play it as spatial
    audio, emanating from a specific location in the scene, you should create an audio
    source and put that in the timeline track instead.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个场景中，我们决定制作环境音乐。如果没有选择音频源，音频将在2D模式下播放。如果你想将其作为空间音频播放，从场景中的特定位置发出，你应该创建一个音频源并将其放入时间轴轨道中。
- en: Using a Timeline to activate objects
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用时间轴激活对象
- en: We just added an Audio Track to the Timeline. Another type of Timeline track
    is an Activation Track. Associated with a specific game object, an Activation
    Track with enable or disable that game object at the specified times.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚向时间轴添加了一个音频轨道。另一种类型的时间轴轨道是激活轨道。与特定的游戏对象相关联，激活轨道可以在指定的时间启用或禁用该游戏对象。
- en: According to our plan, when the timeline starts, the bird's nest will be hidden
    (`NestAndEgg` object). At the 35-second mark, it becomes enabled. Also, when the
    nest is first enabled, it should have the `WholeEgg`. Then at the 80-second mark,
    it is hidden and the `HatchedEgg` is enabled instead.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们的计划，当时间轴开始时，鸟的巢将被隐藏（`NestAndEgg`对象）。在35秒时，它变为启用状态。此外，当巢首次启用时，它应该有`WholeEgg`。然后在80秒时，它被隐藏，`HatchedEgg`被启用代替。
- en: 'The `NestAndEgg` game object hierarchy, as shown here, contains the `Nest`
    itself, a `WholeEgg` object, and a `HatchedEgg` (which has the two eggshell halves):'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如此，`NestAndEgg`游戏对象层级包含巢本身、一个`WholeEgg`对象和一个`HatchedEgg`（它有两个蛋壳半部分）：
- en: '![](img/be1a1d2c-c7a4-46cd-91ef-81b52a15f220.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/be1a1d2c-c7a4-46cd-91ef-81b52a15f220.png)'
- en: 'Let''s add the activation sequence to the Timeline now:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将激活序列添加到时间轴上：
- en: With `BlackbirdDirector` selected in Hierarchy, drag the `NestAndEgg` object
    from Hierarchy into the Timeline Editor window.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层级中选择`BlackbirdDirector`，将`NestAndEgg`对象从层级拖动到时间轴编辑器窗口中。
- en: A menu pops up, asking what type of track to add; choose Activation Track.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 弹出一个菜单，询问要添加哪种类型的轨道；选择激活轨道。
- en: A small rectangular track marker is added to the track. Click and drag it into
    place.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在轨道上添加了一个小矩形轨道标记。点击并拖动到合适的位置。
- en: Position and size the track to start at `35:00` and end at`165:00`.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将轨道定位和大小调整到从`35:00`开始到`165:00`结束。
- en: 'Now for the eggs. Although the egg models are children of NestAndEgg, they
    can be activated separately from the parent (of course, only when the parent itself
    is already enabled):'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来处理鸡蛋。尽管鸡蛋模型是`NestAndEgg`的子对象，但它们可以独立于父对象（当然，前提是父对象本身已经启用）被激活：
- en: Drag the `WholeEgg` object from Hierarchy onto the Timeline as an Activation
    Track
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`WholeEgg`对象从层级拖动到时间轴上作为激活轨道。
- en: Position it to start at `35:00` and end at `60:00`
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其定位为从`35:00`开始到`60:00`结束。
- en: Drag the `HatchedEgg` object from Hierarchy onto the Timeline as an Activation
    Track
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`HatchedEgg`对象从层级拖动到时间轴上作为激活轨道。
- en: Position it to start at `60:00` and end at `165:00`
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其定位为从`60:00`开始到`165:00`结束。
- en: 'Similarly, activate the bird when the egg hatches, at the 60-second mark:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，当鸡蛋在60秒时孵化，激活鸟：
- en: Drag the `Bluejay` object from Hierarchy onto the Timeline as an Activation
    Track
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Bluejay`对象从层级拖动到时间轴上作为激活轨道。
- en: Position it to start at `35:00` and end at `60:00`
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其定位为从`35:00`开始到`60:00`结束。
- en: Drag the `HatchedEgg` object from Hierarchy onto the Timeline as an Activation
    Track
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`HatchedEgg`对象从层级拖动到时间轴上作为激活轨道。
- en: Position it to start at `60:00` and end at `165:00`
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其定位为从`60:00`开始到`165:00`结束。
- en: The Timeline with Activate Tracks now looks like the following. You can see,
    on the left, each track has an object slot containing the game object being controlled
    by the track.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在带有激活轨道的时间轴看起来如下。你可以看到，在左侧，每个轨道都有一个对象槽，包含由轨道控制的游戏对象。
- en: '![](img/65848b58-5360-41d9-ba45-4b83b0745a8d.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/65848b58-5360-41d9-ba45-4b83b0745a8d.png)'
- en: Using Preview Play (control icons in the upper left of the Timeline Editor)
    you can play and review these tracks. You can scrub through the time frames by
    dragging the white Playhead cursor. You will see the nest, eggs, and bird activate
    and deactivate as specified.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 使用预览播放（时间轴编辑器左上角的控制图标）可以播放和预览这些轨道。你可以通过拖动白色的播放头光标来浏览时间框架。你会看到巢、鸡蛋和鸟按照指定的时间激活和停用。
- en: Recording an Animation Track
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 记录动画轨道
- en: As you would expect, in addition to audio and activation tracks, Timelines can
    include animation tracks. Unity's animation features have evolved over the years
    and Timeline greatly simplifies basic animation capabilities within Unity. You
    can create and edit animations directly within Timeline without having to create
    separate Animation Clips and Animator Controllers. These we will get to later
    in this chapter. For now, we will start simple, animating just a few Transform
    parameters on the tree and the nest.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所预期，除了音频和激活轨道外，时间线还可以包括动画轨道。Unity 的动画功能在过去几年中不断发展，时间线大大简化了 Unity 中的基本动画功能。你可以在时间线内直接创建和编辑动画，而无需创建单独的动画剪辑和动画控制器。这些内容我们将在本章的后面部分介绍。现在，我们将从简单开始，仅对树和巢的几个变换参数进行动画处理。
- en: A growing tree
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一棵生长的树
- en: 'We want to add an animation of the tree growing from small (scale `0.1`) to
    full size, from `0` to `30` seconds in the Timeline. We do this by adding an Animation
    Track for the Tree, and then recording the parameter values at each keyframe time:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想在时间线中添加一个动画，使树从小（缩放 `0.1`）生长到全尺寸，从 `0` 秒到 `30` 秒。我们通过为树添加一个动画轨道，并在每个关键帧时间记录参数值来实现这一点：
- en: Ensure `BlackbirdDirector` is selected in Hierarchy and the Timeline Editor
    window is open
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保在层次结构中选择 `BlackbirdDirector` 并打开时间线编辑器窗口
- en: Drag the `Tree` from Hierarchy into the Timeline window
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `Tree` 从层次结构拖到时间线窗口中
- en: Select Animation Track as the type of Track we are adding
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择动画轨道作为我们添加的轨道类型
- en: 'Now, we can begin recording the keyframes:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以开始记录关键帧：
- en: Ensure the Playhead cursor is set to `0:00`
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保播放头光标设置为 `0:00`
- en: Press the red Record button on the Tree track in Timeline to begin recording
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在时间线中，按 `Tree` 轨道上的红色录制按钮开始录制
- en: Select the `Tree` in Hierarchy
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层次结构中选择 `Tree`
- en: Set its Scale to (`0.1, 0.1, 0.1`)
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其缩放设置为 (`0.1, 0.1, 0.1`)
- en: Slide the Playhead to the 30-second mark
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将播放头滑到 30 秒标记
- en: With Tree still selected in Hierarchy, set its Scale to (`1, 1, 1`)
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层次结构中仍然选择 `Tree`，将其缩放设置为 (`1, 1, 1`)
- en: Press the blinking red Record button again to stop recording
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次按下闪烁的红色录制按钮以停止录制
- en: 'Click the small graph icon to reveal the animation curve, as shown here:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击小图表图标以显示动画曲线，如图所示：
- en: '![](img/22de5da0-dc8f-4edd-b986-3a584ddd529b.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/22de5da0-dc8f-4edd-b986-3a584ddd529b.png)'
- en: You can see, our Timeline now has an Animation Track that references the `Tree`
    game object. It has two keyframes, starting at `o` and ending at `30` seconds.
    Unity fits a gentle curve to ease in and ease out the transition between the polemic
    key values.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，我们的时间线现在有一个引用 `Tree` 游戏对象的动画轨道。它有两个关键帧，从 `0` 秒开始，到 `30` 秒结束。Unity 为这两个关键值之间的过渡添加了一个温和的曲线，以平滑过渡。
- en: When you grab and slide the Playhead cursor across the timeline curve, you can
    see the tree change size in your Scene window. If you press the Preview Play icon,
    you can play the animation.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 当你抓住并拖动播放头光标在时间线曲线上时，你可以在场景窗口中看到树的大小变化。如果你按下预览播放图标，你可以播放动画。
- en: A growing bird
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一只生长的鸟
- en: Repeat the previous exercise, this time growing the Bluejay. Scale it from a
    baby bird (Scale = `1`) to full size (Scale = `8`), for 10 seconds between the `60`
    and `70`-second marks.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 重复之前的练习，这次是培养蓝松鸦。将其从幼鸟（缩放 = `1`）生长到全尺寸（缩放 = `8`），在 `60` 秒和 `70` 秒标记之间持续 10 秒。
- en: Using the Animation editor
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用动画编辑器
- en: Next, we'll create another animation track, to animate the nest so it starts
    positioned in the grown tree and then drifts slowly to the ground, wafting like
    a falling leaf. We want it to exhibit a gentle rocking motion. This is a little
    more complicated than the simple two-keyframe animation we just did, so we'll
    do our work in a separate Animation Window instead of the narrow track band on
    the Timeline Editor. It will animate from 0:35 to 0:45.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建另一个动画轨道，以动画化巢，使其从生长的树中开始定位，然后缓慢飘落到地面，像落叶一样飘动。我们希望它表现出轻微的摇摆动作。这比我们刚才做的简单两个关键帧动画要复杂一些，所以我们将在一个单独的动画窗口中工作，而不是在时间线编辑器的狭窄轨道带上。它将从
    0:35 动画到 0:45。
- en: Animations are based on Keyframes. To animate a property, you create a Keyframe
    and define the property values for that frame in time. In the previous example,
    we had just two Keyframes, for the start and end Scale values. Unity fills in-between values
    with a nice curve. You can insert additional Keyframes, and edit the curve shape.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 动画基于关键帧。要动画化一个属性，你需要创建一个关键帧，并定义该帧在时间上的属性值。在上一个例子中，我们只有两个关键帧，对应于起始和结束的缩放值。Unity
    在两者之间填充了漂亮的曲线。你可以插入额外的关键帧，并编辑曲线形状。
- en: A wafting nest
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一堆飘动的巢
- en: 'Let''s assume your scene already has the nest positioned on the ground, where
    we want it to end up with the following steps:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您的场景已经将巢穴定位在地面，这是我们想要它最终到达的位置，以下步骤：
- en: Drag the `NestAndEgg` object from Hierarchy into the Timeline window.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`NestAndEgg`对象从层级结构拖动到时间轴窗口中。
- en: Select Animation Track as the type of track.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择动画轨道作为轨道类型。
- en: Set the Playhead cursor to `35:00`.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将播放头光标设置到`35:00`。
- en: Note that the Record icon will be disabled when the object is inactive. The
    Playhead must be within the object's Activation track's Active range.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意，当对象处于非活动状态时，录制图标将不可用。播放头必须在对象的激活轨道的激活范围内。
- en: Press the Record icon for the NestAndEgg Animation Track to begin recording.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下`NestAndEgg`动画轨道的录制图标开始录制。
- en: Select the `NestAndEgg` object in Hierarchy.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层级结构中选择`NestAndEgg`对象。
- en: Copy the current Transform values to the clipboard (in Inspector, select the
    gear-icon on the Transform component, and Copy Component).
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将当前变换值复制到剪贴板（在检查器中，选择变换组件上的齿轮图标，并复制组件）。
- en: In the Scene window, ensure the Move gizmo is presently selected.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在场景窗口中，确保当前选中的是移动操纵杆。
- en: Reposition the nest up in the Tree. Position Y = `5` works for me.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在树中重新定位巢穴。Y位置 = `5`对我来说适用。
- en: Slide the Playhead to `45:00`.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将播放头滑动到`45:00`。
- en: In the NestAndEgg Inspector, click the Transform's gear icon and Paste Component
    Values.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`NestAndEgg`检查器中，点击变换的齿轮图标并粘贴组件值。
- en: Press the blinking red Record button again to stop recording.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次按下闪烁的红色录制按钮以停止录制。
- en: 'Having defined an initial Animation recording, we can now work on it in an
    Animation editor window:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义了初始动画录制后，我们可以在动画编辑器窗口中开始工作：
- en: On the track, click the little menu icon in its upper right
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在轨道上，点击其右上角的小菜单图标
- en: 'Select Edit in Animation Window, as shown here:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择在动画窗口中编辑，如图所示：
- en: '![](img/6c9174a3-cad6-4611-9439-6f879a3ef26c.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6c9174a3-cad6-4611-9439-6f879a3ef26c.png)'
- en: 'The Animation Window has two view modes: Dopesheet and Curves. The Dopesheet
    view lets you focus on the Keyframes for each property. The Curves view lets you
    focus on the transitions between Keyframes.'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 动画窗口有两种视图模式：Dopesheet和Curves。Dopesheet视图允许您专注于每个属性的键帧。Curves视图允许您专注于键帧之间的过渡。
- en: The goal is to animate a subtle floating action, where the Nest rocks from side
    to side (X and Z axes) and rotates lightly on each of the axes. To do this, first
    we'll "anchor" the Nest at the beginning, middle and end of the fall. (We already
    have the begin and end positions.) Then, we'll add a couple more keyframes  with
    arbitrary values to implement the gentle motion.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 目标是制作一个微妙的浮动动作，巢穴在X和Z轴上从一侧摇到另一侧，并在每个轴上轻微旋转。为此，我们首先将在落下的开始、中间和结束时“锚定”巢穴。（我们已经有开始和结束位置。）然后，我们将添加几个具有任意值的关键帧来实现柔和的运动。
- en: 'Using the Dopesheet view, we''re first going to ensure we have keyframes at
    the start and end times, and one in between. Add keyframes at 35, 40, and 45 seconds
    as follows:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Dopesheet视图，我们首先确保在开始和结束时间以及中间都有一个关键帧。按照以下方式在35秒、40秒和45秒处添加关键帧：
- en: If not present, add Rotation properties too (Add Property | Transform | Rotation
    | "+")
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果没有，添加旋转属性（添加属性 | 变换 | 旋转 | “+”）
- en: Position the Playhead at the start of our animation (`35:00`)
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将播放头放置在动画的开始（`35:00`）
- en: Click the Add Keyframe icon in control bar atop the properties list (highlighted
    in the screen capture below)
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在属性列表上方的控制栏中点击添加关键帧图标（如图下屏幕截图所示）
- en: Move the Playhead about halfway, to the `40` second mark
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将播放头移动到大约一半的位置，到`40`秒标记
- en: Click Add Keyframe icon
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击添加关键帧图标
- en: And again, make sure there's Keyframe markers at the end (`45:00`)
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次确认，确保在结尾处有关键帧标记（`45:00`）
- en: You can use hotkeys to move between Keyframes. Press "Alt+." (Alt+period) for
    next Keyframe. Press "Alt+," (Alt+comma) for previous Keyframe, and "Shift+,"
    (Shift+comma) for first Keyframe.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用快捷键在关键帧之间切换。按“Alt+.”（Alt+句号）跳转到下一个关键帧。按“Alt+,”（Alt+逗号）跳转到上一个关键帧，按“Shift+,”（Shift+逗号）跳转到第一个关键帧。
- en: 'Now, we''ll add a Keyframe at `37.5`:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们在`37.5`处添加一个关键帧：
- en: Move the Playhead to 37.5
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将播放头移动到37.5
- en: Click the Add Keyframe icon
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击添加关键帧图标
- en: Click the red Record icon in the upper left to capture new values
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击左上角的红色录制图标以捕获新值
- en: Select the `NestAndEgg` object in Hierarchy
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层级结构中选择`NestAndEgg`对象
- en: In the Scene view, using the Move Tool gizmo, move the nest a little bit along
    the X and Z axes (about 0.4 units)
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在场景视图中，使用移动工具操纵杆，将巢穴在X和Z轴上稍微移动一点（大约0.4个单位）
- en: Using the Rotate Tool, rotate the nest gently on any combination of axes (up
    to 10 degrees)
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用旋转工具，在任意轴组合上轻轻旋转巢（最多10度）
- en: Move the Playhead to `42.5` and repeat steps 2-6
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将播放头移动到`42.5`并重复步骤2-6
- en: 'The resulting Animation Window in Dopesheet view, with its Position and Rotation
    property values, is shown here at Keyframe 37.5\. The Add Keyframe icon is identified
    for the reader:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在Dopesheet视图中，显示的动画窗口，包括其位置和旋转属性值，如下所示，在关键帧37.5处。为读者标识了添加关键帧图标：
- en: '![](img/33d2fdf5-d8f6-42a9-8446-e913f8fcb09e.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/33d2fdf5-d8f6-42a9-8446-e913f8fcb09e.png)'
- en: 'The Curves view lets you focus on the transitions between Keyframes, and provides
    the ability to adjust the values and shape the curve splines. My current Curves
    view is shown here:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 曲线视图让您专注于关键帧之间的过渡，并提供调整值和塑造曲线样条的能力。我的当前曲线视图如下所示：
- en: '![](img/3779f578-e4ed-47bc-aa32-7274c164ff41.png)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3779f578-e4ed-47bc-aa32-7274c164ff41.png)'
- en: The length of the scrollbars in the Animation Window indicate the current zoom
    view. The oval ends of each scrollbar are grab-able controls that let you directly
    adjust the zoom as well as position of the view.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 动画窗口中滚动条的长度表示当前缩放视图。每个滚动条的椭圆形末端是可以抓取的控制，让您可以直接调整缩放以及视图的位置。
- en: Go back to the TImeline Editor window. You can  slide the Playhead cursor to
    see animations in your Scene window, or press the Preview Play icon to play them.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 返回到时间轴编辑器窗口。您可以通过滑动播放头光标在场景窗口中查看动画，或按预览播放图标播放它们。
- en: Animating other properties
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动画其他属性
- en: In our story, we want the lighting to start at night and progress through dawn
    to daylight. We'll do it by manipulating the Directional Light, Skybox Material,
    and a Spot Light.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的故事中，我们希望灯光从夜晚开始，逐渐过渡到黎明再到白天。我们将通过操作方向光、天空盒材质和聚光灯来实现这一点。
- en: Animating lights
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动画灯光
- en: 'For dramatic effect, let''s make the scene slowly fade from night to daytime.
    We will turn off the Directional Light at the start and slowly increase its Intensity:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 为了达到戏剧效果，让我们让场景从夜晚慢慢淡入白天。我们将从开始关闭方向光，并逐渐增加其强度：
- en: Select `BlackbirdController` in Hierarchy and open the Timeline Editor window
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层级中选择`BlackbirdController`并打开时间轴编辑器窗口
- en: Drag the `Directional Light` object from Hierarchy onto the Timeline
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`方向光`对象从层级拖到时间轴上
- en: Press its Record button
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下其`记录`按钮
- en: Ensure the Playhead is at `0:00`
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保播放头在`0:00`
- en: Select the `Directional Light` in Hierarchy and change its Intensity parameter
    to `0`
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层级中选择`方向光`并更改其`强度`参数为`0`
- en: Move the Playhead to the `40:00` second mark
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将播放头移动到`40:00`秒标记
- en: Set the Intensity to `1`
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将强度设置为`1`
- en: 'The Directional Light''s Animation Track with the Intensity parameter curve
    is shown here:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 这里显示了方向光的动画轨迹，其强度参数曲线如下：
- en: '![](img/99c2faa9-237c-457c-8af2-5fb2edc2bbad.png)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/99c2faa9-237c-457c-8af2-5fb2edc2bbad.png)'
- en: Other parameters of the light could also be animated, including its Color and
    the Transform Rotation angles. Just imagine the possibilities!
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 光照的其他参数也可以进行动画处理，包括其颜色和变换旋转角度。只需想象一下可能性！
- en: 'Let''s also add a Point Light. For dramatic effect, position it at the same
    location as the Nest resting position. This will illuminate the baby tree at first,
    and focus the user''s attention on the egg in the nest once the nest settles onto
    the ground:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再添加一个点光源。为了达到戏剧效果，将其放置在巢的休息位置。这将首先照亮小树，一旦巢落在地面上，就会将用户的注意力集中在巢中的蛋上：
- en: Create | Light | Point Light
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 | 光 | 点光源
- en: In Scene view, use the Move Tool gizmo to position it inside the Nest at the
    Nest's ground position
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在场景视图中，使用移动工具操纵杆将其定位在巢内，位于巢的地面位置
- en: Select `BlackbirdDirector` and open the Timeline Editor
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`BlackbirdDirector`并打开时间轴编辑器
- en: Drag the `Point Light` onto the Timeline Editor
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`点光源`拖到时间轴编辑器
- en: Choose Activation Track
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择激活轨道
- en: Enable the light from `0`s to about `95`s, sometime after the egg hatches
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`0`到大约`95`启用灯光，在鸡蛋孵化后的一段时间内
- en: Things are looking pretty good!
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来相当不错！
- en: 'Our Timeline is starting to get a little crowded. Let''s move the lights into
    a Track Group:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 时间轴 开始变得有些拥挤。让我们将灯光移动到 轨道组：
- en: In Timeline, choose Add | Track Group
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在时间轴中，选择添加 | 轨道组
- en: Click its label and name it "Lights"
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击其标签并将其命名为“灯光”
- en: Drag each of the light tracks into the group
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将每个灯光轨迹拖入组中
- en: Use Group Tracks to organize your Timeline in a nested tree structure
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 使用组轨道以嵌套树结构组织时间轴
- en: Animating a scripted component property
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动画脚本组件属性
- en: As we're seeing, you can animate just about any GameObject property that you
    can modify in the Inspector. This includes your own C# script component's serialized
    properties.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，你可以动画化任何你可以在检查器中修改的GameObject属性。这包括你自己的C#脚本组件的序列化属性。
- en: We want to fade the environmental lighting from night to day. There are several
    ways to achieve this (see the discussion of photospheres in the previous chapter). We've
    decided to do it by modifying the Skybox Material's Exposure value (o is off,
    1 is all the way on). But Timeline can only animate GameObject properties, and
    this is not one. So what we'll do is create an empty LightingController GameObject
    and write a script that controls the Skybox Material.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要将环境光照从夜晚渐变到白天。有几种方法可以实现这一点（参见前一章中关于球面照明的讨论）。我们决定通过修改Skybox材质的曝光值来实现（0是关闭，1是完全开启）。但是时间轴只能动画化GameObject属性，而这不是其中一个。所以我们将创建一个空的LightingController
    GameObject并编写一个控制Skybox材质的脚本。
- en: 'Let''s add our own Skybox Material to the scene. You can use any skybox texture
    you like. We will grab one from the WispySkybox package, `WispyCubemap2`, that
    we imported earlier:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为场景添加自己的Skybox材质。你可以使用你喜欢的任何天空盒纹理。我们将从之前导入的WispySkybox包中获取一个，名为`WispyCubemap2`：
- en: Create a new Material (Assets | Create | Material), name it `BlackbirdSkyMaterial`
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的材质（资产 | 创建 | 材质），并将其命名为`BlackbirdSkyMaterial`
- en: In Inspector, for its Shader, select Skybox/Cubemap
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器中，为其着色器选择Skybox/Cubemap
- en: Click Select in its Cubemap texture chip, and select `WispyCubemap2`
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击选择其Cubemap纹理芯片，并选择`WispyCubemap2`
- en: Open the Lighting window (if not already in the Editor, choose Window | Lighting
    | Settings)
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开光照窗口（如果不在编辑器中，请选择窗口 | 光照 | 设置）
- en: Drag the `BlackbirdSkyMaterial` from Project Assets onto the Skybox Material
    slot
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`BlackbirdSkyMaterial`从项目资产拖动到天空盒材质槽位
- en: Uncheck the Mixed Lighting Baked Global Illumination checkbox
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 取消选中“混合光照烘焙全局光照”复选框
- en: We don't want to bake any of the environment lighting since we're going to modify
    its settings at runtime.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不想烘焙任何环境光照，因为我们将在运行时修改其设置。
- en: 'Selecting the `BlackbirdSkyMaterial` again, see what happens when you slide
    the Exposure value between `1` and `0`. It fades the brightness of the skybox.
    We will animate this value to modify the ambient light in our scene. But Animations
    can only modify GameObject parameters, so we''ll write a script:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 再次选择`BlackbirdSkyMaterial`，看看当你滑动曝光值在`1`和`0`之间时会发生什么。它将渐变天空盒的亮度。我们将动画化这个值来修改场景中的环境光。但是动画只能修改GameObject参数，所以我们将编写一个脚本：
- en: Create a new C# script and name it `SkyboxMaterialExposureControl`.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的C#脚本，并将其命名为`SkyboxMaterialExposureControl`。
- en: 'Open the script and write it as follows:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开脚本并按照以下方式编写：
- en: '[PRE0]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Save the file. In Unity, lets make a LightingController object that uses the
    script as follows:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 保存文件。在Unity中，让我们创建一个使用该脚本的LightingController对象，如下所示：
- en: Create a Empty object in Hierarchy, named "LightingController"
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层级面板中创建一个空对象，命名为"LightingController"
- en: Add the `SkyboxMaterialExposureControl` to this object
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`SkyboxMaterialExposureControl`添加到该对象
- en: Drag the `BlackbirdSkyMaterial` onto its Skybox Material slot
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`BlackbirdSkyMaterial`拖动到其Skybox材质槽位
- en: 'Now, let''s animate this parameter:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们为这个参数添加动画：
- en: Select `BlackbirdController` in Hierarchy and open the Timeline Editor window
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层级面板中选择`BlackbirdController`并打开时间轴编辑器窗口
- en: Drag the `LightingController` object from Hierarchy onto the Timeline
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从层级面板中将`LightingController`对象拖动到时间轴上
- en: Press its Record button
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下它的录音按钮
- en: Ensure the Playhead is at `0:00`
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保播放头在`0:00`
- en: Select the `LightingController` in Hierarchy, and change its Exp parameter to
    `0`
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层级面板中选择`LightingController`，并将其Exp参数更改为`0`
- en: Move the Playhead to the `100:00` second mark
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将播放头移动到`100:00`秒标记
- en: Set the Exp to `1`
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Exp设置为`1`
- en: 'The Timeline Editor window with a SkyboxMaterialExposureControl track is shown
    here:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 这里显示了带有SkyboxMaterialExposureControl轨道的时间轴编辑器窗口：
- en: '![](img/a63ec9e0-95c1-456f-b60e-ab53ce16d560.png)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a63ec9e0-95c1-456f-b60e-ab53ce16d560.png)'
- en: 'Press Play, and the scene lighting will fade from night to day as the skybox
    material''s Exposure animates from 0 to 1\. (Note it''s not available in the Timeline
    preview Play, just the Editor Play). Here is a screenshot of the scene playing
    at about 45 seconds:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 按下播放，随着天空盒材质的曝光从0到1变化，场景光照将从夜晚渐变到白天。（注意，在时间轴预览播放中不可用，仅在编辑器播放中可用）。以下是场景在约45秒时的截图：
- en: '![](img/c8663f5e-5117-4a81-947f-485ca777426c.png)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c8663f5e-5117-4a81-947f-485ca777426c.png)'
- en: Controlling particle systems
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制粒子系统
- en: You could continue to improve the scene with other effects. We'd like to include
    falling leaves, which can be implemented using particle systems and played using
    a Control Track.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用其他效果继续改进场景。我们希望包括落叶效果，这可以通过粒子系统实现，并使用控制轨道播放。
- en: Unfortunately, we cannot recommend a specific free "falling leaves" asset as
    all the ones we found in the Asset Store are paid ones. There's an out-of-date
    free Sky FX package ([https://assetstore.unity.com/packages/vfx/particles/environment/sky-fx-pack-19242](https://assetstore.unity.com/packages/vfx/particles/environment/sky-fx-pack-19242)),
    from which we borrowed the textures and made our own particle system prefab, included
    with this book.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 很抱歉，我们无法推荐一个特定的免费“落叶”资产，因为我们找到的所有Asset Store中的都是付费的。有一个过时的免费Sky FX包（[https://assetstore.unity.com/packages/vfx/particles/environment/sky-fx-pack-19242](https://assetstore.unity.com/packages/vfx/particles/environment/sky-fx-pack-19242)），我们从其中借用了纹理并制作了自己的粒子系统预制件，包含在这本书中。
- en: 'Assuming you have a FallingLeaves particle system, we can add it to the project
    now:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有一个FallingLeaves粒子系统，现在我们可以将其添加到项目中：
- en: Drag a copy of the `FallingLeaves` prefab into the scene.
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`FallingLeaves`预制件的副本拖入场景中。
- en: In the Timeline Editor window (with `BlackbirdDirector` selected), click Add
    and choose Control Track.
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在时间轴编辑器窗口（选择`BlackbirdDirector`），点击添加并选择控制轨道。
- en: In the Control Track's menu icon, choose Add Control Playable Asset Clip.
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制轨道的菜单图标中，选择添加控制可播放资产剪辑。
- en: This creates a small rectangle for the clip on the track. Select it.
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这在轨道上为剪辑创建了一个小矩形。选择它。
- en: In Inspector, drag the `FallingLeaves` game object from Hierarchy onto the Source
    Game Object slot.
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器中，将`FallingLeaves`游戏对象从层次结构拖到源游戏对象槽中。
- en: Going back to the Timeline window, grab and slide the rectangle to the 120-second
    position, then stretch its right edge to the end of the timeline (165s).
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到时间轴窗口，抓住并滑动矩形到120秒的位置，然后将其右边缘拉伸到时间轴的末端（165秒）。
- en: 'The playable asset''s Inspector is shown here:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 这里显示了可播放资产的检查器：
- en: '![](img/fe46c8e1-328c-4c0d-a128-24aa00a17a3c.png)'
  id: totrans-241
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/fe46c8e1-328c-4c0d-a128-24aa00a17a3c.png)'
- en: 'And the Timeline with this Control Track is as follows:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 以及这个控制轨道的时间轴如下：
- en: '![](img/84b6b080-475c-42f6-a5f4-db84bcd82925.png)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/84b6b080-475c-42f6-a5f4-db84bcd82925.png)'
- en: Likewise, if you have multiple Timelines in a scene, you can control them from
    another Timeline using a Control Track (via game objects with `PlayableDirector`
    components).  In our app, we're using a single Timeline, with Play On Awake, so
    it starts at the beginning of the app and plays through. However, with multiple
    Timelines in a scene, you can play them on demand.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，如果你在场景中有多个时间轴，你可以使用控制轨道（通过具有`PlayableDirector`组件的游戏对象）从另一个时间轴控制它们。在我们的应用程序中，我们使用一个单独的时间轴，带有在唤醒时播放，因此它从应用程序的开始播放到结束。然而，在场景中有多个时间轴时，你可以按需播放它们。
- en: You can write your own custom Timeline track classes too. For example, using
    a Control Track for playing Particle Systems is limited. Here ([https://github.com/keijiro/TimelineParticleControl](https://github.com/keijiro/TimelineParticleControl))
    is a custom track class, `ParticleSystemControlTrack`, that offers control of
    emission rate, velocity, and other functionality. And if you look into their `.cs`
    code, it provides a good example of how to write a custom track class.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以编写自己的自定义时间轴轨道类。例如，使用控制轨道播放粒子系统是有限的。这里（[https://github.com/keijiro/TimelineParticleControl](https://github.com/keijiro/TimelineParticleControl)）是一个自定义轨道类，`ParticleSystemControlTrack`，它提供了控制发射率、速度和其他功能。如果你查看它们的`.cs`代码，它提供了一个编写自定义轨道类的良好示例。
- en: Separate Animation Clips are another Playable asset you can add and sequence
    in Timeline tracks. We look at that next.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 分离的动画剪辑是另一种可添加并按顺序排列在时间轴轨道中的可播放资产。我们接下来看看这一点。
- en: Using Animation clips
  id: totrans-247
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用动画剪辑
- en: For the next animation example, we'll get the egg to rattle and shake before
    it hatches. We will create a simple animation and make it loop for its duration. To
    illustrate, we'll make an Animation Clip of the WholeEgg rattling and then add
    it to the Timeline on an Animation Clip Track.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 对于下一个动画示例，我们将让鸡蛋在孵化前摇动和震动。我们将创建一个简单的动画，并使其在整个过程中循环。为了说明，我们将创建一个WholeEgg摇动的动画剪辑，并将其添加到动画剪辑轨道上的时间轴中。
- en: Shaking an egg
  id: totrans-249
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摇晃鸡蛋
- en: 'To create a new Animation Clip on the WholeEgg object, follow these steps:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 要在WholeEgg对象上创建一个新的动画剪辑，请按照以下步骤操作：
- en: In Hierarchy, select the WholeEgg object (child of NestAndEgg)
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层次结构中，选择WholeEgg对象（NestAndEgg的子对象）
- en: Open the Animation Window (Window | Animation)
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开动画窗口（窗口 | 动画）
- en: You should see a message, To begin animating WhileEgg, create an Animation Clip and
    a Create button
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该看到一个消息，要开始动画WhileEgg，请创建一个动画剪辑并一个创建按钮。
- en: Press Create
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下创建。
- en: When prompted for a file name, save it to `EggShaker.anim`
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当提示文件名时，将其保存为`EggShaker.anim`。
- en: 'We''ve seen the Animation Window earlier in this chapter. We''re going to make
    a very short, 2-second animation that rotates the egg on the X axis and Z axis
    by manipulating the animation curves:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章的早期部分看到了动画窗口。我们将制作一个非常短的2秒动画，通过操作动画曲线来旋转鸡蛋在X轴和Z轴上：
- en: Show the Curves view using the Curves button on the bottom of the window.
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用窗口底部的曲线按钮显示曲线视图。
- en: Press Add Property and WholeEgg | Transform | Rotation | + to add the Rotation
    properties.
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下添加属性和WholeEgg | 变换 | 旋转 | +以添加旋转属性。
- en: 'Select the WholeEgg: Rotation property group on the left.'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧选择WholeEgg：旋转属性组。
- en: Press *A* on the keyboard to zoom all; you should see three flat lines, one
    for each X, Y, Z rotation axes.
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按键盘上的*A*键以全屏缩放；您应该看到三条平行的线，每条线代表一个X、Y、Z旋转轴。
- en: Click the Add Keyframe icon in the upper right of the control bar.
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击控制栏右上角的添加关键帧图标。
- en: There may already be a Keyframe at one second (1:00) by default. If not, move
    the Playhead and click Add Keyframe.
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认情况下，可能已经有一个关键帧在1秒（1:00）处。如果没有，移动播放头并单击添加关键帧。
- en: Scroll out (middle scroll wheel on mouse, or using the horizontal scrollbar
    oval-end handles) so you can see the 2:00-second marker.
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 滚出（鼠标中间滚轮或使用水平滚动条的椭圆形端点手柄）以便您可以看到2秒标记。
- en: Move the Playhead to 2 seconds and Add Keyframe.
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将播放头移动到2秒并添加关键帧。
- en: Move the Playhead back to the 1 second mark.
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将播放头移动到1秒标记处。
- en: Now, we'll edit the animation spline curves. If you're familiar with spline
    editing, there is a line at each node representing the tangent of the curve at
    that point, and handles at the ends of the line for editing the curve. (You also
    modify the operation of this gizmo by right-clicking the node.)
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将编辑动画样条曲线。如果您熟悉样条编辑，每个节点上有一条线表示该点的曲线切线，以及线的两端用于编辑曲线的手柄。（您也可以通过右键单击节点来修改此工具的操作。）
- en: Click the 1:00s node for the Rotation.X property, then grab one of the handles
    to make a smooth S-curve. Not too steep, something between 30 and 45 degrees
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击Rotation.X属性1:00s节点，然后抓住一个手柄来制作一个平滑的S曲线。不要太陡峭，介于30度和45度之间。
- en: 'Repeat this for the Y and Z axes, with some variation, as shown here:'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复此操作，对Y轴和Z轴进行一些变化，如下所示：
- en: '![](img/ef65b6f1-7102-402c-93d0-1ec4fbd66c47.png)'
  id: totrans-269
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ef65b6f1-7102-402c-93d0-1ec4fbd66c47.png)'
- en: For one or two of the axes, add an extra Keyframe to make the curves look a
    little more random. My final curves are shown here.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个或两个轴，添加一个额外的关键帧，使曲线看起来更随机。我的最终曲线如下所示。
- en: '![](img/f64eb290-4716-49af-a653-4d03018695b0.png)'
  id: totrans-271
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f64eb290-4716-49af-a653-4d03018695b0.png)'
- en: 'With that done (the curves can be edited and refined later), select BlackbirdDirector, open
    the Timeline window, and perform the following steps:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些操作后（曲线可以在稍后编辑和细化），选择BlackbirdDirector，打开时间轴窗口，并执行以下步骤：
- en: Select Add and choose Animation Track
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择添加并选择动画轨道。
- en: Drag the `WholeEgg` object from Hierarchy onto the Timeline
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`WholeEgg`对象从层次结构拖到时间轴上。
- en: Choose Animation Track
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择动画轨道。
- en: 'This time, instead of recording we''ll use the one we just created, and make
    it animate back and forth as follows:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，我们不会录制，而是使用我们刚刚创建的，并使其来回动画如下：
- en: Using the menu-icon on the track, choose Add From Animation Clip.
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用轨道上的菜单图标选择从动画剪辑添加。
- en: A small rectangle is added to the track. Slide it to about 50 seconds, when
    the nest is on the ground but the chick has not yet hatched.
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在轨道上添加一个小矩形。将其滑动到大约50秒处，此时巢穴在地面，但小鸡尚未孵化。
- en: 'In Inspector, we now have more clip options. Under Animation Extrapolation,
    choose Post-Extrapolate: Ping Pong.'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器中，我们现在有更多的剪辑选项。在动画外推下，选择后外推：ping pong。
- en: Animation Clips with Timeline can be quite flexible. You can add multiple Animation
    Clips to an Animation Track, and blend between them by sliding them into one another.
    If you need even more control, you'd use an Animator Controller instead.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 带有时间轴的动画剪辑相当灵活。您可以将多个动画剪辑添加到动画轨道中，并通过将它们滑动到彼此之间来混合它们。如果您需要更多的控制，则可以使用Animator
    Controller。
- en: Using Animator Controllers
  id: totrans-281
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Animator Controllers。
- en: While recording animations as Timeline tracks is very convenient, it does have
    limitations. Those animations "live" in the Timeline. But, sometimes you want
    to treat animations as assets in their own right. For example, you would use Animation
    Clips if you want an animation to loop repeatedly, or transition between animations,
    or blend their actions, or apply the same set of animation curves to other objects.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然将动画作为时间轴轨道记录非常方便，但它确实有限制。这些动画“存在于”时间轴中。但有时你希望将动画视为独立的资产。例如，如果你想使动画重复循环，或在不同动画之间切换，或混合动作，或将相同的动画曲线应用到其他对象上，你会使用动画片段。
- en: We will take a look at a couple of existing examples of Animators and then use
    the existing birds one to make our Bluejay fly.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将查看一些现有的动画师示例，然后使用现有的鸟类示例来让我们的蓝松鸦飞翔。
- en: Definitions for Animation and Animator
  id: totrans-284
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动画和动画师的定义
- en: '**Animators** have been the standard way of managing *Animation Clips* in Unity,
    before Timeline. It uses an Animator Component, an Animator Controller, and an
    Animation Clip. Fortunately, if you create a new Animation Clip on an object,
    Unity creates each of these items for you. But it''s important to understand how
    they fit together.'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '**动画师**是管理Unity中*动画片段*的标准方式，在时间轴出现之前。它使用动画组件、动画控制器和动画片段。幸运的是，如果你在对象上创建一个新的动画片段，Unity会为你创建这些项目中的每一个。但了解它们如何协同工作是很重要的。'
- en: 'Briefly, from the Unity manual ([https://docs.unity3d.com/Manual/animeditor-CreatingANewAnimationClip.html](https://docs.unity3d.com/Manual/animeditor-CreatingANewAnimationClip.html)):'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，根据Unity手册([https://docs.unity3d.com/Manual/animeditor-CreatingANewAnimationClip.html](https://docs.unity3d.com/Manual/animeditor-CreatingANewAnimationClip.html))：
- en: '"To animate GameObjects in Unity, the object or objects need an **Animator
    Component** attached. This Animator Component must reference an **Animator Controller**,
    which in turn contains references to one or more **Animation Clips**."'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: “在Unity中动画化GameObject，对象或对象需要附加一个**动画组件**。这个动画组件必须引用一个**动画控制器**，而动画控制器反过来又包含对一个或多个**动画片段**的引用。”
- en: 'These objects originate from the Mecanim animation system folded into Unity
    a few versions back (you may still see references to Mecanim in the Unity Manual
    and web searches). This animation system is especially tailored for humanoid character
    animations (see [https://docs.unity3d.com/Manual/AnimationOverview.html](https://docs.unity3d.com/Manual/AnimationOverview.html)).
    The terminology can seem redundant and confusing. The following definitions may
    help (or not!). Pay especially close attention to the use of "animator" versus
    "animation":'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 这些对象起源于Unity中折叠的Mecanim动画系统，这个系统在几个版本之前就被整合进来了（你可能在Unity手册和网络搜索中仍然看到对Mecanim的引用）。这个动画系统特别适合用于人形角色动画（参见[https://docs.unity3d.com/Manual/AnimationOverview.html](https://docs.unity3d.com/Manual/AnimationOverview.html)）。术语可能看起来冗余且令人困惑。以下定义可能有所帮助（也可能不会！）。请特别注意“动画师”与“动画”的使用：
- en: '*Animation Clips*: Describes how an object''s properties change over time.'
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*动画片段*：描述了对象属性随时间的变化。'
- en: '*Animator Controller*: Organizes clips in a state machine flowchart, keeps
    track which clip should currently be playing, when animations should change or
    blend together. References the clips it uses.'
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*动画控制器*：在状态机流程图中组织片段，跟踪当前应该播放哪个片段，何时动画应该改变或混合。引用它所使用的片段。'
- en: '*Animator component*: Brings together Animation Clips, the Animation Controller,
    and the Avatar if used.'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*动画组件*：将动画片段、动画控制器和（如果使用）Avatar结合在一起。'
- en: Do not use *legacy Animation components :* Animation component is legacy but
    Animation window is not!
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要使用*旧版动画组件*：动画组件是旧版的，但动画窗口不是！
- en: '*Animation window*: Used to create/edit individual Animation Clips, and can
    animate any property you can edit in the inspector. Shows a timeline but is not
    the same as the Timeline window. Offers Dopesheet versus Curves view.'
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*动画窗口*：用于创建/编辑单个动画片段，可以动画化你在检查器中可以编辑的任何属性。显示时间轴，但与时间轴窗口不同。提供Dopesheet与曲线视图。'
- en: '*Animator window*: Organizes existing animation clip assets into a flowchart-like
    state machine graph.'
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*动画师窗口*：将现有的动画片段资产组织成类似流程图的有限状态机图。'
- en: Actually, Timeline animation recordings also use Animation Clips, you just don't
    need to explicitly create them. Each recorded Animation Track in a Timeline has
    a corresponding animation playable file (named "Recorded (n)") in your Assets
    folder.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，时间轴动画记录也使用动画片段，只是你不需要明确创建它们。时间轴中的每个记录的动画轨道在你的资产文件夹中都有一个对应的可播放的动画文件（命名为“Recorded
    (n)”）。
- en: ThirdPersonController Animator
  id: totrans-296
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三人称控制器动画师
- en: 'The `ThirdPersonController` character prefab we used for Ethan in previous
    chapters uses an animator controller to manage humanoid animation clips on the
    rigged model. For curiosity, let''s examine it now (although we will not use it
    in this scene):'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在前面章节中为伊森使用的`ThirdPersonController`角色预制件使用动画控制器来管理绑定模型上的人形动画剪辑。出于好奇，我们现在来检查它（尽管我们不会在这个场景中使用它）：
- en: Temporarily drag a copy of the `ThirdPersonController` prefab from your Project
    `Assets/Standard Assets/ Characters/ThirdPersonCharacter/Prefabs/` folder into
    the scene.
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 暂时将`ThirdPersonController`预制件的副本从你的项目`Assets/Standard Assets/Characters/ThirdPersonCharacter/Prefabs/`文件夹拖到场景中。
- en: Notice in Inspector, it has an Animator component and the Controller slot references
    `ThirPersonAnimatorController`. Click on that.
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器中注意，它有一个动画组件，并且控制器槽引用了`ThirPersonAnimatorController`。点击它。
- en: This will highlight the controller asset (in `Assets/.../ThirdPersonCharacter/Animator`).
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将突出显示控制器资产（在`Assets/.../ThirdPersonCharacter/Animator`）。
- en: Double-click`ThirdPersonAnimatorController` to open it in an Animator window.
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击`ThirdPersonAnimatorController`以在动画器窗口中打开它。
- en: 'The Animator graph for Ethan is shown next. You can see that when the character
    is activated (`Entry`), it initializes to the `Grounded` state. The oval boxes
    are States; the lines between them are Transitions. On the left is the list of
    state Properties that the Animator can use. When `Crouch` is true, for example,
    the animation transitions to `Crouching`, plays that, then transitions back (and
    clears the `Crouch` state flag):'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是伊森的动画图。你可以看到当角色被激活（`Entry`）时，它初始化到`Grounded`状态。椭圆形框是状态；它们之间的线条是转换。左侧是动画器可以使用的状态属性列表。例如，当`Crouch`为真时，动画转换到`Crouching`，播放该动画，然后转换回（并清除`Crouch`状态标志）：
- en: '![](img/fabf44c6-83b7-4256-94f8-872d8c44e0fd.png)'
  id: totrans-303
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fabf44c6-83b7-4256-94f8-872d8c44e0fd.png)'
- en: If you open the `Grounded` state (double-click), you can see a Blend Tree with
    an impressive collection of Animation Clips for standing idle, walking, turning,
    and so on. These will be activated and combined (blended) based on user input.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打开`Grounded`状态（双击），你可以看到一个包含令人印象深刻的站立空闲、行走、转向等动画剪辑的Blend Tree。这些将根据用户输入被激活和组合（混合）。
- en: Next, let's look at another example, the `BirdAnimatorController` used by our
    `Bluejay`.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看另一个例子，我们`Bluejay`使用的`BirdAnimatorController`。
- en: You can now delete the `ThirdPersonController` object from the scene.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可以从场景中删除`ThirdPersonController`对象。
- en: Living Birds Animator
  id: totrans-307
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Living Birds动画器
- en: 'The Living Birds package comes with a lot of animation clips. You can actually
    open the FBX models in Blender or another animation application and examine how
    the models and animations are defined. These have been combined into a `BirdAnimationController`.
    Examine the Animator using the following steps:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: Living Birds包附带了很多动画剪辑。你实际上可以在Blender或其他动画应用程序中打开FBX模型，检查模型和动画是如何定义的。这些已经被组合成一个`BirdAnimationController`。使用以下步骤检查动画器：
- en: Select the `Bluejay` in Hierarchy.
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层次结构中选择`Bluejay`。
- en: Notice in Inspector, it has an Animator component, and the Controller slot references
    `BirdAnimatorController`. Click on that.
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器中注意，它有一个动画组件，并且控制器槽引用了`BirdAnimatorController`。点击它。
- en: In Project Assets, double-click the `ThirdPersonAnimatorController` to open
    it in an Animator window.
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目资产中，双击`ThirdPersonAnimatorController`以在动画器窗口中打开它。
- en: 'The Animator graph is shown here:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 这里显示了动画图：
- en: '![](img/fb942217-cd4a-423b-be38-3fa48b860bac.png)'
  id: totrans-313
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fb942217-cd4a-423b-be38-3fa48b860bac.png)'
- en: You can see that almost all the animations readily transition to and from the
    Idle one, whether Preen, Peck, Sing, or HopLeft, HopRight, HopForward, and so
    on. Also, note the Idle -> Fly -> Landing -> Idle loop, as we're going to use
    that.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到几乎所有的动画都可以轻松地转换到和从空闲状态，无论是Preen、Peck、Sing还是HopLeft、HopRight、HopForward等。此外，注意Idle
    -> Fly -> Landing -> Idle循环，因为我们将要使用它。
- en: 'The Bluejay also has a C# script, `lb_Bird`, which invokes the Animator behaviors.
    It''s not the cleanest code, but it is useful. The most pertinent functions are
    `OnGroundBehaviors` and `FlyToTarget`:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 蓝松鸦还有一个C#脚本，`lb_Bird`，它调用动画器行为。这不是最干净的代码，但很有用。最相关的函数是`OnGroundBehaviors`和`FlyToTarget`：
- en: '`OnGroundBehaviors` randomly chooses and plays one of the idle animations every
    3 seconds'
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OnGroundBehaviors`每3秒随机选择并播放一个空闲动画'
- en: '`FlyToTarget`, will cause the bird to fly to a given position, including takeoff
    and landing and random fluttering around; it looks reasonably natural'
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FlyToTarget`将使鸟飞到指定位置，包括起飞和降落以及随机振翅；看起来相当自然'
- en: So in our project, rather than recording the Keyframe position details of the
    bird's animation path like we did the falling nest, we'll define specific targets
    and let the `lb_Bird` script actually control the bird transforms. This is a lot
    like using a Navmesh to direct Ethan's movement as we did in Chapter 4, *Gaze-Based
    Control*. We will use Timeline to select one target position to the next, over
    time.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在我们的项目中，我们不会像记录下落巢穴的关键帧位置细节那样记录鸟儿动画路径的关键帧位置，而是定义特定的目标，并让 `lb_Bird` 脚本实际控制鸟儿的变换。这就像我们在第
    4 章 *基于注视的控制* 中使用 Navmesh 指导 Ethan 的移动一样。我们将使用时间轴在一段时间内选择一个目标位置到下一个位置。
- en: Learning to fly
  id: totrans-319
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 学习飞翔
- en: 'First, let''s create a `BirdController` and specify a list of locations where
    the bird should fly between. Then, we''ll add this to the Timeline:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们创建一个 `BirdController` 并指定鸟儿应该飞越的位置列表。然后，我们将将其添加到时间轴中：
- en: In Hierarchy, create an Empty game object named `BirdController` and reset its
    Transform.
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层次结构中创建一个名为 `BirdController` 的空游戏对象并重置其变换。
- en: Create a child Empty object, named `Location1`. Move it to be just atop the
    rock closest to the Nest .
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个子空对象，命名为 `Location1`。将其移动到 Nest 最近的岩石顶部。
- en: Create another Empty, named `Location2`, positioned back near the Nest but not
    in it this time.
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个空对象，命名为 `Location2`，这次将其定位在巢穴附近但不在巢穴内。
- en: Continue creating location markers. The values I used, based on my scene and
    rock locations, are shown in the following table.
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续创建位置标记。我使用的值基于我的场景和岩石位置，如下表所示。
- en: The last location should be far away. The bird will head there at the end of
    the video.
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一个位置应该很远。鸟儿将在视频结束时飞向那里。
- en: '| Name | Position | Description |'
  id: totrans-326
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 位置 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-327
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `Location0` | `(0.75, 0.4, -1.25)` | Start position of the Bluejay |'
  id: totrans-328
  prefs: []
  type: TYPE_TB
  zh: '| `Location0` | `(0.75, 0.4, -1.25)` | Bluejay 的起始位置 |'
- en: '| `Location1` | `(3, 0.8, 0)` | Atop nearest rock |'
  id: totrans-329
  prefs: []
  type: TYPE_TB
  zh: '| `Location1` | `(3, 0.8, 0)` | 在最近的岩石顶部 |'
- en: '| `Location2` | `(1.2, 0.2, -1.7)` | Ground near Nest but not in it |'
  id: totrans-330
  prefs: []
  type: TYPE_TB
  zh: '| `Location2` | `(1.2, 0.2, -1.7)` | 地面靠近巢穴但不在巢穴内 |'
- en: '| `Location3` | `(2.5, 0.8, -3.4)` | Atop next nearest rock |'
  id: totrans-331
  prefs: []
  type: TYPE_TB
  zh: '| `Location3` | `(2.5, 0.8, -3.4)` | 在下一个最近的岩石顶部 |'
- en: '| `Location4` | `(-5.85, 0.8, -0.3)` | Next rock |'
  id: totrans-332
  prefs: []
  type: TYPE_TB
  zh: '| `Location4` | `(-5.85, 0.8, -0.3)` | 下一个岩石 |'
- en: '| `Location5` | `(-5, 0.33, 3.5)` | Last rock |'
  id: totrans-333
  prefs: []
  type: TYPE_TB
  zh: '| `Location5` | `(-5, 0.33, 3.5)` | 最后一个岩石 |'
- en: '| `Location6` | `(45, 11, 45)` | In the distance |'
  id: totrans-334
  prefs: []
  type: TYPE_TB
  zh: '| `Location6` | `(45, 11, 45)` | 在远处 |'
- en: 'Create a new C# script on the `BirdController`, named `BirdController`, and
    write it as follows:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `BirdController` 上创建一个新的 C# 脚本，命名为 `BirdController`，并编写如下：
- en: '[PRE1]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: There are a number of things going on here. We'll explain.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 这里发生了很多事情。我们将进行解释。
- en: '`BirdController` has a reference to the `bird`, and a list of location `targets`.
    We''ll populate this list in the Unity Editor. Each location is identified by
    an index value between `0` and the size of the list. An integer, `animIndex`,
    will be the parameter controlled by the Timeline, telling the controller which
    location the bird should fly to.'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: '`BirdController` 有对 `bird` 的引用，以及一个位置 `targets` 列表。我们将在 Unity 编辑器中填充这个列表。每个位置由一个介于
    `0` 和列表大小之间的索引值标识。一个整数 `animIndex` 将是时间轴控制的参数，告诉控制器鸟儿应该飞向哪个位置。'
- en: On each Update, we check whether the `animIndex` has changed. If so, and it's
    within the range for our list, it calls `FlyToTarget` on the bird. (We use `SendMessage`,
    not a best practice way of triggering functions in another object, but it's the
    least disruptive given the existing scripts provided with the Living Birds package.)
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个更新中，我们检查 `animIndex` 是否已更改。如果是，并且它在我们的列表范围内，它将在鸟儿上调用 `FlyToTarget`。（我们使用
    `SendMessage`，这不是触发另一个对象中函数的最佳实践方式，但鉴于提供的现有脚本，这是最不具破坏性的方法。）
- en: The extra two variables, `collideWithObjects` and `birdScale`, are not used
    but are required by the `lb_Bird.cs` script on the Bluejay.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 额外的两个变量 `collideWithObjects` 和 `birdScale` 在 `lb_Bird.cs` 脚本中未使用，但需要在 Bluejay
    上使用。
- en: 'Save the script. Now, in Unity:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 保存脚本。现在，在 Unity 中：
- en: Drag the `BirdController` script onto the `BirdController` object as a component
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `BirdController` 脚本拖动到 `BirdController` 对象上作为组件
- en: Drag `Bluejay` onto the Bird slot
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `Bluejay` 拖动到鸟类槽位
- en: Unfold the Targets list and set Size to `7`
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展开目标列表并将大小设置为 `7`
- en: Drag `Location0` onto Element 0, `Location1` onto Element 1, and so on
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `Location0` 拖动到元素 0，`Location1` 拖动到元素 1，依此类推
- en: 'The Hierarchy with the BirdController component is shown here:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 这里展示了带有 BirdController 组件的层次结构：
- en: '![](img/04e02268-18e3-4461-b644-f51cf8bd6e73.png)'
  id: totrans-348
  prefs: []
  type: TYPE_IMG
  zh: '![](img/04e02268-18e3-4461-b644-f51cf8bd6e73.png)'
- en: Hacking the birds
  id: totrans-349
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 鸟类黑客技术
- en: Unfortunately, like a lot of code you'll find on the internet, the Living Birds
    code works for its own purposes but not necessarily ours. In this case, the package
    is designed for generating a flock of various birds that fly and land randomly,
    avoid collisions and can even be killed. We have just one bird and want more control
    over the landing locations, so we'll make a change to use our `BirdController`
    rather than the `lb_BirdController` in the package.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，就像您在网上找到的很多代码一样，Living Birds代码仅适用于其自身目的，但不一定适用于我们的目的。在这种情况下，该包是为生成一群随机飞翔和着陆的鸟而设计的，可以避免碰撞，甚至可以被杀死。我们只有一只鸟，并希望对着陆地点有更多的控制权，因此我们将使用我们的`BirdController`而不是包中的`lb_BirdController`。
- en: 'Open the `lb_Bird.cs` file (attached to `Bluejay`) and modify it as follows:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`lb_Bird.cs`文件（附加到`Bluejay`）并按以下方式修改：
- en: 'Replace the definition of `controller` to be our `BirdController`:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 将`controller`的定义替换为我们的`BirdController`：
- en: '[PRE3]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Comment out or remove the  `SetController `function:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 注释掉或删除`SetController`函数：
- en: '[PRE4]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Save it. In Unity, drag the `BirdController` object onto the Bluejay's LB_Bird
    Controller slot.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 保存它。在Unity中，将`BirdController`对象拖动到Bluejay的LB_Bird Controller槽中。
- en: Fly away!
  id: totrans-357
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 飞走吧！
- en: Now, we'll add the BirdController as an Animation Track in our Timeline. The
    AnimIndex parameter is an integer value that will step up in value along the timeline.
    We want to Bluejay to start learning to fly around 80 seconds, and jump from location
    to location about 10 seconds apart (80, 90, 100, 110, 120, and away at 130).
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将BirdController添加到我们的时间轴中作为动画轨道。AnimIndex参数是一个整数值，其值将在时间轴上逐步增加。我们希望Bluejay在大约80秒开始学习飞翔，每隔大约10秒从一个地点跳到另一个地点（80,
    90, 100, 110, 120，并在130秒时飞走）。
- en: Open the Timeline Editor window for the `BlackbirdDirector`.
  id: totrans-359
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`BlackbirdDirector`的时间轴编辑器窗口。
- en: Drag the `BirdController` object from Hierarchy onto the Timeline, adding a
    new Animation Track.
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`BirdController`对象从层级拖动到时间轴上，添加一个新的动画轨道。
- en: Press its red Record button.
  id: totrans-361
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下它的红色录音按钮。
- en: Select the `BirdController` in Hierarchy.
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层级中选择`BirdController`。
- en: Move the Playhead to `80`, and in Inspector, set Anim Index to `1`.
  id: totrans-363
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将播放头移动到`80`，在检查器中设置动画索引为`1`。
- en: Move the Playhead to `90` and set Anim Index to `2`.
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将播放头移动到`90`，并将动画索引设置为`2`。
- en: Continue for the other indexes `3` through `6`.
  id: totrans-365
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对其他索引`3`到`6`重复此操作。
- en: Press the red Record button again to stop recording.
  id: totrans-366
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次按下红色录音按钮以停止录音。
- en: Preview the curve. If it doesn't start at 0 (prior to 80s), use Edit in Animation
    Window and add another Keyframe with value `0`.
  id: totrans-367
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 预览曲线。如果它不在0（80秒之前）开始，请使用动画窗口中的编辑，并添加另一个值为`0`的关键帧。
- en: 'The Animation Track curve for the Anim Index parameter is shown here, simply
    incrementing by one at each keyframe:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 这里显示了动画索引参数的动画轨道曲线，每个关键帧简单地递增一次：
- en: '![](img/54b4d8a8-0308-4e22-82f4-1bf5ce8da653.png)'
  id: totrans-369
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/54b4d8a8-0308-4e22-82f4-1bf5ce8da653.png)'
- en: Play it through. Wow! The bird flies from rock to rock, and eventually flies
    away!
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 播放它。哇！鸟从一块石头飞到另一块石头，最终飞走了！
- en: 'You can adjust the bird''s path and timing between landings by moving the location
    objects and the animation curve keyframes, respectively. You could also try animating
    the BirdController''s Bird Scale parameter to make the bird increasingly more
    bold and strong as it learns to fly. A screen capture is given here with the bird
    flying and leaves falling:'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过移动位置对象和动画曲线关键帧来调整鸟的路径和着陆之间的时间。您还可以尝试动画化BirdController的Bird Scale参数，使鸟在学习飞翔的过程中变得越来越勇敢和强壮。这里提供了一个屏幕截图，展示了鸟在飞翔和树叶飘落：
- en: '![](img/9059b585-24dc-4923-8704-824668e046dc.png)'
  id: totrans-372
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/9059b585-24dc-4923-8704-824668e046dc.png)'
- en: We have a completed story. To wrap this up, let's add a little bit of interactivity,
    so the player can control when the story begins playing.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了一个故事。为了结束这个话题，让我们添加一点交互性，以便玩家可以控制故事何时开始播放。
- en: Making the story interactive
  id: totrans-374
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 制作交互式故事
- en: So far, we used the Timeline to drive our entire VR story experience from start
    to finish. But in fact, Timelines are a playable asset like others in Unity. For
    example, if you select the BlackbirdDirector object and look in Inspector at its
    Playable Director, you'll see it has a Play On Awake checkbox, and it's presently
    checked. What we're going to do now is not play on awake, but rather start playing
    on a user event, namely looking directly at the small tree for a few seconds.
    And when the story ends, it resets itself.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们使用了时间线从开始到结束驱动我们的整个 VR 故事体验。但事实上，时间线就像 Unity 中的其他可播放资产一样。例如，如果你选择 BlackbirdDirector
    对象并在检查器中查看其 Playable Director，你会看到它有一个 Play On Awake 复选框，并且目前是勾选的。我们现在要做的不是在唤醒时播放，而是在用户事件上开始播放，即直接看几秒钟的小树。当故事结束时，它会自动重置。
- en: Look to play
  id: totrans-376
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 看看如何播放
- en: 'First, we''ll add a LookAtTarget encasing the small tree and then use that
    to trigger playing the timeline:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将添加一个包围小树的 LookAtTarget，然后使用它来触发播放时间线：
- en: Select the `BlackbirdDirector` and uncheck the Play On Awake checkbox
  id: totrans-378
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 `BlackbirdDirector` 并取消勾选 `Play On Awake` 复选框
- en: For reference, set the Tree game object Scale to its starting keyframe Scale
    (`0.1, 0.1, 0.1`)
  id: totrans-379
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了参考，将树游戏对象的缩放设置为它的起始关键帧缩放 (`0.1, 0.1, 0.1`)
- en: In Hierarchy, create a cube (Create | 3D Object | Cube) and name it `LookAtTarget`
  id: totrans-380
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Hierarchy` 中创建一个立方体（创建 | 3D 对象 | 立方体）并将其命名为 `LookAtTarget`
- en: Scale and place it to encase the small tree, Scale (`0.4, 0.5, 0.4`), Position (`0,
    0.3, 0`)
  id: totrans-381
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 缩放并放置它以包围小树，缩放 (`0.4, 0.5, 0.4`)，位置 (`0, 0.3, 0`)
- en: Disable its Mesh Renderer, but keep its Box Collider
  id: totrans-382
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 禁用其 `Mesh Renderer`，但保留其 `Box Collider`
- en: 'Create a new C# script on the cube, named `LookAtToStart`, and write it as
    follows:'
  id: totrans-383
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在立方体上创建一个新的 C# 脚本，命名为 `LookAtToStart`，并按照以下内容编写：
- en: '[PRE5]'
  id: totrans-384
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The script is similar to ones we wrote in Chapter 4\. We use the main camera
    and determine the direction it is looking. Using the physics engine, we call `Physics.Raycast`
    to cast a ray in the view direction and determine if it hit this object. If so,
    we start or continue a countdown timer and then play the timeline. Meanwhile,
    if you look away, we reset the timer.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本与我们在第 4 章中编写的类似。我们使用主摄像机并确定它所看的方向。使用物理引擎，我们调用 `Physics.Raycast` 来在视图方向上发射一条射线并确定是否击中这个对象。如果是这样，我们开始或继续倒计时计时器并播放时间线。同时，如果你看向别处，我们重置计时器。
- en: Try it now. The Timeline will not start playing until you look at the cube for
    a few seconds.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 现在试试。时间线不会开始播放，直到你看了几秒钟的立方体。
- en: Resetting the initial scene setup
  id: totrans-388
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重置初始场景设置
- en: You probably noticed, unfortunately, that the default start scene is not necessary
    the same state we have for the beginning of the timeline.  You could fix this
    by manually ensuring that every object in the scene Hierarchy has the same initial
    state as the start of the timeline. Instead, we'll add a little hack that plays
    the timeline for a brief 0.1 seconds to reset the objects.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 很可能你已经注意到了，不幸的是，默认的起始场景并不一定是时间线开始时的相同状态。你可以通过手动确保场景层次结构中的每个对象都具有时间线开始时的相同初始状态来修复这个问题。相反，我们将添加一个小技巧，让时间线播放短短的
    0.1 秒来重置对象。
- en: 'We will implement this using a coroutine. Modify the `LookAtToStart` script
    as follows. Add a new variable, `resetSetup`, and initialize it to true:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用协程来实现这一点。修改 `LookAtToStart` 脚本，添加一个新变量 `resetSetup` 并将其初始化为 true：
- en: '[PRE7]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Add a `PlayToSetup` function that will be run as a coroutine. Coroutines are
    a way to run a function, let Unity do other stuff momentarily, and then resume
    where you left off (via the `yield` statement). Here, we start playing the timeline,
    go away for 0.1 seconds, and then tell it to stop playing:'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 添加一个 `PlayToSetup` 函数，它将作为一个协程运行。协程是一种运行函数的方式，让 Unity 短暂地做其他事情，然后从上次停止的地方继续（通过
    `yield` 语句）。在这里，我们开始播放时间线，离开 0.1 秒，然后告诉它停止播放：
- en: '[PRE8]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Call the coroutine from `Update` when we want to reset the setup:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们想要重置设置时，从 `Update` 中调用协程：
- en: '[PRE9]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We also want the scene to reset after the timeline plays all the way through,
    so we set `resetSetup` as soon as the timeline starts playing. It''ll be recognized
    once `timeline.state` is no longer playing:'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还希望时间线播放完毕后场景能够重置，因此我们一启动时间线就设置 `resetSetup`。它将在 `timeline.state` 不再播放时被识别：
- en: '[PRE10]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Press Play. Look at the tree. Enjoy the experience. When it ends, you're reset
    to the beginning and can look at the tree again to replay.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 按下播放。看向树木。享受体验。当它结束时，你会重置到开始位置，可以再次看向树木以重新播放。
- en: More interactivity ideas
  id: totrans-399
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多交互性想法
- en: 'We''re going to stop developing now. Some suggestions on how to improve the
    interactivity and user experience include:'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将停止开发。以下是一些改进交互性和用户体验的建议：
- en: Add a particle effect around the tree to indicate that it's a trigger
  id: totrans-401
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在树周围添加粒子效果，以表明它是触发器
- en: Highlight the tree as feedback when you're looking at it
  id: totrans-402
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你看着树时，将其突出显示作为反馈
- en: Display a countdown cursor to indicate the timer has started and when the story
    will begin playing
  id: totrans-403
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示倒计时光标，以指示计时器已开始，以及故事何时开始播放
- en: 'Here are other suggestions for interactable objects you could add to the story:'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些其他建议，你可以将这些可交互对象添加到故事中：
- en: Look at the egg in the nest causes it to hatch sooner than its default timing
  id: totrans-405
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 看巢中的蛋会导致它比默认时间提前孵化
- en: When you look at the bird while it's idle, it will turn to look back at you
  id: totrans-406
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你看着闲置的鸟时，它会转身回看你
- en: If you poke the bird with your hand controller, it jumps out of the way
  id: totrans-407
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你用你的手控制器戳鸟，它会跳开
- en: You can pick up a rock and throw it to kill the bird (nooo, just kidding!)
  id: totrans-408
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以捡起一块石头扔向鸟（nooo，只是开玩笑！）
- en: Summary
  id: totrans-409
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we built an animated VR story. We began by deciding what we
    want to do, planning out the timeline, music track, graphic assets, animation
    sequences, and lighting. We imported our assets and placed them in the scene,
    then created a Timeline and roughed out when specific objects are enabled and
    disabled using an Activation Track. Next, we animated several objects, including
    growing the tree, floating the nest, and rumbling the egg. We also animated the
    lighting, learning how to animate game object parameters other than Transforms.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们构建了一个动画VR故事。我们首先决定我们要做什么，规划时间表、音乐曲目、图形资产、动画序列和照明。我们导入了我们的资产并将它们放置在场景中，然后创建了一个时间轴，并使用激活轨道草拟了特定对象何时启用和禁用。接下来，我们为几个对象进行了动画处理，包括让树生长、让巢漂浮和让蛋震动。我们还对照明进行了动画处理，学习了如何动画化除了变换之外的游戏对象参数。
- en: We also used Animation Clips and an Animator Controller, using animations imported
    from a third-party package. We reviewed a script that calls into the Animator
    and wrote a controller on top of that, to fly the bird from location to location.
    Lastly, we added interactions to the story, using gaze-based control to start
    and replay the experience.
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还使用了动画剪辑和动画控制器，使用从第三方包导入的动画。我们审查了一个调用动画器的脚本，并在其上编写了一个控制器，以使鸟从地点飞到地点。最后，我们通过基于注视的控制来启动和重播体验，添加了故事中的交互。
- en: In the next chapter, we go social as we look at ways to add multi-user networking
    to Unity VR projects and how to add scenes to the emerging metaverse. Multiplayer
    games are familiar to most of us, but when combined with virtual reality, it provides
    a social experience that is unparalleled by any other technology. We will learn
    about networking technology using the Unity Networking features.
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨如何将多人网络添加到Unity VR项目中，以及如何将场景添加到新兴的元宇宙中。多人游戏对我们大多数人来说都很熟悉，但与虚拟现实结合时，它提供了一种其他任何技术都无法比拟的社会体验。我们将通过使用Unity网络功能来学习网络技术。
