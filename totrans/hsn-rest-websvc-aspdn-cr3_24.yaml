- en: Testing Services Using Postman
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Postman is one of the most powerful tools we can use to query APIs and is mainly
    available to developers and enterprise teams. In this chapter, we will introduce
    Postman and show you how to use this tool to test and monitor a web service. Postman
    is described as an API-first solution with the industry's only complete API development
    environment. Next, we will learn how to use Postman to call a generic HTTP API.
    Then, we will learn how to import the OpenAPI Specification we generated in the
    previous chapter into Postman to automatically generate the API calls that are
    implemented in the catalog service.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Overview of Postman
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importing a collection using OpenAPI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you will have learned how to use Postman to test
    and verify API responses through the Postman UI and by using the automated testing
    tools.
  prefs: []
  type: TYPE_NORMAL
- en: Overview of Postman
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Postman can be used within a company to share internal APIs and applies the
    concept of collections so that it can group, index, and query web services. A
    collection is a group of HTTP calls related to the same service or a collection
    of services.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows a conventional UI for Postman. On the left,
    you can see a list of *collections* that are available in the Postman account,
    while on the right, you can see the core part of the UI:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/90eb6aca-fc74-4044-99f6-c0a5a9ae01a6.png)'
  prefs: []
  type: TYPE_IMG
- en: The first half of the UI represents the HTTP request we intend to launch. Each
    tab at the top of the interface represents an API call; it is possible to type
    in a URL and specify the HTTP verb on the left. For each request, it is also possible
    to specify the query parameters, the authorization specification, the headers,
    the body, and some scripts that we will execute before and after every request.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, the request uses the `{{baseUrl}}/api/artists/:id` URL and passes `id:<guid_value>`.
    It is important to note that, in Postman, it is possible to specify environment
    variables that can be used to parameterize our API queries. In this case, the
    `{{baseUrl}}` placeholder is replaced with the values specified in the collection.
    It is possible to view the collection variables by clicking on the three dots
    next to the collection name, selecting Edit, and then navigating to the Variables
    tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fcff8238-3dba-42eb-87ba-b7b5daf53bde.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The second part of the Postman interface is focused on the response of the
    request. The main section contains the JSON response of the API:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/03db581c-8a6a-4f36-8d11-67f4463c8cae.png)'
  prefs: []
  type: TYPE_IMG
- en: On the right-hand side, we have the Status of the response, the response Time,
    and the Size of the response. Furthermore, it is possible to switch the format
    of the response so that it's either JSON, HTML, or raw text. The response section
    also provides some detailed information about the Headers, Cookies, and Test Results.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will learn how to automatically test our API using Postman's
    tools.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the API using Postman
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Postman also provides us with a helpful tool/framework that we can use to test
    our APIs automatically. The test runtime is based on Node.js; for that reason,
    we should write a test assertion using JavaScript. The test framework of Postman
    uses the following workflow to test our code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/007fe9da-7399-431b-ad1a-335f4959ccc7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The scripts will execute as follows for every request in a collection:'
  prefs: []
  type: TYPE_NORMAL
- en: A pre-request script will run before every request in the collection. This is
    considered the setup part of a test case.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A test script will run after every request in the collection; this is the core
    part of our test. Furthermore, it provides the core assertions for our test.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s use this procedure to implement a simple test for our API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, the test uses the `pm` global object to describe a test, and
    it adds a callback function to make some assertions. In this case, it checks whether
    the API has a status of `200` OK. The following implementation can be added to
    a request by typing the preceding code into the Tests tab of the request, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5e379cc0-c364-441a-82fe-9ecf0519dfc1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After that, we will be able to check the result in the response part of Postman:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1ca0e823-f4e5-4c7d-b5ca-a1f561d0a2e8.png)'
  prefs: []
  type: TYPE_IMG
- en: The test results section that's shown in the preceding screenshot contains four
    different subtabs, all of which group the tests by the results. If an error occurs,
    the UI provides details of the error.
  prefs: []
  type: TYPE_NORMAL
- en: Using the runner to test the APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Postman team built a runner tool that automatically tests and runs your
    APIs so that you can – quite literally – sit back and watch your API test itself.
    Furthermore, you can use scripts to build integration test suites, pass data between
    API requests, and build workflows that mirror your actual API use cases.
  prefs: []
  type: TYPE_NORMAL
- en: 'The runner feature requires at least one test to be associated with the request
    so that it can assert the result. It is possible to access the runner interface
    of Postman by clicking on the Runner button (shown in the yellow rectangle in
    the following screenshot), which can be found in the top-left corner of the screen,
    and selecting the collection you want to run:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e8d6489f-8217-47df-baff-5841911b1d2f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Postman also allows us to integrate these functionalities using the CLI. The
    development team published an `npm` package to execute the runner in a localhost
    environment. It is possible to install this package on your local machine using
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, it is possible to execute the runner on a specific collection by
    passing the JSON file that represents the collection and then executing the preceding
    command. It is possible to export a collection by clicking on the three points
    next to the collection and clicking on the Export option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/16d976d6-9b72-4a18-ade8-104bb5d2741f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, we can proceed by executing this command on the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The resulting execution will look something similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f06b7f68-082e-4de4-ad13-042d963e41fd.png)'
  prefs: []
  type: TYPE_IMG
- en: This implementation provides a single and detailed response of each request
    that was tested and a final report that shows all the information related to the
    tests. This approach is really useful when we want to integrate Postman's testing
    capabilities into a continuous integration pipeline. All we need to do is install
    the `newman` tool on our server and add the path of the collection.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will learn how to use the OpenAPI Specification (described
    in the previous chapter) to automatically generate a Postman collection.
  prefs: []
  type: TYPE_NORMAL
- en: Importing a collection using OpenAPI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, you will learn how to import a collection using the OpenAPI
    Specification. Postman uses some of common API description standards, such as
    OpenAPI v3, Swagger v2 and v1 (as described in the previous chapter), to import
    the routes of web services. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, click on the Import (shown in the yellow rectangle) button at
    the top-left corner of the screen and click on the Import from Link tab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fef80a91-2a6f-48aa-afd7-30e88edc7985.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we can copy and paste the URL of the document API of the running localhost
    service, like so:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: By doing this, the collection will be imported with the same name that we gave
    our Swagger document. This will contain a selection of all the routes that were
    described by Swagger.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to use Postman to query, test, and monitor web
    services. Postman's capabilities go beyond this; however, we can also share collections
    of APIs with other teams and with our consumers. It is an essential tool for any
    API consumer if they wish to check the results and the information provided by
    the consumed services.
  prefs: []
  type: TYPE_NORMAL
- en: You now have the necessary knowledge to use the Postman suite to test and verify
    a web service.
  prefs: []
  type: TYPE_NORMAL
