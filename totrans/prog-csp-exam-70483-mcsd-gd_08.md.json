["```cs\nclass Program\n {\n     static void Main(string[] args)\n     {\n         UnSafeExample();\n     }\n     unsafe static private void UnSafeExample()\n     {\n         int i = 23;\n         int* pi = &i;\n         Console.WriteLine(i);\n         Console.WriteLine(*pi);\n         Console.ReadLine();\n     }\n }\n```", "```cs\n// Value Type\nint x = 10;\nint y = x \n\n// Reference Type\nCar c = new Car();\nCar c2 = c;\n```", "```cs\ninternal static class Configuration\n{\n     public string ConnectionString;\n}\n```", "```cs\ninternal static class Configuration\n{\n    public static string ConnectionString;\n}\n```", "```cs\nConfiguration.ConnectionString = \"Sample Connection String\";\n```", "```cs\ninternal class Configuration\n{\n    public static string ConnectionString;\n}\n```", "```cs\ninternal class Configuration\n{\n    public static string ConnectionString;\n    public static void CreateConnectionString()\n    {      \n    }\n}\n```", "```cs\nConfiguration.CreateConnectionPath(); \n```", "```cs\npublic class Animal\n{\n     public string Name;\n     public string Type;\n\n     public Animal(string Name, string Type)\n     {\n         this.Name = Name;\n         this.Type = Type;\n     }\n }\n```", "```cs\nAnimal animal = new Animal(\"Bingo\", \"Dog\"); \n```", "```cs\ninternal Double CalculateCompoundInterest(Double principle, Double interestRate, int noOfYears)\n{\n     Double simpleInterest = (principle) * Math.Pow((1 + \n      (interestRate)/100), noOfYears);\n     return simpleInterest;\n}\n```", "```cs\nDouble interest = CalculateCompoundInterest(500.5F, 10.5F, 1);            \n```", "```cs\nDouble namedInterest = CalculateCompoundInterest(interestRate: 10.5F, noOfYears: 1, principle: 500.5F); \n```", "```cs\nstatic float MultiplyNumbers(int num1, int num2 = 2, float num3 = 0.4f)\n{\n     return num1 * num2 * num3;\n}\n```", "```cs\nfloat result = MultiplyNumbers(2); // output = 1.6f\nfloat result1 = MultiplyNumbers(2, 5); // output = 4f\nfloat result2 = MultiplyNumbers(2, 4, 5); // output = 40f\n\n```", "```cs\nstatic private bool IsEqual(int A, int B)\n{\n     if(A== B)\n     {\n         return true;\n     }\n     else\n     {\n         return false;\n     }\n }\n```", "```cs\nstatic void Main(string[] args)\n{\n     UnSafeExample();\n     IsEqual(\"string\", \"string\");\n     IsEqual(10, 10);\n}\n\nstatic private bool IsEqual(object A, object B)\n{\n     if (A == B)\n     {\n         return true;\n     }\n     else\n     {\n         return false;\n     }\n }\n```", "```cs\nIsEqual(10, \"string\");\n```", "```cs\nstatic private bool IsEqual<T>(T A, T B)\n{\n     if (A.Equals(B))\n     {\n         return true;\n     }\n     else\n     {\n         return false;\n     }\n }\n```", "```cs\nint x = 5;\n```", "```cs\nx = \"Hello\";\n```", "```cs\nstatic private void BoxAndUnBox()\n{\n     int i = 3;\n     // Boxing conversion from value to reference type\n     object obj = i;\n     // Unboxing conversion from reference type to value type\n     i = (int)obj;\n }\n```", "```cs\ni = (int)obj;\n```", "```cs\n int i = 100;\n float f = i;\n```", "```cs\nfloat k = 100.0F;\nint j = (int)k;\n```", "```cs\nfloat k = 100.0F;\nint j = Convert.ToInt32(k);\n```", "```cs\nfloat k = 100.67F;\nint j = (int)k;\nint a = Convert.ToInt32(k);\nConsole.WriteLine(j);\nConsole.WriteLine(a);\nConsole.ReadLine();\n\n```", "```cs\nstring number = \"100\";\nint num = int.Parse(number); \n```", "```cs\n string number = \"100wer\"; \n int num;\n bool parse = int.TryParse(number, out num);\n if(parse)\n {\n     Console.WriteLine(num);\n }\n else\n {\n     Console.WriteLine(\"Some error in doing conversion\");\n }\n Console.ReadLine(); \n```", "```cs\nclass SampleProperty\n{ \n     private string name;\n     public string Name\n     {\n         set { if(value != null)\n                 {\n                     this.name = value;\n                 }\n               else\n                 {\n                     throw new ArgumentException();\n                 }    \n             }\n         get { return this.name; }\n     }\n }\n```", "```cs\nstring s = \"Hello\";\ns = \"world\";\n```", "```cs\nstring s = String.Empty;\nfor(int z = 0; z < 100; z++)\n{\n    s = + \"a\";\n}\n```", "```cs\nStringBuilder sb = new StringBuilder(string.Empty);\nfor (int z = 0; z < 100; z++)\n{\n     sb.Append(\"a\"); \n}\n```", "```cs\nstatic private string CreateXMLFile()\n{\n     string xmlOutput = string.Empty;\n     var stringWriter = new StringWriter();\n     using (XmlWriter writer = XmlWriter.Create(stringWriter))\n     {\n         writer.WriteStartElement(\"Student\");\n         writer.WriteElementString(\"Name\", \"Rob\");\n         writer.WriteEndElement();\n         writer.Flush();\n     }\n     xmlOutput = stringWriter.ToString();\n     return xmlOutput;\n}\n```", "```cs\nstatic private void ReadXMLFile(string xml)\n{\n     var stringReader = new StringReader(xml);\n     using (XmlReader reader = XmlReader.Create(stringReader))\n     {\n         reader.ReadToFollowing(\"Name\");\n         string studentName = reader.ReadInnerXml();\n         Console.WriteLine(studentName);\n     }\n }\n```", "```cs\nstring s = \"hello australia\";\nvar contains = s.Contains(\"z\");\nif(contains)\n{\n   Console.WriteLine(\" z is present in it.\");\n}\nelse\n{\n   Console.WriteLine(\" z is not present\");\n}  \n```", "```cs\n string s = \"hello australia\";\n var firstIndexOfA = s.IndexOf(\"a\");\n Console.WriteLine(firstIndexOfA);\n var lastIndexOfA = s.LastIndexOf(\"a\");\n Console.WriteLine(lastIndexOfA);\n```", "```cs\nif(s.StartsWith(\"h\"))\n{\n     Console.WriteLine(\"It Starts with h.\");\n}\nelse\n{\n     Console.WriteLine(\"It does not starts with h.\");\n}\n\nif (s.EndsWith(\"h\"))\n{\n     Console.WriteLine(\"It ends with h.\");\n}\nelse\n{\n     Console.WriteLine(\"It does not ends with h.\");\n}\n```", "```cs\n string subString = s.Substring(3, 6);\n string subString2 = s.Substring(3);\n Console.WriteLine(subString);\n Console.WriteLine(subString2);\n```", "```cs\nstatic private void ReadAssembly()\n{\n     string path = @\"C:\\UCN Code Base\\Programming-in-C-Exam-70-483-\n      MCSD-Guide\\Book70483Samples\\Chapter8\\bin\\Debug\\ABC.dll\";\n     Assembly assembly = Assembly.LoadFile(path);\n     Type[] types = assembly.GetTypes();\n     foreach(var type in types)\n     {\n         Console.WriteLine(\"Class : \" + type.Name);\n         MethodInfo[] methods = type.GetMethods();\n         foreach(var method in methods)\n         {\n             Console.WriteLine(\"--Method: \" + method.Name);\n             ParameterInfo[] parameters = method.GetParameters();\n             foreach (var param in parameters)\n             {\n                 Console.WriteLine(\"--- Parameter: \" + param.Name + \" : \n                  \" + param.ParameterType); \n             }\n         }\n     }\n    Console.ReadLine();\n}\n```", "```cs\n float f = 100.23f;\n int i = f;\n Console.WriteLine(i);\n```", "```cs\nstring s = \"hello australia\";\nvar contains = s.Contains(\"A\");\nif(contains)\n{\n     Console.WriteLine(\"it's present\");\n}\nelse\n{\n     Console.WriteLine(\"it's not present\");\n}\n```"]