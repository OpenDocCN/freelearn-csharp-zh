["```cs\nnamespace Gallery.iOS  \n{ \n    using System; \n    using System.Collections.Generic; \n\n    using CoreGraphics; \n    using UIKit; \n\n    public partial class MainController : UIViewController \n    { \n        private UITableView _tableView; \n\n        private TableSource _source; \n\n        private ImageHandler _imageHandler; \n\n        public MainController () : base (\"MainController\", null) \n        { \n            _source = new TableSource (); \n\n            _imageHandler = new ImageHandler (); \n            _imageHandler.AssetsLoaded += handleAssetsLoaded; \n        } \n\n        private void handleAssetsLoaded (object sender, EventArgs e) \n        { \n            _source.UpdateGalleryItems (_imageHandler.CreateGalleryItems()); \n            _tableView.ReloadData (); \n        } \n\n        public override void ViewDidLoad () \n        { \n            base.ViewDidLoad (); \n\n            var width = View.Bounds.Width; \n            var height = View.Bounds.Height; \n\n            tableView = new UITableView(new CGRect(0, 0, width, height)); \n            tableView.AutoresizingMask = UIViewAutoresizing.All; \n            tableView.Source = _source; \n\n            Add (_tableView); \n        } \n    } \n} \n\n```", "```cs\nusing Foundation; \n\n```", "```cs\npublic class TableSource : UITableViewSource  \n    { \n        protected List<GalleryItem> galleryItems; \n        protected string cellIdentifier = \"GalleryCell\"; \n\n        public TableSource (string[] items) \n        { \n            galleryItems = new List<GalleryItem> (); \n        } \n    } \n\n```", "```cs\n        public override nint NumberOfSections (UITableView tableView) \n        { \n            return 1; \n        } \n\n```", "```cs\n        public override nint RowsInSection (UITableView tableview, nint section) \n        { \n            return galleryItems.Count; \n        } \n\n```", "```cs\npublic class GalleryCell: UITableViewCell   \n    { \n        private UIImageView _imageView; \n\n        private UILabel _titleLabel; \n\n        private UILabel _dateLabel; \n\n        public GalleryCell (string cellId) : base (UITableViewCellStyle.Default, cellId) \n        { \n            SelectionStyle = UITableViewCellSelectionStyle.Gray; \n\n            _imageView = new UIImageView() \n            { \n                TranslatesAutoresizingMaskIntoConstraints = false, \n            }; \n\n            _titleLabel = new UILabel ()  \n            { \n                TranslatesAutoresizingMaskIntoConstraints = false, \n            }; \n\n            _dateLabel = new UILabel ()  \n            { \n                TranslatesAutoresizingMaskIntoConstraints = false, \n            }; \n\n            ContentView.Add (imageView); \n            ContentView.Add (titleLabel); \n            ContentView.Add (dateLabel); \n        } \n    } \n\n```", "```cs\npublic void UpdateCell (GalleryItem gallery) \n        { \n            _imageView.Image = UIImage.LoadFromData (NSData.FromArray (gallery.ImageData)); \n            _titleLabel.Text = gallery.Title; \n            _dateLabel.Text = gallery.Date; \n        } \n\n        public override void LayoutSubviews () \n        { \n            base.LayoutSubviews (); \n\n            ContentView.TranslatesAutoresizingMaskIntoConstraints = false; \n\n            // set layout constraints for main view \n            AddConstraints (NSLayoutConstraint.FromVisualFormat(\"V:|[imageView(100)]|\", NSLayoutFormatOptions.DirectionLeftToRight, null, new NSDictionary(\"imageView\", imageView))); \n            AddConstraints (NSLayoutConstraint.FromVisualFormat(\"V:|[titleLabel]|\", NSLayoutFormatOptions.DirectionLeftToRight, null, new NSDictionary(\"titleLabel\", titleLabel))); \n            AddConstraints (NSLayoutConstraint.FromVisualFormat(\"H:|-10-[imageView(100)]-10-[titleLabel]-10-|\", NSLayoutFormatOptions.AlignAllTop, null, new NSDictionary (\"imageView\", imageView, \"titleLabel\", titleLabel))); \n            AddConstraints (NSLayoutConstraint.FromVisualFormat(\"H:|-10-[imageView(100)]-10-[dateLabel]-10-|\", NSLayoutFormatOptions.AlignAllTop, null, new NSDictionary (\"imageView\", imageView, \"dateLabel\", dateLabel))); \n        } \n\n```", "```cs\nnamespace Gallery.iOS \n{ \n    using System; \n\n    public class GalleryItem \n    { \n        public byte[] ImageData; \n\n        public string ImageUri; \n\n        public string Title; \n\n        public string Date; \n\n        public GalleryItem () \n        { \n        } \n    } \n} \n\n```", "```cs\npublic override UITableViewCell GetCell (UITableView tableView, NSIndexPath indexPath) \n        { \n            var cell = (GalleryCell)tableView.DequeueReusableCell (CellIdentifier); \n            var galleryItem = galleryItems[indexPath.Row]; \n\n            if (cell == null) \n            {  \n                // we create a new cell if this row has not been created yet \n                cell = new GalleryCell (CellIdentifier);  \n            } \n\n            cell.UpdateCell (galleryItem); \n\n            return cell; \n        } \n\n```", "```cs\npublic override nfloat GetHeightForRow (UITableView tableView, NSIndexPath indexPath) \n        { \n            return 100; \n        } \n\n```", "```cs\npublic override void ViewDidLoad () \n{ \n.. \ntable.Source = new TableSource(); \n.. \n} \n\n```", "```cs\n[Activity (Label = \"Gallery.Droid\", MainLauncher = true, Icon = \"@mipmap/icon\")] \n\n```", "```cs\nnamespace Gallery.Droid \n{ \n    using Android.App; \n    using Android.Widget; \n    using Android.OS; \n\n    [Activity (Label = \"Gallery.Droid\", MainLauncher = true, Icon = \"@mipmap/icon\")] \n    public class MainActivity : Activity \n    { \n        int count = 1; \n\n        protected override void OnCreate (Bundle savedInstanceState) \n        { \n            base.OnCreate (savedInstanceState); \n\n            // Set our view from the \"main\" layout resource \n            SetContentView (Resource.Layout.Main); \n        } \n    } \n} \n\n```", "```cs\n<?xml version=\"1.0\" encoding=\"utf-8\"?> \n<LinearLayout  \n    android:orientation=\"vertical\" \n    android:layout_width=\"fill_parent\" \n    android:layout_height=\"fill_parent\"> \n    <ListView \n        android:id=\"@+id/listView\" \n        android:layout_width=\"fill_parent\" \n        android:layout_height=\"fill_parent\" \n        android:layout_marginBottom=\"10dp\" \n        android:layout_marginTop=\"5dp\" \n        android:background=\"@android:color/transparent\" \n        android:cacheColorHint=\"@android:color/transparent\" \n        android:divider=\"#CCCCCC\" \n        android:dividerHeight=\"1dp\" \n        android:paddingLeft=\"2dp\" /> \n</LinearLayout> \n\n```", "```cs\npublic override long GetItemId(int position); \n\npublic override View GetView(int position, View convertView, ViewGroup parent); \n\n```", "```cs\n<?xml version=\"1.0\" encoding=\"utf-8\"?> \n<LinearLayout  \n    android:orientation=\"horizontal\" \n    android:layout_width=\"match_parent\" \n    android:layout_height=\"match_parent\" \n    android:weightSum=\"4\"> \n    <LinearLayout \n        android:orientation=\"vertical\" \n        android:layout_width=\"match_parent\" \n        android:layout_height=\"match_parent\" \n        android:layout_weight=\"1\"> \n        <ImageView \n            android:id=\"@+id/image\" \n            android:layout_width=\"100dp\" \n            android:layout_height=\"100dp\" \n            android:adjustViewBounds=\"true\" /> \n    </LinearLayout> \n    <LinearLayout \n        android:orientation=\"vertical\" \n        android:layout_width=\"match_parent\" \n        android:layout_height=\"match_parent\" \n        android:layout_weight=\"3\" \n        android:weightSum=\"2\"> \n        <TextView \n            android:id=\"@+id/title\" \n            android:layout_width=\"wrap_content\" \n            android:layout_height=\"wrap_content\" \n            android:layout_weight=\"1\" /> \n        <TextView \n            android:id=\"@+id/date\" \n            android:layout_width=\"wrap_content\" \n            android:layout_height=\"wrap_content\" \n            android:layout_weight=\"1\" /> \n    </LinearLayout> \n</LinearLayout> \n\n```", "```cs\npublic class ListAdapter : BaseAdapter \n    { \n        private List<GalleryItem> _items; \n        private Activity _context; \n\n        public ListAdapter(Activity context) : base() \n        { \n            _context = context; \n            _items = new List<GalleryItem>(); \n        } \n\n        public override Java.Lang.Object GetItem (int position) \n        { \n            return null; \n        } \n\n        public override long GetItemId(int position) \n        { \n            return position; \n        } \n\n        public override int Count \n        { \n            get \n            { \n                return items.Count;  \n            } \n        } \n} \n\n```", "```cs\npublic override View GetView(int position, View convertView, ViewGroup parent) \n        { \n            View view = convertView; // re-use an existing view, if one is available \n\n            if (view == null) \n            { \n                // otherwise create a new one \n                view = context.LayoutInflater.Inflate(Resource.Layout.CustomCell, null); \n            } \n\n            // set image \n            var imageView = view.FindViewById<ImageView> (Resource.Id.image); \n            BitmapHelpers.CreateBitmap (imageView, _items [position].ImageData); \n\n            // set labels \n            var titleTextView = view.FindViewById<TextView> (Resource.Id.title); \n            titleTextView.Text = _items[position].Title; \n            var dateTextView = view.FindViewById<TextView> (Resource.Id.date); \n            dateTextView.Text = _items[position].Date; \n\n            return view; \n        } \n\n        private async void createBitmap(ImageView imageView, byte[] imageData) \n        { \n            try \n            { \n                if (imageData != null)  \n                { \n                    var bm = await BitmapFactory.DecodeByteArrayAsync(imageData, 0, imageData.Length); \n                    if (bm != null)  \n                    { \n                        imageView.SetImageBitmap(bm); \n                    } \n                } \n            } \n            catch (Exception e)  \n            { \n                Console.WriteLine (\"Bitmap creation failed: \" + e); \n            } \n        } \n\n```", "```cs\nnamespace Gallery.Droid \n{ \n    using System; \n    using System.Collections.Generic; \n\n    using Android.Database; \n    using Android.Content; \n    using Android.Provider; \n\n    using Gallery.Shared; \n\n    public static class ImageHandler \n    { \n    } \n} \n\n```", "```cs\npublic static IEnumerable<GalleryItem> GetFiles(Context context) \n        { \n            ContentResolver cr = context.ContentResolver; \n\n            string[] columns = new string[]  \n            { \n                MediaStore.Images.ImageColumns.Id, \n                MediaStore.Images.ImageColumns.Title, \n                MediaStore.Images.ImageColumns.Data, \n                MediaStore.Images.ImageColumns.DateAdded, \n                MediaStore.Images.ImageColumns.MimeType, \n                MediaStore.Images.ImageColumns.Size, \n            }; \n\n            var cursor = cr.Query(MediaStore.Images.Media.ExternalContentUri, columns, null, null, null); \n\n            int columnIndex = cursor.GetColumnIndex(columns[2]); \n\n            int index = 0; \n\n            // create max 100 items \n            while (cursor.MoveToNext () && index < 100)  \n            { \n                index++; \n\n                var url = cursor.GetString(columnIndex); \n\n                var imageData = createCompressedImageDataFromBitmap (url); \n\n                yield return new GalleryItem ()  \n                { \n                    Title = cursor.GetString(1), \n                    Date = cursor.GetString(3), \n                    ImageData = imageData, \n                    ImageUri = url, \n                }; \n            } \n        } \n\n```", "```cs\n\"MediaStore.Images.Media.ExternalContentUri\" \n\n```", "```cs\npublic static int CalculateInSampleSize(BitmapFactory.Options options, int reqWidth, int reqHeight) \n        { \n            // Raw height and width of image \n            float height = options.OutHeight; \n            float width = options.OutWidth; \n            double inSampleSize = 1D; \n\n            if (height > reqHeight || width > reqWidth) \n            { \n                int halfHeight = (int)(height / 2); \n                int halfWidth = (int)(width / 2); \n\n                // Calculate a inSampleSize that is a power of 2 - the decoder will use a value that is a power of two anyway. \n                while ((halfHeight / inSampleSize) > reqHeight && (halfWidth / inSampleSize) > reqWidth) \n                { \n                    inSampleSize *= 2; \n                } \n            } \n\n            return (int)inSampleSize; \n        } \n\n        public static async void CreateBitmap(ImageView imageView, byte[] imageData) \n        { \n            try \n            { \n                if (imageData != null)  \n                { \n                    var bm = await BitmapFactory.DecodeByteArrayAsync(imageData, 0, imageData.Length); \n                    if (bm != null)  \n                    { \n                        imageView.SetImageBitmap(bm); \n                    } \n                } \n            } \n            catch (Exception e)  \n            { \n                Console.WriteLine (\"Bitmap creation failed: \" + e); \n            } \n        } \n\n```", "```cs\nprivate static byte[] createCompressedImageDataFromBitmap(string url) \n        { \n            BitmapFactory.Options options = new BitmapFactory.Options (); \n            options.InJustDecodeBounds = true; \n            BitmapFactory.DecodeFile (url, options); \n            options.InSampleSize = BitmapHelpers.CalculateInSampleSize (options, 1600, 1200); \n            options.InJustDecodeBounds = false; \n\n            Bitmap bm = BitmapFactory.DecodeFile (url, options); \n\n            var stream = new MemoryStream (); \n            bm.Compress (Bitmap.CompressFormat.Jpeg, 80, stream); \n            return stream.ToArray (); \n        } \n\n```", "```cs\npublic ListAdapter(Activity context) : base() \n        { \n            _context = context; \n            _items = new List<GalleryItem>(); \n\n            foreach (var galleryitem in ImageHandler.GetFiles (_context)) \n            { \n                _items.Add (galleryitem); \n            } \n        } \n\n```", "```cs\npublic class MainActivity : Activity \n    { \n        private ListAdapter _adapter; \n\n        protected override void OnCreate (Bundle savedInstanceState) \n        { \n            base.OnCreate (savedInstanceState); \n\n            SetContentView (Resource.Layout.Main); \n\n            _adapter = new ListAdapter (this); \n\n            var listView = FindViewById<ListView> (Resource.Id.listView); \n            listView.Adapter = adapter; \n        } \n    } \n\n```", "```cs\nnamespace Gallery.iOS \n{ \n    using System; \n    using System.Threading; \n\n    using UIKit; \n    using AssetsLibrary; \n    using Foundation; \n\n    /// <summary> \n    /// Image handler. \n    /// </summary> \n    public class ImageHandler \n    { \n        /// <summary> \n        /// The asset library. \n        /// </summary> \n        ALAssetsLibrary _assetLibrary; \n\n        /// <summary> \n        /// Initializes a new instance of the <see cref=\"Gallery.iOS.ImageHandler\"/> class. \n        /// </summary> \n        public ImageHandler () \n        { \n            _assetLibrary = new ALAssetsLibrary(); \n            _assetLibrary.Enumerate(ALAssetsGroupType.SavedPhotos, GroupEnumerator, Console.WriteLine); \n        }  \n    } \n} \n\n```", "```cs\nprivate void GroupEnumerator(ALAssetsGroup assetGroup, ref bool shouldStop) \n        { \n            if (assetGroup == null) \n            { \n                shouldStop = true; \n                NotifyAssetsLoaded (); \n\n                return; \n            } \n\n            if (!shouldStop) \n            { \n                assetGroup.Enumerate(AssetEnumerator); \n                shouldStop = false; \n            } \n        } \n\n        private void AssetEnumerator(ALAsset asset, nint index, ref bool shouldStop) \n        { \n            if (asset == null) \n            { \n                shouldStop = true; \n                return; \n            } \n\n            if (!shouldStop) \n            { \n                // add asset name to list \n                _assets.Add (asset.ToString()); \n                shouldStop = false; \n            } \n        } \n\n   private void NotifyAssetsLoaded() \n        { \n            if (AssetsLoaded != null) \n            { \n                AssetsLoaded (this, EventArgs.Empty); \n            } \n        } \n\n```", "```cs\npublic ALAsset SynchronousGetAsset(string filename) \n        { \n            ManualResetEvent waiter = new ManualResetEvent(false); \n            NSError error = null; \n            ALAsset result = null; \n            Exception exception;  \n\n            ThreadPool.QueueUserWorkItem ((object state) => assetLibrary.AssetForUrl (new NSUrl (filename), (ALAsset asset) =>  \n                { \n                    result = asset; \n                    waiter.Set (); \n                },  \n                e =>  \n                { \n                    error = e; \n                    waiter.Set (); \n                })); \n\n            if(!waiter.WaitOne (TimeSpan.FromSeconds (10))) \n                throw  new Exception(\"Error Getting Asset : Timeout, Asset=\" + filename); \n\n            if (error != null) \n                throw new Exception (error.Description); \n\n            return result; \n        } \n\n```", "```cs\nforeach (var file in _assets.Take(100))  \n            { \n                using (var asset = SynchronousGetAsset (file)) \n                { \n                    if (asset != null)  \n                    { \n                        var thumbnail = asset.Thumbnail; \n                        var image = UIImage.FromImage (thumbnail); \n                        var jpegData = image.AsJPEG ().ToArray (); \n\n                        yield return new GalleryItem ()  \n                        { \n                            Title = file, \n                            Date = asset.Date.ToString(), \n                            ImageData = jpegData, \n                            ImageUri = asset.AssetUrl.ToString () \n                        }; \n                    } \n                } \n            } \n        } \n\n```", "```cs\n        private ImageHandler _imageHandler; \n\n        public TableSource (string[] items) \n        { \n            _galleryItems = new List<GalleryItem> (); \n            _imageHandler = new ImageHandler (); \n\n            foreach (var galleryItem in imageHandler.GetFiles ())  \n            { \n                _galleryItems.Add (galleryItem); \n            } \n        } \n\n```", "```cs\npublic override bool FinishedLaunching (UIApplication application, NSDictionary launchOptions) \n        { \n            _window = new UIWindow (UIScreen.MainScreen.Bounds); \n\n            MainController mainController = new MainController(); \n\n            var rootNavigationController = new UINavigationController(); \n            rootNavigationController.PushViewController(mainController, false); \n\n            _window.RootViewController = rootNavigationController; \n            _window.MakeKeyAndVisible (); \n\n            return true; \n        } \n\n```", "```cs\npublic event EventHandler<GalleryItem> \n ItemSelected; \n\n```", "```cs\npublic override void RowSelected (UITableView tableView, NSIndexPath indexPath) \n        { \n            if (ItemSelected != null) \n            { \n                ItemSelected (this, galleryItems[indexPath.Row]); \n            } \n\n            tableView.DeselectRow (indexPath, true); \n        } \n\n```", "```cs\npublic partial class PhotoController : UIViewController \n    { \n        /// <summary> \n        /// The image view. \n        /// </summary> \n        private UIImageView _imageView; \n\n        /// <summary> \n        /// The title label. \n        /// </summary> \n        private UILabel _titleLabel; \n\n        /// <summary> \n        /// The date label. \n        /// </summary> \n        private UILabel _dateLabel; \n\n        /// <summary> \n        /// Initializes a new instance of the <see cref=\"Gallery.iOS.PhotoController\"/> class. \n        /// </summary> \n        public PhotoController (ALAsset asset) : base (\"PhotoController\", null) \n        { \n            _imageView = new UIImageView() \n            { \n                TranslatesAutoresizingMaskIntoConstraints = false, \n                ContentMode = UIViewContentMode.ScaleAspectFit \n            }; \n\n            _titleLabel = new UILabel ()  \n            { \n                TranslatesAutoresizingMaskIntoConstraints = false, \n            }; \n\n            _dateLabel = new UILabel ()  \n            { \n                TranslatesAutoresizingMaskIntoConstraints = false, \n            }; \n\n            _imageView.Image = new UIImage(asset.DefaultRepresentation.GetFullScreenImage ()); \n            _titleLabel.Text = asset.DefaultRepresentation.Filename; \n            _dateLabel.Text = asset.Date.ToString(); \n        } \n\n```", "```cs\npublic override void ViewDidLoad () \n        { \n            base.ViewDidLoad (); \n\n            View.Add (_imageView); \n            View.Add (_titleLabel); \n            View.Add (_dateLabel); \n\n            // set layout constraints for main view \n            View.AddConstraints (NSLayoutConstraint.FromVisualFormat(\"V:|[imageView]-10-[titleLabel(50)]-10-[dateLabel(50)]|\", NSLayoutFormatOptions.DirectionLeftToRight, null, new NSDictionary(\"imageView\", imageView, \"titleLabel\", titleLabel, \"dateLabel\", dateLabel))); \n\n            View.AddConstraints (NSLayoutConstraint.FromVisualFormat(\"H:|[imageView]|\", NSLayoutFormatOptions.AlignAllTop, null, new NSDictionary (\"imageView\", imageView))); \n            View.AddConstraints (NSLayoutConstraint.FromVisualFormat(\"H:|[titleLabel]|\", NSLayoutFormatOptions.AlignAllTop, null, new NSDictionary (\"titleLabel\", titleLabel))); \n            View.AddConstraints (NSLayoutConstraint.FromVisualFormat(\"H:|[dateLabel]|\", NSLayoutFormatOptions.AlignAllTop, null, new NSDictionary (\"dateLabel\", dateLabel))); \n        } \n\n```", "```cs\n        public MainController () : base (\"MainController\", null) \n        { \n            _source = new TableSource (); \n\n            _source.ItemSelected += (sender, e) =>  \n            { \n                var asset = _imageHandler.SynchronousGetAsset (e.Title); \n                NavigationController.PushViewController (new PhotoController (asset), true); \n            }; \n\n            _imageHandler = new ImageHandler (); \n            _imageHandler.AssetsLoaded += handleAssetsLoaded; \n        } \n\n```", "```cs\n<?xml version=\"1.0\" encoding=\"utf-8\"?> \n<LinearLayout  \n    android:orientation=\"vertical\" \n    android:layout_width=\"match_parent\" \n    android:layout_height=\"match_parent\" \n    android:weightSum=\"4\"> \n    <LinearLayout \n        android:orientation=\"vertical\" \n        android:layout_width=\"match_parent\" \n        android:layout_height=\"match_parent\" \n        android:layout_weight=\"1\"> \n        <ImageView \n            android:id=\"@+id/image_photo\" \n            android:scaleType=\"centerCrop\" \n            android:layout_width=\"wrap_content\" \n            android:layout_height=\"wrap_content\" \n            android:adjustViewBounds=\"true\" /> \n    </LinearLayout> \n    <LinearLayout \n        android:orientation=\"vertical\" \n        android:layout_width=\"match_parent\" \n        android:layout_height=\"match_parent\" \n        android:layout_weight=\"3\" \n        android:weightSum=\"2\"> \n        <TextView \n            android:id=\"@+id/title_photo\" \n            android:layout_width=\"wrap_content\" \n            android:layout_height=\"wrap_content\" \n            android:layout_weight=\"1\" /> \n        <TextView \n            android:id=\"@+id/date_photo\" \n            android:layout_width=\"wrap_content\" \n            android:layout_height=\"wrap_content\" \n            android:layout_weight=\"1\" /> \n    </LinearLayout> \n</LinearLayout> \n\n```", "```cs\nandroid:adjustViewBounds=\"true\" \nandroid:scaleType=\"centerCrop\" \n\n```", "```cs\n[Activity (Label = \"Gallery.Droid\", Icon = \"@mipmap/icon\")] \n    public class PhotoActivity : Activity \n    { \n        /// <summary> \n        /// Raises the create event. \n        /// </summary> \n        /// <param name=\"savedInstanceState\">Saved instance state.</param> \n        protected override void OnCreate (Bundle savedInstanceState) \n        { \n            base.OnCreate (savedInstanceState); \n\n            // Set our view from the \"main\" layout resource \n            SetContentView (Resource.Layout.Photo); \n\n            var imageData = Intent.GetByteArrayExtra (\"ImageData\"); \n            var title = Intent.GetStringExtra (\"Title\") ?? string.Empty; \n            var date = Intent.GetStringExtra (\"Date\") ?? string.Empty; \n\n            // set image \n            var imageView = FindViewById<ImageView> (Resource.Id.image_photo); \n            BitmapHelpers.CreateBitmap (imageView, imageData); \n\n            // set labels \n            var titleTextView = FindViewById<TextView> (Resource.Id.title_photo); \n            titleTextView.Text = title; \n            var dateTextView = FindViewById<TextView> (Resource.Id.date_photo); \n            dateTextView.Text = date; \n        } \n    } \n\n```", "```cs\n[Activity (Label = \"Gallery.Droid\", Icon = \"@mipmap/icon\")] \n\n```", "```cs\npublic GalleryItem GetItemByPosition (int position) \n{ \n     return _items[position]; \n} \n\n```", "```cs\nlistView.ItemClick += (object sender, AdapterView.ItemClickEventArgs e) =>  \n            { \n                var galleryItem = adapter.GetItemByPosition (e.Position); \n                var photoActivity = new Intent(this, typeof(PhotoActivity)); \n                photoActivity.PutExtra (\"ImageData\", galleryItem.ImageData); \n                photoActivity.PutExtra (\"Title\", galleryItem.Title); \n                photoActivity.PutExtra (\"Date\", galleryItem.Date); \n                StartActivity(photoActivity); \n            }; \n\n```"]