["```cs\nabp new ProductManagement -t app\n```", "```cs\nusing System;\nusing Volo.Abp.Domain.Entities.Auditing;\nnamespace ProductManagement.Categories\n{\n    public class Category : AuditedAggregateRoot<Guid>\n    {\n        public string Name { get; set; }\n    }\n}\n```", "```cs\nnamespace ProductManagement.Products\n{\n    public enum ProductStockState : byte\n    {\n        PreOrder,\n        InStock,\n        NotAvailable,\n        Stopped\n    }\n}\n```", "```cs\nusing System;\nusing Volo.Abp.Domain.Entities.Auditing;\nusing ProductManagement.Categories;\nnamespace ProductManagement.Products\n{\n    public class Product : FullAuditedAggregateRoot<Guid>\n    {\n        public Category Category { get; set; }\n        public Guid CategoryId { get; set; }\n        public string Name { get; set; }\n        public float Price { get; set; }\n        public bool IsFreeCargo { get; set; }\n        public DateTime ReleaseDate { get; set; }\n        public ProductStockState StockState { get; set; }\n    }\n}\n```", "```cs\nnamespace ProductManagement.Categories\n{\n    public static class CategoryConsts\n    {\n        public const int MaxNameLength = 128;\n    }\n}\n```", "```cs\nnamespace ProductManagement.Products\n{\n    public static class ProductConsts\n    {\n        public const int MaxNameLength = 128;\n    }\n}\n```", "```cs\npublic DbSet<Product> Products { get; set; }\npublic DbSet<Category> Categories { get; set; }\n```", "```cs\nprotected override void OnModelCreating(ModelBuilder builder)\n{\n    base.OnModelCreating(builder);\n    builder.ConfigurePermissionManagement();\n    builder.ConfigureSettingManagement();\n    builder.ConfigureIdentity();\n    ...configuration of the other modules\n    /* Configure your own tables/entities here */\n}\n```", "```cs\nbuilder.Entity<Category>(b =>\n{\n      b.ToTable(\"Categories\");\n      b.Property(x => x.Name)\n            .HasMaxLength(CategoryConsts.MaxNameLength)\n            .IsRequired();\n      b.HasIndex(x => x.Name);\n});\nbuilder.Entity<Product>(b =>\n{\n      b.ToTable(\"Products\");\n      b.Property(x => x.Name)\n            .HasMaxLength(ProductConsts.MaxNameLength)\n            .IsRequired();\n      b.HasOne(x => x.Category)\n           .WithMany()\n           .HasForeignKey(x => x.CategoryId)\n           .OnDelete(DeleteBehavior.Restrict)\n           .IsRequired();\nb.HasIndex(x => x.Name).IsUnique();\n});\n```", "```cs\nAdd-Migration \"Added_Categories_And_Products\"\n```", "```cs\ndotnet tool install --global dotnet-ef\n```", "```cs\ndotnet ef migrations add \"Added_Categories_And_Products\"\n```", "```cs\nusing ProductManagement.Categories;\nusing ProductManagement.Products;\nusing System;\nusing System.Threading.Tasks;\nusing Volo.Abp.Data;\nusing Volo.Abp.DependencyInjection;\nusing Volo.Abp.Domain.Repositories;\nnamespace ProductManagement.Data\n{\n    public class ProductManagementDataSeedContributor :\n           IDataSeedContributor, ITransientDependency\n    {\n        private readonly IRepository<Category,                           Guid>_categoryRepository;\n        private readonly IRepository<Product,                           Guid>_productRepository;\n        public ProductManagementDataSeedContributor(\n            IRepository<Category, Guid> categoryRepository,\n            IRepository<Product, Guid> productRepository)\n        {\n            _categoryRepository = categoryRepository;\n            _productRepository = productRepository;\n        }\n        public async Task SeedAsync(DataSeedContext                     context)\n        {\n            /***** TODO: Seed initial data here *****/\n        }\n    }\n}\n```", "```cs\nif (await _categoryRepository.CountAsync() > 0)\n{\n    return;\n}\nvar monitors = new Category { Name = \"Monitors\" };\nvar printers = new Category { Name = \"Printers\" };\nawait _categoryRepository\n    .InsertManyAsync(new[] { monitors, printers });\nvar monitor1 = new Product\n{\n    Category = monitors,\n    Name = \"XP VH240a 23.8-Inch Full HD 1080p IPS LED               Monitor\",\n    Price = 163,\n    ReleaseDate = new DateTime(2019, 05, 24),\n    StockState = ProductStockState.InStock\n};\nvar monitor2 = new Product\n{\n    Category = monitors,\n    Name = \"Clips 328E1CA 32-Inch Curved Monitor, 4K UHD\",\n    Price = 349,\n    IsFreeCargo = true,\n    ReleaseDate = new DateTime(2022, 02, 01),\n    StockState = ProductStockState.PreOrder\n};\nvar printer1 = new Product\n{\n    Category = monitors,\n    Name = \"Acme Monochrome Laser Printer, Compact All-In           One\",\n    Price = 199,\n    ReleaseDate = new DateTime(2020, 11, 16),\n    StockState = ProductStockState.NotAvailable\n};\nawait _productRepository\n    .InsertManyAsync(new[] { monitor1, monitor2, printer1 });\n```", "```cs\nusing System;\nusing Volo.Abp.Application.Dtos;\nnamespace ProductManagement.Products\n{\n    public class ProductDto : AuditedEntityDto<Guid>\n    {\n        public Guid CategoryId { get; set; }\n        public string CategoryName { get; set; }\n        public string Name { get; set; }\n        public float Price { get; set; }\n        public bool IsFreeCargo { get; set; }\n        public DateTime ReleaseDate { get; set; }\n        public ProductStockState StockState { get; set; }\n    }\n}\n```", "```cs\nusing System.Threading.Tasks;\nusing Volo.Abp.Application.Dtos;\nusing Volo.Abp.Application.Services;\nnamespace ProductManagement.Products\n{\n    public interface IProductAppService :                           IApplicationService\n    {\n        Task<PagedResultDto<ProductDto>>\n            GetListAsync(PagedAndSortedResultRequestDto                     input);\n    }\n}\n```", "```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Linq.Dynamic.Core;\nusing System.Threading.Tasks;\nusing Volo.Abp.Application.Dtos;\nusing Volo.Abp.Domain.Repositories;\nnamespace ProductManagement.Products\n{\n    public class ProductAppService :\n        ProductManagementAppService, IProductAppService\n    {\n        private readonly IRepository<Product, Guid>                     _productRepository;\n        public ProductAppService(\n            IRepository<Product, Guid> productRepository)\n        {\n            _productRepository = productRepository;\n        }\n        public async Task<PagedResultDto<ProductDto>>                   GetListAsync(\n            PagedAndSortedResultRequestDto input)\n        {\n            /* TODO: Implementation */\n        }\n    }\n}\n```", "```cs\npublic async Task<PagedResultDto<ProductDto>> GetListAsync(\n    PagedAndSortedResultRequestDto input)\n{\n    var queryable = await _productRepository\n        .WithDetailsAsync(x => x.Category);\n    queryable = queryable\n        .Skip(input.SkipCount)\n        .Take(input.MaxResultCount)\n        .OrderBy(input.Sorting ?? nameof(Product.Name));\n    var products = await                                             AsyncExecuter.ToListAsync(queryable);\n    var count = await _productRepository.GetCountAsync();\n    return new PagedResultDto<ProductDto>(\n        count,\n        ObjectMapper.Map<List<Product>, List<ProductDto>>                (products)\n    );\n}\n```", "```cs\nusing AutoMapper;\nusing ProductManagement.Products;\nnamespace ProductManagement\n{\n    public class ProductManagementApplicationAutoMapperProfile\n        : Profile\n    {\n        public ProductManagementApplicationAutoMapperProfile()\n        {\n            CreateMap<Product, ProductDto>();\n        }\n    }\n}\n```", "```cs\nusing Shouldly;\nusing System.Threading.Tasks;\nusing Volo.Abp.Application.Dtos;\nusing Xunit;\nnamespace ProductManagement.Products\n{\n    public class ProductAppService_Tests\n        : ProductManagementApplicationTestBase\n    {\n        private readonly IProductAppService                             _productAppService;\n        public ProductAppService_Tests()\n        {\n            _productAppService =\n                GetRequiredService<IProductAppService>();\n        }\n        /* TODO: Test methods */\n    }\n}\n```", "```cs\n[Fact]\npublic async Task Should_Get_Product_List()\n{\n    //Act\n    var output = await _productAppService.GetListAsync(\n        new PagedAndSortedResultRequestDto()\n    );\n    //Assert\n    output.TotalCount.ShouldBe(3);\n    output.Items.ShouldContain(\n        x => x.Name.Contains(\"Acme Monochrome Laser                     Printer\")\n    );\n}\n```", "```cs\nproductManagement.products.product.getList({}).then(function(result) {\n    console.log(result);\n});\n```", "```cs\n@page\n@using ProductManagement.Web.Pages.Products\n@model IndexModel\n<h1>Products Page</h1>\n```", "```cs\ncontext.Menu.AddItem(\n    new ApplicationMenuItem(\n        \"ProductManagement\",\n        l[\"Menu:ProductManagement\"],\n        icon: \"fas fa-shopping-cart\"\n            ).AddItem(\n        new ApplicationMenuItem(\n            \"ProductManagement.Products\",\n            l[\"Menu:Products\"],\n            url: \"/Products\"\n        )\n    )\n);\n```", "```cs\n\"Menu:ProductManagement\": \"Product Management\",\n\"Menu:Products\": \"Products\"\n```", "```cs\n@page\n@using ProductManagement.Web.Pages.Products\n@using Microsoft.Extensions.Localization\n@using ProductManagement.Localization\n@model IndexModel\n@inject IStringLocalizer<ProductManagementResource> L\n@section scripts\n{\n    <abp-script src=\"img/Index.cshtml.js\" />\n}\n<abp-card>\n    <abp-card-header>\n        <h2>@L[\"Menu:Products\"]</h2>\n    </abp-card-header>\n    <abp-card-body>\n        <abp-table id=\"ProductsTable\" striped-rows=\"true\" />\n    </abp-card-body>\n</abp-card>\n```", "```cs\n$(function () {\n    var l = abp.localization.getResource('ProductManagement');\n    var dataTable = $('#ProductsTable').DataTable(\n        abp.libs.datatables.normalizeConfiguration({\n            serverSide: true,\n            paging: true,\n            order: [[0, \"asc\"]],\n            searching: false,\n            scrollX: true,\n            ajax: abp.libs.datatables.createAjax(\n                productManagement.products.product.getList),\n            columnDefs: [\n                /* TODO: Column definitions */\n            ]\n        })\n    );\n});\n```", "```cs\n{\n    title: l('Name'),\n    data: \"name\"\n},\n{\n    title: l('CategoryName'),\n    data: \"categoryName\",\n    orderable: false\n},\n{\n    title: l('Price'),\n    data: \"price\"\n},\n{\n    title: l('StockState'),\n    data: \"stockState\",\n    render: function (data) {\n        return l('Enum:StockState:' + data);\n    }\n},\n{\n    title: l('CreationTime'),\n    data: \"creationTime\",\n    dataFormat: 'date'\n}\n```", "```cs\n\"Name\": \"Name\",\n\"CategoryName\": \"Category name\",\n\"Price\": \"Price\",\n\"StockState\": \"Stock state\",\n\"Enum:StockState:0\": \"Pre-order\",\n\"Enum:StockState:1\": \"In stock\",\n\"Enum:StockState:2\": \"Not available\",\n\"Enum:StockState:3\": \"Stopped\",\n\"CreationTime\": \"Creation time\"\n```", "```cs\nTask CreateAsync(CreateUpdateProductDto input);\nTask<ListResultDto<CategoryLookupDto>> GetCategoriesAsync();\n```", "```cs\nusing System;\nusing System.ComponentModel.DataAnnotations;\nnamespace ProductManagement.Products\n{\n    public class CreateUpdateProductDto\n    {\n        public Guid CategoryId { get; set; }\n        [Required]\n        [StringLength(ProductConsts.MaxNameLength)]\n        public string Name { get; set; }\n        public float Price { get; set; }\n        public bool IsFreeCargo { get; set; }\n        public DateTime ReleaseDate { get; set; }\n        public ProductStockState StockState { get; set; }\n    }\n}\n```", "```cs\nusing System;\nnamespace ProductManagement.Categories\n{\n    public class CategoryLookupDto\n    {\n        public Guid Id { get; set; }\n        public string Name { get; set; }\n    }\n}\n```", "```cs\npublic async Task CreateAsync(CreateUpdateProductDto input)\n{\n    await _productRepository.InsertAsync(\n        ObjectMapper.Map<CreateUpdateProductDto, Product>                (input)\n    );\n}\npublic async Task<ListResultDto<CategoryLookupDto>>\n       GetCategoriesAsync()\n{\n    var categories = await _categoryRepository.GetListAsync();\n    return new ListResultDto<CategoryLookupDto>(\n        ObjectMapper\n        .Map<List<Category>, List<CategoryLookupDto>>                    (categories)\n    );\n}\n```", "```cs\nCreateMap<CreateUpdateProductDto, Product>();\nCreateMap<Category, CategoryLookupDto>();\n```", "```cs\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Mvc.Rendering;\nusing ProductManagement.Products;\nnamespace ProductManagement.Web.Pages.Products\n{\n    Public class CreateProductModalModel:\n        ProductManagementPageModel\n    {\n        [BindProperty]\n        public CreateEditProductViewModel Product { get;                 set; }\n        public SelectListItem[] Categories { get; set; }\n        private readonly IProductAppService                             _productAppService;\n        public CreateProductModalModel(\n            IProductAppService productAppService)\n        {\n            _productAppService = productAppService;\n        }\n        public async Task OnGetAsync()\n        {\n            // TODO\n        }\n        public async Task<IActionResult> OnPostAsync()\n        {\n            // TODO\n        }\n    }\n}\n```", "```cs\nusing ProductManagement.Products;\nusing System;\nusing System.ComponentModel;\nusing System.ComponentModel.DataAnnotations;\nusing Volo.Abp.AspNetCore.Mvc.UI.Bootstrap.TagHelpers.Form;\nnamespace ProductManagement.Web.Pages.Products\n{\n    public class CreateEditProductViewModel\n    {\n        [SelectItems(\"Categories\")]\n        [DisplayName(\"Category\")]\n        public Guid CategoryId { get; set; }\n        [Required]\n        [StringLength(ProductConsts.MaxNameLength)]\n        public string Name { get; set; }\n        public float Price { get; set; }\n        public bool IsFreeCargo { get; set; }\n        [DataType(DataType.Date)]\n        public DateTime ReleaseDate { get; set; }\n        public ProductStockState StockState { get; set; }\n    }\n}\n```", "```cs\npublic async Task OnGetAsync()\n{\n    Product = new CreateEditProductViewModel\n    {\n        ReleaseDate = Clock.Now,\n        StockState = ProductStockState.PreOrder\n    };\n\n    var categoryLookup =\n        await _productAppService.GetCategoriesAsync();\n    Categories = categoryLookup.Items\n        .Select(x => new SelectListItem(x.Name,                         x.Id.ToString()))\n                .ToArray();\n}\n```", "```cs\npublic async Task<IActionResult> OnPostAsync()\n{\n    await _productAppService.CreateAsync(\n        ObjectMapper\n            .Map<CreateEditProductViewModel,CreateUpdateProductDto>                   (Product)\n    );\n    return NoContent();\n}\n```", "```cs\npublic class ProductManagementWebAutoMapperProfile : Profile\n{\n    public ProductManagementWebAutoMapperProfile()\n    {\n        CreateMap<CreateEditProductViewModel,                                   CreateUpdateProductDto>();\n    }\n}\n```", "```cs\n@page\n@using Microsoft.AspNetCore.Mvc.Localization\n@using ProductManagement.Localization\n@using Volo.Abp.AspNetCore.Mvc.UI.Bootstrap.TagHelpers.Modal\n@model ProductManagement.Web.Pages.Products.CreateProductModalModel\n@inject IHtmlLocalizer<ProductManagementResource> L\n@{\n    Layout = null;\n}\n<abp-dynamic-form abp-model=\"Product\"\n                  asp-page=\"/Products/CreateProductModal\">\n    <abp-modal>\n        <abp-modal-header title=\"@L[\"NewProduct\"].Value\"></abp-                  modal-header>\n        <abp-modal-body>\n            <abp-form-content />\n        </abp-modal-body>\n        <abp-modal-footer buttons=\"@(AbpModalButtons.Cancel|AbpModalButtons.Save)\"></abp-modal-footer>\n    </abp-modal>\n</abp-dynamic-form>\n```", "```cs\n<abp-card-header>\n    <abp-row>\n        <abp-column size-md=\"_6\">\n            <abp-card-title>@L[\"Menu:Products\"]</abp-card-                  title>\n        </abp-column>\n        <abp-column size-md=\"_6\" class=\"text-end\">\n            <abp-button id=\"NewProductButton\"\n                        text=\"@L[\"NewProduct\"].Value\"\n                        icon=\"plus\"\n                        button-type=\"Primary\"/>\n        </abp-column>\n    </abp-row>\n</abp-card-header>\n```", "```cs\nvar createModal = new abp.ModalManager(abp.appPath +                     'Products/CreateProductModal');\ncreateModal.onResult(function () {\n    dataTable.ajax.reload();\n});\n$('#NewProductButton').click(function (e) {\n    e.preventDefault();\n    createModal.open();\n});\n```", "```cs\n\"NewProduct\": \"New Product\",\n\"Category\": \"Category\",\n\"IsFreeCargo\": \"Free Cargo\",\n\"ReleaseDate\": \"Release Date\"\n```", "```cs\nTask<ProductDto> GetAsync(Guid id);\nTask UpdateAsync(Guid id, CreateUpdateProductDto input);\n```", "```cs\npublic async Task<ProductDto> GetAsync(Guid id)\n{\n    return ObjectMapper.Map<Product, ProductDto>(\n        await _productRepository.GetAsync(id)\n    );\n}\npublic async Task UpdateAsync(Guid id, CreateUpdateProductDto input)\n{\n    var product = await _productRepository.GetAsync(id);\n    ObjectMapper.Map(input, product);\n}\n```", "```cs\nusing System;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Mvc.Rendering;\nusing ProductManagement.Products;\nnamespace ProductManagement.Web.Pages.Products\n{\n    public class EditProductModalModel :                             ProductManagementPageModel\n    {\n        [HiddenInput]\n        [BindProperty(SupportsGet = true)]\n        public Guid Id { get; set; }\n        [BindProperty]\n        public CreateEditProductViewModel Product { get; set; }\n        public SelectListItem[] Categories { get; set; }\n        private readonly IProductAppService _productAppService;\n        public EditProductModalModel(IProductAppService                         productAppService)\n        {\n            _productAppService = productAppService;\n        }\n        public async Task OnGetAsync()\n        {\n            // TODO\n        }\n        public async Task<IActionResult> OnPostAsync()\n        {\n            // TODO\n        }\n    }\n}\n```", "```cs\npublic async Task OnGetAsync()\n{\n    var productDto = await _productAppService.GetAsync(Id);\n    Product = ObjectMapper.Map<ProductDto,                                   CreateEditProductViewModel>(productDto);\n\n    var categoryLookup = await                                               _productAppService.GetCategoriesAsync();\n    Categories = categoryLookup.Items\n        .Select(x => new SelectListItem(x.Name, x.Id.ToString()))\n        .ToArray();\n}\n```", "```cs\nCreateMap<ProductDto, CreateEditProductViewModel>();\n```", "```cs\npublic async Task<IActionResult> OnPostAsync()\n{\n    await _productAppService.UpdateAsync(Id,\n        ObjectMapper.Map<CreateEditProductViewModel,                             CreateUpdateProductDto>(Product)\n    );\n    return NoContent();\n}\n```", "```cs\n@page\n@using Microsoft.AspNetCore.Mvc.Localization\n@using ProductManagement.Localization\n@using Volo.Abp.AspNetCore.Mvc.UI.Bootstrap.TagHelpers.Modal\n@model ProductManagement.Web.Pages.Products.EditProductModalModel\n@inject IHtmlLocalizer<ProductManagementResource> L\n@{\n    Layout = null;\n}\n<abp-dynamic-form abp-model=\"Product\"\n                  asp-page=\"/Products/EditProductModal\">\n    <abp-modal>\n        <abp-modal-header title=\"@Model.Product.Name\"></abp-modal-              header>\n        <abp-modal-body>\n            <abp-input asp-for=\"Id\" />\n            <abp-form-content/>\n        </abp-modal-body>\n        <abp-modal-footer buttons=\"@(AbpModalButtons.Cancel|AbpModalButtons.Save)\"></abp-modal-footer>\n    </abp-modal>\n</abp-dynamic-form>\n```", "```cs\nvar editModal = new abp.ModalManager(abp.appPath + 'Products/EditProductModal');\n```", "```cs\n{\n    title: l('Actions'),\n    rowAction: {\n        items:\n            [\n                {\n                    text: l('Edit'),\n                    action: function (data) {\n                        editModal.open({ id: data.record.id });\n                    }\n                }\n            ]\n    }\n},\n```", "```cs\neditModal.onResult(function () {\n    dataTable.ajax.reload();\n});\n```", "```cs\nTask DeleteAsync(Guid id);\n```", "```cs\npublic async Task DeleteAsync(Guid id)\n{\n    await _productRepository.DeleteAsync(id);\n}\n```", "```cs\n{\n    text: l('Delete'),\n    confirmMessage: function (data) {\n        return l('ProductDeletionConfirmationMessage',                           data.record.name);\n    },\n    action: function (data) {\n        productManagement.products.product\n            .delete(data.record.id)\n            .then(function() {\n                abp.notify.info(l('SuccessfullyDeleted'));\n                dataTable.ajax.reload();\n            });\n    }\n}\n```", "```cs\n\"ProductDeletionConfirmationMessage\": \"Are you sure to delete this book: {0}\",\n\"SuccessfullyDeleted\": \"Successfully deleted!\"\n```"]