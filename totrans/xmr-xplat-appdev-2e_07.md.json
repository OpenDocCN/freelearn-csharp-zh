["```cs\n//Just a simple class for holding info\npublic class Person\n{\n  public int Id { get; set; }\n  public string Name { get; set; }\n}\n\n//Then somewhere later in your code\nvar person = new Person { Id = 1, Name = \"Chuck Norris\" };\nvar propInfo = person.GetType().GetProperty(\"Name\");\nstring value = propInfo.GetValue(person) as string;\nConsole.WriteLine(\"Name: \" + value);\n```", "```cs\nUnhandled Exception:\nSystem.ArgumentException: Get Method not found for 'Name' at System.Reflection.MonoProperty.GetValue (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] index, System.Globalization.CultureInfo culture) at System.Reflection.PropertyInfo.GetValue (System.Object obj)\n```", "```cs\n<linker>\n  <assembly fullname=\"mscorlib\">\n    <type fullname=\"System.Environment\">\n      <field name=\"mono_corlib_version\" />\n        <method name=\"get_StackTrace\" /> \n    </type>\n  </assembly>\n  <assembly fullname=\"My.Assembly.Name\">\n    <type fullname=\"MyTypeA\" preserve=\"fields\" />\n       <method name=\".ctor\" />\n    </type>\n    <type fullname=\"MyTypeB\" />                         \n      <method signature=\"System.Void MyFunc(System.Int32 x)\" />\n        <field signature=\"System.String _myField\" />\n    </type>\n  </assembly>\n</linker>\n```", "```cs\ninterface MyInterface<T> \n{\n  T GetMyValue();\n}\n```", "```cs\nclass MyClass<T>\n{\n  public virtual T GetMyValue() \n  {\n    //Some code here\n  }\n}\n\nclass MySubClass : MyClass<int>\n{\n  public override int GetMyValue()\n  {\n    //Some code here\n  }\n}\n```", "```cs\nclass MyGeneric<T>\n{\n  [DllImport('MyImport\")]\n  public static void MyImport();\n}\n```", "```cs\ntwitterShare.TouchUpInside += (sender, e) =>\n{\n  var image = UImage.FromFile(\"YourLargeImage.png\");\n  //Share to Twitter\n};\n```", "```cs\nvar image = UImage.FromFile('YourLargeImage.png\");\n//Share to Twitter\nimage.Dispose();\n```", "```cs\nusing(var image = UImage.FromFile('YourLargeImage.png\"))\n{\n  //Share to Twitter\n}\n```", "```cs\nstatic class MyStatic\n{\n  public static event EventHandler MyEvent;\n}\n```", "```cs\npublic override void ViewDidLoad()\n{\n  base.ViewDidLoad();\n\n  MyStatic.MyEvent += (sender, e) =>\n  {\n    //Do something\n  };\n}\n```", "```cs\npublic override void ViewWillAppear()\n{\n  base.ViewWillAppear();\n  MyStatic.MyEvent += OnMyEvent;\n}\n\npublic override void ViewWillDisappear()\n{\n  base.ViewWillDisappear ();\n  MyStatic.MyEvent -= OnMyEvent;\n}\n```", "```cs\npublic override UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)\n{\n  var cell = tableView.DequeueReusableCell('MyCell\");\n  //Remaining cell setup here\n\n  var button = UIButton.FromType(UIButtonType.InfoDark);\n  button.TouchUpInside += (sender, e) =>\n  {\n    //Do something\n  };\n  cell.AccessoryView = button;\n  return cell;\n}\n```", "```cs\nmono-rt: Stacktrace:\nmono-rt:   at <unknown>\nmono-rt:   at (wrapper managed-to-native) MonoTouch.UIKit.UIApplication.UIApplicationMain (int,string[],intptr,intptr) \nmono-rt:   at MonoTouch.UIKit.UIApplication.Main (string[],string,string)  \n... Continued ...\n=================================================================\nGot a SIGSEGV while executing native code. This usually indicates\na fatal error in the mono runtime or one of the native libraries \nused by your application.\n================================================================\n```", "```cs\npublic class MyCell : UITableViewCell\n{\n  UIButtonÂ button;\n  public MyCell()\n  {\n    button = UIButton.FromType(UIButtonType.InfoDark);\n    button.TouchUpInside += (sender, e) => \n    {\n      //Do something\n    };\n    AccessoryView = button;\n  }\n}\n```", "```cs\npublic override UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)\n{\n  var cell = tableView.DequeueReusableCell('MyCell\") as MyCell;\n  //Remaining cell setup here\n  return cell;\n}\n```"]