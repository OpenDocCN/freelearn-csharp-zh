["```cs\nCREATE TABLE dbo.Employees\n    (\n    Id int NOT NULL IDENTITY (1, 1),\n    Name varchar(MAX) NOT NULL,\n    Salary decimal(10, 2) NOT NULL,\n    Address varchar(MAX) NOT NULL,\n    City varchar(50) NOT NULL,\n    Region varchar(50) NOT NULL,\n    Country varchar(50) NOT NULL,\n    Phone varchar(200) NOT NULL\n    PostalCode varchar(50) NOT NULL,\n)\n```", "```cs\nInstall-Package Microsoft.Data.SqlClient\n```", "```cs\nInstall-Package Dapper\n```", "```cs\nbuilder.Services.AddSingleton<DapperService>();\n```", "```cs\n    app.MapPost(\n        \"/employees\",\n        (Employee employee,\n        [FromServices] DapperService dapperService) =>\n    {\n    });\n    ```", "```cs\n    public async Task AddEmployee(Employee employee)\n    {\n    }\n    ```", "```cs\n    using (var sqlConnection = new\n        SqlConnection(\"YOURCONNECTIONSTRING\"))\n    {\n        var sql = \"INSERT INTO Employees \" +\n                   (Name, Salary, Address, City, \" +\n                   Region, \"Country, Phone) VALUES \" +\n                   (@Name, @Salary, @Address, @City, \" +\n                   @Region, @Country, @Phone)\";\n    }\n    ```", "```cs\n    await sqlConnection.ExecuteAsync(sql, new\n    {\n        employee.PostalCode,\n        employee.Name,\n        employee.Salary,\n        employee.Address,\n        employee.City,\n        employee.Region,\n        employee.Country,\n        employee.Phone\n    });\n    ```", "```cs\n    public class DapperService\n    {\n        public async Task AddEmployee(Employee employee)\n        {\n            using (var sqlConnection = new\n                SqlConnection(\"YOURCONNECTIONSTRING\"))\n            {\n                var sql = \"INSERT INTO Employees \" +\n                    (Name, Salary, Address, City, \" +\n                    Region, Country, Phone) VALUES \" +\n                    (@Name, @Salary, @Address, \" +\n                    @City, @Region, @Country, @Phone)\";\n                await sqlConnection.ExecuteAsync(sql, new\n                {\n                    employee.PostalCode,\n                    employee.Name,\n                    employee.Salary,\n                    employee.Address,\n                    employee.City,\n                    employee.Region,\n                    employee.Country,\n                    employee.Phone\n                });\n            }\n        }\n    }\n    ```", "```cs\n    app.MapPost(\n        \"/employees\",\n        async (Employee employee,\n               [FromServices] DapperService dapperService)\n               =>\n    {\n        await dapperService.AddEmployee(employee);\n        return Results.Created();\n    });\n    ```", "```cs\n    app.MapGet(\n        \"/employees/{id}\",\n        (int id,\n         [FromServices] DapperService dapperService) =>\n    {\n    });\n    ```", "```cs\n            public async Task<Employee>\n                GetEmployeeById(int id)\n            {\n                using (var sqlConnection = new\n                    SqlConnection(\"YOURCONNECTIONSTRING\"))\n                {\n                    var sql = \"SELECT * FROM Employees\n                        WHERE Id = @employeeId\";\n                    var result = await sqlConnection\n                        .QuerySingleAsync<Employee>(\n                            sql, new { employeeId = id });\n                    return result;\n                }\n            }\n    ```", "```cs\n    app.MapGet(\n        \"/employees/{id}\",\n        async (int id,\n               [FromServices] DapperService dapperService)\n               =>\n    {\n         return Results.Ok(\n             await dapperService.GetEmployeeById(id));\n    });\n    ```", "```cs\napp.MapPut(\n    \"/employees\",\n     async (Employee employee,\n            [FromServices] DapperService dapperService) =>\n{\n    await dapperService.UpdateEmployee(employee);\n    return Results.Ok();\n});\n```", "```cs\n        public async Task UpdateEmployee (\n            Employee employee)\n        {\n            using (var sqlConnection = new\n                SqlConnection(\"YOURCONNECTIONSTRING\"))\n            {\n                var sql = \"UPDATE Employees SET Name = \" +\n                @Name, Salary = @Salary, Address = \" +\n                @Address, City = @City, \" +\n                Region = @Region WHERE Id = @id\";\n                var parameters = new\n                {\n                    employee.Id,\n                    employee.Name,\n                    employee.Salary,\n                    employee.Address,\n                    employee.City,\n                    employee.Region\n                };\n                await sqlConnection.ExecuteAsync(\n                    sql, parameters);\n        }\n        }\n```", "```cs\n        public async Task DeleteEmployeeById(int id)\n        {\n            using (var sqlConnection = new\n                SqlConnection(\"YOURCONNECTIONSTRING\"))\n            {\n                var sql = \"DELETE FROM Employees WHERE Id =\n                    @employeeId\";\n                await sqlConnection.ExecuteAsync(\n                    sql,\n                    new { employeeId = id }\n                );\n            }\n        }\n```", "```cs\n            app.MapDelete(\n                \"/employees/{id}\",\n                async (int id,\n                       [FromServices] DapperService\n                       dapperService) =>\n            {\n                await dapperService.DeleteEmployeeById(id);\n                return Results.NoContent();\n            });\n```", "```cs\nInstall-Package Microsoft.EntityFrameworkCore\nInstall-Package Microsoft.EntityFrameworkCore.SqlServer\nInstall-Package Microsoft.EntityFrameworkCore.Tools\n```", "```cs\nScaffold-DbContext \"Your_Connection_String\" Microsoft.EntityFrameworkCore.SqlServer -OutputDir Models -Context MyCompanyContext\n```", "```cs\npublic partial class MyCompanyContext : DbContext\n{\n    public MyCompanyContext()\n    {\n    }\n    public MyCompanyContext(\n        DbContextOptions<MyCompanyContext> options)\n        : base(options)\n    {\n    }\n    public virtual DbSet<Employee> Employees { get; set; }\n```", "```cs\n    protected override void OnConfiguring(\n        DbContextOptionsBuilder optionsBuilder) =>\n# warning To protect potentially sensitive information in\n# your connection string, you should move it out of source\n# code. You can avoid scaffolding the connection string by\n# using the Name= syntax to read it from configuration –\n# see https://go.microsoft.com/fwlink/?linkid=2131148\\. For\n# more guidance on storing connection strings, see\n# https://go.microsoft.com/fwlink/?LinkId=723263.\n```", "```cs\n       optionsBuilder.UseSqlServer(\"YOURCONNECTIONSTRING\");\n    protected override void OnModelCreating(\n        ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Employee>(entity =>\n        {\n            entity.HasNoKey();\n            entity.Property(e => e.Address)\n                .IsUnicode(false);\n            entity.Property(e => e.City)\n                .HasMaxLength(50)\n                .IsUnicode(false);\n            entity.Property(e => e.Country)\n                .HasMaxLength(50)\n                .IsUnicode(false);\n            entity.Property(e => e.Id)\n                .ValueGeneratedOnAdd();\n            entity.Property(e => e.Name).IsUnicode(false);\n            entity.Property(e => e.Phone)\n                .HasMaxLength(200)\n                .IsUnicode(false);\n            entity.Property(e => e.PostalCode)\n                .HasMaxLength(50)\n                .IsUnicode(false);\n            entity.Property(e => e.Region)\n                .HasMaxLength(50)\n                .IsUnicode(false);\n            entity.Property(e => e.Salary)\n                .HasColumnType(\"decimal(10, 2)\");\n        });\n        OnModelCreatingPartial(modelBuilder);\n    }\n    partial void OnModelCreatingPartial(\n        ModelBuilder modelBuilder);\n}\n```", "```cs\n  public string Title { get; set; }\n```", "```cs\nPM> Add-Migration \"Add_title_to_employees_table\"\n```", "```cs\npublic partial class add_title_field_to_employees :\n    Migration\n{\n    /// <inheritdoc />\n    protected override void Up(\n        MigrationBuilder migrationBuilder)\n    {\n        migrationBuilder.AddColumn<string>(\n            name: \"Title\",\n            table: \"Employees\",\n            type: \"nvarchar(max)\",\n            nullable: false,\n            defaultValue: \"\");\n    }\n    /// <inheritdoc />\n    protected override void Down(\n        MigrationBuilder migrationBuilder)\n    {\n        migrationBuilder.DropColumn(\n            name: \"Title\",\n            table: \"Employees\");\n    }\n}\n```", "```cs\nUpdate-Database\n```", "```cs\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services.AddScoped<MyCompanyContext>();\nvar app = builder.Build();\n```", "```cs\npublic class EmployeeService\n{\n    private MyCompanyContext _companyContext;\n    public EmployeeService(\n        MyCompanyContext myCompanyContext)\n    {\n        _companyContext = myCompanyContext;\n    }\n```", "```cs\n    public async Task AddEmployee(Employee employee)\n    {\n        await _companyContext.Employees\n            .AddAsync(employee);\n        await _companyContext\n            .SaveChangesAsync();\n    }\n    public async Task<Employee> GetEmployeeById(int id)\n    {\n        var result =  await _companyContext.Employees\n            .FirstOrDefaultAsync(x => x.Id == id);\n        if(result == null)\n        {\n            throw new EmployeeNotFoundException(id);\n        }\n        return result;\n    }\n    public async Task UpdateEmployee(Employee employee)\n    {\n        var employeeToUpdate = await GetEmployeeById(\n            employee.Id);\n        _companyContext.Employees.Update(employeeToUpdate);\n        await _companyContext.SaveChangesAsync();\n    }\n    public async Task DeleteEmployee(Employee employee)\n    {\n        _companyContext.Remove(employee);\n        await _companyContext.SaveChangesAsync();\n    }\n}\n```", "```cs\npublic class EmployeeNotFoundException : Exception\n{\n    public EmployeeNotFoundException(int id)\n        : base(\n            $\"Employee with id {id} could not be found\")\n    {\n    }\n}\n```", "```cs\n    var builder = WebApplication.CreateBuilder(args);\n    builder.Services.AddScoped<MyCompanyContext>();\n    builder.Services.AddScoped<EmployeeService>();\n    var app = builder.Build();\n```", "```cs\n    app.MapPost(\n        \"/employees\",\n        async (Employee employee,\n               [FromServices] EmployeeService\n               employeeService) =>\n    {\n        await employeeService.AddEmployee(employee);\n        return Results.Created();\n    });\n```"]