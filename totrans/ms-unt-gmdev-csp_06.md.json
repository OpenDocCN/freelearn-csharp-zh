["```cs\n    public class PlayerInput : MonoBehaviour , GamePlay.IGamePlayMapActions\n    ```", "```cs\n     private GamePlay gameplayControls;\n     public static UnityAction onJump = delegate { };\n     public static UnityAction onDash = delegate { };\n     public static UnityAction<Vector2> onMovement = delegate { };\n            private void OnEnable()\n            {\n                if (gameplayControls == null)\n                {\n                    gameplayControls = new GamePlay();\n                    gameplayControls.GamePlayMap.SetCallbacks(this);\n                }\n                gameplayControls.GamePlayMap.Enable();\n            }\n            private void OnDisable()\n            {\n                gameplayControls.GamePlayMap.Disable();\n            }\n    ```", "```cs\n    public class PlayerMovement : MonoBehaviour\n        {\n            private void OnEnable()\n            {\n                PlayerInput.onJump += Jump;\n                PlayerInput.onDash += Dash;\n                PlayerInput.onMovement += MovementInput;\n            }\n            private void OnDisable()\n            {\n                PlayerInput.onJump -= Jump;\n                PlayerInput.onDash -= Dash;\n                PlayerInput.onMovement -= MovementInput;\n            }\n    ```", "```cs\n      private void MovementInput(Vector2 input)\n            {\n                movementVector = input;\n            }\n            private void MovePlayer()\n            {\n                Vector3 movement = new Vector3(movementVector.x , 0f , movementVector.y) * moveSpeed * Time.deltaTime;\n                transform.Translate(movement);\n            }\n            private void Jump()\n            {\n                if (isGrounded)\n                {\n                    playerRigidbody.AddForce(Vector3.up * jumpForce, ForceMode.Impulse);\n                    isGrounded = false;\n                }\n            }\n            private void Dash()\n            {\n                if (canDash)\n                {\n                    Vector3 dashVector = new Vector3(movementVector.x, 0f, movementVector.y).normalized;\n                    playerRigidbody.AddForce(dashVector * dashForce, ForceMode.Impulse);\n                    canDash = false;\n                    Invoke(nameof(ResetDash), dashCooldown);\n                }\n            }\n            private void FixedUpdate()\n            {\n                MovePlayer();\n                CheckGrounded();\n            }\n            private void CheckGrounded()\n            {\n                isGrounded = Physics.Raycast(groundChecker.position, Vector3.down, groundDistance, groundLayer);\n            }\n            private void ResetDash()\n            {\n                canDash = true;\n            }\n    ```", "```cs\n    [RequireComponent(typeof(CinemachineImpulseSource))]\n        public class PlayerEffects : MonoBehaviour\n        {\n            private CinemachineImpulseSource cinemachineImpulse;\n            private void OnEnable()\n            {\n                PlayerShoot.onFire += ApplyShootFireEffect;\n            }\n            private void OnDisable()\n            {\n                PlayerShoot.onFire -= ApplyShootFireEffect;\n            }\n            private void Start()\n            {\n                cinemachineImpulse = GetComponent<CinemachineImpulseSource>();\n            }\n            private void ApplyShootFireEffect()\n            {\n                cinemachineImpulse.GenerateImpulse();\n            }\n        }\n    ```", "```cs\nSwitchCamera() function, which accepts an Enum parameter representing the camera type. This enables us to selectively activate the desired camera based on the specified type:\n```", "```cs\n   public class CameraManager : Singlton<CameraManager>\n    {\n        // Dictionary to map enum values to Cinemachine virtual cameras\n        public GenericDictionary<CameraType, CinemachineVirtualCamera> cameraDictionary = new GenericDictionary<CameraType, CinemachineVirtualCamera>();\n        // Reference to the currently active virtual camera\n        private CinemachineVirtualCamera currentCamera;\n        void Start()\n        {\n            SwitchCamera(CameraType.PlayerCamera);\n        }\n        // Function to switch between virtual cameras using the enum\n        public void SwitchCamera(CameraType newCameraType)\n        {\n            // Disable the current camera\n            if (currentCamera != null)\n            {\n                currentCamera.gameObject.SetActive(false);\n            }\n            // Enable the new camera based on the enum\n            if (cameraDictionary.ContainsKey(newCameraType))\n            {\n                currentCamera = cameraDictionary[newCameraType];\n                currentCamera.gameObject.SetActive(true);\n            }\n            else\n            {\n                Debug.LogWarning(\"Camera of type \" + newCameraType + \" not found in the dictionary.\");\n            }\n        }\n    }\n    // Enum to represent different cameras\n    public enum CameraType\n    {\n        PlayerCamera,\n        BossCamera,\n        // Add more camera types as needed\n    }\n```", "```cs\npublic enum CameraType\n    {\n        PlayerCamera,\n        BossCamera,\n        // Add more camera types as needed\n    }\nPlayerCollision class:\n```", "```cs\nnamespace FusionFuryGame\n{\n    public class PlayerCollision : MonoBehaviour\n    {\n        private void OnTriggerEnter(Collider other)\n        {\n            if (other.CompareTag(\"BossArea\"))\n            {\n                CameraManager.Instance.SwitchCamera(CameraType.BossCamera);\n            }\n        }\n        private void OnTriggerExit(Collider other)\n        {\n            if (other.CompareTag(\"BossArea\"))\n            {\n                CameraManager.Instance.SwitchCamera(CameraType.PlayerCamera);\n            }\n        }\n    }\n}\n```"]