["```cs\nusing UnityEngine;\n\nnamespace Zombie\n{\n    public class Runner : MonoBehaviour\n    {\n        public void Run()\n        {\n            // Zombie runs!\n        }\n    }\n}\n```", "```cs\nusing UnityEngine;\n\nnamespace Zombie\n{\n    public class Walk: MonoBehaviour\n    {\n        public void Walk()\n        {\n            // Zombie walks!\n        }\n    }\n}\n```", "```cs\nusing UnityEngine;\n\nnamespace Zombie\n{\n    public class Screamer : MonoBehaviour\n    {\n        public void Scream()\n        {\n            // Zombie screams!\n        }\n    }\n}\n```", "```cs\nusing UnityEngine;\nusing System.Collections.Generic;\n\npublic class ObjectPool : Singleton<ObjectPool>\n{\n        // The objects to pool.\n        public GameObject[] objects;\n\n        // The list of pooled objects.\n        public List<GameObject>[] pooledObjects;\n\n        // The amount of objects to buffer.\n        public int[] amountToBuffer;\n\n        public int defaultBufferAmount = 3;\n\n        // The container of pooled objects.\n        protected GameObject containerObject;\n\n        void Start()\n        {\n            containerObject = new GameObject(\"ObjectPool\");\n            pooledObjects = new List<GameObject>[objects.Length];\n\n            int i = 0;\n            foreach (GameObject obj in objects)\n            {\n                pooledObjects[i] = new List<GameObject>();\n\n                int bufferAmount;\n\n                if (i < amountToBuffer.Length)\n                {\n                    bufferAmount = amountToBuffer[i];\n                }\n                else\n                {\n                    bufferAmount = defaultBufferAmount;\n                }\n\n                for (int n = 0; n < bufferAmount; n++)\n                {\n                    GameObject newObj = Instantiate(obj) as GameObject;\n                    newObj.name = obj.name;\n                    PoolObject(newObj);\n                }\n\n                i++;\n            }\n        }\n\n        // Pull an object of a specific type from the pool.\n        public GameObject PullObject(string objectType)\n        {\n            bool onlyPooled = false;\n            for (int i = 0; i < objects.Length; i++)\n            {\n                GameObject prefab = objects[i];\n\n                if (prefab.name == objectType)\n                {\n                    if (pooledObjects[i].Count > 0)\n                    {\n                        GameObject pooledObject = pooledObjects[i][0];\n                        pooledObject.SetActive(true);\n                        pooledObject.transform.parent = null;\n\n                        pooledObjects[i].Remove(pooledObject);\n\n                        return pooledObject;\n                    }\n                    else if (!onlyPooled)\n                    {\n                        return Instantiate(objects[i]) as GameObject;\n                    }\n\n                    break;\n                }\n            }\n\n            // Null if there's a hit miss.\n            return null;\n        }\n\n        // Add object of a specific type to the pool.\n        public void PoolObject(GameObject obj)\n        {\n            for (int i = 0; i < objects.Length; i++)\n            {\n                if (objects[i].name == obj.name)\n                {\n                    obj.SetActive(false);\n                    obj.transform.parent = containerObject.transform;\n                    pooledObjects[i].Add(obj);\n                    return;\n                }\n            }\n\n            Destroy(obj);\n        }\n    }\n```", "```cs\nusing UnityEngine;\n\npublic class Client : MonoBehaviour\n{\n    void Update()\n    {\n            if (Input.GetKeyDown(KeyCode.G))\n            {\n                GameObject walker = ObjectPool.Instance.PullObject(\"Walker\");\n                walker.transform.Translate(Vector3.forward * Random.Range(-5.0f, 5.0f));\n                walker.transform.Translate(Vector3.right * Random.Range(-5.0f, 5.0f));\n            }\n\n            if (Input.GetKeyDown(KeyCode.P))\n            {\n                object[] objs = GameObject.FindObjectsOfType(typeof(GameObject));\n\n                foreach (object o in objs)\n                {\n                    GameObject obj = (GameObject)o;\n\n                    if (obj.gameObject.GetComponent<Zombie.Walker>() != null)\n                    {\n                        ObjectPool.Instance.PoolObject(obj);\n                    }\n                }\n            }\n        }\n```"]