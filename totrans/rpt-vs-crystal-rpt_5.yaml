- en: Chapter 5. Enhancing Reports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter we saw how to create a simple report and display this
    report in our application. In this chapter, we will create a new report but this
    report will be more complex than the previous one. We will see how to group data
    using one or more fields, how to filter data by parameters, and how to add a subreport.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Using parameter fields
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with formula fields
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with subreport
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Grouping and sorting data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding the report to a form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter, we will have two sections. In the first section we will create
    a new report to display employees, like the one we had created in the previous
    chapter, but we will add some filters to this new report. This will allow the
    user to select those employees who have the same data. We see in the following
    screenshot that all employees in the report have the same data (**Country**, **City**,
    and **Title**). This can be achieved by using parameter fields. In the first section
    we will see how to use these.
  prefs: []
  type: TYPE_NORMAL
- en: '![Enhancing Reports](img/5-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the second section, we will create a new report to display all the **Employee
    Details** and their **Employee orders** as shown in the following screenshot.
    We will also see how to use subreports, grouping, sorting, and formula fields.
  prefs: []
  type: TYPE_NORMAL
- en: '![Enhancing Reports](img/5-2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using parameter fields
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will create a new report the same way we created one in the previous chapter,
    using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: We will use the same TableAdapter that we created in the previous chapter (**EmployeesTableAdapter**)
    as shown in the following screenshot:![Using parameter fields](img/5-3.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a new Crystal Reports to our application and rename it to `crFilteredEmployees`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As shown in the following screenshot, we will select the **As a Blank Report**
    radio button to learn how to connect to database with your report after the report
    creation. Click on the **OK** button.![Using parameter fields](img/5-4.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From **Field** **Explorer**, right-click on **Database Fields** and choose **Database
    Expert**. Select the `Employees` table as shown in the following screenshot. Click
    on the **OK** button.![Using parameter fields](img/5-5.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now you will see the table **Fields** when you navigate to **Field Explorer**
    | **Database Fields** | **Employees** as shown in the following screenshot:![Using
    parameter fields](img/5-6.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag **Employees** fields to the **Details** section in our report and format
    the report, as shown in the following screenshot:![Using parameter fields](img/5-7.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Until now our report would have displayed all employees, so now we need to update
    this report to filter employees by their data (**Country**, **City**, and **Title**).
    In the next steps we will see how to add filters to our report.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In **Field Explorer**, right-click on **Parameter Fields** and select **New**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As we see in the following screenshot, we will name this parameter `pmCountry`
    and select its **Type** as **String**. We will keep the default values for other
    fields in the form and click on the **OK** button:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Using parameter fields](img/5-8.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Create two more parameters with the type **String** and name them `pmCity` and
    `pmTitle`. Now we have three parameters, as shown in the following screenshot:![Using
    parameter fields](img/5-9.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Until now we hadn't used these parameters and they don't have any effect in
    our report.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Right-click on the report and navigate to **Report** | **Selection Formula**
    | **Record**. We will see this in the following screenshot:![Using parameter fields](img/5-10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will write some code to apply parameters to our reports, as shown in the
    following screenshot:![Using parameter fields](img/5-11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the first line of code: (`{Employees.Title}={?pmTitle}`), we filtered Employees
    Title by `pmTitle` parameter.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In the second line of code (`{Employees.Country}={?pmCountry}`), we filtered
    Employees Country by `pmCountry` parameter.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the third line of code: (`{Employees.City}={?pmCity}`), we filtered Employees
    City by `pmCity` parameter.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: At the end we tied the three lines with the `and` keyword to ensure that the
    three filters must be applied together; if one filter failed the others will fail.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You can drag-and-drop **Table** and **Parameter** fields to the code box from
    the report fields in the upper box (field tree).
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Save and close the form from the top.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Until now we finished our report design, now we need to display our report in
    the application; when the user clicks `btnEmpByFilters` button (**By Filters**),
    the values of **Title**, **City**, and **Country** ComboBoxes are dynamically
    passed to our report parameters `pmTitle`, `pmCity`, and `pmCountry`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open **MainForm** from **Solution Explorer**. Double-click on the `btnEmpByFilters`
    button to move to the click event code and write the code that we see in the following
    screenshot:![Using parameter fields](img/5-12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We have seen most of the previously mentioned lines of code in our previous
    chapter, but here we added only three extra lines of codes to pass the three parameters
    to our report dynamically. The three lines of code are as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When we run the application and test the result, we will see the report results,
    depending on what data was provided in the filters.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We need to improve our report so the user can use one filter or two rather than
    three filters, or he can stop all filters. We will allow the user to stop any
    filter by writing the `"ALL"` string in the combo boxes used to filter the report
    data. We only need to change the parameters code in our report to meet this improvement.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Right-click on any **Parameter Fields** in **Field Explorer** and select **Find
    in Formula**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Update the code we wrote before to the new one as in the following screenshot
    then save and close.![Using parameter fields](img/5-13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the application to test the new change. Type`"ALL"` in the three combo boxes
    used to filter the report data, and click on the **By filters** button. You will
    now see the data of all the employees in the report. You can change one or two
    filters and keep the others to test the report result.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the next section, we will create a report to display the data of all the
    employees with the employee orders. This report contains a main report that consists
    of the employee data and another subreport that contains the employee orders.
    We will see how to use subreport by filtering data in the main report fields.
  prefs: []
  type: TYPE_NORMAL
- en: First we will create a TableAdapter that contains all the data from `Employees`
    table, the select query will look like the following screenshot:![Using parameter
    fields](img/5-14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the preceding query, we used `LEFT OUTER JOIN` to select all data from the
    left table that contains all employees'' data and selected the supervisor (`ReportsTo`)
    data from the second table if it exists. We didn''t use `INNER JOIN` because the
    employee with ID 2 (`Fuller`) does not have a supervisor (`ReportsTo`). We are
    also using `SELF JOIN` with the same table, which we learned in the previous chapters.
    The TableAdapter will look like the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Using parameter fields](img/5-15.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: We will create a new crystal report with the name `crEmployeeDetails` and pass
    `Employee1` as the report data source. Drag-and-drop data fields to the **Employee
    Details** section in our report and format the fields to look like the following
    screenshot:![Using parameter fields](img/5-16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Please note that in the previous reports we used SQL queries to display the
    employees' and supervisors' full names in our report. In this section we will
    use a formula field to display their full name. As we saw in the previous screenshot,
    **Full Name** and **Reports To** are formula fields `(@fmu_FullName`, `@fmu_ReportTo`).
    We will see how to use formula fields now.
  prefs: []
  type: TYPE_NORMAL
- en: Working with formula fields
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section we will see how to use formula fields and how they are useful
    and powerful for improving our reports.
  prefs: []
  type: TYPE_NORMAL
- en: From **Field Explorer**, right-click on **Formula Fields** and select New. Type
    in the formula name `fmu_FullName` and click on the **OK** button. We will see
    this in the following screenshot:![Working with formula fields](img/5-17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This formula field will display the employee's full name in the same format
    that we created before using SQL query. Here we use the concatenate operator (`+`)
    to concatenate the title with the first and last name of the employee.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create another formula field and name it `fmu_ReportsTo`. You will see the formula
    code in the following screenshot:![Working with formula fields](img/5-18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag-and-drop the two formula fields to the report as we did previously.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a parameter field to the report and name it `EmpId`. We will use this parameter
    to filter the employees by ID as we see in the following screenshot:![Working
    with formula fields](img/5-19.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open **MainForm** from **Solution Explorer**. Double-click on the **btnEmpById**
    button to move to the click event code and write the code that we see in the following
    screenshot:![Working with formula fields](img/5-20.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the application to test our report, write an ID number in the `txtEmpId`
    textbox and click on the **By id** button to test the result.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With this step we finished the main report that contains the employee data;
    in the next several steps we will add a subreport to the main report, which will
    contain the employee orders.
  prefs: []
  type: TYPE_NORMAL
- en: Working with subreport
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we will see another powerful tool in Crystal Reports; that is subreport.
    Subreport is used to create a report inside another report and link the two reports
    with a relation or a filter.
  prefs: []
  type: TYPE_NORMAL
- en: Create TableAdapter, which contains the employee orders and all the data in
    the table `Orders`. We will rename the adapter to `OrdersByEmployeeIdTableAdapter`
    as we see in the following screenshot:![Working with subreport](img/5-21.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the main report, in the **Details** section, right-click and navigate to
    **Insert** | **Subreport**. Drag-and-drop this subreport at the end of the main
    report (after the `Notes` field in the **Employee Details** section). Then we
    will see the following screenshot:![Working with subreport](img/5-22.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As we see, we can choose the subreport from the application reports, export
    it from hard disk, or create a new report using Report Wizard. We will choose
    the last option, so click on the **Report Wizard...** button and complete the
    wizard as we have learned before. Make sure that you use the `OrdersByEmployeeId`
    table as a data source for the subreport. We will name the subreport `crOrdersByEmployeeId`
    and click on the **OK** button.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Right-click on the subreport and select **Edit Subreport**. In subreport we
    will group the Employee orders by the country so in the next few steps we will
    see how to use grouping in Crystal Reports.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Grouping and sorting data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section we will see how to group and sort report data with one or more
    fields.
  prefs: []
  type: TYPE_NORMAL
- en: In **Field Explorer**, right-click on **Group Name Fields** and select **Insert
    Group**. We will see this in the following screenshot:![Grouping and sorting data](img/5-23.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the group field (**ShipCountry**) and the sort type (**in ascending order.**).
    We can change the field title from the **Options** tab. Click on the **OK** button.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Format the subreport as we see in the following screenshot. You can see the
    two new sections that were added to the report after we created the group.![Grouping
    and sorting data](img/5-24.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we need to filter data in the subreports using the parameter field in the
    main report.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Go back to the main report, right-click on the subreport, and select the **Change
    subreport** **Links…**. We will see the following screenshot:![Grouping and sorting
    data](img/5-25.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this dialog, we will map the **EmpId** parameter field from the main report
    to **EmployeeID** in the subreport. From the **Available Fields** list, we will
    select the **EmpId** parameter and move it to the **Field(s) to link to:** list.
    In the last part in the dialog we will choose **EmployeeID** from the right drop-down
    list to link it with the **EmpId** parameter in the left drop-down list. Click
    on the **OK** button.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now the two reports are connected together with one parameter: **EmpId**. The
    last step is to fill the subreport with data before displaying your report to
    the user.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Navigate back to the button click event to update your code as shown in the
    following screenshot:![Grouping and sorting data](img/5-26.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We only added three lines of code to the old code, the three lines to fill the
    subreport with data using the **OrdersByEmployeeIdTableAdapter** TableAdapter.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Run our application to test the last changes. The final report will look like
    the following screenshot:![Grouping and sorting data](img/5-27.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As we see in the previous screenshot, the date format contains the time; we
    want to change this format to display the date only. Navigate back to our report,
    right-click on any date field in the report, select **Format Object**, and select
    the date format as shown in the following screenshot:![Grouping and sorting data](img/5-28.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After changing the date format for all date fields (**BirthDate**, **HireDate**,
    **OrderDate**, and **ShippedDate**), the report will look like the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Grouping and sorting data](img/5-29.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we created two reports and we learned from the first one how
    to use parameter fields and how to use these fields to filter the report data.
    In the second report we learned how to use subreports and how to use grouping
    and sorting. In the next chapter, we will create special type of reports and we
    will see how to create a crosstab report.
  prefs: []
  type: TYPE_NORMAL
