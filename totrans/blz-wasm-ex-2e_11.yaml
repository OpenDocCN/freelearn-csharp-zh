- en: '11'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building a Task Manager Using ASP.NET Web API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most websites are not islands standing alone. They need a server. They rely
    on a server for both data access and security, among other services.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will learn how to create a hosted Blazor WebAssembly app.
    We will learn how to use the **HttpClient** service to call web APIs, and we will
    also learn how to use **JSON helper methods** to make requests to a web API to
    read, add, edit, and delete data.
  prefs: []
  type: TYPE_NORMAL
- en: The project that we create in this chapter will be a **task manager**. We will
    use a multi-project architecture to separate the Blazor WebAssembly app from the
    ASP.NET Web API endpoints. The hosted Blazor WebAssembly app will use JSON helper
    methods to read, add, edit, and delete tasks that are stored in a SQL Server database.
    An ASP.NET core project will host the Blazor WebAssembly app and provide the ASP.NET
    Web API endpoints. A third project will be used to define the classes that are
    shared by the other two projects.
  prefs: []
  type: TYPE_NORMAL
- en: Islands stand alone.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Most websites are not islands -
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: they need a server.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding hosted applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the `HttpClient` service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using JSON helper methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the task manager project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To complete this project, you need to have Visual Studio 2022 installed on your
    PC. For instructions on how to install the free Community Edition of Visual Studio
    2022, refer to *Chapter 1*, *Introduction to Blazor WebAssembly*. You will also
    need access to a version of SQL Server. For instructions on how to install the
    free edition of SQL Server 2022, refer to *Chapter 1*, *Introduction to Blazor
    WebAssembly*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The source code for this chapter is available in the following GitHub repository:
    [https://github.com/PacktPublishing/Blazor-WebAssembly-by-Example-Second-Edition/tree/main/Chapter11](https://github.com/PacktPublishing/Blazor-WebAssembly-by-Example-Second-Edition/tree/main/Chapter11).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Code in Action video is available here: [https://packt.link/Ch11](https://packt.link/Ch11).'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding hosted applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we create a new Blazor WebAssembly project by using Microsoft’s **Blazor
    WebAssembly App Empty** project template, we have the option to create a hosted
    Blazor WebAssembly app by checking the **ASP.NET Core Hosted** checkbox.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot highlights the **ASP.NET Core Hosted** checkbox:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application  Description automatically generated](img/B18471_11_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.1: Blazor WebAssembly App Empty project template'
  prefs: []
  type: TYPE_NORMAL
- en: 'The hosted Blazor WebAssembly app, created by the **Blazor WebAssembly App
    Empty** project template, includes the following three projects:'
  prefs: []
  type: TYPE_NORMAL
- en: Client project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Server project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shared project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Client project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The client project is a client-side Blazor WebAssembly project. It is almost
    identical to the standalone Blazor WebAssembly app we created in *Chapter 2*,
    *Building Your First Blazor WebAssembly Application*. The only big difference
    is in how the data is accessed. In the client project, the sample data is accessed
    from the server project using Web API endpoints instead of a static file. Since
    the server project is both hosting the client project and serving the data via
    ASP.NET Web API, it won’t have any CORS problems.
  prefs: []
  type: TYPE_NORMAL
- en: Server project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The server project is an ASP.NET Core project. This project is responsible for
    serving the client application. In addition to hosting the client app, the server
    project provides the Web API endpoints.
  prefs: []
  type: TYPE_NORMAL
- en: '**IMPORTANT NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: In this scenario, since the ASP.NET Core project is serving the Blazor WebAssembly
    app, it must be set as the startup project in the solution.
  prefs: []
  type: TYPE_NORMAL
- en: Shared project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The shared project is also an ASP.NET Core project. It contains application
    logic that is shared between the other two projects. In the past, we had to write
    validation code on both the client and the server. We had to write JavaScript
    validation code for the client and C# validation code for the server. Not surprisingly,
    sometimes the two validation models did not match. The shared project solves that
    problem since all the validation code is maintained in a single location using
    a single language.
  prefs: []
  type: TYPE_NORMAL
- en: By using a multi-project solution, we can create a more robust application.
    The shared project defines the classes, and the client project uses the `HttpClient`
    service to make requests for data from the server project.
  prefs: []
  type: TYPE_NORMAL
- en: Using the HttpClient service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'HTTP is not just for serving web pages – it can also be used for serving data.
    These are the HTTP methods that we will be using in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '`GET`: This method is used to request one or more resources.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`POST`: This method is used to create a new resource.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PUT`: This method is used to update the specified resource.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DELETE`: This method is used to delete the specified resource.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `HttpClient` service is a preconfigured service for making HTTP requests
    from a Blazor WebAssembly app to a server. It is configured in the `Client/Program.cs`
    file. The following code is used to configure it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `HttpClient` service is added to a page using **dependency injection** (**DI**).
    To use the `HttpClient` service in a component, you must inject it by either using
    the `@inject` directive or the `Inject` attribute. For more information on DI,
    see *Chapter 7*, *Building a Shopping Cart Using Application State*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code demonstrates the two different ways to inject the `HttpClient`
    service into a component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The first example is used in `.razor` files while the second example is used
    in `.razor.cs` files. After we have injected the `HttpClient` service into a component,
    we can use the JSON helper methods to send requests to a Web API.
  prefs: []
  type: TYPE_NORMAL
- en: Using JSON helper methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are three JSON helper methods. There is one for reading data, one for
    adding data, and one for updating data. Since there is not one for deleting data,
    we will use the `HttpClient.DeleteAsync` method to delete data.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table shows the relationship between the JSON helper methods
    and the HTTP methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '| JSON Helper Method | HTTP Method | Action |'
  prefs: []
  type: TYPE_TB
- en: '| `GetFromJsonAsync` | GET | Read |'
  prefs: []
  type: TYPE_TB
- en: '| `PostAsJsonAsync` | POST | Create |'
  prefs: []
  type: TYPE_TB
- en: '| `PutAsJsonAsync` | PUT | Update |'
  prefs: []
  type: TYPE_TB
- en: '| `HttpClient.DeleteAsync` | DELETE | Delete |'
  prefs: []
  type: TYPE_TB
- en: 'Table 11.1: Relationship between the HTTP methods and the JSON helper methods'
  prefs: []
  type: TYPE_NORMAL
- en: '**TIP**'
  prefs: []
  type: TYPE_NORMAL
- en: You can also use the `HttpClient` service and JSON helper methods to call external
    web API endpoints. By way of an example, see *Chapter 6*, *Building a Weather
    App as a Progressive Web App (PWA)*.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following code examples, we will be referring to the `TaskItem` class.
    This is the `TaskItem` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: GetFromJsonAsync
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `GetFromJsonAsync` method is used to read data. It does the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Sends an `HTTP GET` request to the indicated URI.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deserializes the JSON response body to create the indicated object.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following code uses the `GetFromJsonAsync` method to return a collection
    of `TaskItem` objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, the type of object returned by the `GetFromJsonAsync`
    method is `IList<TaskItem>.`
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also use the `GetFromJsonAsync` method to get an individual object.
    The following code uses the `GetFromJsonAsync` method to return a single `TaskItem`
    object where `id` is the unique identifier of the object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, the type of object returned by the `GetFromJsonAsync`
    method is `TaskItem`.
  prefs: []
  type: TYPE_NORMAL
- en: PostAsJsonAsync
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `PostAsJsonAsync` method is used to add data. It does the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Sends an `HTTP POST` request to the indicated URI. The request includes the
    JSON-encoded content used to create the new data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns an `HttpResponseMessage` instance that includes both a status code and
    data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following code creates a new `TaskItem` object by using the `PostAsJsonAsync`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, the new `TaskItem` is deserialized from the response
    using the `ReadFromJsonAsync` method if the HTTP response returns a success status
    code.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIP**'
  prefs: []
  type: TYPE_NORMAL
- en: The `ReadFromJsonAsync` method returns deserialized content. It is included
    in the `System.Text.Json` library provided by Microsoft. The `System.Text.Json`
    library includes high-performance, low-allocating methods for serializing and
    deserializing JSON text to and from objects.
  prefs: []
  type: TYPE_NORMAL
- en: PutAsJsonAsync
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `PutAsJsonAsync` method is used to update data. It does the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Sends an `HTTP PUT` request to the indicated URI. The request includes the JSON-encoded
    content used to update the data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns an `HttpResponseMessage` instance that includes both a status code and
    data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following code updates an existing `TaskItem` object by using the `PutAsJsonAsync`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, the updated `TaskItem` is deserialized from the response
    using the `ReadFromJsonAsync` method if the HTTP response returns a success status
    code.
  prefs: []
  type: TYPE_NORMAL
- en: HttpClient.DeleteAsync
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `HttpClient.DeleteAsync` method is used to delete data. It does the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Sends an `HTTP DELETE` request to the indicated URI.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns an `HttpResponseMessage` instance that includes both a status code and
    data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following code deletes an existing `TaskItem` object by using the `Http.DeleteAsync`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, the `TaskItem` with the indicated `TaskItemId` is deleted.
  prefs: []
  type: TYPE_NORMAL
- en: The JSON helper methods make it easy to consume web APIs. We use them to read,
    create, and update data. We use `HttpClient.DeleteAsync` to delete data.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s get a quick overview of the project that we are going to build in
    this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the TaskManager project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will build a hosted Blazor WebAssembly app to manage tasks.
    We will be able to view, add, edit, and delete tasks. The tasks will be stored
    in a SQL Server database.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a screenshot of the completed application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Chart  Description automatically generated with medium confidence](img/B18471_11_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.2: TaskManager project'
  prefs: []
  type: TYPE_NORMAL
- en: The build time for this project is approximately 60 minutes.
  prefs: []
  type: TYPE_NORMAL
- en: Project overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `TaskManager` project will be created by using Microsoft’s **Blazor WebAssembly
    App Empty** project template to create a hosted Blazor WebAssembly project. First,
    we will add both a `TaskItem` class and a `TaskItemsController` class. Next, we
    will use `Entity Framework` migrations to create a database in SQL Server. We
    will add `Bootstrap` and `Bootstrap icons` to our project to style our UI. Finally,
    we will demonstrate how to read data, update data, delete data, and add data using
    the `HttpClient` service.
  prefs: []
  type: TYPE_NORMAL
- en: Create the TaskManager project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to create a new hosted Blazor WebAssembly app. We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open Visual Studio 2022.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create a new project** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *Alt*+*S* to enter the **Search for templates** textbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `Blazor` and press the *Enter* key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the **Blazor WebAssembly App Empty** project
    template:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, chat or text message  Description
    automatically generated](img/B18471_11_03.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 11.3: Blazor WebAssembly App Empty project template'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select the **Blazor WebAssembly App Empty** project template and click the **Next**
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `TaskManager` in the **Project name** textbox and click the **Next** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is a screenshot of the dialog used to configure our new project:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18471_11_04.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 11.4: Configure your new project dialog'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**TIP**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the preceding example, we placed the `TaskManager` project into the `E:/Blazor`
    folder. However, the location of this project is not important.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select **.NET 7.0** as the version of the `Framework` to use.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the **Configure for HTTPS** checkbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the **ASP.NET Core Hosted** checkbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Uncheck the **Progressive Web Application** checkbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is a screenshot of the dialog used to collect additional information about
    our new project:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18471_11_05.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 11.5: Additional information dialog'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Create** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have created a hosted **TaskManager** Blazor WebAssembly project.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The **TaskManager** solution comprises three different projects. The following
    screenshot of Visual Studio’s **Solution Explorer** shows the three projects that
    are in the solution:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application  Description automatically generated](img/B18471_11_06.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 11.6: Solution Explorer'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Right-click the **TaskManager.Server** project and select the **Set as Startup
    Project** option from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have created the **TaskManager** solution and set the **TaskManager.Server**
    project as the startup project. Now we need to add a shared class to the **TaskManager.Shared**
    project.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the TaskItem class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to add the `TaskItem` class. We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the **TaskManager.Shared** project and select the **Add**, **Class**
    option from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the new class `TaskItem`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Add** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Make the class public by adding the `public` modifier:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following properties to the `TaskItem` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: From the **Build** menu, select the **Build Solution** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have added the `TaskItem` class. Next, we need to add an `API controller`
    for the `TaskItem` class. The `API Controller` will handle incoming HTTP requests
    from the Blazor WebAssembly client and will send responses back to it.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the TaskItem API controller
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to add a `TaskItemsController` class. We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the **TaskManager.Server** project and select the **Add**, **New
    Folder** option from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the new folder `Controllers`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click the `TaskManager.Server.Contollers` folder and select the **Add**,
    **Controller** option from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the **API Controller with actions, using Entity Framework** option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Graphical user interface, application, Teams  Description automatically generated](img/B18471_11_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.7: Add New Scaffolded Item dialog'
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Add** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Model class** to **TaskItem (TaskManager.Shared)**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the **Add data context** button to open the **Add Data Context** dialog:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18471_11_08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.8: Add API Controller with actions, using Entity Framework dialog'
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Add** button to accept the default values.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18471_11_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.9: Add Data Context dialog'
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Add** button on the **Add API Controller with actions, using Entity
    Framework** dialog.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have created the `TaskItemsController` class. Now we need to set up SQL Server.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up SQL Server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to create a new database on SQL Server and add a table to contain the
    tasks. We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `TaskManager.Server/appsettings.json` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update the connection string to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Replace the `{Server name}` placeholder with the name of your SQL Server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**IMPORTANT NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: Although we are using SQL Server 2022 Express, it does not matter what version
    of SQL Server you use for this project.
  prefs: []
  type: TYPE_NORMAL
- en: From the **Tools** menu, select the **NuGet Package Manager**, **Package Manager
    Console** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In **Package Manager Console**, use the drop-down list to change **Default project**
    to **TaskManager.Server**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Execute the following commands in **Package Manager Console**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding commands use `Entity Framework` migrations to update SQL Server.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: From the **View** menu, select **SQL Server Object Explorer**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you do not see the SQL Server instance that you are using for this project,
    click the **Add SQL Server** button to connect it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Graphical user interface, application, website  Description automatically
    generated](img/B18471_11_10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.10: SQL Server Object Explorer'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the **TaskManager** database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**TIP**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you do not see the **TaskManager** database under **Databases**, right-click
    **Databases** and select the **Refresh** option.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Navigate to **TaskManager**, **Tables**, **dbo.TaskItem**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application  Description automatically generated](img/B18471_11_11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.11: TaskManager database'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click **dbo.TaskItem** and select the **View Data** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter a couple of tasks by completing the **TaskName** field and setting the
    **IsComplete** field to **False**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Table  Description automatically generated](img/B18471_11_12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.12: Sample data'
  prefs: []
  type: TYPE_NORMAL
- en: Press *Ctrl*+*F5* to start the application without debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add `/api/taskitems` to the address bar and press *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the JSON that is returned by `TaskItemsController`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Graphical user interface, text  Description automatically generated](img/B18471_11_13.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 11.13: JSON returned by the TaskItem API controller'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Close the browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have demonstrated that `TaskItemsController` works. Now we can start working
    on the `TaskManager.Client` project. We will use `Bootstrap` to style our UI and
    `Bootstrap icons` to provide the trashcan image on the delete button.
  prefs: []
  type: TYPE_NORMAL
- en: Install Bootstrap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to install `Bootstrap` and `Bootstrap icons` in our web app. We do
    this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Return to Visual Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *Ctrl*+*Alt*+*L* to view **Solution Explorer**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click the `TaskManager.Client/wwwroot/css` folder and select the **Add**,
    **Client-Side Library** option from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `bootstrap` into the **Library** search textbox and press the *Enter*
    key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Choose specific files**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select only the **css** files, as shown in the following screenshot:![Graphical
    user interface, application, email  Description automatically generated](img/B18471_11_14.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 11.14: Add Client-Side Library dialog'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**TIP**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Although the preceding screenshot has version 5.2.3 of Bootstrap selected, you
    can use any version of Bootstrap 5 to complete this project.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Install** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**IMPORTANT NOTE**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After you install `Bootstrap`, a new folder will be added to the `wwwroot/css`
    folder. This new folder contains all the CSS files needed for `Bootstrap`. We
    will only be using the `bootstrap.min.css` file in this project.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open the `TaskManager.Client/wwwroot/index.html` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following markup to the `head` element before the link to the `css/app.css`
    stylesheet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Right-click the `TaskManager.Client/wwwroot/css` folder and select the **Add,
    Client-Side Library** option from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `bootstrap-icons` into the **Library** search textbox and press the *Enter*
    key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Choose specific files**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select only the **font** files as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18471_11_15.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.15: Add Client-Side Library dialog'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `TaskManager.Client/wwwroot/index.html` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following markup to the `head` element before the link to the `css/app.css`
    stylesheet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We have installed both `Bootstrap` and `Boostrap icons`. Now we will update
    the **Home** page to display the tasks that are stored in SQL Server.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying the tasks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to fetch the list of tasks and display them to the user. We do this
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `TaskManager.Client.Pages` folder and select the **Add**, **Class**
    option from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the new class `Index.razor.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Add** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the `partial` modifier to the class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following `using` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following property to the `Index` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code injects the `HttpClient` service into the component.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following code to the `Index` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code uses the `GetFromJsonAsync` method to return the collection
    of `TaskItem` objects.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Verify that Visual Studio has automatically added the following `using` statements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the `TaskManager.Client.Pages/Index.razor` page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove the `h1` element.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following `@if` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding markup displays the loading message if the value of `tasks` is
    `null`. Otherwise, it loops through the collection of `TaskItem` objects in `tasks`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following markup to the `@foreach` loop:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding markup displays a checkbox, the `TaskName` field, and a delete
    button for each `TaskItem` class.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Press *Ctrl*+*F5* to start the application without debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following is a screenshot of the **Home** page:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Graphical user interface, application  Description automatically generated](img/B18471_11_16.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 11.16: List of tasks'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We have added a list of tasks to the **Home** page, but nothing happens when
    we click either the checkbox or the **delete** button. Next, we need to allow
    the user to mark a task as complete.
  prefs: []
  type: TYPE_NORMAL
- en: Completing the tasks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will allow the user to mark a task as complete by clicking the checkbox
    next to the name of the task. We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Return to Visual Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click the `TaskManager.Client`/`Pages` folder and select the **Add**,
    **New Item** option from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `css` in the **Search** box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Style Sheet**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the file `Index.razor.css`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Add** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the default text with the following style:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding style will render a line through the tasks that are in the `completed-task`
    class.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open the `TaskManager.Client/wwwroot/index.html` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Uncomment the following link element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the `Index.razor` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update the `span` element used to display the task’s name to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding markup will set the class of the `span` element to `completed-task`
    when the task is completed by checking the checkbox associated with the task.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following markup to the `input` element of type checkbox:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the `TaskManager.Client.Pages/Index.razor.cs` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following `CheckboxChecked` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code uses the `PutAsJsonAsync` method to update the indicated
    `TaskItem` class.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Press *Ctrl*+*F5* to start the application without debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Mark one of the tasks as complete by clicking the checkbox next to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows a task that has been completed:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Graphical user interface, application  Description automatically generated
    with medium confidence](img/B18471_11_17.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 11.17: Completed task'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Return to Visual Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **dbo.TaskItem [Data]** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click *Shift*+*Alt*+*R* to refresh the data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify that the **IsComplete** field has been updated to **True** for the `TaskItem`
    that you marked as complete.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When a user checks the checkbox next to a task, the UI is updated, and the SQL
    Server database is updated. Next, we need to add the ability to delete tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting tasks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to allow users to delete tasks. We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `Index.razor` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update the `button` element to the following by adding the highlighted code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the `TaskManager.Client.Pages/Index.razor.cs` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following `DeleteTask` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code uses the `Http.DeleteAsync` method to delete the indicated
    `TaskItem` class.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Press *Ctrl*+*F5* to start the application without debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the button with the garbage can icon to delete one of the tasks.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Return to Visual Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **dbo.TaskItem [Data]** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click *Shift*+*Alt*+*R* to refresh the data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify that the `TaskItem` has been deleted.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have added the ability to delete tasks. Now we need to add the ability to
    add new tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Adding new tasks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to provide a way for users to add new tasks. We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `Index.razor` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following markup before the `@foreach` loop:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the `TaskManager.Client.Pages/Index.razor.cs` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following `AddTask` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code uses the `PostAsJsonAsync` method to create a new `TaskItem`
    class.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Press *Ctrl*+*F5* to start the application without debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a few new tasks.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Return to Visual Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **dbo.TaskItem [Data]** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click *Shift*+*Alt*+*R* to refresh the data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify that the new tasks have been added to the SQL Server database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have added the ability for users to add new tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should now be able to create a hosted Blazor WebAssembly app that uses ASP.NET
    Web API to update data in a SQL Server database.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we introduced hosted Blazor WebAssembly apps, the `HttpClient`
    service, and the JSON helper methods used to read, create, and update data. We
    also demonstrated how to delete data using the `HttpClient.DeleteAsync` method.
  prefs: []
  type: TYPE_NORMAL
- en: After that, we used Microsoft’s **Blazor WebAssembly App Empty** project template
    to create a hosted Blazor WebAssembly app. We added a `TaskItem` class to the
    `TaskManager.Shared` project and a `TaskItem API controller` to the `TaskManager.Server`
    project. Next, we configured SQL Server by updating the connection string to the
    database and using `Entity Framework` migrations. To enhance the UI, we added
    `Bootstrap` and `Bootstrap icons`. Finally, we used the `HttpClient` service to
    read the list of tasks, update a task, delete a task, and add new tasks.
  prefs: []
  type: TYPE_NORMAL
- en: We can apply our new skills to create a hosted Blazor WebAssembly app that is
    part of a multi-project solution and use ASP.NET Web API to read, create, update,
    and delete data.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will build an expense tracker using the `EditForm` component.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following questions are provided for your consideration:'
  prefs: []
  type: TYPE_NORMAL
- en: What are the benefits of using a hosted Blazor WebAssembly project versus a
    standalone Blazor WebAssembly project?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between HTTP GET, HTTP POST, and HTTP PUT?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In our project, how would we obtain the `TaskItemId` of a `TaskItem` that was
    created using the `PostAsJsonAsync` method?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can you add, edit, and delete data in a SQL Server database directly from Visual
    Studio?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following resources provide more information concerning the topics covered
    in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: For more information on the `HttpClient` class, refer to [https://learn.microsoft.com/en-us/dotnet/api/system.net.http.httpclient](https://learn.microsoft.com/en-us/dotnet/api/system.net.http.httpclient).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more information on calling a web API from Blazor WebAssembly, refer to
    [https://learn.microsoft.com/en-us/aspnet/core/blazor/call-web-api](https://learn.microsoft.com/en-us/aspnet/core/blazor/call-web-api).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more information on the extension methods that perform serialization and
    deserialization using `System.Text.Json`, refer to [https://learn.microsoft.com/en-us/dotnet/api/system.text.json](https://learn.microsoft.com/en-us/dotnet/api/system.text.json).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more information on `Entity Framework`, refer to [https://learn.microsoft.com/en-us/ef](https://learn.microsoft.com/en-us/ef).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more information on `Bootstrap`, refer to [https://getbootstrap.com](https://getbootstrap.com).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
