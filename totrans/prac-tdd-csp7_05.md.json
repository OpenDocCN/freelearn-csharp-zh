["```cs\npublic class ToDoApplicationTests\n{\n  [Fact] \n  public void TodoListExists()\n  {\n    var todo = new TodoList();\n\n    Assert.NotNull(todo);\n  }\n}\n\ninternal class TodoList\n{\n  public TodoList()\n  {\n  }\n}\n```", "```cs\n[Fact]\npublic void CanGetTodos()\n{\n  // Arrange\n  var todo = new TodoList();\n\n  // Act\n  var result = todo.Items;\n\n  // Assert\n  Assert.NotNull(result);\n}\n```", "```cs\ninternal class TodoList\n{\n  public object Items { get; } = new object();\n\n  public TodoList()\n  {\n  }\n}\n```", "```cs\nAssert.Empty();\n```", "```cs\npublic IEnumerable<Object> Items { get; } = new List<Object>();\n```", "```cs\n[Fact]\npublic void CanGetTodos()\n{\n  // Arrange\n  var todo = new TodoList();\n\n  // Act\n  var result = todo.Items;\n\n  // Assert\n  Assert.NotNull(result);\n  Assert.IsAssignableFrom<IEnumerable<Todo>>(result);\n  Assert.Empty();\n}\n```", "```cs\ninternal class TodoList\n{\n  public IEnumerable<Todo> Items { get; } = new List<Todo>();\n\n  public TodoList()\n  {\n  }\n}\n\npublic class Todo \n{\n}\n```", "```cs\n[Fact]\npublic void AddTodoExists()\n{\n  // Arrange\n  var todo = new TodoList();\n  var item = new Todo();\n\n  // Act\n  todo.AddTodo(item);\n}\n\ninternal class TodoList\n{\n  public IEnumerable<Todo> Items { get; } = new List<Todo>();\n\n  public TodoList()\n  {\n  }\n\n  internal void AddTodo(Todo item)\n  {\n  }\n}\n```", "```cs\npublic class TodoListAddTests\n{\n  [Fact]\n  public void ItAddsATodoItemToTheTodoList()\n  {\n    // Arrange\n    var todo = new TodoList();\n    var item = new Todo();\n\n    // Act\n    todo.AddTodo(item);\n\n    // Assert\n    Assert.Single(todo.Items);\n  }\n}\n\ninternal class TodoList\n{\n  private List<Todo> _items = new List<Todo>();\n\n  public IEnumerable<Todo> Items\n  {\n    get\n    {\n      return _items;\n    }\n  }\n\n  public TodoList()\n  {\n  }\n\n  public void AddTodo(Todo item)\n  {\n    _items.Add(item);\n  }\n}\n```", "```cs\n[Fact(Skip=\"Forgot to test negative cases first\")]\npublic void ItAddsATodoItemToTheTodoList()\n```", "```cs\n[Fact]\npublic void OnNullAnArgumentNullErrorOccurs()\n{\n  // Arrange\n  var todo = new TodoList();\n  Todo item = null;\n\n  // Act\n  var exception = Record.Exception(() => todo.AddTodo(item));\n\n  // Assert\n  Assert.NotNull(exception);\n  Assert.IsType<ArgumentNullException>(exception);\n}\n\npublic void AddTodo(Todo item)\n{\n  throw new ArgumentNullException();\n}\n```", "```cs\npublic class TodoModelTests\n{\n  [Fact] \n  public void ItHasDescription()\n  {\n    // Arrange\n    var todo = new Todo();\n\n    // Act\n    todo.Description = \"Test Description\";\n  }\n}\n\npublic class Todo\n{\n  public string Description { get; set; }\n}\n```", "```cs\n[Fact]\npublic void OnNullADescriptionRequiredValidationErrorOccurs()\n{\n  // Arrange\n  var todo = new TodoList();\n  var item = new Todo()\n  {\n    Description = null\n  };\n\n  // Act\n  var exception = Record.Exception(() => todo.AddTodo(item));\n\n  // Assert\n  Assert.NotNull(exception);\n  Assert.IsType(typeof(DescriptionRequiredException), exception); \n}\n\ninternal class TodoList\n{\n  ...\n\n  public void AddTodo(Todo item)\n  {\n    item = item ?? throw new ArgumentNullException();\n\n    item.Description = item.Description ?? throw new                   \n                                           DescriptionRequiredException();\n  }\n}\n```", "```cs\npublic class TodoModelValidateTests\n{\n  [Fact]\n  public void ItExists()\n  {\n    // Arrange\n    var todo = new Todo();\n\n    // Act\n    todo.Validate();\n  }\n}\n\npublic class Todo\n{\n  public string Description { get; set; }\n\n  internal void Validate()\n  {\n  }\n}\n```", "```cs\npublic class TodoModelValidateTests\n{\n  [Fact]\n  public void OnNullADescriptionRequiredValidationErrorOccurs()\n  {\n    // Arrange\n    var item = new Todo()\n    {\n      Description = null\n    };\n\n    // Act\n    var exception = Record.Exception(() => item.Validate());\n\n    // Assert\n    Assert.NotNull(exception);\n    Assert.IsType(typeof(DescriptionRequiredException), exception); \n  }\n}\n\npublic class Todo\n{\n  public string Description { get; set; }\n\n  internal void Validate()\n  {\n    Description = Description ?? throw new DescriptionRequiredException();\n  }\n}\n```", "```cs\npublic void AddTodo(Todo item)\n{\n  item = item ?? throw new ArgumentNullException();\n\n  item.Validate();\n}\n```", "```cs\n[Fact]\npublic void ItAddsATodoItemToTheTodoList()\n{\n  // Arrange\n  var todo = new TodoList();\n  var item = new Todo\n  {\n    Description = \"Test Description\"\n  };\n\n  // Act\n  todo.AddTodo(item);\n\n  // Assert\n  Assert.Single(todo.Items);\n}\n\npublic void AddTodo(Todo item)\n{\n  item = item ?? throw new ArgumentNullException();\n\n  item.Validate();\n\n  _items.Add(item);\n}\n```"]