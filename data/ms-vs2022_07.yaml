- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: Machine Learning Integration
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 机器学习集成
- en: In this chapter, we will embark on an exploration of integrating **machine learning**
    ( **ML** ) seamlessly into software development workflows using Visual Studio.
    As we continue to advance in the digital age, the integration of ML capabilities
    into applications has become increasingly pivotal, enabling intelligent decision-making
    and automation within our software systems.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将开始探索如何使用 Visual Studio 无缝地将 **机器学习**（**ML**）集成到软件开发工作流程中。随着我们在数字时代的不断进步，将机器学习能力集成到应用程序中变得越来越关键，这使我们能够在软件系统中实现智能决策和自动化。
- en: Our journey begins with an introduction to ML, demystifying its core concepts
    and applications. Next, we will dive into the practical aspects by harnessing
    the power of **ML.NET** and **Model Builder** within Visual Studio. Through hands-on
    examples and guided tutorials, we’ll demonstrate how to create and train ML models
    directly within the familiar Visual Studio environment.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的旅程从机器学习的简介开始，揭示其核心概念和应用。接下来，我们将通过利用 Visual Studio 中的 **ML.NET** 和 **Model
    Builder** 的力量来深入实际方面。通过动手示例和指导教程，我们将展示如何在熟悉的 Visual Studio 环境中直接创建和训练 ML 模型。
- en: As we progress, the focus shifts toward deployment strategies for ML models.
    We’ll explore how to deploy a trained model within an ASP.NET Core web API, enabling
    real-time inference and integration with web-based applications. Additionally,
    we’ll explore deploying models within Azure Functions, leveraging serverless computing
    for scalable and cost-effective deployment scenarios.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们前进，重点转向 ML 模型的部署策略。我们将探讨如何在 ASP.NET Core web API 中部署一个训练好的模型，以实现实时推理和与基于
    Web 的应用程序的集成。此外，我们还将探索在 Azure Functions 中部署模型，利用无服务器计算来实现可扩展且成本效益高的部署场景。
- en: 'Key topics covered in this chapter include the following:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的关键主题包括以下内容：
- en: Introduction to ML
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 机器学习简介
- en: Creating machine learning models with ML.NET and Model Builder
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 ML.NET 和 Model Builder 创建机器学习模型
- en: Deploying models in an ASP.NET Core web API
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 ASP.NET Core web API 中部署模型
- en: Deploying models in Azure Functions
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Azure Functions 中部署模型
- en: On this journey, we will unlock the potential of integrating ML into our software
    projects using Visual Studio, empowering us to build intelligent and adaptive
    applications that resonate with today’s technology landscape.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个旅程中，我们将解锁使用 Visual Studio 将 ML 集成到我们的软件项目中的潜力，使我们能够构建与当今技术景观相呼应的智能和自适应应用程序。
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'I wrote this chapter with the following version of Visual Studio in mind:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我撰写本章时考虑的 Visual Studio 版本如下：
- en: Visual Studio Enterprise 2022 Version 17.12.0
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio Enterprise 2022 版本 17.12.0
- en: Preview 1.0
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预览 1.0
- en: The code files for this chapter can be found at [https://github.com/PacktPublishing/Mastering-Visual-Studio-2022/tree/main/ch07](https://github.com/PacktPublishing/Mastering-Visual-Studio-2022/tree/main/ch07)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码文件可以在[https://github.com/PacktPublishing/Mastering-Visual-Studio-2022/tree/main/ch07](https://github.com/PacktPublishing/Mastering-Visual-Studio-2022/tree/main/ch07)找到。
- en: Introduction to ML
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 机器学习简介
- en: '**ML** is a branch of **artificial intelligence** ( **AI** ) focused on developing
    algorithms and statistical models that enable computers to perform tasks without
    explicit programming. These tasks can range from basic pattern recognition to
    complex decision-making processes. At its core, ML involves machines learning
    from data to improve the algorithms’ performance over time.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**ML** 是人工智能（**AI**）的一个分支，专注于开发算法和统计模型，使计算机能够在没有明确编程的情况下执行任务。这些任务可以从基本的模式识别到复杂的决策过程。在其核心，机器学习涉及机器从数据中学习以随着时间的推移提高算法的性能。'
- en: 'There are three primary types of ML:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 机器学习主要有三种类型：
- en: '**Supervised learning** : This involves training a model on labeled data to
    predict outputs based on input data, such as regression (predicting continuous
    values) and classification (predicting discrete labels)'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监督学习**：这涉及到在标记的数据上训练一个模型，根据输入数据预测输出，例如回归（预测连续值）和分类（预测离散标签）'
- en: '**Unsupervised learning** : This involves training a model on unlabeled data
    to identify patterns or structures within the dataset, such as clustering (grouping
    similar data points) and dimensionality reduction (reducing input variables)'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**无监督学习**：这涉及到在未标记的数据上训练一个模型，以识别数据集中的模式或结构，例如聚类（将相似的数据点分组）和降维（减少输入变量）'
- en: '**Reinforcement learning** : Models learn to make decisions by interacting
    with an environment, and receiving feedback in the form of rewards or penalties
    to maximize the cumulative reward'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**强化学习**：模型通过与环境的交互并接收奖励或惩罚形式的反馈来学习做出决策，以最大化累积奖励。'
- en: ML utilizes various algorithms such as decision trees, **support vector machines**
    ( **SVMs** ), and neural networks, chosen based on specific problems, data characteristics,
    and desired outcomes.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: ML利用各种算法，如决策树、**支持向量机**（**SVMs**）和神经网络，这些算法基于特定问题、数据特征和期望结果进行选择。
- en: ML.NET, an open source, cross-platform ML framework by Microsoft, simplifies
    ML for .NET developers, enabling the integration of ML capabilities into applications
    without requiring deep expertise in ML or data science.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: ML.NET是微软的一个开源、跨平台的ML框架，它简化了.NET开发者的ML，使他们能够将ML功能集成到应用程序中，而无需深入的专业ML或数据科学知识。
- en: 'Key features of ML.NET include the following:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: ML.NET的关键特性包括以下内容：
- en: '**Cross-platform compatibility** : It works seamlessly on Windows, Linux, and
    macOS'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**跨平台兼容性**：它在Windows、Linux和macOS上无缝工作。'
- en: '**Integration with .NET** : It easily incorporates ML capabilities into . NET
    projects'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**与.NET的集成**：它轻松地将ML功能集成到.NET项目中。'
- en: '**Customizable models** : Developers can tailor models to their needs, including
    training on custom datasets'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可定制模型**：开发者可以根据自己的需求定制模型，包括在自定义数据集上进行训练。'
- en: '**Transparency and explainability** : It provides tools for understanding how
    models make predictions, essential for building trust in AI'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**透明度和可解释性**：它提供了理解模型如何进行预测的工具，这对于建立对人工智能的信任至关重要。'
- en: '**Open source and community-driven** : It benefits from community contributions,
    leading to ongoing improvements and new features'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开源和社区驱动**：它受益于社区贡献，导致持续改进和新特性的出现。'
- en: '**ML.NET** is a versatile framework that simplifies the integration of ML capabilities
    into .NET applications. Features such as **automated ML** ( **AutoML** ) and tools
    such as ML.NET CLI and Model Builder make the process straightforward, even for
    developers without extensive data science experience. It supports cross-platform
    development and seamlessly integrates with popular Python libraries such as TensorFlow
    and ONNX through NimbusML.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**ML.NET**是一个多功能的框架，它简化了将ML功能集成到.NET应用程序中的过程。如**自动ML**（**AutoML**）和ML.NET CLI以及Model
    Builder等工具使过程变得简单，即使对于没有丰富数据科学经验的开发者也是如此。它支持跨平台开发，并通过NimbusML无缝集成到流行的Python库，如TensorFlow和ONNX。'
- en: The Model Builder tool within ML.NET streamlines model creation with AutoML,
    enabling developers to deploy models swiftly by loading their data. This tool
    automates the entire model-building process, including code generation for consuming
    these models. Combined with its flexibility to leverage existing ML libraries,
    ML.NET offers a robust solution for .NET developers seeking to incorporate ML
    into their applications.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: ML.NET中的Model Builder工具通过AutoML简化了模型创建过程，使开发者能够通过加载数据快速部署模型。此工具自动化了整个模型构建过程，包括为使用这些模型生成代码。结合其利用现有ML库的灵活性，ML.NET为寻求将ML集成到其应用程序中的.NET开发者提供了一个强大的解决方案。
- en: Now, let’s dive into creating an ML model using ML.NET and the intuitive Model
    Builder **user** **interface** ( **UI** ).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们深入了解如何使用ML.NET和直观的Model Builder**用户****界面**（**UI**）创建ML模型。
- en: Creating an ML model with ML.NET and the Model Builder UI
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用ML.NET和Model Builder UI创建ML模型
- en: Initially introduced as a preview feature in Visual Studio 2019, Model Builder
    has transitioned to a stable feature as of 2022. In this section, we will explore
    how to use Model Builder to create an ML model with ML.NET.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Model Builder最初作为Visual Studio 2019的一个预览功能引入，截至2022年已转变为一个稳定的功能。在本节中，我们将探讨如何使用Model
    Builder结合ML.NET创建一个机器学习模型。
- en: 'First, let’s ensure that the Model Builder component is installed correctly
    in our instance of Visual Studio. To do so, we open the Visual Studio Installer
    and confirm that ML.NET Model Builder is selected under the **Individual** **components**
    tab:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们确保Model Builder组件已正确安装在我们的Visual Studio实例中。为此，我们打开Visual Studio安装程序，并确认在**单独组件**选项卡下已选中ML.NET
    Model Builder：
- en: '![Figure 7.1 – Installer – ML.NET Model Builder](img/B22218_07_1.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图7.1 – 安装程序 – ML.NET Model Builder](img/B22218_07_1.jpg)'
- en: Figure 7.1 – Installer – ML.NET Model Builder
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.1 – 安装程序 – ML.NET Model Builder
- en: 'Then, we can create a new empty console project as a foundation for supporting
    our ML process. Now, we are all set, and we can create our ML.NET by using the
    file-adding menu by right-clicking on the project and selecting **Add** | **Machine**
    **Learning Model…** :'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以创建一个新的空控制台项目作为支持我们的机器学习过程的基础。现在，我们已经准备就绪，可以通过右键单击项目并选择 **添加** | **机器**
    **学习模型…** 来创建我们的 ML.NET：
- en: '![Figure 7.2 – Add an ML model](img/B22218_07_2.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.2 – 添加一个机器学习模型](img/B22218_07_2.jpg)'
- en: Figure 7.2 – Add an ML model
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.2 – 添加一个机器学习模型
- en: The preceding action will initiate the **.mbconfig** file. This file is a JSON
    file that keeps track of the state of the UI, including the model’s configuration,
    data transforms, algorithm, and settings such as learning rate, number of layers,
    and number of neurons.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 此前的操作将启动 **.mbconfig** 文件。此文件是一个 JSON 文件，它跟踪 UI 的状态，包括模型的配置、数据转换、算法以及学习率、层数和神经元数量等设置。
- en: The first step prompted by Model Builder, after choosing a name for the **.mbconfig**
    file, is to select a **Scenario** option for our ML model.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择 **.mbconfig** 文件名称后，模型构建器提示的第一步是选择我们机器学习模型的 **场景** 选项。
- en: '![Figure 7.3 – Configuring .mbconfig](img/B22218_07_3.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.3 – 配置 .mbconfig](img/B22218_07_3.jpg)'
- en: Figure 7.3 – Configuring .mbconfig
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.3 – 配置 .mbconfig
- en: 'The selection window of Model Builder offers several scenarios organized into
    three main categories:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 模型构建器的选择窗口提供了三个主要类别组织下的几个场景：
- en: '**Tabular** : This category includes scenarios for tasks such as regression,
    classification, and clustering, where the data is organized in a tabular format'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**表格**：本类别包括回归、分类和聚类等任务的场景，其中数据以表格格式组织'
- en: '![Figure 7.4 – Tabular](img/B22218_07_4.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.4 – 表格](img/B22218_07_4.jpg)'
- en: Figure 7.4 – Tabular
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.4 – 表格
- en: '**Computer Vision** : This category encompasses scenarios related to image
    classification, object detection, and other computer vision tasks'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**计算机视觉**：本类别包括与图像分类、目标检测和其他计算机视觉任务相关的场景'
- en: '![Figure 7.5 –  Computer Vision](img/B22218_07_5.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.5 – 计算机视觉](img/B22218_07_5.jpg)'
- en: Figure 7.5 – Computer Vision
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.5 – 计算机视觉
- en: '**Natural Language Processing** : This category includes scenarios for natural
    language processing tasks, such as sentiment analysis, text classification, and
    language translation'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自然语言处理**：本类别包括自然语言处理任务的场景，例如情感分析、文本分类和语言翻译'
- en: '![Figure 7.6 – Natural Language Processing](img/B22218_07_6.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.6 – 自然语言处理](img/B22218_07_6.jpg)'
- en: Figure 7.6 – Natural Language Processing
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.6 – 自然语言处理
- en: In our example, we will choose the **Data Classification** scenario under the
    **Tabular** category.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们将在 **表格** 类别下选择 **数据分类** 场景。
- en: 'The second step is to select the training environment. We have the option to
    train our ML model either locally on our machines or in the cloud on Azure, depending
    on the situation. When we train locally, we operate within the limitations of
    our computer resources (CPU, memory, and disk). However, when we train in the
    cloud, we can scale up our resources to address the requirements of our scenario,
    particularly for handling large datasets. Notice that the availability of the
    environment depends on the scenario we choose. Here’s a table of the current availability
    combination:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 第二步是选择训练环境。根据情况，我们可以选择在本地机器上或在 Azure 云中训练我们的机器学习模型。当我们本地训练时，我们在计算机资源（CPU、内存和磁盘）的限制内操作。然而，当我们云中训练时，我们可以扩展我们的资源以满足场景的需求，特别是处理大数据集的需求。请注意，环境的可用性取决于我们选择的场景。以下是目前可用组合的表格：
- en: '| **Scenario** | **Local CPU** | **Local GPU** | **Azure** |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| **场景** | **本地 CPU** | **本地 GPU** | **Azure** |'
- en: '| Data classification | **✔️** | **❌** | **❌** |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| 数据分类 | **✔️** | **❌** | **❌** |'
- en: '| Value prediction | **✔️** | **❌** | **❌** |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| 值预测 | **✔️** | **❌** | **❌** |'
- en: '| Recommendation | **✔️** | **❌** | **❌** |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| 推荐 | **✔️** | **❌** | **❌** |'
- en: '| Forecasting | **✔️** | **❌** | **❌** |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| 预测 | **✔️** | **❌** | **❌** |'
- en: '| Image classification | **✔️** | **✔️** | **✔️** |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| 图像分类 | **✔️** | **✔️** | **✔️** |'
- en: '| Object detection | **❌** | **❌** | **✔️** |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| 目标检测 | **❌** | **❌** | **✔️** |'
- en: '| Text classification | **✔️** | **✔️** | **❌** |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| 文本分类 | **✔️** | **✔️** | **❌** |'
- en: Now that we have chosen our scenario and training environment, we must gather
    the data that will be used for training. Model Builder will guide us through the
    process according to our selected scenario, helping us upload the data.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经选择了场景和训练环境，我们必须收集用于训练的数据。模型构建器将根据我们选择的场景引导我们完成这个过程，帮助我们上传数据。
- en: Finally, we can launch the training of our ML model. We can set a specific time
    for training to begin. Model Builder automatically chooses a training time based
    on our dataset size.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以启动我们 ML 模型的训练。我们可以为训练设置一个特定的开始时间。Model Builder 会根据我们的数据集大小自动选择训练时间。
- en: '![Figure 7.7 –Train](img/B22218_07_7.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.7 – 训练](img/B22218_07_7.jpg)'
- en: Figure 7.7 –Train
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.7 – 训练
- en: During the **Evaluate** step, we’ll discover the best-performing algorithm and
    its highest accuracy, providing valuable insights into our model’s performance.
    This step also enables us to experiment with the model directly within the UI.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在 **Evaluate** 步骤中，我们将发现性能最佳的算法及其最高准确率，为我们模型的表现提供有价值的见解。此步骤还使我们能够在 UI 中直接实验模型。
- en: In the **Try your model** section, we can input sample data to generate predictions.
    The textbox comes pre-filled with the first line of data from our dataset, but
    we have the flexibility to modify the input and click the **Predict** button to
    observe different price predictions.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在 **尝试您的模型** 部分，我们可以输入样本数据以生成预测。文本框预先填充了数据集的第一行数据，但我们可以修改输入并点击 **预测** 按钮来观察不同的价格预测。
- en: '![Figure 7.8 – Evaluate](img/B22218_07_8.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.8 – 评估](img/B22218_07_8.jpg)'
- en: Figure 7.8 – Evaluate
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.8 – 评估
- en: The last panel of Model Builder is about consuming the model we just created.
    Let’s explore how we can integrate our model into a web API using Visual Studio.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Model Builder 的最后一个面板是关于消费我们刚刚创建的模型。让我们探索如何使用 Visual Studio 将我们的模型集成到 Web API
    中。
- en: Deploying a model in an ASP.NET Core web API
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 ASP.NET Core Web API 中部署模型
- en: In this section, we will learn how to integrate our ML.NET model into an existing
    web API. To do so, we will jump to the **Consume** panel of Model Builder.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何将我们的 ML.NET 模型集成到现有的 Web API 中。为此，我们将跳转到 Model Builder 的 **Consume**
    面板。
- en: '![Figure 7.9 – Consume](img/B22218_07_9.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.9 – 消费](img/B22218_07_9.jpg)'
- en: Figure 7.9 – Consume
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.9 – 消费
- en: The **Consume** panel within Model Builder is a critical tool for integrating
    our trained ML models into .NET applications. Once we’ve completed the evaluation
    phase, Model Builder generates a model file and the necessary code to incorporate
    the model into our application. These models are saved as a **.zip** file, and
    the code to load and use our model is added as a new project within our solution.
    Additionally, Model Builder provides a sample console application that we can
    run to see our model in action.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Model Builder 中的 **Consume** 面板是集成我们训练好的 ML 模型到 .NET 应用程序的关键工具。一旦我们完成了评估阶段，Model
    Builder 会生成一个模型文件以及将模型集成到我们的应用程序中所需的代码。这些模型以 **.zip** 文件的形式保存，并将加载和使用我们的模型的代码添加到我们解决方案中的新项目中。此外，Model
    Builder 还提供了一个我们可以运行的示例控制台应用程序，以查看我们的模型在实际中的应用。
- en: 'The **Consume** panel gives us options to create projects that consume our
    model, such as the following:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**Consume** 面板为我们提供了创建消费我们模型的项目的选项，例如以下内容：'
- en: '**Console app** : Generates a .NET console application specifically for making
    predictions using our model'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制台应用**：生成一个专门用于使用我们的模型进行预测的 .NET 控制台应用程序'
- en: '**Web API** : Sets up an ASP.NET Core web API, allowing us to consume our model
    over the internet'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Web API**：设置 ASP.NET Core Web API，允许我们通过互联网消费我们的模型'
- en: These projects are crucial for deploying our model in various environments,
    whether for local testing or web-based applications accessible online.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这些项目对于将我们的模型部署到各种环境至关重要，无论是用于本地测试还是可在线访问的基于 Web 的应用程序。
- en: Let’s click on the **Add web app to the solution** link to create the new ASP.NET
    Core web API exposing our model. That will set up a working web API, enabling
    us to expose the model we just trained, using the minimal API way.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们点击 **将 Web 应用添加到解决方案** 链接以创建新的 ASP.NET Core Web API，这将公开我们的模型。这将设置一个可工作的
    Web API，使我们能够以最小 API 的方式公开我们刚刚训练的模型。
- en: 'Now, to understand how it’s articulate, we will take a look at what the wizard
    generates for us. Let’s explore the project structure:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了了解它的表述方式，我们将查看向导为我们生成的内容。让我们探索项目结构：
- en: '![Figure 7.10 – Generating a web API project structure](img/B22218_07_10.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.10 – 生成 Web API 项目结构](img/B22218_07_10.jpg)'
- en: Figure 7.10 – Generating a web API project structure
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.10 – 生成 Web API 项目结构
- en: 'The template utilizes the following packages to make ML.NET models accessible
    for ML:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 模板使用以下包使 ML.NET 模型对 ML 可用：
- en: '**Microsoft.ML**'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Microsoft.ML**'
- en: '**Microsoft.Extensions.ML**'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Microsoft.Extensions.ML**'
- en: 'Among these libraries, in the **Program.cs** file, we observe that Visual Studio
    generates a POST request. Here’s the code snippet:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些库中，在 **Program.cs** 文件中，我们可以观察到 Visual Studio 生成了一个 POST 请求。以下是代码片段：
- en: '[PRE0]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This code snippet uses the models generated by the model builder to set up an
    HTTP POST **endpoint /predict** in an ASP.NET Core minimal API application.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码片段使用模型生成器生成的模型在 ASP.NET Core 最小 API 应用程序中设置 HTTP POST **端点 /predict**。
- en: 'This is possible because of the following lines of code:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为以下代码行：
- en: '[PRE1]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This code is configuring an ASP.NET Core application to use an ML model stored
    in a file named **SampleML.mlnet** for making predictions. The model expects inputs
    of the **SampleML.ModelInput** type and produces outputs of the **SampleML.ModelOutput**
    type. This setup allows the application to efficiently manage and reuse the ML
    model across different parts of the application.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码正在配置一个 ASP.NET Core 应用程序，以使用名为 **SampleML.mlnet** 的文件中存储的 ML 模型进行预测。该模型期望输入为
    **SampleML.ModelInput** 类型，并产生 **SampleML.ModelOutput** 类型的输出。这种设置允许应用程序在不同部分的应用程序中有效地管理和重用
    ML 模型。
- en: Now, we can test the endpoints using the endpoints explorer and **.http** file,
    as we saw in [*Chapter 6*](B22218_06.xhtml#_idTextAnchor112) . Since the HTTP
    verb used for this endpoint is **POST** , we have to add a body to our request.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以使用端点资源管理器和 **.http** 文件测试端点，正如我们在 [*第 6 章*](B22218_06.xhtml#_idTextAnchor112)
    中所看到的。由于此端点使用的 HTTP 动词是 **POST**，我们必须在我们的请求中添加一个主体。
- en: 'Here’s the proper syntax to set up our working request in the **.** **http**
    file:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这是设置我们的工作请求在 **.** **http** 文件中的正确语法：
- en: '[PRE2]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now, we can validate that we own a web API able to consume our model generated
    by Model Builder. This web API can be seamlessly deployed like any other API in
    the . NET ecosystem.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以验证我们拥有一个能够消费由 Model Builder 生成的模型的 Web API。这个 Web API 可以像 .NET 生态系统中的任何其他
    API 一样无缝部署。
- en: There is another way to consume our generated ML model, and that is to consume
    it through Azure Functions.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 消费我们生成的 ML 模型的另一种方法是，通过 Azure Functions 消费它。
- en: Deploying a model in Azure Functions
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Azure Functions 中部署模型
- en: In this section, we will learn how to integrate the ML model generated by Model
    Builder into Azure Functions. This process will be less straightforward as no
    template is provided.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何将 Model Builder 生成的 ML 模型集成到 Azure Functions 中。这个过程将不会那么直接，因为没有提供模板。
- en: '**Azure Functions** is a serverless computing service offered by Microsoft
    Azure. Serverless computing is a cloud computing execution model where the cloud
    provider runs the server, and dynamically manages the allocation of machine resources.
    Pricing is based on the actual number of resources consumed by an application,
    rather than pre-purchased units of capacity.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '**Azure Functions** 是由 Microsoft Azure 提供的无服务器计算服务。无服务器计算是一种云计算执行模型，其中云服务提供商运行服务器，并动态管理机器资源的分配。计费基于应用程序实际消耗的资源数量，而不是预先购买的容量单位。'
- en: First, we need to ensure that the Azure development workload is well installed
    in our Visual Studio instance by navigating to the Visual Studio Installer.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要确保 Azure 开发工作负载在我们的 Visual Studio 实例中安装良好，方法是导航到 Visual Studio 安装程序。
- en: '![Figure 7.11 – Azure development workload](img/B22218_07_11.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.11 – Azure 开发工作负载](img/B22218_07_11.jpg)'
- en: Figure 7.11 – Azure development workload
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.11 – Azure 开发工作负载
- en: Once the workload is installed, we can start by creating a new Azure Functions
    project, for example, we will name it **SampleML_AzureFunction** , and we will
    keep all parameters by default.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦工作负载安装完成，我们可以开始创建一个新的 Azure Functions 项目，例如，我们将将其命名为 **SampleML_AzureFunction**，并将所有参数保持默认设置。
- en: '![Figure 7.12 – Azure Functions project](img/B22218_07_12.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.12 – Azure Functions 项目](img/B22218_07_12.jpg)'
- en: Figure 7.12 – Azure Functions project
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.12 – Azure Functions 项目
- en: 'This time, we need to add both libraries by ourselves, as seen in the previous
    section, using the NuGet Manager. We will open the NuGet Manager by right-clicking
    on the project name, selecting **Manage NuGet Packages…** , and then browsing
    for our needed libraries, to finally install them:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，我们需要自己添加这两个库，如前文所述，使用 NuGet 管理器。我们将通过右键单击项目名称，选择 **管理 NuGet 包…**，然后浏览所需库，最后安装它们：
- en: '**Microsoft.ML**'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Microsoft.ML**'
- en: '**Microsoft.Extension.ML**'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Microsoft.Extension.ML**'
- en: Now, to be able to use our pre-trained model, all we need to do is copy the
    **.mbconfig** file to Azure Functions. After that, to be sure you can access the
    **.mlnet** package after compiling, we need to set the **Copy to Output Directory**
    properties to **Copy** **if newer** .
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了能够使用我们的预训练模型，我们只需要将 **.mbconfig** 文件复制到 Azure Functions。之后，为了确保在编译后可以访问
    **.mlnet** 包，我们需要将 **复制到输出目录**属性设置为 **复制** **如果较新**。
- en: '![Figure 7.13 – The SampleML.Net properties](img/B22218_07_13.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.13 – SampleML.Net 属性](img/B22218_07_13.jpg)'
- en: Figure 7.13 – The SampleML.Net properties
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.13 – SampleML.Net 属性
- en: 'Once we are all set, we can develop our function following these simple steps:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 一切准备就绪后，我们可以按照以下简单步骤开发我们的函数：
- en: 'Add **startup.cs** to configure our Azure Functions project to use **SampleML.mlnet**
    :'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 **startup.cs** 添加到配置我们的 Azure Functions 项目以使用 **SampleML.mlnet**：
- en: '[PRE3]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Call the **predict** method of the ML.NET package in the Azure’s **run** method:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Azure 的 **run** 方法中调用 ML.NET 包的 **predict** 方法：
- en: '[PRE4]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Finally, we can test the Azure function using the Endpoints Explorer and **.http**
    , like how you tested the web API in the previous section.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以使用 Endpoints Explorer 和 **.http** 测试 Azure 函数，就像在上一节中测试 Web API 一样。
- en: Summary
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we explored the integration of ML capabilities into software
    development workflows using Visual Studio, equipping developers with essential
    skills to leverage intelligent decision-making within applications.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了使用 Visual Studio 将 ML 功能集成到软件开发工作流程中，为开发者提供了利用应用程序中智能决策的必备技能。
- en: We began by introducing the fundamental concepts of ML, providing an overview
    to understand its applications and significance in modern software development.
    Next, we delved into practical implementation by demonstrating how to create and
    train ML models using ML.NET and Model Builder within Visual Studio. Moving forward,
    we explored deployment strategies for trained models, showcasing how to deploy
    ML models within an ASP.NET Core web API for real-time inference and integration
    with web applications. Additionally, we discussed deploying models within Azure
    Functions to leverage serverless computing for scalable and efficient deployment
    scenarios.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先介绍了机器学习（ML）的基本概念，提供了概述以理解其在现代软件开发中的应用和重要性。接下来，我们通过演示如何在 Visual Studio 中使用
    ML.NET 和 Model Builder 创建和训练 ML 模型，深入到实际实施中。然后，我们探讨了训练模型的部署策略，展示了如何在 ASP.NET Core
    Web API 中部署 ML 模型以进行实时推理和与 Web 应用程序的集成。此外，我们还讨论了在 Azure Functions 中部署模型以利用无服务器计算进行可扩展和高效的部署场景。
- en: In this chapter, you gained hands-on experience in building, training, and deploying
    ML models using Visual Studio, enabling you to infuse intelligent capabilities
    into your applications.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您通过使用 Visual Studio 构建、训练和部署 ML 模型获得了实践经验，使您能够将智能功能融入您的应用程序。
- en: In the upcoming chapter, we’ll continue on track toward advanced cloud integration
    and services through Visual Studio 2022.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将继续通过 Visual Studio 2022 向高级云集成和服务迈进。
