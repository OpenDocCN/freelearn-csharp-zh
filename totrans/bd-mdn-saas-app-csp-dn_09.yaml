- en: '9'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '9'
- en: Testing Strategies for SaaS Applications
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SaaS应用程序的测试策略
- en: Testing is ubiquitous in the software industry, but often the reason for spending
    time doing the testing is lost. As we discuss the various testing techniques in
    this chapter, we will place a strong emphasis on the rationale behind each testing
    approach. By understanding not just the how but also the why of implementing these
    testing practices, you will be better equipped to make informed decisions about
    your testing strategy and ensure the long-term success of your **Software-as-a-Service**
    (**SaaS**) applications.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 测试在软件行业中无处不在，但往往花费时间进行测试的原因被忽略了。在本章中，我们将讨论各种测试技术时，我们将强调每种测试方法背后的理由。通过理解实施这些测试实践不仅是如何，而且为什么要这样做，你将更好地做出关于你的测试策略的明智决策，并确保你的**软件即服务**（**SaaS**）应用程序的长期成功。
- en: In this chapter, we will explore the important role that testing plays in the
    development and maintenance of SaaS applications. We’ll use a combination of theory
    and practical examples to build a comprehensive understanding of the various testing
    approaches and their benefits. By the end of this chapter, you should have a solid
    foundation in testing strategies that will help you ensure the reliability, functionality,
    and overall quality of your SaaS applications.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨测试在SaaS应用程序的开发和维护中扮演的重要角色。我们将结合理论和实际案例，全面了解各种测试方法和它们的益处。到本章结束时，你应该对测试策略有一个坚实的基础，这将帮助你确保你的SaaS应用程序的可靠性、功能性和整体质量。
- en: We will start with a look at testing in general. This will include looking at
    the testing pyramid, a concept that illustrates the different types of testing—unit,
    integration, and **End-to-End** (**E2E**) testing—and their respective roles in
    the development process. This will give you a clear idea of the various testing
    approaches and their importance in ensuring that your application works as expected
    and meets the needs of your users.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从一般测试开始。这包括查看测试金字塔，一个说明不同类型测试（单元测试、集成测试和**端到端测试**（**E2E**））及其在开发过程中各自角色的概念。这将给你一个清晰的思路，了解各种测试方法及其在确保你的应用程序按预期工作并满足用户需求中的重要性。
- en: Next, we will delve into **Test-Driven Development** (**TDD**), a development
    methodology that emphasizes writing tests before writing the actual code. TDD
    has gained popularity in recent years due to its numerous benefits, such as improved
    code quality, faster development cycles, and easier maintenance. We will discuss
    the principles behind TDD and provide examples of how to apply them in your own
    projects.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将深入研究**测试驱动开发**（**TDD**），这是一种强调在编写实际代码之前编写测试的开发方法。TDD近年来因其众多益处而受到欢迎，如提高代码质量、更快的开发周期和更易于维护。我们将讨论TDD背后的原则，并提供如何在你的项目中应用这些原则的示例。
- en: We’ll then go through the three broad categories of testing that are shown on
    the testing pyramid in a bit more detail and will look at how to apply these techniques
    to SaaS applications.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将更详细地介绍测试金字塔上显示的三个广泛测试类别，并探讨如何将这些技术应用于SaaS应用程序。
- en: Throughout the chapter, we will cover the testing tools and frameworks commonly
    used in the Microsoft ecosystem. Understanding these tools will enable you to
    choose the most appropriate ones for your specific testing needs and help you
    create a more robust testing strategy for your SaaS applications.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍在Microsoft生态系统中常用的测试工具和框架。了解这些工具将使你能够为你的特定测试需求选择最合适的工具，并帮助你为你的SaaS应用程序制定更稳健的测试策略。
- en: Testing is a huge topic, and this chapter will only provide a general overview
    of the subject. However, by the end of this chapter, you should have a comprehensive
    understanding of how to approach testing for a SaaS application and an understanding
    of the various tools and techniques that are available.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 测试是一个庞大的主题，本章将仅提供一个主题概述。然而，到本章结束时，你应该对如何进行SaaS应用程序的测试有一个全面的理解，并对可用的各种工具和技术有一个了解。
- en: 'The main topics covered in this chapter will be the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的主要主题如下：
- en: Testing strategies that are specifically applicable to SaaS applications
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 适用于SaaS应用程序的特定测试策略
- en: Test-driven development (TDD)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试驱动开发（TDD）
- en: End-to-endpyramid – unit, integration, and E2E testing
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 端到端金字塔 – 单元测试、集成测试和端到端测试
- en: Technical requirements
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: All code from this chapter can be found at [https://github.com/PacktPublishing/Building-Modern-SaaS-Applications-with-C-and-.NET/tree/main/Chapter-9](https://github.com/PacktPublishing/Building-Modern-SaaS-Applications-with-C-and-.NET/tree/main/Chapter-9).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的所有代码都可以在[https://github.com/PacktPublishing/Building-Modern-SaaS-Applications-with-C-and-.NET/tree/main/Chapter-9](https://github.com/PacktPublishing/Building-Modern-SaaS-Applications-with-C-and-.NET/tree/main/Chapter-9)找到。
- en: Testing strategies for SaaS applications
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SaaS应用程序的测试策略
- en: Testing is a fundamental aspect of the software development process. It helps
    to ensure the quality, reliability, and functionality of applications. Well-structured
    tests and test strategies allow developers to identify and fix issues early in
    the development process, which prevents costly and time-consuming errors that
    may surface later on.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 测试是软件开发过程中的一个基本方面。它有助于确保应用程序的质量、可靠性和功能。结构良好的测试和测试策略允许开发者尽早在开发过程中识别和修复问题，从而防止可能后来出现的昂贵且耗时的错误。
- en: As well as confirming the software is as bug-free as possible, testing also
    gives a way to verify that the software meets its requirements and performs as
    expected in a variety of scenarios. By incorporating testing practices into every
    step of the development process, developers can create more robust and maintainable
    applications, leading to improved user satisfaction and increased trust in the
    software, which ultimately improves the chances of the project being a success.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 除了确认软件尽可能没有错误之外，测试还提供了一种验证软件是否满足其要求并在各种场景中按预期执行的方法。通过将测试实践融入开发过程的每一步，开发者可以创建更稳健、更易于维护的应用程序，从而提高用户满意度并增加对软件的信任，这最终提高了项目成功的可能性。
- en: The importance of testing for SaaS applications
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试对SaaS应用程序的重要性
- en: Insufficient testing can have serious consequences for any software application,
    including increased development costs, delayed releases, poor user experience,
    and reputational damage. When testing is inadequate, issues and defects are more
    likely to go unnoticed, leading to a higher likelihood of problems surfacing after
    deployment. This can result in time-consuming and costly fixes, as well as eroding
    user trust and satisfaction.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 不充分的测试对任何软件应用程序都可能产生严重后果，包括增加开发成本、延迟发布、用户体验不佳和声誉损害。当测试不足时，问题和缺陷更容易被忽视，导致部署后出现问题的可能性更高。这可能导致耗时且昂贵的修复，以及损害用户信任和满意度。
- en: If the testing process is insufficient, then your users become your **Quality
    Assurance** (**QA**) team. And typically, users do not appreciate this!
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果测试过程不足，那么你的用户就会变成你的**质量保证**（**QA**）团队。通常情况下，用户并不喜欢这种做法！
- en: It’s important when developing any software application that your testing and
    QA are done before the application is in the hands of the users. This is doubly
    so with SaaS applications. These applications often serve multiple customers simultaneously,
    and any bug will affect all users simultaneously. Worse, a bug on one user instance
    can cause site-wide outages. Downtime or functionality issues can have a significant
    impact on user satisfaction, leading to customer churn and reputational damage.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发任何软件应用程序时，确保在用户获得应用程序之前完成测试和QA是非常重要的。对于SaaS应用程序来说，这一点尤为重要。这些应用程序通常同时服务于多个客户，任何错误都会同时影响所有用户。更糟糕的是，一个用户实例上的错误可能导致整个网站的故障。停机或功能问题可能会对用户满意度产生重大影响，导致客户流失和声誉损害。
- en: SaaS applications typically require frequent updates and feature additions to
    stay competitive and meet the evolving needs of customers. A robust testing strategy
    allows developers to confidently release new features and updates without compromising
    the application’s stability or introducing unforeseen issues. Finally, SaaS applications
    often involve complex interactions between various components, services, and APIs,
    making it essential to thoroughly test these interactions to ensure seamless operation
    and data integrity.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: SaaS应用程序通常需要频繁更新和功能添加，以保持竞争力并满足客户不断变化的需求。一个稳健的测试策略允许开发者有信心地发布新功能和更新，而不会影响应用程序的稳定性或引入未预见的问题。最后，SaaS应用程序通常涉及各种组件、服务和API之间的复杂交互，因此彻底测试这些交互对于确保无缝操作和数据完整性至关重要。
- en: We’ll start by looking at some best practices for testing your applications.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先探讨一些测试应用程序的最佳实践。
- en: Testing best practices
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试最佳实践
- en: Testing can be a challenging endeavor, but the benefits of getting it right
    are numerous, including improved code quality, increased confidence in your application’s
    functionality, and reduced risk of defects reaching production. By following best
    practices, you can create a more robust and reliable testing process that not
    only uncovers issues early but also guides the design and development of your
    software. Throughout this section, we will provide a range of pointers and techniques
    to help you maximize the effectiveness of your testing efforts, ensuring that
    you can deliver high-quality software that meets the needs of your users.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 测试可能是一项具有挑战性的任务，但正确执行的好处是众多的，包括提高代码质量、增强对应用程序功能自信，以及降低缺陷进入生产的风险。通过遵循最佳实践，你可以创建一个更健壮和可靠的测试过程，这不仅能够及早发现问题，还能指导软件的设计和开发。在本节中，我们将提供一系列的提示和技术，以帮助您最大限度地提高测试工作的效率，确保您能够交付满足用户需求的优质软件。
- en: '**Write testable code**: If you make the code easy to test, then the testing
    will be… easy! Folow SOLID principles, use dependency injection, create modular
    and decoupled components, and keep your classes small and well encapsulated. This
    is good advice in general, but it makes a huge difference to the testing process.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编写可测试的代码**：如果你使代码易于测试，那么测试过程将会变得……简单！遵循SOLID原则，使用依赖注入，创建模块化和解耦的组件，并保持你的类小而封装良好。这通常是好的建议，但在测试过程中它会产生巨大的影响。'
- en: '**Test early, and test a lot**: The sooner in the development process that
    you start testing, the easier the process will be. Achieving 100% code coverage
    with tests is not really necessary, but achieving a high coverage percentage will
    generally result in better code, and fewer regressions. There are very few code
    bases that suffer from having too many tests, but there are many that suffer from
    having too few.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**尽早测试，多测试**：在开发过程中越早开始测试，过程就会越简单。通过测试实现100%的代码覆盖率并不是真正必要的，但实现高覆盖率通常会导致更好的代码，并减少回归。很少有代码库会因为测试过多而受到影响，但有很多代码库会因为测试过少而受到影响。'
- en: '**Maintain test isolation**: Each (unit) test should test only a single piece
    of the system, and should never depend on the results from any of the other tests.
    Integration and (E2E) tests may require more than a single piece of the system,
    but they should test only a single point of integration, or user interaction.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**保持测试隔离**：每个（单元）测试应该只测试系统的一个部分，并且不应依赖于其他任何测试的结果。集成测试和（E2E）测试可能需要多个系统部分，但它们应该只测试单个集成点或用户交互。'
- en: '**Keep tests simple and focused**: Each tests should be as short and as concise
    as possible. Tests should be easy to understand, and easy to maintain.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**保持测试简单和专注**：每个测试都应该尽可能短和简洁。测试应该易于理解，易于维护。'
- en: '`ShouldCorrectlyAddUpTheNumbers()` is a good name for a test that ensures numbers
    are added up correctly!'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ShouldCorrectlyAddUpTheNumbers()` 是一个很好的测试名称，确保数字能够正确相加！'
- en: '**Avoid testing implementation details**: Focus on testing the behavior and
    functionality of your code, rather than its internal implementation. Try to test
    for a set of inputs to a function,; a particular output is generated. For example,
    if you’re testing a function that calculates the sum of two numbers, focus on
    ensuring that the function returns the correct result for various input combinations
    rather than examining how the function performs the calculation internally. By
    doing so, you ensure that your tests remain relevant and useful, even if the implementation
    changes, as long as the expected behavior of the function stays consistent.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**避免测试实现细节**：专注于测试代码的行为和功能，而不是其内部实现。尝试测试函数的输入集，以生成特定的输出。例如，如果你正在测试一个计算两个数字之和的函数，你应该专注于确保该函数对于各种输入组合返回正确的结果，而不是检查函数内部是如何执行计算的。通过这样做，你可以确保即使实现发生变化，只要函数的预期行为保持一致，你的测试仍然相关且有用。'
- en: '**Foster a testing culture**: Encouraging a culture of testing within your
    team and organization is exceptionally important because it emphasizes the significance
    of testing in delivering high-quality software and encourages everyone to take
    responsibility for the overall quality of the product. A strong testing culture
    creates an environment where developers, testers, and other stakeholders actively
    collaborate to identify, prevent, and fix defects throughout the development process.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**培养测试文化**：在您的团队和组织中培养测试文化非常重要，因为它强调了测试在交付高质量软件中的重要性，并鼓励每个人都对产品的整体质量负责。强大的测试文化创造了一个环境，其中开发者、测试人员和其他利益相关者积极合作，在整个开发过程中识别、预防和修复缺陷。'
- en: The next best practice is to use TDD. This warrants a subsection on its own!
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个最佳实践是使用 TDD。这值得一个单独的小节！
- en: Test-driven development (TDD)
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试驱动开发 (TDD)
- en: TDD is a software development methodology that, at first glance, may seem counter-intuitive,
    as it emphasizes writing tests before writing the actual code. However, this approach
    has several benefits and helps developers create more robust, reliable, and maintainable
    software.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: TDD 是一种软件开发方法，乍一看可能似乎不符合直觉，因为它强调在编写实际代码之前编写测试。然而，这种方法有几个优点，并帮助开发者创建更健壮、可靠和易于维护的软件。
- en: The core idea behind TDD is to create a failing test for a specific feature
    or functionality and then implement the code necessary to make the test pass.
    By writing the test first, developers are forced to clearly define the desired
    outcome and requirements for the code, which, in turn, leads to better overall
    design and structure. This process also helps developers catch any issues early
    in the development cycle, minimizing the likelihood of introducing errors or unexpected
    behavior.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: TDD 的核心思想是为特定的功能或功能创建一个失败的测试，然后实现必要的代码以使测试通过。通过先编写测试，开发者被迫明确定义代码的预期结果和需求，这反过来又导致更好的整体设计和结构。这个过程也有助于开发者尽早在开发周期中捕捉到任何问题，最大限度地减少引入错误或意外行为的可能性。
- en: Once the test has been written and the code has been implemented to pass the
    test, developers often refactor the code to improve its structure, readability,
    or performance. During this refactoring process, the existing tests serve as a
    safety net, ensuring that any changes made to the code do not break its functionality.
    This cycle of writing a test, implementing the code, and then refactoring as needed
    is repeated until the desired functionality is achieved. This is called the Red-Green-Refactor
    cycle.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦编写了测试并实现了代码以通过测试，开发者通常会重构代码以改进其结构、可读性或性能。在重构过程中，现有的测试作为安全网，确保对代码所做的任何更改都不会破坏其功能。这个编写测试、实现代码并根据需要重构的周期会一直重复，直到达到预期的功能。这被称为红绿重构周期。
- en: '![Figure 9.1 -– The Red -Green -Refactor cycle](img/B19343_09_01.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.1 -– 红绿重构周期](img/B19343_09_01.jpg)'
- en: Figure 9.1 -– The Red -Green -Refactor cycle
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.1 -– 红绿重构周期
- en: Adopting TDD in a project can lead to several benefits. First, it promotes a
    more disciplined approach to coding, as developers must think about the requirements
    and desired outcomes before diving into implementation. Second, TDD simplifies
    debugging and maintenance, as the comprehensive test suite can quickly pinpoint
    issues and ensure that changes do not introduce new problems. Finally, TDD encourages
    better collaboration between team members, as the tests serve as clear documentation
    of the code’s functionality and expected behaviour.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目中采用 TDD 可以带来几个好处。首先，它促进了一种更自律的编码方法，因为开发者必须在实施之前考虑需求和预期结果。其次，TDD 简化了调试和维护，因为全面的测试套件可以快速定位问题并确保更改不会引入新的问题。最后，TDD
    鼓励团队成员之间更好的协作，因为测试作为代码功能及其预期行为的明确文档。
- en: Types of TDD
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: TDD 类型
- en: 'TDD provides a general approach to writing tests before writing code, but there
    are also subtypes or variations of TDD that emphasize specific aspects or techniques.
    Some of these subtypes are listed here:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: TDD 提供了在编写代码之前编写测试的一般方法，但也有一些 TDD 的子类型或变体，强调特定的方面或技术。以下列出了一些这些子类型：
- en: '**Behavior-Driven Development (BDD)**: BDD is an extension of TDD that focuses
    on the behavior of the software from the perspective of end-users or stakeholders.
    BDD encourages the use of a shared language and specification format (e.g., Gherkin)
    to describe the expected behavior of the software in a human-readable and easily
    understandable format. This shared understanding helps drive the creation of TDD
    tests, fostering better collaboration between developers, testers, and business
    stakeholders.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**行为驱动开发（BDD）**：BDD是TDD的扩展，它从最终用户或利益相关者的角度关注软件的行为。BDD鼓励使用共享语言和规范格式（例如，Gherkin）来描述软件的预期行为，使其以人类可读和易于理解的方式呈现。这种共享理解有助于推动TDD测试的创建，促进开发人员、测试人员和业务利益相关者之间的更好协作。'
- en: '**Acceptance Test-Driven Development (ATDD)**: ATDD is another variation of
    TDD that focuses on defining and validating acceptance criteria before starting
    the implementation of a feature. In ATDD, developers, testers, and business stakeholders
    collaborate to create acceptance tests that define the expected behavior of the
    system from a user’s perspective. These tests are then used to guide the development
    process, ensuring that the resulting software meets the defined acceptance criteria.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**验收测试驱动开发（ATDD）**：ATDD是TDD的另一种变体，它侧重于在开始实现功能之前定义和验证验收标准。在ATDD中，开发人员、测试人员和业务利益相关者协作创建验收测试，以定义从用户角度期望的系统行为。然后，这些测试被用来指导开发过程，确保生成的软件符合定义的验收标准。'
- en: '**Data-Driven Development (DDD)**: Not to be confused with Domain-Driven Design,
    Data-Driven Development in the context of TDD is an approach that focuses on using
    data to guide the creation of tests and the development process. Developers create
    test cases based on a range of input data and expected outcomes, ensuring that
    the code can handle various scenarios and edge cases. This approach is particularly
    useful when working with complex algorithms or data processing tasks.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据驱动开发（DDD）**：不要与领域驱动设计混淆，在TDD的上下文中，数据驱动开发是一种侧重于使用数据来指导测试创建和开发过程的方法。开发人员根据一系列输入数据和预期结果创建测试用例，确保代码可以处理各种场景和边缘情况。这种方法在处理复杂算法或数据处理任务时特别有用。'
- en: '**Specification by Example (SBE)**: SBE is a collaborative approach to TDD
    that involves creating executable specifications based on real-world examples.
    Developers, testers, and business stakeholders work together to identify key examples
    that illustrate the desired behavior of the system. These examples are then used
    to create tests that guide the development process, ensuring that the resulting
    software meets the agreed-upon expectations.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**示例规范（SBE）**：SBE是一种协作的TDD方法，涉及根据现实世界示例创建可执行的规范。开发人员、测试人员和业务利益相关者共同努力，确定关键示例，这些示例说明了系统的期望行为。然后，这些示例被用来创建指导开发过程的测试，确保生成的软件符合商定的预期。'
- en: These subtypes of TDD offer different perspectives and techniques for approaching
    test-first development.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这些TDD的子类型提供了不同的视角和技术，用于处理测试驱动开发。
- en: Criticisms of TDD
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对TDD的批评
- en: 'While TDD has gained popularity and has many proponents, it has also faced
    criticism for various reasons. Some of the common criticisms of TDD include the
    following:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然TDD已经获得了流行并有许多支持者，但它也因各种原因而面临批评。TDD的一些常见批评包括以下内容：
- en: '**Overemphasis on testing**: Critics argue that TDD can lead to an excessive
    focus on writing tests at the expense of other important development tasks, such
    as architecture and design. This overemphasis on testing may result in developers
    spending too much time on writing tests and not enough on other aspects of the
    development process.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**过度强调测试**：批评者认为，TDD可能导致过度关注编写测试，而牺牲了其他重要的开发任务，如架构和设计。这种对测试的过度强调可能导致开发人员在编写测试上花费太多时间，而在开发过程的其它方面投入不足。'
- en: '**Incomplete test coverage**: TDD does not guarantee complete test coverage,
    as developers might not be able to anticipate all possible scenarios or edge cases
    while writing tests. This could lead to a false sense of security and potentially
    undetected bugs in the software.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不完整的测试覆盖率**：TDD不能保证完整的测试覆盖率，因为开发人员在编写测试时可能无法预见到所有可能的场景或边缘情况。这可能导致一种虚假的安全感，并可能导致软件中存在未检测到的错误。'
- en: '**Slow development process**: Writing tests before implementing the code can
    slow down the development process, especially for developers who are new to TDD.
    The additional time spent on writing and maintaining tests may be seen as an overhead
    cost that detracts from the overall development velocity.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缓慢的开发过程**：在编写代码之前编写测试可能会减慢开发过程，尤其是对于刚开始接触TDD的开发者来说。在编写和维护测试上花费的额外时间可能会被视为一种额外的成本，从而降低了整体的开发速度。'
- en: '**Focus on unit tests**: TDD often leads to a focus on unit tests at the expense
    of other testing techniques, such as integration or E2E tests. While unit tests
    are valuable, they cannot catch all types of issues or verify the overall system’s
    behavior, potentially leading to overlooked bugs or integration issues.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**关注单元测试**：TDD往往会导致过分关注单元测试，而忽视了其他测试技术，如集成测试或端到端测试。虽然单元测试很有价值，但它们不能捕捉到所有类型的问题或验证整个系统的行为，这可能导致遗漏的bug或集成问题。'
- en: '**Overengineering**: TDD might encourage overengineering, as developers may
    be tempted to write code that satisfies the tests rather than focusing on the
    simplest and most efficient solution to the problem. This can lead to unnecessarily
    complex code that is harder to maintain and understand.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**过度设计**：TDD可能会鼓励过度设计，因为开发者可能会倾向于编写满足测试的代码，而不是专注于问题的最简单和最有效的解决方案。这可能导致不必要的复杂代码，使得代码更难维护和理解。'
- en: '**Learning curve**: TDD has a learning curve, and developers new to this approach
    may find it challenging to adapt their development process. They may struggle
    with writing effective tests, organizing their code, and following the red-green-refactor
    cycle, which can lead to frustration and decreased productivity.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**学习曲线**：TDD有一个学习曲线，对于刚开始采用这种方法的开发者来说，可能会发现适应开发过程具有挑战性。他们可能会在编写有效的测试、组织代码和遵循红-绿-重构周期方面遇到困难，这可能导致挫败感和生产力的下降。'
- en: Despite these criticisms, many developers and teams find TDD to be a valuable
    methodology that improves code quality, maintainability, and overall software
    reliability. The key to success with TDD is understanding its limitations and
    adapting the approach to suit the specific needs and constraints of a project.
    It is the opinion of the author of this book that TDD is an incredibly valuable
    part of the software development process – if it is done correctly.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管存在这些批评，许多开发者和团队发现TDD是一种有价值的方法，可以提高代码质量、可维护性和整体软件可靠性。TDD成功的关键在于理解其局限性，并调整方法以适应项目的具体需求和限制。本书作者认为，如果做得正确，TDD是软件开发过程中一个极其宝贵的部分。
- en: Testing techniques
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试技术
- en: In the world of software testing, various techniques are employed to create
    effective and maintainable tests. These techniques help ensure that your tests
    are focused on the right aspects of your code, making it easier to identify and
    address potential issues. Employing appropriate testing techniques can lead to
    more reliable software, faster development cycles, and reduced maintenance efforts.
    By understanding and applying these techniques, you can create tests that are
    not only efficient but also easier to understand and maintain for your entire
    team.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件测试的世界里，采用了各种技术来创建有效且可维护的测试。这些技术有助于确保你的测试专注于代码的正确方面，使得更容易识别和解决潜在的问题。采用适当的测试技术可以导致更可靠的软件、更快的开发周期和减少的维护工作。通过理解和应用这些技术，你可以创建出不仅高效而且对整个团队来说更容易理解和维护的测试。
- en: Mocking
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模拟
- en: Mocking is a technique used in testing to replace real objects or services with
    simulated versions, known as mocks. The primary purpose of mocking is to isolate
    the code under test from its dependencies, enabling you to test individual components
    in isolation without relying on external factors. Mocks help you control the behavior
    of dependencies and verify that your code interacts correctly with them.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟是测试中用来用模拟版本替换真实对象或服务的技术，这些模拟版本被称为模拟。模拟的主要目的是将待测试的代码与其依赖项隔离开来，使你能够在不依赖外部因素的情况下单独测试各个组件。模拟帮助你控制依赖项的行为，并验证你的代码是否正确地与它们交互。
- en: Common use cases for mocking include simulating the behavior of external services,
    such as APIs, databases, or third-party libraries, that may be unreliable, slow,
    or difficult to set up in a testing environment. By using mocks, you can focus
    on testing your own code’s logic without worrying about the behavior of these
    external dependencies.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟的常见用例包括模拟外部服务的行为，例如API、数据库或第三方库，这些服务可能在测试环境中不可靠、速度慢或难以设置。通过使用模拟，你可以专注于测试自己的代码逻辑，而无需担心这些外部依赖的行为。
- en: There are several popular mocking libraries for .NET, such as Moq, which simplifies
    the process of creating and managing mock objects in your tests. Moq allows you
    to create mocks of interfaces or abstract classes and define their behavior using
    a fluent API.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 对于.NET，有几个流行的模拟库，如Moq，它简化了在测试中创建和管理模拟对象的过程。Moq允许你创建接口或抽象类的模拟，并使用流畅的API定义其行为。
- en: Stubbing
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 存根
- en: Stubbing is another technique used in testing, where you create lightweight
    objects called stubs that return pre-determined responses for specific method
    calls. Stubs are typically used for objects that are only used for retrieving
    data and don’t need to have any complex logic or behavior. The main purpose of
    stubbing is to provide predictable and consistent test data, allowing you to focus
    on testing the code that consumes the data.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 存根是测试中使用的另一种技术，其中你创建轻量级对象，称为存根，为特定的方法调用返回预定的响应。存根通常用于仅用于检索数据且不需要任何复杂逻辑或行为的对象。存根的主要目的是提供可预测和一致性的测试数据，使你能够专注于测试消耗数据的代码。
- en: 'Here’s a simple example of stubbing:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个简单的存根示例：
- en: '[PRE0]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In the preceding snippet, a `Customer` stub is created with some predefined
    properties set.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，创建了一个具有一些预定义属性的`Customer`存根。
- en: Fakes
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 伪造
- en: Fakes are simplified or partial implementations of classes or interfaces, used
    for testing purposes. They usually implement the same interface as the real object
    but provide a controlled environment for testing. Fakes can be hand-written or
    generated using a testing library. They can be used as a lightweight alternative
    to mocks and stubs when you need to simulate the behavior of a dependency without
    the complexity of a full implementation.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 伪造是类或接口的简化或部分实现，用于测试目的。它们通常实现与真实对象相同的接口，但为测试提供了一个受控的环境。伪造可以是手动编写的或使用测试库生成。当需要模拟依赖项的行为而不需要完整实现时，它们可以用作模拟和存根的轻量级替代品。
- en: Fakes, stubs, and mocks are all conceptually quite similar, and can somewhat
    be used interchangeably depending on the exact details of the testing being performed.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟、存根和伪造在概念上非常相似，根据所进行的测试的详细情况，它们可以在一定程度上互换使用。
- en: The testing pyramid – unit, integration, and E2E testing
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试金字塔 – 单元、集成和端到端测试
- en: 'The testing pyramid is a concept that illustrates the optimal distribution
    of test types in a software project. It provides a visual representation of the
    relationship between unit, integration, and E2E testing, highlighting their relative
    importance and execution speed. Refer to the following diagram to better understand
    the structure of the testing pyramid:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 测试金字塔是一个概念，它说明了软件项目中测试类型的最优分布。它提供了单元、集成和端到端测试之间关系的视觉表示，突出了它们的相对重要性和执行速度。参考以下图表以更好地理解测试金字塔的结构：
- en: '![Figure 9.2 – The testing pyramid](img/B19343_09_02.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图9.2 – 测试金字塔](img/B19343_09_02.jpg)'
- en: Figure 9.2 – The testing pyramid
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.2 – 测试金字塔
- en: At the base of the pyramid, we have unit tests. These tests are the most numerous
    and focus on verifying the correctness of individual components or functions in
    isolation. Unit tests are fast to execute, which enables developers to run them
    frequently during the development process.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在金字塔的底部，我们有单元测试。这些测试数量最多，专注于验证单个组件或函数在隔离状态下的正确性。单元测试执行速度快，这使得开发人员能够在开发过程中频繁运行它们。
- en: In the middle of the pyramid, we find integration tests. These tests are fewer
    in number compared to unit tests, but they serve a vital purpose in validating
    the interactions between different components and services within the application.
    Integration tests take longer to run than unit tests, as they often involve more
    complex scenarios and dependencies.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在金字塔的中间部分，我们找到了集成测试。与单元测试相比，集成测试的数量较少，但它们在验证应用程序中不同组件和服务之间的交互方面发挥着至关重要的作用。集成测试的运行时间比单元测试长，因为它们通常涉及更复杂的场景和依赖关系。
- en: At the top of the pyramid, we have E2E tests. These tests are the least numerous
    but are essential in ensuring the overall functionality and user experience of
    the application. E2E tests simulate real user scenarios by interacting with the
    application from start to finish, often through browser automation. As a result,
    they are slower to execute compared to unit and integration tests.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在金字塔的顶端，我们有端到端（E2E）测试。这些测试数量最少，但确保应用程序的整体功能性和用户体验至关重要。端到端测试通过从开始到结束与应用程序交互来模拟真实用户场景，通常通过浏览器自动化完成。因此，与单元测试和集成测试相比，它们的执行速度较慢。
- en: The testing pyramid emphasizes the importance of having a balanced testing strategy,
    with a larger number of fast unit tests, a smaller number of integration tests,
    and a few carefully chosen E2E tests. By understanding the role of each test type
    and their relative execution speeds, you can create an efficient and effective
    testing strategy for your SaaS applications.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 测试金字塔强调拥有平衡的测试策略的重要性，包括大量的快速单元测试、少量的集成测试以及少数精心选择的端到端测试。通过理解每种测试类型及其相对执行速度，您可以为您的大规模应用程序（SaaS）创建一个高效且有效的测试策略。
- en: Unit testing
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 单元测试
- en: Unit testing is the process of testing individual units or components of a software
    application in isolation. The primary goal of unit testing is to verify the correctness
    and reliability of each piece of code, ensuring that it functions as intended.
    By focusing on testing each component in isolation, developers can identify and
    fix issues at the earliest stages of the development process.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试是对软件应用程序的各个单元或组件进行独立测试的过程。单元测试的主要目标是验证每段代码的正确性和可靠性，确保其按预期工作。通过独立测试每个组件，开发者可以在开发过程的早期阶段识别并修复问题。
- en: Improved code quality is one of the main benefits of unit testing. It encourages
    developers to write well-structured and modular code, leading to more maintainable
    and less error-prone applications. Unit testing also contributes to faster development,
    as it can catch issues early, minimizing the time spent on debugging and fixing
    issues. Additionally, unit tests serve as valuable documentation, providing insights
    into the intended behavior and functionality of each component.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 提高代码质量是单元测试的主要好处之一。它鼓励开发者编写结构良好且模块化的代码，从而产生更易于维护和更少错误的程序。单元测试还有助于加快开发速度，因为它可以早期捕捉到问题，从而最小化调试和修复问题所花费的时间。此外，单元测试还作为宝贵的文档，提供了对每个组件预期行为和功能的见解。
- en: Writing testable code using SOLID principles
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用SOLID原则编写可测试的代码
- en: 'To effectively leverage unit testing, it is essential to write testable code.
    Testable code is modular, with well-defined responsibilities for each component,
    making it easier to isolate and test individual units. One way to ensure that
    your code is testable is to follow the SOLID principles, which are a set of design
    guidelines aimed at promoting maintainability, flexibility, and testability in
    software development. The SOLID principles include the following:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 为了有效地利用单元测试，编写可测试的代码至关重要。可测试的代码是模块化的，每个组件都有明确的职责，这使得隔离和测试单个单元变得更容易。确保您的代码可测试的一种方法是通过遵循SOLID原则，这是一套旨在促进软件开发中可维护性、灵活性和可测试性的设计指南。SOLID原则包括以下内容：
- en: '**Single Responsibility Principle (SRP)**: Each class or module should have
    a single responsibility or reason to change, ensuring that components have a focused
    purpose and are less likely to be affected by changes in other parts of the system.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单一职责原则（SRP）**：每个类或模块应该有一个单一职责或变化的原因，确保组件具有专注的目的，并且不太可能受到系统其他部分变化的影响。'
- en: '**Open/Closed Principle (OCP)**: Software entities should be open for extension
    but closed for modification, meaning that existing code should not be altered
    when adding new functionality, thus reducing the risk of introducing bugs.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开闭原则（OCP）**：软件实体应该是可扩展的，但应该是封闭的，这意味着在添加新功能时不应更改现有代码，从而降低引入错误的风险。'
- en: '**Liskov Substitution Principle (LSP)**: Subtypes should be substitutable for
    their base types, ensuring that derived classes maintain the behavior of their
    base classes and do not introduce unexpected side effects.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Liskov替换原则（LSP）**：子类型应该是其基类型的可替换的，确保派生类保持其基类的行为，并且不会引入意外的副作用。'
- en: '**Interface Segregation Principle (ISP)**: Clients should not be forced to
    depend on interfaces they do not use. By creating small, focused interfaces, developers
    can avoid unnecessary dependencies and improve modularity.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**接口隔离原则（ISP）**：客户端不应被迫依赖它们不使用的接口。通过创建小型、专注的接口，开发者可以避免不必要的依赖并提高模块化。'
- en: '**Dependency Inversion Principle (DIP)**: High-level modules should not depend
    on low-level modules but should depend on abstractions. This principle encourages
    the use of interfaces and abstract classes to decouple components, making it easier
    to test them in isolation.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**依赖倒置原则（DIP）**：高层模块不应依赖于低层模块，而应依赖于抽象。这个原则鼓励使用接口和抽象类来解耦组件，使得它们在隔离状态下更容易测试。'
- en: Following the SOLID principles can help developers create code that is easier
    to test and maintain, ultimately improving the overall quality of the application.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循SOLID原则可以帮助开发者创建更容易测试和维护的代码，从而提高应用程序的整体质量。
- en: TDD with unit tests
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 带有单元测试的TDD
- en: As mentioned earlier, TDD is a development methodology that emphasizes writing
    tests before writing the actual code. Unit tests play a crucial role in TDD, as
    they allow developers to verify the correctness of individual components and drive
    the implementation of new features.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，TDD是一种强调在编写实际代码之前编写测试的开发方法。单元测试在TDD中扮演着至关重要的角色，因为它们允许开发者验证单个组件的正确性并驱动新功能的实现。
- en: In TDD, developers start by writing a failing unit test for specific functionality.
    The test should clearly define the desired outcome and requirements for the code.
    Next, the developer writes the minimum code required to make the test pass. This
    process ensures that each piece of code is written with a clear purpose and that
    its functionality is thoroughly tested.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试驱动开发（TDD）中，开发者首先为特定功能编写一个失败的单元测试。测试应明确定义代码的期望结果和需求。接下来，开发者编写必要的最少代码以使测试通过。这个过程确保每段代码都是为明确的目的编写的，并且其功能得到了彻底的测试。
- en: Once the test passes, developers can refactor the code to improve its structure,
    readability, or performance while ensuring that the test still passes. This cycle
    of writing a test, implementing the code, and then refactoring as needed is repeated
    until the desired functionality is achieved. By using TDD with unit tests, developers
    can create more reliable, maintainable, and robust software applications.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦测试通过，开发者可以重构代码以改进其结构、可读性或性能，同时确保测试仍然通过。这个编写测试、实现代码、然后根据需要重构的周期会一直重复，直到达到期望的功能。通过使用带有单元测试的TDD，开发者可以创建更可靠、可维护和健壮的软件应用程序。
- en: The challenges and limitations of unit testing
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 单元测试的挑战和局限性
- en: While unit testing is probably the most conceptually straightforward of the
    three, it still has its own set of challenges and limitations. While unit tests
    are generally faster and more reliable than integration tests, they are limited
    by the scope of the code being tested. Unit tests focus on individual components
    in isolation, so they cannot detect issues that arise from interactions between
    components. This means that passing unit tests may not guarantee that the system
    will function correctly when integrated. Another challenge in unit testing is
    writing testable code, which requires following best practices such as SOLID principles
    and dependency injection. Properly mocking and stubbing dependencies can also
    be a challenge, as it may require a deep understanding of the dependencies’ behavior
    to create accurate test doubles. Finally, unit tests can become brittle if they
    are too tightly coupled to the implementation details of the code, making it difficult
    to refactor the code without breaking the tests.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然单元测试在三个测试方法中概念上可能最简单，但它仍然有其自身的挑战和局限性。虽然单元测试通常比集成测试更快、更可靠，但它们受限于被测试代码的范围。单元测试专注于独立组件，因此它们无法检测到组件之间交互产生的问题。这意味着通过单元测试并不能保证系统在集成后能正确运行。单元测试的另一个挑战是编写可测试的代码，这需要遵循最佳实践，如SOLID原则和依赖注入。正确模拟和存根依赖项也可能是一个挑战，因为这可能需要深入理解依赖项的行为，以创建准确的测试替身。最后，如果单元测试与代码的实现细节耦合得太紧，它们可能会变得脆弱，这使得在不破坏测试的情况下重构代码变得困难。
- en: Integration testing
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集成测试
- en: Integration testing is a vital part of the software development process that
    focuses on verifying the correct interaction between various components or modules
    within an application. As software systems grow more complex, the importance of
    ensuring that these interconnected pieces function together seamlessly becomes
    even more critical. In this section, we will discuss the essential aspects of
    integration testing, including testing API endpoints and working with databases.
    By understanding and implementing effective integration testing strategies, developers
    can build more reliable and robust software applications.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 集成测试是软件开发过程中一个至关重要的部分，专注于验证应用中各种组件或模块之间的正确交互。随着软件系统变得更加复杂，确保这些相互关联的部分无缝协作的重要性变得更加关键。在本节中，我们将讨论集成测试的必要方面，包括测试API端点和与数据库协同工作。通过理解和实施有效的集成测试策略，开发者可以构建更可靠和健壮的软件应用。
- en: What integration testing is and why it matters
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 集成测试是什么以及为什么它很重要
- en: Integration testing is the process of verifying that the various components
    or modules of a software application work together correctly. Unlike unit testing,
    which focuses on testing individual components in isolation, integration testing
    aims to ensure that the components function as expected when integrated with one
    another. This is especially important in complex systems, where the interactions
    between components can lead to unexpected issues or failures.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 集成测试是验证软件应用中各种组件或模块正确协作的过程。与侧重于测试单个组件的单元测试不同，集成测试旨在确保组件在相互集成时按预期工作。这在复杂系统中尤为重要，因为组件间的交互可能导致意外的问题或故障。
- en: Integration testing matters because it helps developers identify and fix problems
    that arise from the interactions between components. These issues may not be apparent
    during unit testing, as they only become evident when the individual components
    are combined. By performing integration testing, developers can ensure that the
    software functions correctly and reliably as a whole, providing a better overall
    user experience.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 集成测试的重要性在于它帮助开发者识别和修复由组件间交互引起的问题。这些问题在单元测试期间可能并不明显，因为只有在各个组件组合在一起时才会变得明显。通过执行集成测试，开发者可以确保软件作为一个整体正确且可靠地运行，从而提供更好的用户体验。
- en: Testing API endpoints
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试API端点
- en: API endpoints are a critical part of modern software applications, as they facilitate
    communication between different components or services. Integration testing of
    API endpoints involves verifying that the APIs return the expected results and
    behave correctly when called by other components in the system.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: API端点是现代软件应用的关键部分，因为它们促进了不同组件或服务之间的通信。API端点的集成测试涉及验证API返回预期的结果，并在系统中的其他组件调用时表现正确。
- en: 'To test API endpoints, developers typically use tools such as Postman, Insomnia,
    or custom test scripts that send HTTP requests to the API and validate the responses.
    These tests can verify various aspects of the API, such as the following:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试API端点，开发者通常使用Postman、Insomnia或自定义测试脚本等工具，向API发送HTTP请求并验证响应。这些测试可以验证API的各个方面，例如以下内容：
- en: '**Response status codes**: This means ensuring that the API returns the expected
    status codes (e.g., 200 OK, 404 Not Found) for different scenarios'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**响应状态码**：这意味着确保API在不同场景下返回预期的状态码（例如，200 OK，404 Not Found）'
- en: '**Response data**: This means verifying that the API returns the correct data
    in the expected format (e.g., JSON, XML)'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**响应数据**：这意味着验证API以预期的格式返回正确的数据（例如，JSON，XML）'
- en: '**Error handling**: This means checking that the API handles errors gracefully
    and returns meaningful error messages'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**错误处理**：这意味着检查API能够优雅地处理错误，并返回有意义的错误信息'
- en: '**Performance and reliability**: This means testing the API’s performance under
    different loads and ensuring that it meets the required performance criteria'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**性能和可靠性**：这意味着在不同负载下测试API的性能，并确保其满足所需的性能标准'
- en: Integration testing with databases
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 与数据库的集成测试
- en: Databases play a central role in many software applications, as they store and
    manage the data used by the system. Integration testing with databases involves
    verifying that the application interacts correctly with the database and ensuring
    that data is read, written, updated, and deleted as expected.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: It is worth noting that testing databases can be challenging and is often skipped
    in favor of more robust testing around the application’s interactions with the
    database. However, it is still good practice to try and test as much of the application
    as possible, so here are some pointers should you decide to go that route.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: 'To perform integration testing with databases, developers can use various techniques,
    such as the following:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '**Using test data**: Developers can create test datasets that represent different
    scenarios, such as typical user data, edge cases, or invalid data. These datasets
    can be used to test the application’s interaction with the database and validate
    that the data is processed correctly.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mocking or stubbing database connections**: To isolate the application from
    the actual database during testing, developers can use mocking or stubbing techniques
    to simulate the database’s behavior. This allows them to test the application’s
    interaction with the database without actually connecting to it, making the tests
    faster and more reliable.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Testing database migrations**: In applications that use database migrations
    to manage schema changes, developers can test the migration scripts to ensure
    that they apply the changes correctly and do not introduce issues or data loss.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By performing integration testing with databases, developers can ensure that
    their application interacts correctly with the database and that the data is processed
    and stored reliably, providing a solid foundation for the overall functionality
    of the software.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: The challenges and limitations of integration testing
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Challenges and limitations of integration testing mainly arise from the increased
    complexity of interactions between components in a system. Integration tests often
    require more time and resources to set up, execute, and maintain due to the dependencies
    involved. The need to create test environments that closely resemble production
    can be both time-consuming and costly. Furthermore, integration tests can be less
    reliable, as they are more susceptible to issues caused by external factors such
    as network latency or third-party service outages. Additionally, integration tests
    tend to have a broader scope and are more complex, making pinpointing the root
    cause of a failure more difficult, leading to increased debugging time.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: E2E testing
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: E2E testing is a crucial aspect of the software testing process that involves
    testing the entire application flow from the user’s perspective. This type of
    testing verifies that all the components of an application work together seamlessly,
    ensuring that the application meets its intended functionality and provides a
    smooth user experience. E2E testing helps to identify any issues that may arise
    from the interaction between various components, which might not be detectable
    during unit or integration testing.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: E2E测试是软件测试过程中的一个关键方面，它从用户的角度测试整个应用程序流程。此类测试验证了应用程序的所有组件是否能够无缝协作，确保应用程序满足其预期功能并提供流畅的用户体验。E2E测试有助于识别可能来自各个组件之间交互的问题，这些问题可能在单元或集成测试中无法检测到。
- en: Encoding user journeys
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编码用户旅程
- en: E2E testing involves encoding real-life user journeys or workflows into test
    cases that simulate the user’s interaction with the application. These user journeys
    cover the complete flow of the application, from the initial user input to the
    final output or result. By simulating user journeys, E2E testing ensures that
    the application behaves as expected and that any issues that may arise during
    real-world usage are detected and resolved before deployment.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: E2E测试涉及将现实生活中的用户旅程或工作流程编码为测试用例，这些测试用例模拟用户与应用程序的交互。这些用户旅程涵盖了应用程序的完整流程，从初始用户输入到最终输出或结果。通过模拟用户旅程，E2E测试确保应用程序按预期行为，并在部署前检测和解决可能在实际使用中出现的任何问题。
- en: Designing effective E2E test scenarios
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设计有效的E2E测试场景
- en: Creating effective e2e test scenarios requires careful consideration of various
    factors. Developers should focus on identifying the most important and frequently
    used workflows or features of the application, as well as covering edge cases
    and potential failure points. Test scenarios should include uncommon or exceptional
    situations that may reveal hidden issues. Prioritization of test scenarios based
    on their importance, complexity, and potential impact on the application’s overall
    functionality is also essential. Lastly, ensuring test maintainability is important—test
    scenarios should be easy to understand, update, and maintain as the application
    evolves.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 创建有效的E2E测试场景需要仔细考虑各种因素。开发者应专注于识别应用程序最重要的和最常用的工作流程或功能，以及覆盖边缘情况和潜在的故障点。测试场景应包括可能揭示隐藏问题的非常见或异常情况。根据测试场景的重要性、复杂性和对应用程序整体功能可能产生的影响进行优先排序也是必不可少的。最后，确保测试的可维护性很重要——测试场景应易于理解、更新和维护，随着应用程序的发展。
- en: The challenges and limitations of E2E testing
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: E2E测试的挑战和局限性
- en: While E2E testing is a vital part of the software development process, it also
    comes with certain challenges and limitations. E2E tests can be time-consuming
    and resource-intensive, particularly when simulating complex user journeys or
    testing large applications. Test flakiness can sometimes occur due to factors
    such as network latency, timeouts, or unpredictable user behavior, leading to
    inconsistent results. As the application evolves, E2E tests may need frequent
    updates to reflect changes in the application’s features and workflows, which
    can make test maintenance more challenging. Additionally, it may not be feasible
    to cover all possible user journeys and scenarios in E2E tests, which could result
    in undetected issues.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然E2E测试是软件开发过程中的一个重要部分，但它也伴随着某些挑战和局限性。E2E测试可能耗时且资源密集，尤其是在模拟复杂的用户旅程或测试大型应用程序时。由于网络延迟、超时或不可预测的用户行为等因素，有时可能会出现测试不稳定的情况，导致结果不一致。随着应用程序的发展，E2E测试可能需要频繁更新以反映应用程序功能和工作流程的变化，这可能会使测试维护更具挑战性。此外，可能无法在E2E测试中涵盖所有可能的用户旅程和场景，这可能导致未检测到的问题。
- en: Despite these challenges, E2E testing remains a critical component of the software
    testing process, helping to ensure that applications function correctly and provide
    a reliable user experience. By designing effective E2E test scenarios and addressing
    the challenges and limitations, developers can build high-quality, robust applications.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管存在这些挑战，E2E测试仍然是软件测试过程中的一个关键组成部分，有助于确保应用程序正确运行并提供可靠的用户体验。通过设计有效的E2E测试场景并解决挑战和局限性，开发者可以构建高质量、健壮的应用程序。
- en: An overview of testing tools and frameworks for SaaS applications
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SaaS应用程序测试工具和框架概述
- en: There are a huge number of tools and frameworks available for running tests,
    each with its own strengths and weaknesses. However, in this section, we will
    limit our focus to those that are applicable to Microsoft technologies, such as
    those we have used in the demo application. By narrowing our scope, we can provide
    a more targeted and relevant discussion for developers working with these technologies
    in their SaaS applications.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 可用于运行测试的工具和框架数量庞大，每个都有自己的优点和缺点。然而，在本节中，我们将我们的焦点限制在适用于 Microsoft 技术的框架上，例如我们在演示应用程序中使用过的那些。通过缩小范围，我们可以为使用这些技术在他们的
    SaaS 应用程序中工作的开发者提供更具体和相关的讨论。
- en: General testing of .NET applications
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .NET 应用程序的一般测试
- en: When developing SaaS applications (or any applications!) using .NET, it is important
    to ensure that the code is well-tested and reliable. Two of the most popular testing
    frameworks for .NET are xUnit and NUnit. Both of these frameworks are open source,
    widely used, and well-supported by the .NET community. They provide a rich set
    of features and functionality that enable developers to write comprehensive tests
    for their applications.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 .NET 开发 SaaS 应用程序（或任何应用程序！）时，确保代码经过良好的测试和可靠是非常重要的。.NET 中最受欢迎的两个测试框架是 xUnit
    和 NUnit。这两个框架都是开源的，被广泛使用，并且得到了 .NET 社区的良好支持。它们提供了一套丰富的特性和功能，使开发者能够为他们的应用程序编写全面的测试。
- en: 'xUnit is a modern and extensible testing framework specifically designed for
    .NET. It is the default testing framework for .NET Core and ASP.NET Core projects,
    making it an excellent choice for developers working on modern .NET applications.
    Some of its key features include the following:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: xUnit 是一个专为 .NET 设计的现代和可扩展的测试框架。它是 .NET Core 和 ASP.NET Core 项目的默认测试框架，对于在现代
    .NET 应用程序上工作的开发者来说是一个极佳的选择。它的一些关键特性包括以下内容：
- en: A clean and simple syntax for writing tests
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写测试的简洁简单语法
- en: Support for parallel test execution, which can speed up the testing process
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持并行测试执行，这可以加快测试过程
- en: A robust and flexible set of assertions and test attributes
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一套强大灵活的断言和测试属性
- en: 'NUnit is another popular testing framework for .NET, with a long history of
    use in the .NET community. Although it is not the default testing framework for
    .NET Core and ASP.NET Core projects, it still enjoys widespread support and provides
    a solid set of features for writing unit tests. Some key features of NUnit include
    the following:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: NUnit 是 .NET 中另一个流行的测试框架，在 .NET 社区中有着悠久的使用历史。尽管它不是 .NET Core 和 ASP.NET Core
    项目的默认测试框架，但它仍然得到了广泛的支持，并为编写单元测试提供了一套坚实的功能。NUnit 的一些关键特性包括以下内容：
- en: A familiar syntax for writing tests, particularly for developers with experience
    in other testing frameworks
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写测试的熟悉语法，尤其是对于在其他测试框架中具有经验的开发者来说
- en: Support for parallel test execution
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持并行测试执行
- en: A comprehensive set of assertions and test attributes
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一套全面的断言和测试属性
- en: There is really very little difference between the two, and the choice of which
    to use will largely come down to individual preference and will not impact your
    project much at all.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 两者之间实际上几乎没有区别，选择使用哪一个将主要取决于个人偏好，并且几乎不会对你的项目产生重大影响。
- en: 'In addition to xUnit and NUnit, there are other useful tools and libraries
    that can be employed for testing .NET applications, such as:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 xUnit 和 NUnit，还有其他有用的工具和库可以用于测试 .NET 应用程序，例如：
- en: '**Moq**: This is a popular mocking library for .NET, which can be used to create
    mock objects and set up expectations for their behavior in tests.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Moq**: 这是一个流行的 .NET 模拟库，可用于创建模拟对象并在测试中设置它们行为的期望。'
- en: '**FluentAssertions**: This is a library that provides a more readable and expressive
    syntax for writing assertions in tests, making it easier to understand the intent
    of the test.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**FluentAssertions**: 这是一个提供更易读和表达性语法的库，用于在测试中编写断言，使得理解测试的意图更加容易。'
- en: '**NSubstitute**: An alternative to Moq, NSubstitute is another popular mocking
    library for .NET. It provides a simple and intuitive syntax for creating mock
    objects and defining their behavior in tests. NSubstitute can be used with NUnit,
    xUnit, and other testing frameworks.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NSubstitute**: NSubstitute 是 Moq 的替代品，是 .NET 中另一个流行的模拟库。它提供了一种简单直观的语法来创建模拟对象并在测试中定义它们的行为。NSubstitute
    可以与 NUnit、xUnit 以及其他测试框架一起使用。'
- en: '**AutoFixture**: AutoFixture is a library that helps automate the generation
    of test data for unit tests. It can create objects with random or customized values,
    making it easier to set up test scenarios with minimal manual configuration. AutoFixture
    can be used in conjunction with other testing frameworks such as NUnit and xUnit.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AutoFixture**: AutoFixture 是一个帮助自动化生成单元测试测试数据的库。它可以创建具有随机或自定义值的对象，使得设置测试场景时手动配置最小化，从而简化了测试场景的设置。AutoFixture
    可以与 NUnit 和 xUnit 等其他测试框架一起使用。'
- en: '**Shouldly**: Shouldly is an assertion library similar to FluentAssertions
    that aims to provide a more human-readable and expressive syntax for writing assertions
    in tests. It simplifies the process of writing assertions and makes it easier
    to understand the intent of the test.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Shouldly**: Shouldly 是一个类似于 FluentAssertions 的断言库，旨在为测试中的断言提供更易于阅读和表达的语言语法。它简化了编写断言的过程，并使得理解测试的意图更加容易。'
- en: '**SpecFlow**: SpecFlow is a BDD tool for .NET that enables developers to write
    tests in a natural language format using Gherkin syntax. It allows non-technical
    stakeholders to understand and contribute to the test scenarios, bridging the
    gap between development and business teams.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SpecFlow**: SpecFlow 是一个针对 .NET 的 BDD 工具，允许开发者使用 Gherkin 语法以自然语言格式编写测试。它允许非技术利益相关者理解和参与测试场景，弥合开发团队和业务团队之间的差距。'
- en: Testing APIs
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试 API
- en: When it comes to writing automated tests for Web APIs, tools such as Postman
    and Newman can be invaluable. Postman is a powerful API testing tool that allows
    developers to send HTTP requests to API endpoints and inspect the responses, making
    it easier to debug and validate the API’s behavior during development. Newman,
    on the other hand, is a command-line companion tool for Postman that allows you
    to run Postman collections directly from the command line or as part of your **Continuous
    Integration/Continous Deployment** (**CI/CD**) pipeline.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到编写 Web API 的自动化测试时，Postman 和 Newman 等工具可以非常有价值。Postman 是一个强大的 API 测试工具，允许开发者向
    API 端点发送 HTTP 请求并检查响应，这使得在开发过程中调试和验证 API 的行为变得更加容易。另一方面，Newman 是 Postman 的命令行伴侣工具，允许你直接从命令行或作为
    **持续集成/持续部署** （**CI/CD**） 管道的一部分运行 Postman 收集。
- en: We have used Thunder Client throughout the examples in this book, primarily
    to keep everything contained inside **Visual Studio Code** (**VSCode**). Postman
    offers a few more advanced features, such as pre-request scripts and document
    generation. As your SaaS project grows, there may be advantages in using Postman
    over Thunder Client. Thunder Client is a lightweight and easy-to-use option for
    developers who want a simple API testing tool integrated with their VSCode environment.
    Postman, on the other hand, is a more powerful and feature-rich tool suitable
    for advanced API testing scenarios and team collaboration. Your choice between
    the two will depend on your specific requirements and personal preferences.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的示例中，我们一直使用 Thunder Client，主要是为了将所有内容都包含在 **Visual Studio Code** （**VSCode**）
    内。Postman 提供了一些更高级的功能，例如预请求脚本和文档生成。随着你的 SaaS 项目增长，使用 Postman 而不是 Thunder Client
    可能会有一些优势。Thunder Client 是一个轻量级且易于使用的选项，适合想要将简单的 API 测试工具集成到 VSCode 环境中的开发者。另一方面，Postman
    是一个功能更强大、特性更丰富的工具，适合高级 API 测试场景和团队协作。你在这两个之间的选择将取决于你的具体需求和个人偏好。
- en: It can be slightly tricky to mock an HTTP client when testing APIs, but there
    are libraries such as `Moq` and `HttpClient Interception` that can help simplify
    this process. API testing can also be considered a form of integration testing
    since it involves verifying the correct interaction between various components
    of the API.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试 API 时模拟 HTTP 客户端可能会有些棘手，但有一些库如 `Moq` 和 `HttpClient Interception` 可以帮助简化这一过程。API
    测试也可以被视为一种集成测试的形式，因为它涉及到验证 API 各个组件之间的正确交互。
- en: Testing Blazor applications
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试 Blazor 应用程序
- en: 'Testing Blazor applications can be a bit more challenging due to the nature
    of the technology. However, there are several tools and libraries available to
    help make the process easier:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 由于技术的特性，测试 Blazor 应用程序可能有点更具挑战性。然而，有一些工具和库可以帮助简化这个过程：
- en: '**bUnit**: This is a testing library specifically designed for Blazor applications,
    allowing developers to write unit and component tests'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**bUnit**: 这是一个专门为 Blazor 应用程序设计的测试库，允许开发者编写单元和组件测试'
- en: '**Playwright**: This is a browser automation library that can be used to write
    E2E tests for Blazor applications, simulating user interactions and verifying
    the application’s behavior'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Playwright**：这是一个浏览器自动化库，可用于编写Blazor应用程序的端到端测试，模拟用户交互并验证应用程序的行为'
- en: '**Selenium**: While not specifically designed for Blazor, Selenium is a popular
    browser automation tool that can also be used to write E2E tests for Blazor applications'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Selenium**：虽然不是专门为Blazor设计的，但Selenium是一个流行的浏览器自动化工具，也可以用于编写Blazor应用程序的端到端测试'
- en: The challenges of writing tests for databases
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写数据库测试的挑战
- en: 'Testing database-related code can be challenging due to the inherent complexities
    of working with databases. It is relatively uncommon to write tests specifically
    for database interactions, but there are some reasons and general pointers to
    consider:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 由于与数据库一起工作的固有复杂性，测试数据库相关代码可能具有挑战性。专门为数据库交互编写测试相对较少见，但有一些原因和一般性指南需要考虑：
- en: Databases can introduce statefulness and external dependencies into tests, making
    it harder to maintain isolated and deterministic test environments.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库可能会引入状态性和外部依赖性到测试中，使得维护隔离和确定性的测试环境更加困难。
- en: It may be more efficient to focus on testing the application’s data access layer
    and business logic rather than directly testing the database itself.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 可能更有效的是专注于测试应用程序的数据访问层和业务逻辑，而不是直接测试数据库本身。
- en: When testing code that interacts with databases, consider using techniques such
    as mocking or stubbing to isolate the database-related code and simulate the expected
    behavior of the database.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 当测试与数据库交互的代码时，请考虑使用诸如模拟或存根等技术来隔离数据库相关代码并模拟数据库的预期行为。
- en: To test database-related code more effectively, consider using a dedicated database
    testing tool such as tSQLt for SQL Server, which allows you to write unit tests
    for your database objects (such as stored procedures, functions, and triggers).
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更有效地测试数据库相关代码，请考虑使用专门的数据库测试工具，如针对SQL Server的tSQLt，它允许您为数据库对象（如存储过程、函数和触发器）编写单元测试。
- en: By considering these factors and employing the appropriate tools and techniques,
    you can improve the quality of your SaaS application through comprehensive testing
    across all aspects of the application.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 通过考虑这些因素并采用适当的工具和技术，您可以通过对应用程序所有方面的全面测试来提高您SaaS应用程序的质量。
- en: A practical demonstration
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实际演示
- en: While it is outside the scope of this book to provide a full suite of tests,
    we can add some unit tests to the `GoodHabits` app that we have built by way of
    a practical demonstration of some of the tools and techniques that we have discussed
    in this chapter.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然本书的范围不包括提供完整的测试套件，但我们可以通过实际演示一些在本章中讨论的工具和技术，向我们所构建的`GoodHabits`应用程序添加一些单元测试。
- en: Let’s start by adding a test project. We will use xUnit, as it is generally
    recommended for modern .NET applications. We will also add Moq and Fluent Assertions
    to this project and have a look at how we can use them.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从添加一个测试项目开始。我们将使用xUnit，因为它通常被推荐用于现代.NET应用程序。我们还将向此项目添加Moq和Fluent Assertions，并查看我们如何使用它们。
- en: 'Do this with the following script:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下脚本执行此操作：
- en: '[PRE1]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The preceding script will add a file called `HabitsControllerTest.cs` that
    we will use to test `HabitsController`. Add the following code:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 上述脚本将添加一个名为`HabitsControllerTest.cs`的文件，我们将使用它来测试`HabitsController`。添加以下代码：
- en: '[PRE2]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You can now run the tests by opening a terminal and typing `dotnet test`. You
    should see the following indicating that the test has passed:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以通过打开终端并输入`dotnet test`来运行测试。您应该会看到以下内容，表明测试已通过：
- en: '![Figure 9.3 – The first test passed](img/B19343_09_03.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![图9.3 – 第一次测试通过](img/B19343_09_03.jpg)'
- en: Figure 9.3 – The first test passed
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.3 – 第一次测试通过
- en: The preceding test is an extremely simple test, to ensure that we get the correct
    string back from the version endpoint. But we have demonstrated some advanced
    testing techniques. We have used the `Moq` package to create mocks of all of the
    dependencies of the controller.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 上述测试是一个非常简单的测试，以确保我们从版本端点获取正确的字符串。但我们已经展示了某些高级测试技术。我们使用了`Moq`包来创建控制器所有依赖项的模拟。
- en: We have also used the `FluentAssertions` library to make the test very readable.
    The intent of this line should be very obvious just from reading it!
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还使用了`FluentAssertions`库来使测试非常易于阅读。仅从阅读这一行就可以非常明显地看出其意图！
- en: '[PRE3]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This has been a very gentle introduction to testing—there is a lot more that
    could be done to prove the correct operation of the `HabitsController` class!
    It would be an excellent exercise to start building out this test suite and maybe
    add some tests for the other projects. Or even add some integration and E2E tests!
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是一个对测试的温和介绍——还有很多可以做的事情来证明`HabitsController`类的正确操作！开始构建这个测试套件并可能为其他项目添加一些测试将是一个极好的练习。或者甚至添加一些集成和端到端测试！
- en: Summary
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have explored the important role that testing plays in the
    development and maintenance of SaaS applications. By understanding the various
    types of testing—unit, integration, and E2E testing—and their respective roles
    in the development process, you are now better equipped to implement a comprehensive
    testing strategy for your applications.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了测试在SaaS应用程序开发和维护中的重要作用。通过了解各种测试类型——单元测试、集成测试和端到端测试——以及它们在开发过程中的相应角色，你现在更有能力为你的应用程序实施全面的测试策略。
- en: We have also discussed TDD and its benefits, such as improved code quality,
    faster development cycles, and easier maintenance. By incorporating TDD into your
    development process, you can further enhance the reliability and functionality
    of your SaaS applications.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还讨论了TDD及其好处，如提高代码质量、加快开发周期和更容易维护。通过将TDD纳入你的开发过程，你可以进一步提高SaaS应用程序的可靠性和功能性。
- en: We have also taken a high-level overview of testing by looking at some of the
    underlying techniques and the tools that you can use to apply those techniques.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还通过查看一些底层技术和你可以用来应用这些技术的工具，对测试进行了高级概述。
- en: This chapter has provided you with a comprehensive understanding of the important
    role that testing plays in SaaS application development. We hope that you can
    now confidently apply these concepts and practices to your own projects, resulting
    in more robust, reliable, and high-quality SaaS applications.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 本章为你提供了对测试在SaaS应用程序开发中扮演的重要角色的全面理解。我们希望你现在可以自信地将这些概念和实践应用到自己的项目中，从而产生更健壮、可靠和高质量的SaaS应用程序。
- en: As you continue to develop and deploy your SaaS applications, it is essential
    to monitor their performance and log relevant information to ensure smooth operation
    and quickly address any issues that may arise.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 随着你继续开发和部署你的SaaS应用程序，监控它们的性能并记录相关信息以确保平稳运行和快速解决可能出现的任何问题是至关重要的。
- en: In the next chapter, we will discuss monitoring and logging, covering the essential
    tools and best practices to help you maintain and optimize your SaaS applications
    in a production environment.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论监控和日志记录，涵盖维护和优化生产环境中SaaS应用程序的必要工具和最佳实践。
- en: Further reading
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: What Is Unit Testing? [https://smartbear.com/learn/automated-testing/what-is-unit-testing/](https://smartbear.com/learn/automated-testing/what-is-unit-testing/)
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是单元测试？[https://smartbear.com/learn/automated-testing/what-is-unit-testing/](https://smartbear.com/learn/automated-testing/what-is-unit-testing/)
- en: 'Integration Testing: What is, Types with Example: [https://www.guru99.com/integration-testing.html](https://www.guru99.com/integration-testing.html)'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成测试：是什么，类型及示例：[https://www.guru99.com/integration-testing.html](https://www.guru99.com/integration-testing.html)
- en: 'Test Razor components in ASP.NET Core Blazor: [https://learn.microsoft.com/en-us/aspnet/core/blazor/test?view=aspnetcore-7.0&viewFallbackFrom=aspnetcore-7.0](https://learn.microsoft.com/en-us/aspnet/core/blazor/test?view=aspnetcore-7.0&viewFallbackFrom=aspnetcore-7.0)'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在ASP.NET Core Blazor中测试Test Razor组件：[https://learn.microsoft.com/en-us/aspnet/core/blazor/test?view=aspnetcore-7.0&viewFallbackFrom=aspnetcore-7.0](https://learn.microsoft.com/en-us/aspnet/core/blazor/test?view=aspnetcore-7.0&viewFallbackFrom=aspnetcore-7.0)
- en: 'What is Test Driven Development? TDD vs. BDD vs. SDD: [https://testrigor.com/blog/what-is-test-driven-development-tdd-vs-bdd-vs-sdd/](https://testrigor.com/blog/what-is-test-driven-development-tdd-vs-bdd-vs-sdd/)'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是测试驱动开发？TDD与BDD与SDD的比较：[https://testrigor.com/blog/what-is-test-driven-development-tdd-vs-bdd-vs-sdd/](https://testrigor.com/blog/what-is-test-driven-development-tdd-vs-bdd-vs-sdd/)
- en: 'Unit Testing: Why Bother? [https://www.cmsdrupal.com/blog/unit-testing-why-bother](https://www.cmsdrupal.com/blog/unit-testing-why-bother)'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元测试：为什么值得去做？[https://www.cmsdrupal.com/blog/unit-testing-why-bother](https://www.cmsdrupal.com/blog/unit-testing-why-bother)
- en: Questions
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What are the three main types of testing in the testing pyramid, and what is
    the primary purpose of each type?
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试金字塔中的三种主要测试类型是什么，每种类型的主要目的是什么？
- en: How does TDD improve code quality, development speed, and maintainability?
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: TDD如何提高代码质量、开发速度和可维护性？
- en: What are some popular testing tools and frameworks for the Microsoft ecosystem,
    and what are their primary uses?
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 微软生态系统中有哪些流行的测试工具和框架，以及它们的主要用途是什么？
- en: How can unit testing help ensure the correctness and reliability of individual
    components in a SaaS application?
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单元测试如何帮助确保SaaS应用程序中单个组件的正确性和可靠性？
- en: Why is integration testing important in validating the interactions between
    different components and services in a SaaS application?
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么在验证SaaS应用程序中不同组件和服务之间的交互时，集成测试很重要？
- en: How does E2E testing contribute to ensuring the overall functionality and user
    experience of a SaaS application?
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 端到端测试如何有助于确保SaaS应用程序的整体功能和使用体验？
