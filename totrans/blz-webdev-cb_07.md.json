["```cs\n    public class Event\n    {\n        public string Name { get; set; }\n    }\n    ```", "```cs\n    @page \"/ch07r01\"\n    @implements IDisposable\n    ```", "```cs\n    [SupplyParameterFromForm]\n    public Event Model { get; set; }\n    ```", "```cs\n    protected EditContext Context;\n    protected ValidationMessageStore Store;\n    ```", "```cs\n    private void Save()\n        => Console.WriteLine($\"Saved {Model.Name}.\");\n    ```", "```cs\n    private void ValidateForm(object sender, ValidationRequestedEventArgs args)\n    {\n        Store.Clear();\n        if (string.IsNullOrWhiteSpace(Model.Name))\n            Store.Add(() => Model.Name,\n                \"You must provide a name.\");\n    }\n    ```", "```cs\n    protected override void OnInitialized()\n    {\n        Model ??= new();\n        Context = new(Model);\n        Context.OnValidationRequested += ValidateForm;\n        Store = new(Context);\n    }\n    ```", "```cs\n    public void Dispose()\n    {\n        if (Context is not null)\n            Context.OnValidationRequested -= ValidateForm;\n    }\n    ```", "```cs\n    <EditForm EditContext=\"@Context\"\n              event-form=\"forEvent-form\"\n              OnValidSubmit=\"@Save\">\n    </EditForm>\n    ```", "```cs\n    <p>Name: <InputText @bind-Value=\"@Model.Name\" /></p>\n    <p><ValidationMessage For=\"() => Model.Name\" /></p>\n    ```", "```cs\n    <button type=\"submit\">Save</button>\n    ```", "```cs\n<EditForm EditContext=\"@Context\" \n          FormName=\"forEvent-form\"\n          OnValidSubmit=\"@Save\">\n    <DataAnnotationsValidator />\n    <p>Name: <InputText @bind-Value=\"@Model.Name\" /></p>\n    <p><ValidationSummary /></p>\n    <button type=\"submit\">Save</button>\n</EditForm>\n```", "```cs\n    [Required(ErrorMessage = \"You must provide a name.\")]\n    public string Name { get; set; }\n    ```", "```cs\n    <EditForm EditContext=\"@Context\"\n              event-form=\"event-forEvent\"\n              OnValidSubmit=\"@Save\">\n        @* ... existing form body ... *@\n        <button type=\"submit\">Save</button>\n        <DataAnnotationsValidator />\n    </EditForm>\n    ```", "```cs\n    using System.ComponentModel.DataAnnotations;\n    public class EventNameValidationAttribute\n        : ValidationAttribute\n    {\n    }\n    ```", "```cs\n    private const string _forbidden = \"event\";\n    ```", "```cs\n    private static ValidationResult Failure(\n        string message, string member)\n        => new(message, [member]);\n    ```", "```cs\n    protected override ValidationResult IsValid(\n        object value, ValidationContext validationContext)\n    {\n        var text = value?.ToString();\n        if (string.IsNullOrWhiteSpace(text))\n            return Failure(\"You must provide a name.\",\n                validationContext.MemberName);\n        if (text.Contains(_forbidden,\n            StringComparison.InvariantCultureIgnoreCase))\n            return Failure(\n                \"You mustn't use the 'event' keyword.\",\n                    validationContext.MemberName);\n        return ValidationResult.Success;\n    }\n    ```", "```cs\n    [EventNameValidation]\n    public string Name { get; set; }\n    ```", "```cs\nprotected override ValidationResult IsValid(object value,\n    ValidationContext validationContext)\n{\n    var api = validationContext.GetRequiredService<Api>();\n    //...\n}\n```", "```cs\n    <ItemGroup>\n      <PackageReference\n        Include=\"Microsoft.AspNetCore.Components\n          .DataAnnotations.Validation\"\n        Version=\"3.2.0-rc1.20223.4\" />\n    </ItemGroup>\n    ```", "```cs\n    public class EventLocation\n    {\n        public string Venue { get; set; }\n        public int Capacity { get; set; }\n    }\n    ```", "```cs\n    [Required(ErrorMessage = \"You must provide a venue.\")]\n    public string Venue { get; set; }\n    ```", "```cs\n    [Required, Range(1, 1000,\n        ErrorMessage =\n            \"Capacity must be between 1 and 1000.\")]\n    public int Capacity { get; set; }\n    ```", "```cs\n    [ValidateComplexType]\n    public EventLocation Location { get; set; } = new();\n    ```", "```cs\n    <p>\n        Venue:\n        <InputText @bind-Value=\"@Model.Location.Venue\" />\n    </p>\n    ```", "```cs\n    <p>\n        Capacity:\n        <InputNumber\n            @bind-Value=\"@Model.Location.Capacity\" />\n    </p>\n    ```", "```cs\n    <p><ValidationSummary  /></p>\n    ```", "```cs\n    <ObjectGraphDataAnnotationsValidator />\n    ```", "```cs\nCapacity:\n    <InputNumber min=\"1\" max=\"1000\"\n        @bind-Value=\"@Model.Location.Capacity\" />\n```", "```cs\n    ::deep .invalid-warning {\n        outline: 1px solid orange;\n    }\n    ```", "```cs\n    public class TypeValidationClassProvider\n        : FieldCssClassProvider { }\n    ```", "```cs\n    private static readonly string\n        _capacity = nameof(EventLocation.Capacity);\n    ```", "```cs\n    public override string GetFieldCssClass(\n        EditContext editContext,\n        in FieldIdentifier fieldIdentifier)\n    {\n        var isValid =\n            editContext.IsValid(fieldIdentifier);\n        var isCapacity =\n            fieldIdentifier.FieldName == _capacity;\n        if (!isValid && isCapacity)\n            return \"invalid-warning\";\n        return base.GetFieldCssClass(\n            editContext, fieldIdentifier);\n    }\n    ```", "```cs\n    protected override void OnInitialized()\n    {\n        // ... existing form context building ...\n        Context.SetFieldCssClassProvider(\n            new TypeValidationClassProvider());\n    }\n    ```", "```cs\npublic override string GetFieldCssClass(\n    EditContext editContext,\n    in FieldIdentifier fieldIdentifier)\n{\n    var isValid = editContext.IsValid(fieldIdentifier);\n    var isCapacity =\n        fieldIdentifier.FieldName == _capacity;\n    if (!isValid && isCapacity)\n        return \"border border-warning\";\n    return base.GetFieldCssClass(\n        editContext, fieldIdentifier);\n}\n```", "```cs\n    @implements IDisposable\n    ```", "```cs\n    [CascadingParameter]\n    public EditContext Context { get; set; }\n    protected bool IsDisplayed { get; set; }\n    ```", "```cs\n    private void Rerender(object sender,\n    ValidationStateChangedEventArgs args) { }\n    ```", "```cs\n    IsDisplayed = Context.GetValidationMessages().Any();\n    StateHasChanged();\n    ```", "```cs\n    protected override void OnInitialized()\n        => Context.OnValidationStateChanged += Rerender;\n    ```", "```cs\n    public void Dispose()\n        => Context.OnValidationStateChanged -= Rerender;\n    ```", "```cs\n    @if (!IsDisplayed) return;\n    ```", "```cs\n    <div class=\"position-fixed bottom-0 end-0 p-3\"\n        style=\"z-index: 1\">\n        <div class=\"toast text-white bg-danger show\">\n            @* toast area *@\n        </div>\n    </div>\n    ```", "```cs\n    <div class=\"toast-header\" />\n    <div class=\"toast-body\">\n        @foreach (var message in\n            Context.GetValidationMessages())\n        {\n            <div>@message</div>\n        }\n    </div>\n    ```", "```cs\n    <ValidationToast />\n    ```", "```cs\n    @rendermode InteractiveWebAssembly\n    @implements IDisposable\n    ```", "```cs\n    protected bool IsSubmittable;\n    ```", "```cs\n    private void FieldChanged(\n        object sender, FieldChangedEventArgs args)\n    {\n        IsSubmittable =\n            Context.Validate() && Context.IsModified();\n        StateHasChanged();\n    }\n    ```", "```cs\n    Model ??= new()\n    {\n        Name = \"Packt Party\",\n        Location = new()\n        {\n            Venue = \"Packt Room\",\n            Capacity = 150\n        }\n    };\n    ```", "```cs\n    Context.OnFieldChanged += FieldChanged;\n    ```", "```cs\n    public void Dispose()\n        => Context.OnFieldChanged -= FieldChanged;\n    ```", "```cs\n    <button type=\"submit\" disabled=\"@(!IsSubmittable)\">\n        Save\n    </button>\n    ```"]