- en: '1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Getting to Know Your Environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pop culture often markets computer programmers as outsiders, lone wolves, or
    geeky hackers. People possessing extraordinary mental gifts for algorithmic thought,
    little social IQ, and the odd anarchic bent. While this is not the case, there
    is something to the idea that learning to code fundamentally changes the way you
    look at the world. The good news is your naturally curious mind already wants
    to see these kinds of patterns in the world, and you may even come to enjoy this
    new way of thinking.
  prefs: []
  type: TYPE_NORMAL
- en: From the moment your eyes snap open in the morning to the last glimpse of your
    ceiling fan before you go to sleep, you're unconsciously using analytical skills
    that translate to programming—you're just missing the right language and syntax
    to map those life skills into code. You know your age, right? That's a variable.
    When you cross the street, I presume you look down the road in both directions
    before stepping off the curb like the rest of us. That's evaluating different
    conditions, better known as control flow in programming terminology. When you
    look at a can of pop, you instinctively identify that it has certain properties
    like shape, weight, and contents. That's a class object! You get the idea.
  prefs: []
  type: TYPE_NORMAL
- en: With all that real-world experience at your fingertips, you're more than ready
    to cross over into the realm of programming. To kick off your journey, you'll
    need to know how to set up your development environment, work with the applications
    involved, and know exactly where to go when you need help.
  prefs: []
  type: TYPE_NORMAL
- en: 'To those ends, we''re going to begin by delving into the following C# topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with Unity 2021
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using C# with Unity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring the documentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes it's easier to start with what a thing isn't, rather than what it
    is. The goal of this book *isn't* to teach you everything there is to know about
    the Unity game engine or game development. By necessity, we'll cover these topics
    at a basic level at the beginning of our journey, and in more detail in *Chapter
    6*, *Getting Your Hands Dirty with Unity*. However, these topics are included
    to provide a fun, accessible way to learn the C# programming language from the
    ground up.
  prefs: []
  type: TYPE_NORMAL
- en: Since this book is aimed at complete beginners to programming, if you have no
    previous experience with either C# or Unity, you're in the right place! If you've
    had some experience with the Unity Editor but not with programming, guess what?
    This is still the place to be. Even if you've dabbled in a bit of C# mixed with
    Unity, but want to explore some more intermediate or advanced topics, the later
    chapters of this book can provide you with what you're looking for.
  prefs: []
  type: TYPE_NORMAL
- en: If you're an experienced programmer in other languages, feel free to skip the
    beginner theory and dive right into the parts you're interested in, or stick around
    and refresh your fundamentals.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to running Unity 2021, you'll also be using C# 8.0 and Visual Studio
    to write your game code.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with Unity 2021
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you don''t have Unity installed, or are running an earlier version, follow
    these steps to set up your environment:'
  prefs: []
  type: TYPE_NORMAL
- en: Head over to [https://www.unity.com/](https://www.unity.com/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Get started** (shown in the following screenshot):![](img/B17573_01_01.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 1.1: Unity homepage'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This will take you to the Unity store page. Don't feel overwhelmed by this—you
    can get Unity completely for free!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If the Unity homepage looks different for you than what you can see in *Figure
    1.1*, you can go directly to [https://store.unity.com](https://store.unity.com).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select the **Personal** option. The other paid options offer more advanced functionality
    and services, but you can check these out on your own:![](img/B17573_01_02.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 1.2: Unity plans and pricing'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After selecting the **Personal** plan, you'll be asked if you're a first-time
    or returning user. Select **Start here** under **First-time users**:![](img/B17573_01_03.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 1.3: Start creating with the Unity portal'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select **Agree and download** to get your copy of Unity Hub:![](img/B17573_01_04.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 1.4: Unity terms and conditions'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the download is complete, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up the installer (by double-clicking it)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Accept the user agreement
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Follow the installation instructions
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you get the green light, go ahead and fire up the Unity Hub application!
  prefs: []
  type: TYPE_NORMAL
- en: The newest version of Unity Hub will offer an install wizard when you first
    open the application. If you'd like to follow that, feel free.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps show you how to start a new project without any help from
    the application:'
  prefs: []
  type: TYPE_NORMAL
- en: Select **Skip Install Wizard** in the lower left, then confirm **Skip Wizard**:![](img/B17573_01_05.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 1.5: Install wizard'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Switch to the **Installs** tab from the left-hand menu, and select **ADD** to
    choose your Unity version:![](img/B17573_01_06.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 1.6: Unity Hub Installs panel'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select your desired version of Unity, then click **NEXT**. At the time of writing,
    Unity 2021 is still in pre-release, but you should be able to select a 2021 version
    from the **Official Releases** list by the time you're reading this:![](img/B17573_01_07.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 1.7: Add Unity Version pop-up window'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You'll then be given the option to add various modules to your installation.
    Make sure the Visual Studio module is selected and click **NEXT****:**![](img/B17573_01_08.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 1.8: Adding install modules'
  prefs: []
  type: TYPE_NORMAL
- en: If you want to add any modules later, you can click the **More** button (three-dot
    icon) at the upper right of any version in the **Installs** window.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the installation is complete, you''ll see a new version in your **Installs**
    panel, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17573_01_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.9: Installs tab with Unity versions'
  prefs: []
  type: TYPE_NORMAL
- en: You can find additional information and resources about the Unity Hub application
    at [https://docs.unity3d.com/Manual/GettingStartedInstallingHub.html](https://docs.unity3d.com/Manual/GettingStartedInstallingHub.html).
  prefs: []
  type: TYPE_NORMAL
- en: There's always a chance of something going wrong, so be sure to check the following
    section if you're using macOS Catalina or later, which has been known to throw
    up issues.
  prefs: []
  type: TYPE_NORMAL
- en: Using macOS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you''re working on a Mac with OS Catalina or later, there is a known issue
    when using some versions of Unity Hub to install Unity. If that''s the case for
    you, take a deep breath, go to the **Unity download archive**, and grab the 2021
    version you need ([https://unity3d.com/get-unity/download/archive](https://unity3d.com/get-unity/download/archive)).
    Remember to use the **Downloads (Mac)** option instead of the Unity Hub download:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17573_01_10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.10: Unity download archive'
  prefs: []
  type: TYPE_NORMAL
- en: If you're working on Windows and run into similar install issues, downloading
    an archived copy of Unity will also work just fine.
  prefs: []
  type: TYPE_NORMAL
- en: The download is a normal application installer since it's a `.dmg` file. Open
    it up, follow the instructions, and you'll be ready to go in no time!
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17573_01_11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.11: Successful Unity installation from the download manager'
  prefs: []
  type: TYPE_NORMAL
- en: All of the examples and screenshots for this book were created and captured
    using Unity 2021.1.0b8\. If you're using a newer version, things might look slightly
    different in the Unity Editor, but this shouldn't affect your following along.
  prefs: []
  type: TYPE_NORMAL
- en: Now that Unity Hub and Unity 2021 are installed, it's time to create a new project!
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Launch the Unity Hub application to start a new project. If you have a Unity
    account, go ahead and sign in; if not, you can either create one or hit **Skip**
    at the bottom of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s set up a new project by selecting the arrow icon next to the **NEW**
    button in the top right corner:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17573_01_12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.12: Unity Hub Projects panel'
  prefs: []
  type: TYPE_NORMAL
- en: 'Choose your 2021 version and set the following fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Templates**: The project will default to **3D**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Project Name**: I''ll be calling mine `Hero Born`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Location**: Wherever you''d like the project to be saved'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once the settings have been configured, hit **CREATE**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17573_01_13.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.13: Unity Hub with new project configuration popup'
  prefs: []
  type: TYPE_NORMAL
- en: With the project created, you're all set to explore the Unity interface! You
    can re-open your project anytime from the **Projects** panel in Unity Hub.
  prefs: []
  type: TYPE_NORMAL
- en: Navigating the editor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When the new project finishes initializing, you''ll see the glorious Unity
    Editor! I''ve marked the important tabs (or panels, if you prefer) in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17573_01_14.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.14: Unity interface'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a lot to take in, so we''ll look at each of these panels in more detail:'
  prefs: []
  type: TYPE_NORMAL
- en: The **Toolbar** panel is the topmost part of the Unity Editor. From here, you
    can manipulate objects (far-left button group) and play and pause the game (center
    buttons). The rightmost button group contains Unity services, **LayerMasks**,
    and layout scheme features, which we won't be using in this book because they
    don't apply to learning C#.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Hierarchy** window shows every item currently in the game **scene**. In
    the starter project, this is just the default camera and directional light, but
    when we create our prototype environment, this window will start to get filled
    in.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Game** and **Scene** windows are the most visual aspects of the editor.
    Think of the **Scene** window as your stage, where you can move and arrange 2D
    and 3D objects. When you hit the **Play** button, the **Game** window will take
    over, rendering the **Scene** view and any programmed interactions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Inspector** window is your one-stop shop for viewing and editing the properties
    of objects in the scene. If you select the **Main Camera** **GameObject** in the
    **Hierarchy**, you'll see several parts (Unity calls them components) are displayed—all
    of which are accessible from here.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Project** window holds every asset that's currently in your project. Think
    of this as a representation of your project's folders and files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Console** window is where any output we want our scripts to print will
    show up. From here on out, if we talk about the console or debug output, this
    panel is where it will be displayed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If any of these windows get closed by accident, you can re-open them anytime
    from **Unity** | **Window** | **General**. You can find more in-depth breakdowns
    of each window's functionality in the Unity docs at [https://docs.unity3d.com/Manual/UsingTheEditor.html](https://docs.unity3d.com/Manual/UsingTheEditor.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Before continuing, it''s important that Visual Studio is set up as the script
    editor for your project. Go to the **Unity menu** | **Preferences** | **External
    Tools** and check that **External Script Editor** is set to Visual Studio for
    Mac or Windows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17573_01_15.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.15: Changing the External Script Editor to Visual Studio'
  prefs: []
  type: TYPE_NORMAL
- en: 'As a final tip, if you want to switch between light and dark modes, go to the
    **Unity menu** | **Preferences** | **General** and change the **Editor Theme**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17573_01_16.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.16: Unity general preferences panel'
  prefs: []
  type: TYPE_NORMAL
- en: I know that was a lot to process if you're new to Unity, but rest assured that
    any instructions going forward will always reference the necessary steps. I won't
    leave you wondering what button to push. With that out of the way, let's start
    creating some actual C# scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Using C# with Unity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Going forward, it's important to think of Unity and C# as symbiotic entities.
    Unity is the engine where you'll create scripts and game objects, but the actual
    programming takes place in another program called Visual Studio. Don't worry about
    that right now—we'll get to that in a moment.
  prefs: []
  type: TYPE_NORMAL
- en: Working with C# scripts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Even though we haven't covered any basic programming concepts yet, they won't
    have a home until we know how to create an actual C# script in Unity. A C# script
    is a special kind of C# file in which you'll write C# code. These scripts can
    be used in Unity to do virtually anything, from responding to player input to
    creating game mechanics.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several ways to create C# scripts from the editor:'
  prefs: []
  type: TYPE_NORMAL
- en: Select **Assets** | **Create** | **C# Script**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Right under the **Project** tab, select the **+** icon and choose **C# Script**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Right-click on the **Assets** folder in the **Project** tab and select **Create**
    | **C# Script** from the pop-up menu
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select any GameObject in the **Hierarchy** window and click **Add Component**
    | **New Script**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Going forward, whenever you're instructed to create a C# script, please use
    whichever method you prefer.
  prefs: []
  type: TYPE_NORMAL
- en: Resources and objects other than C# scripts can be created in the editor using
    the preceding methods. I'm not going to call out each of these variations every
    time we create something new, so just keep the options in the back of your mind.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the sake of organization, we''re going to store our various assets and
    scripts inside their marked folders. This isn''t just a Unity-related task—it''s
    something you should always do, and your coworkers will thank you (I promise):'
  prefs: []
  type: TYPE_NORMAL
- en: From the **Project** tab, select **+** | **Folder** (or whichever method you
    like best—in *Figure 1.17* we've selected **Assets** | **Create** | **Folder**)
    and name it `Scripts`:![](img/B17573_01_17.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 1.17: Creating a C# script'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Double-click on the **Scripts** folder and create a new C# script. By default,
    the script will be named `NewBehaviourScript`, but you'll see the filename highlighted,
    so you have the option to immediately rename it. Type in `LearningCurve` and hit
    `Enter`:![](img/B17573_01_18.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 1.18: Project window with the Scripts folder selected'
  prefs: []
  type: TYPE_NORMAL
- en: You can use the small slider in the bottom right of the **Project** tab to change
    how your files are displayed.
  prefs: []
  type: TYPE_NORMAL
- en: So, you've just created a subfolder named `Scripts`, as shown in the preceding
    screenshot. Inside that parent folder, you created a C# script named `LearningCurve.cs`
    (the `.cs` file type stands for C-Sharp, in case you were wondering), which is
    now saved as part of our *Hero Born* project assets. All that's left to do is
    open it up in Visual Studio!
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the Visual Studio editor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While Unity can create and store C# scripts, they need to be edited using Visual
    Studio. A copy of Visual Studio comes pre-packaged with Unity and will open up
    automatically when you double-click any C# script from inside the editor.
  prefs: []
  type: TYPE_NORMAL
- en: Opening a C# file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Unity will synchronize with Visual Studio the first time you open a file. The
    simplest way to do this is by selecting the script from the **Project** tab.
  prefs: []
  type: TYPE_NORMAL
- en: 'Double-click on `LearningCurve.cs`, which will open up the C# file in Visual
    Studio:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17573_01_19.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.19: LearningCurve C# script in Visual Studio'
  prefs: []
  type: TYPE_NORMAL
- en: You can change the Visual Studio tabs at any time from **Visual Studio** | **View**
    | **Layout**. I'll be using the **Design** layout for the rest of the book so
    we can see our project files in the left-hand side of the editor.
  prefs: []
  type: TYPE_NORMAL
- en: You'll see a folder structure on the left-hand side of the interface that mirrors
    the one in Unity, which you can access like any other. On the right-hand side
    is the actual code editor where the magic happens. There are far more features
    to the Visual Studio application, but this is all we need to get started.
  prefs: []
  type: TYPE_NORMAL
- en: The Visual Studio interface is different for Windows and Mac environments, but
    the code we'll be using throughout this book will work equally well with both.
    All the screenshots in this book have been taken in a Mac environment, so if things
    look different on your computer, there's no need to worry.
  prefs: []
  type: TYPE_NORMAL
- en: Beware of naming mismatches
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'One common pitfall that trips up new programmers is file naming—more specifically,
    naming mismatches—which we can illustrate using line 5 from *Figure 1.19* of the
    C# file in Visual Studio:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `LearningCurve` class name is the same as the `LearningCurve.cs` filename.
    **This is an essential requirement**. It's OK if you don't know what a class is
    quite yet. The important thing to remember is that, in Unity, the filename and
    the class name need to be the same. If you're using C# outside of Unity, the filename
    and class name don't have to match.
  prefs: []
  type: TYPE_NORMAL
- en: When you create a C# script file in Unity, the filename in the **Project** tab
    is already in **Edit** mode, ready to be renamed. It's a good habit to rename
    it then and there. If you rename the script later, the filename and the class
    name won't match.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you were to rename the file at a later point, the filename would change,
    but line 5 would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If you accidentally do this, it''s not the end of the world. All you need to
    do is go into Visual Studio and change `NewBehaviourScript` to the name of your
    C# script, as well as the name of the `.meta` file on your desktop. You can find
    the `.meta` file in the project folder under **Assets** | **Scripts**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17573_01_20.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.20: Finding the META file'
  prefs: []
  type: TYPE_NORMAL
- en: Syncing C# files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As part of their symbiotic relationship, Unity and Visual Studio communicate
    with each other to synchronize their content. This means that if you add, delete,
    or change a script file in one application, the other application will see the
    changes automatically.
  prefs: []
  type: TYPE_NORMAL
- en: So, what happens when Murphy's Law, which states that "*anything that can go
    wrong will go wrong*," strikes and syncing just doesn't seem to be working correctly?
    If you run into this situation, take a deep breath, select the troublesome script
    in Unity, right-click, and select **Refresh**.
  prefs: []
  type: TYPE_NORMAL
- en: You now have the basics of script creation under your belt, so it's time we
    talk about finding and efficiently using helpful resources.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the documentation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The last topic we'll touch on in this first foray into Unity and C# scripts
    is documentation. Not sexy, I know, but it's important to form good habits early
    when dealing with new programming languages or development environments.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing Unity's documentation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once you start writing scripts in earnest, you'll be using Unity's documentation
    quite often, so it's beneficial to know how to access it early on. The *Reference
    Manual* will give you an overview of a component or topic, while specific programming
    examples can be found in the *Scripting Reference*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Every game object (an item in the **Hierarchy** window) in a scene has a **Transform**
    component that controls its **Position**, **Rotation**, and **Scale**. To keep
    things simple, we''ll just look up the camera''s **Transform** component in the
    Reference Manual:'
  prefs: []
  type: TYPE_NORMAL
- en: In the **Hierarchy** tab, select the **Main Camera** game object
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move over to the **Inspector** tab and click on the information icon (question
    mark) at the top right of the **Transform** component:![](img/B17573_01_21.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 1.21: Main Camera game object selected in the Inspector'
  prefs: []
  type: TYPE_NORMAL
- en: 'You''ll see a web browser open on the **Transforms** page of the Reference
    Manual:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17573_01_22.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.22: Unity Reference Manual'
  prefs: []
  type: TYPE_NORMAL
- en: All the components in Unity have this feature, so if you ever want to know more
    about how something works, you know what to do.
  prefs: []
  type: TYPE_NORMAL
- en: So, we've got the Reference Manual open, but what if we wanted concrete coding
    examples related to the **Transform** component? It's pretty simple—all we need
    to do is ask the Scripting Reference.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **SWITCH TO SCRIPTING** link underneath the component or class
    name (**Transform**, in this case):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17573_01_23.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.23: Unity Reference Manual with the SWITCH TO SCRIPTING button highlighted'
  prefs: []
  type: TYPE_NORMAL
- en: 'By doing so, the Reference Manual automatically switches to the Scripting Reference:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17573_01_24.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.24: Unity scripting documentation with SWITCH TO MANUAL highlighted'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, as well as coding help, there is also an option to switch back
    to the Reference Manual if necessary.
  prefs: []
  type: TYPE_NORMAL
- en: The Scripting Reference is a large document because it has to be. However, this
    doesn't mean you have to memorize it or even be familiar with all of its information
    to start writing scripts. As the name suggests, it's a reference, not a test.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you find yourself lost in the documentation, or just out of ideas regarding
    where to look, you can also find solutions within the rich Unity development community
    in the following places:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Unity Forum: [https://forum.unity.com/](https://forum.unity.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Unity Answers: [https://answers.unity.com/index.html](https://answers.unity.com/index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Unity Discord: [https://discord.com/invite/unity](https://discord.com/invite/unity)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On the other side of things, you'll need to know where to find resources on
    any C# question, which we'll cover next.
  prefs: []
  type: TYPE_NORMAL
- en: Locating C# resources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we've got our Unity resources taken care of, let's take a look at some
    of Microsoft's C# resources. For starters, the Microsoft Learn documentation at
    [https://docs.microsoft.com/en-us/dotnet/csharp](https://docs.microsoft.com/en-us/dotnet/csharp)
    has a ton of great tutorials, quickstart guides, and how-to articles. You can
    also find great overviews of individual C# topics at [https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/index](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/index).
  prefs: []
  type: TYPE_NORMAL
- en: However, if you want detailed information on a specific C# language feature,
    the reference guides are the place to go. These reference guides are an important
    resource for any C# programmer, but since they aren't always the easiest to navigate,
    let's take a few minutes to learn how to find what we're looking for.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s load up the programming guide link and look up the C# `String` class.
    Do either of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Enter `Strings` in the search bar in the top-left corner of the web page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scroll down to **Language Sections** and click on the **Strings** link directly:![](img/B17573_01_25.png)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Figure 1.25: Navigating Microsoft''s C# reference guide'
  prefs: []
  type: TYPE_NORMAL
- en: 'You should see something like the following for the class description page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17573_01_26.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.26: Microsoft''s Strings (C# Programming Guide) page'
  prefs: []
  type: TYPE_NORMAL
- en: Unlike Unity's documentation, the C# reference and scripting information is
    all bundled up into one, but its saving grace is the subtopic list on the right-hand
    side. Use it well! It's extremely important to know where to find help when you're
    stuck or have a question, so be sure to circle back to this section whenever you
    hit a roadblock.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We covered quite a bit of logistical information in this chapter, so I can
    understand if you''re itching to write some code. Starting new projects, creating
    folders and scripts, and accessing documentation are topics that are easily forgotten
    in the excitement of a new adventure. Just remember that this chapter has a lot
    of resources you might need in the coming pages, so don''t be afraid to come back
    and visit. Thinking like a programmer is a muscle: the more you work it, the stronger
    it gets.'
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll start laying out the theory, vocabulary, and main
    concepts you'll need to prime your coding brain. Even though the material is conceptual,
    we'll still be writing our first lines of code in the `LearningCurve` script.
    Get ready!
  prefs: []
  type: TYPE_NORMAL
- en: Pop quiz – dealing with scripts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What type of relationship do Unity and Visual Studio share?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Scripting Reference supplies example code in regards to using a particular
    Unity component or feature. Where can you find more detailed (non-code-related)
    information about Unity components?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Scripting Reference is a large document. How much of it do you have to memorize
    before attempting to write a script?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When is the best time to name a C# script?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: JOIN us on Discord!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Read this book alongside other users, Unity/C# experts, and Harrison Ferrone.
    Ask questions, provide solutions to other readers, chat with the author via *Ask
    Me Anything sessions* and much more.
  prefs: []
  type: TYPE_NORMAL
- en: Join Now!
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/csharpunity2021](https://packt.link/csharpunity2021)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/QR_Code_9781801813945.png)'
  prefs: []
  type: TYPE_IMG
