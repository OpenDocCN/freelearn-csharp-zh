["```cs\nProperties \n{\n  _MainTex (\"Base (RGB)\", 2D) = \"white\" {}\n  _NormalMap (\"Normal Map\", 2D) = \"bump\" {}\n}\n\nSubShader \n{\n  Tags { \"RenderType\"=\"Opaque\" }\n  LOD 200\n\n  CGPROGRAM\n  #pragma surface surf SimpleLambert \n\n  sampler2D _MainTex;\n  sampler2D _NormalMap;\n\n  struct Input \n  {\n    float2 uv_MainTex;\n    float2 uv_NormalMap;\n  };\n\n  inline float4 LightingSimpleLambert (SurfaceOutput s, \n                                       float3 lightDir, \n                                       float atten)\n  {\n   float diff = max (0, dot (s.Normal, lightDir));\n\n   float4 c;\n   c.rgb = s.Albedo * _LightColor0.rgb * (diff * atten * 2);\n   c.a = s.Alpha;\n   return c;\n  }\n\n  void surf (Input IN, inout SurfaceOutput o) \n  {\n    fixed4 c = tex2D (_MainTex, IN.uv_MainTex);\n\n    o.Albedo = c.rgb;\n    o.Alpha = c.a;\n    o.Normal = UnpackNormal(tex2D(_NormalMap, IN.uv_NormalMap));\n  }\n  ENDCG\n} \nFallBack \"Diffuse\"\n```", "```cs\nstruct Input \n{\n    half2 uv_MainTex;\n    half2 uv_NormalMap;\n};\n```", "```cs\ninline fixed4 LightingSimpleLambert (SurfaceOutput s, fixed3 lightDir, fixed atten)\n{\n  fixed diff = max (0, dot(s.Normal, lightDir));\n\n  fixed4 c;\n  c.rgb = s.Albedo * _LightColor0.rgb * (diff * atten * 2);\n  c.a = s.Alpha;\n  return c;\n}\n```", "```cs\nvoid surf (Input IN, inout SurfaceOutput o) \n{\n  fixed4 c = tex2D (_MainTex, IN.uv_MainTex);\n\n  o.Albedo = c.rgb;\n  o.Alpha = c.a;\n  o.Normal = UnpackNormal(tex2D(_NormalMap, IN.uv_NormalMap));\n}\n```", "```cs\nCGPROGRAM\n#pragma surface surf SimpleLambert noforwardadd\n```", "```cs\nvoid surf (Input IN, inout SurfaceOutput o) \n{\n  fixed4 c = tex2D (_MainTex, IN.uv_MainTex);\n\n  o.Albedo = c.rgb;\n  o.Alpha = c.a;\n  o.Normal = UnpackNormal(tex2D(_NormalMap, IN.uv_MainTex));\n}\n```", "```cs\nstruct Input \n{\n  half2 uv_MainTex;\n};\n```", "```cs\nCGPROGRAM\n#pragma surface surf SimpleLambert exclude_path:prepass noforwardadd\n```", "```cs\nProperties \n{\n  _MainTex (\"Base (RGB)\", 2D) = \"white\" {}\n  _BlendTex(\"Blend Texture\", 2D) = \"white\" {}\n  _NormalMap (\"Normal Map\", 2D) = \"bump\" {}\n}\n```", "```cs\nsampler2D _MainTex;\nsampler2D _NormalMap;\nsampler2D _BlendTex;\n```", "```cs\nvoid surf (Input IN, inout SurfaceOutput o) \n{\n  fixed4 c = tex2D (_MainTex, IN.uv_MainTex);\n  fixed4 blendTex = tex2D(_BlendTex, IN.uv_MainTex);\n\n  c = lerp(c, blendTex, blendTex.r);\n\n  o.Albedo = c.rgb;\n  o.Alpha = c.a;\n  o.Normal = UnpackNormal(tex2D(_NormalMap, IN.uv_MainTex));\n}\n```", "```cs\nProperties \n{\n  _Diffuse (\"Base (RGB) Specular Amount (A)\", 2D) = \"white\" {}\n  _SpecIntensity (\"Specular Width\", Range(0.01, 1)) = 0.5\n  _NormalMap (\"Normal Map\", 2D) = \"bump\"{}\n}\n```", "```cs\nCGPROGRAM\n#pragma surface surf MobileBlinnPhong exclude_path:prepass nolightmap noforwardadd halfasview\n```", "```cs\nsampler2D _Diffuse;\nsampler2D _NormalMap;\nfixed _SpecIntensity;\n```", "```cs\nstruct Input \n{\n  half2 uv_Diffuse;\n};\n```", "```cs\ninline fixed4 LightingMobileBlinnPhong (SurfaceOutput s, fixed3 lightDir, fixed3 halfDir, fixed atten)\n    {\n      fixed diff = max (0, dot (s.Normal, lightDir));\n      fixed nh = max (0, dot (s.Normal, halfDir));\n      fixed spec = pow (nh, s.Specular*128) * s.Gloss;\n\n      fixed4 c;\n      c.rgb = (s.Albedo * _LightColor0.rgb * diff + _LightColor0.rgb * spec) * (atten*2);\n      c.a = 0.0;\n      return c;\n    }\n```", "```cs\nvoid surf (Input IN, inout SurfaceOutput o) \n{\n  fixed4 diffuseTex = tex2D (_Diffuse, IN.uv_Diffuse);\n  o.Albedo = diffuseTex.rgb;\n  o.Gloss = diffuseTex.a;\n  o.Alpha = 0.0;\n  o.Specular = _SpecIntensity;\n  o.Normal = UnpackNormal(tex2D(_NormalMap, IN.uv_Diffuse));\n}\n```"]