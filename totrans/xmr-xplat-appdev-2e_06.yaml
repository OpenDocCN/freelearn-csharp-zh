- en: Chapter 6. XamChat for Android
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章 XamChat for Android
- en: In this chapter, we will begin developing the Android UI for our XamChat sample
    application. We will use the native Android APIs directly to create our application
    and call into our shared portable class library similar to what we did on iOS.
    Similarly, our Xamarin.Android application will be indistinguishable from an Android
    application written in Java.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将开始开发我们的XamChat示例应用程序的Android UI。我们将直接使用原生Android API来创建我们的应用程序，并调用我们的共享便携式类库，类似于我们在iOS上所做的那样。同样，我们的Xamarin.Android应用程序将无法与用Java编写的Android应用程序区分开来。
- en: To begin writing the Android version of XamChat, open the solution provided
    in the previous chapters, and create a new **Android Application** project. Name
    the project `XamChat.Droid` or some other appropriate name of your choice.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始编写XamChat的Android版本，请打开前几章提供的解决方案，并创建一个新的**Android应用程序**项目。将项目命名为`XamChat.Droid`或您选择的任何其他适当名称。
- en: 'In this chapter, we will cover:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍：
- en: The Android Manifest
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AndroidManifest
- en: Writing a login screen for XamChat
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为XamChat编写登录界面
- en: Android's ListView and BaseAdapter
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android的ListView和BaseAdapter
- en: Adding a friends list
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加好友列表
- en: Adding a list of messages
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加消息列表
- en: Introducing Android Manifest
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍AndroidManifest
- en: All Android applications have an XML file called the Android Manifest, which
    declares the basic information about the app such as the application version and
    name, and is named `AndroidManifest.xml`. This is very similar to the `Info.plist`
    file on iOS, but Android puts much more emphasis on its importance. A default
    project doesn't have a manifest, so let's begin by creating one by navigating
    to **Project Options** | **Android Application** and clicking on **Add Android
    Manifest**. Several new settings for your application will appear.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 所有Android应用程序都有一个名为AndroidManifest的XML文件，它声明了关于应用程序的基本信息，例如应用程序版本和名称，并命名为`AndroidManifest.xml`。这与iOS上的`Info.plist`文件非常相似，但Android对其重要性给予了更多的重视。默认项目没有清单，因此让我们通过导航到**项目选项**
    | **Android应用程序**并点击**添加Android清单**来创建一个。将为你的应用程序出现几个新的设置。
- en: Setting up the Manifest
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置清单
- en: 'The most important settings, shown in the following screenshot, are as follows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示的最重要设置如下：
- en: '**Application name**: This is the title of your application, which is displayed
    below the icon. It is not the same as the name selected on Google Play.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用程序名称**: 这是应用程序的标题，它显示在图标下方。它不同于在Google Play上选择的名称。'
- en: '**Package name**: This is similar to that on iOS; it''s your app''s bundle
    identifier or bundle ID. It is a unique name used to identify your application.
    The convention is to use the reverse domain style with your company name at the
    beginning; for example, `com.packt.xamchat`. It must begin with a lower case letter
    and contain at least one "." character within.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**包名**: 这与iOS上的类似；它是你的应用捆绑标识符或捆绑ID。这是一个用于标识应用的唯一名称。惯例是在公司名称开头使用反向域名风格；例如，`com.packt.xamchat`。它必须以小写字母开头，并且至少包含一个"."字符。'
- en: '**Application icon**: This is the icon displayed for your app on Android''s
    home screen.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用程序图标**: 这是显示在Android主屏幕上的应用程序图标。'
- en: '**Version number**: This is a one-digit number that represents the version
    of your application. Raising this number indicates a newer version on Google Play.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**版本号**: 这是一个代表应用程序版本的单一数字。提高这个数字表示在Google Play上有新版本。'
- en: '**Version name**: This is a user-friendly version string for your app that
    users will see in settings and on Google Play; for example, **1.0.0**.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**版本名称**: 这是用户友好的版本字符串，用户将在设置和Google Play上看到它；例如，**1.0.0**。'
- en: '**Minimum Android version**: This is the minimum version of Android that your
    application supports. In modern Android apps, you can generally target Android
    4.0, but this is a decision based on your application''s core audience.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最小Android版本**: 这是你的应用程序支持的最小Android版本。在现代Android应用程序中，你通常可以针对Android 4.0，但这取决于你的应用程序的核心受众。'
- en: '**Target Android version**: This is the version of the Android SDK your application
    is compiled against. Using higher numbers gives you access to new APIs, however,
    you might need to do some checks to call these APIs on newer devices.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**目标Android版本**: 这是你的应用程序编译所针对的Android SDK版本。使用更高的数字可以让你访问新的API，但是，你可能需要在较新的设备上调用这些API时进行一些检查。'
- en: '**Install Location**: This defines the different locations your Android application
    can be installed to: auto (user settings), external (SD card), or internal (device
    internal memory).'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安装位置**: 这定义了你的Android应用程序可以安装的不同位置：自动（用户设置）、外部（SD卡）或内部（设备内部存储）。'
- en: '![Setting up the Manifest](img/00046.jpeg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![设置清单](img/00046.jpeg)'
- en: Common manifest permissions
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 常见清单权限
- en: In addition to these settings, there is a set of checkboxes labeled **Required
    permissions**. These are displayed to users on Google Play prior to the application
    being installed. This is Android's way of enforcing a level of security, giving
    users a way to see what kinds of access an app will have to make changes to their
    device.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些设置外，还有一个标记为**必需权限**的复选框集合。在应用程序安装之前，这些权限会在Google Play上显示给用户。这是Android强制执行一定安全级别的方式，使用户能够看到应用程序将如何访问他们的设备以进行更改。
- en: 'The following are some commonly used manifest permissions:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些常用的清单权限：
- en: '**Camera**: This provides access to the device camera'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**相机**: 这提供了访问设备相机的权限'
- en: '**Internet**: This provides access to make web requests over the Internet'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**互联网**: 这提供了通过互联网发起网络请求的访问权限'
- en: '**ReadContacts**: This provides access to read the device''s contacts library'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**读取联系人**: 这提供了读取设备联系人库的访问权限'
- en: '**ReadExternalStorage**: This provides access to read the SD card'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**读取外部存储**: 这提供了读取SD卡的访问权限'
- en: '**WriteContacts**: This provides access to modify the device''s contacts library'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**写入联系人**: 这提供了修改设备联系人库的访问权限'
- en: '**WriteExternalStorage**: This provides access to write to the SD card'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**写入外部存储**: 这提供了写入SD卡的访问权限'
- en: In addition to these settings, a manual change to Android Manifest will be required
    many times. In this case, you can edit the manifest file as you would edit a standard
    XML file in Xamarin Studio. For a complete list of valid XML elements and attributes,
    visit [http://developer.android.com/guide/topics/manifest/manifest-intro.html](http://developer.android.com/guide/topics/manifest/manifest-intro.html).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些设置外，还需要多次手动更改Android清单。在这种情况下，你可以像在Xamarin Studio中编辑标准XML文件一样编辑清单文件。有关有效XML元素和属性的完整列表，请访问[http://developer.android.com/guide/topics/manifest/manifest-intro.html](http://developer.android.com/guide/topics/manifest/manifest-intro.html)。
- en: 'Now let''s fill out the following settings for our application:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们填写以下应用程序的设置：
- en: '**Application name**: `XamChat`'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用程序名称**: `XamChat`'
- en: '**Package name**: `com.yourcompanyname.xamchat`; make sure to name future apps
    beginning with `com.yourcompanyname`'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**包名**: `com.yourcompanyname.xamchat`；确保将未来的应用程序命名为以`com.yourcompanyname`开头'
- en: '**Version number**: Just start with the number `1`'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**版本号**: 只需从数字`1`开始'
- en: '**Version**: This can be any string, but it is recommended to use something
    that resembles a version number'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**版本**: 这可以是任何字符串，但建议使用类似于版本号的字符串'
- en: '**Minimum Android version**: Select **Android 4.0.3 (API Level 15)**'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最小Android版本**: 选择**Android 4.0.3 (API Level 15**)'
- en: '**Required permissions**: Select **Internet**; we will be using it later'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**必需权限**: 选择**互联网**；我们稍后会使用它'
- en: At this point, we need to reference our shared code from our portable class
    library we created in [Chapter 4](part0036_split_000.html#page "Chapter 4. XamChat
    – a Cross-platform App"), *XamChat – a Cross-platform App*. Right-click on the
    **References** folder for the project, then click on **Edit References...**, and
    add a reference to the `XamChat.Core` project. You will now be able to access
    all the shared code that was written in [Chapter 4](part0036_split_000.html#page
    "Chapter 4. XamChat – a Cross-platform App"), *XamChat – a Cross-platform App*.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们需要从我们在[第4章](part0036_split_000.html#page "第4章。XamChat – 一个跨平台应用程序")中创建的可移植类库中引用我们的共享代码，即*XamChat
    – 一个跨平台应用程序*。右键单击项目的**引用**文件夹，然后单击**编辑引用...**，并添加对`XamChat.Core`项目的引用。现在你将能够访问在[第4章](part0036_split_000.html#page
    "第4章。XamChat – 一个跨平台应用程序")中编写的所有共享代码，即*XamChat – 一个跨平台应用程序*。
- en: 'Go to the `Resources` directory, and in the `values` folder, open `Strings.xml`;
    this is where all the text throughout your Android app should be stored. This
    is an Android convention that will make it very easy to add multiple languages
    to your application. Let''s change our strings to the following:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 前往`Resources`目录，然后在`values`文件夹中打开`Strings.xml`；这是你Android应用程序中所有文本应该存储的地方。这是一个Android约定，这将使添加多种语言到你的应用程序变得非常容易。让我们将我们的字符串更改为以下内容：
- en: '[PRE0]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We'll use these values later in the chapter. Feel free to add new ones in cases
    where you display the text to the user. If you need to add more languages, it
    is very straightforward; you can see the Android documentation on this subject
    at [http://developer.android.com/guide/topics/resources/localization.html](http://developer.android.com/guide/topics/resources/localization.html).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章后面使用这些值。如果你在向用户显示文本时需要添加新的值，请随意添加。如果你需要添加更多语言，这非常简单；你可以查看 Android 关于此主题的文档
    [http://developer.android.com/guide/topics/resources/localization.html](http://developer.android.com/guide/topics/resources/localization.html)。
- en: Creating and implementing the application class
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建和实现应用程序类
- en: 'Now let''s implement our main application class; add a new **Activity** from
    the **New File** dialog. We won''t be subclassing `Activity` in this file, but
    this template adds several Android `using` statements to the top of the file that
    imports the Android APIs to be used within your code. Create a new `Application`
    class where we can register everything in our `ServiceContainer` as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来实现我们的主要应用程序类；从 **新建文件** 对话框中添加一个新的 **Activity**。在这个文件中，我们不会从 `Activity`
    继承，但这个模板在文件顶部添加了几个 Android `using` 语句，用于导入代码中要使用的 Android API。创建一个新的 `Application`
    类，我们可以将 `ServiceContainer` 中的所有内容注册如下：
- en: '[PRE1]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We used the built-in Android theme, `Theme.Holo.Light`, just because it is a
    neat theme that matches the default style we used on iOS. Note the strange, empty
    constructor we have to create for this class to function. This is a current requirement
    of a custom `Application` class in Xamarin. You can just recognize this as boilerplate
    code, and you will need to add this in this case.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了内置的 Android 主题 `Theme.Holo.Light`，仅仅因为它是一个整洁的主题，与我们在 iOS 中使用的默认样式相匹配。注意，我们必须为这个类创建一个奇怪的、空的构造函数才能使其正常工作。这是
    Xamarin 中自定义 `Application` 类的当前要求。你可以将其视为样板代码，并且在这种情况下你需要添加它。
- en: 'Now let''s implement a simple base class for all the activities throughout
    our app. Create an `Activities` folder in the `XamChat.Droid` project and a new
    file named `BaseActivity.cs` with the following content:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们为应用中的所有活动实现一个简单的基类。在 `XamChat.Droid` 项目中创建一个名为 `Activities` 的文件夹，并创建一个名为
    `BaseActivity.cs` 的新文件，内容如下：
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We did several things here to simplify the development of our other activities.
    First, we made this class generic, and made a protected variable named `viewModel`
    to store a ViewModel of a specific type. Note that we did not use generics on
    controllers in iOS due to platform limitations (see more on Xamarin's documentation
    website at [http://docs.xamarin.com/guides/ios/advanced_topics/limitations/](http://docs.xamarin.com/guides/ios/advanced_topics/limitations/)).
    We also implemented `IsBusyChanged`, and displayed a simple `ProgressDialog` function
    with the `Loading` string from the `Strings.xml` file to indicate the network
    activity.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里做了几件事情来简化其他活动的开发。首先，我们使这个类成为泛型，并创建了一个名为 `viewModel` 的受保护变量来存储特定类型的 ViewModel。请注意，由于平台限制，我们在
    iOS 中没有在控制器上使用泛型（有关更多信息，请参阅 Xamarin 文档网站 [http://docs.xamarin.com/guides/ios/advanced_topics/limitations/](http://docs.xamarin.com/guides/ios/advanced_topics/limitations/)）。我们还实现了
    `IsBusyChanged`，并使用来自 `Strings.xml` 文件的 `Loading` 字符串显示了一个简单的 `ProgressDialog`
    函数，以指示网络活动。
- en: 'Let''s add one more method to display errors to the user, as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再添加一个方法来向用户显示错误，如下所示：
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This method will display a pop-up dialog indicating that something went wrong.
    Notice that we also used `ErrorTitle` and the built-in Android resource for an
    `Ok` string.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法将显示一个弹出对话框，指示出了问题。请注意，我们还使用了 `ErrorTitle` 和内置的 Android `Ok` 字符串资源。
- en: This will complete the core setup for our Android application. From here, we
    can move on to implement the UI for the screens throughout our app.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这将完成我们 Android 应用的核心设置。从这里，我们可以继续实现应用中各个屏幕的 UI。
- en: Adding a login screen
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加登录屏幕
- en: Before creating Android views, it is important to know the different layouts
    or view group types available in Android. iOS does not have an equivalent for
    some of these because iOS has a very small variation of screen sizes on its devices.
    Since Android has virtually infinite screen sizes and densities, the Android SDK
    has a lot of built-in support for auto-sizing and layout for views.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建 Android 视图之前，了解 Android 中可用的不同布局或视图组类型非常重要。iOS 中没有一些这些的等效功能，因为 iOS 设备的屏幕尺寸变化非常小。由于
    Android 几乎有无限的屏幕尺寸和密度，Android SDK 为视图的自动调整大小和布局提供了大量的内置支持。
- en: Layouts and ViewGroups in Andorid
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Android 中的布局和 ViewGroups
- en: 'The following are the common types of layouts:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些常见的布局类型：
- en: '`ViewGroup`: This is the base class for a view that contains a collection of
    child views. You normally won''t use this class directly.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ViewGroup`：这是包含子视图集合的视图的基类。你通常不会直接使用这个类。'
- en: '`LinearLayout`: This is a layout that positions its child views in rows or
    columns (but not both). You can also set weights on each child to have them span
    different percentages of the available space.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LinearLayout`：这是一个将子视图按行或列（但不能同时按行和列）定位的布局。你还可以为每个子视图设置权重，使它们占据不同百分比的可用空间。'
- en: '`RelativeLayout`: This is a layout that gives much more flexibility on the
    position of its children. You can position child views relative to each other
    so that they are above, below, to the left, or to the right of one another.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RelativeLayout`：这是一个提供更多对其子视图位置灵活性的布局。你可以将子视图相对于彼此定位，使它们位于彼此之上、之下、左侧或右侧。'
- en: '`FrameLayout`: This layout positions its child views directly on top of one
    another in the **z order** on the screen. This layout is best used for cases where
    you have a large child view that needs other views on top of it and perhaps docked
    to one side.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FrameLayout`：这个布局将子视图直接放置在屏幕上的 **z 轴** 顺序上。这个布局最适合有大型子视图需要其他视图在其上方，并且可能停靠在一边的情况。'
- en: '`ListView`: This displays views vertically in a list with the help of an adapter
    class that determines the number of child views. It also has support for its children
    to be selected.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ListView`：这个视图通过一个确定子视图数量的适配器类，以列表形式垂直显示视图。它还支持其子视图被选中。'
- en: '`GridView`: This displays views in rows and columns within a grid. It also
    requires the use of an adapter class to supply the number of children.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GridView`：这个视图在网格中按行和列显示视图。它还需要使用一个适配器类来提供子视图的数量。'
- en: Before we begin writing the login screen, delete the `Main.axml` and `MainActivity.cs`
    files that were created from the Android project template, as they are not useful
    for this application. Next, create an Android layout file named `Login.axml` in
    the `layout` folder of the `Resources` directory in your project.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始编写登录界面之前，删除由 Android 项目模板创建的 `Main.axml` 和 `MainActivity.cs` 文件，因为它们对这个应用程序没有用。接下来，在项目
    `Resources` 目录下的 `layout` 文件夹中创建一个名为 `Login.axml` 的 Android 布局文件。
- en: 'Now we can start adding functionalities to our Android layout as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以按照以下方式开始向我们的 Android 布局添加功能：
- en: Double-click on the `Login.axml` file to open the Android designer.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击 `Login.axml` 文件以打开 Android 设计器。
- en: Drag two **Plain Text** views onto the layout found in the **Text Fields** section.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将两个 **Plain Text** 视图拖到 **Text Fields** 部分的布局中。
- en: In the **Id** field, enter `@+id/username` and `@+id/password` respectively.
    This is a step that you will take for any control you want to work with from C#
    code.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Id** 字段中，分别输入 `@+id/username` 和 `@+id/password`。这是你将采取的步骤，以便从 C# 代码中与任何控件一起工作。
- en: For the password field, set its **Input Type** property to `textPassword`.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于密码字段，将其 **Input Type** 属性设置为 `textPassword`。
- en: Drag a **Button** onto the layout and set its **Text** property to `Login`.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将一个 **Button** 拖到布局中，并设置其 **Text** 属性为 `Login`。
- en: Set the button's **Id** property to `@+id/login`. We will be using this control
    from code.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将按钮的 **Id** 属性设置为 `@+id/login`。我们将从代码中使用这个控件。
- en: 'Your layout will look something like what is shown in the following screenshot
    when complete:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 完成布局后，你的布局看起来会像以下截图所示：
- en: '![Layouts and ViewGroups in Andorid](img/00047.jpeg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![Android 中的布局和 ViewGroups](img/00047.jpeg)'
- en: Implementing the login functionality
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现登录功能
- en: 'Now create a new Android Activity file named `LoginActivity.cs` in the `Activites`
    folder we created earlier. We will use this as the main activity that starts when
    the application runs. Let''s implement the login functionality as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在之前创建的 `Activites` 文件夹中创建一个新的 Android Activity 文件，命名为 `LoginActivity.cs`。我们将使用这个文件作为应用程序运行时启动的主要活动。让我们按照以下方式实现登录功能：
- en: '[PRE4]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Notice that we set `MainLauncher` to `true` to make this activity the first
    activity for the application. In some apps, a splash screen is used as the first
    activity, so keep this in mind if you need to add a splash screen. We also took
    advantage of the `ApplicationName` value and the `BaseActivity` class we set up
    earlier in the chapter. We also overrode `OnResume` to clear out the two `EditText`
    controls so that the values are cleared out if you return to the screen.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们将 `MainLauncher` 设置为 `true`，使这个活动成为应用程序的第一个活动。在某些应用程序中，一个启动画面被用作第一个活动，所以如果你需要添加启动画面，请记住这一点。我们还利用了本章中早些时候设置的
    `ApplicationName` 值和 `BaseActivity` 类。我们还重写了 `OnResume` 方法，以便清除两个 `EditText` 控件，以便在返回到屏幕时清除值。
- en: 'Now if you launch the application, you will be greeted by the login screen
    we just implemented, as shown in the following screenshot:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在如果您启动应用程序，您将看到我们刚刚实现的登录屏幕，如下面的截图所示：
- en: '![Implementing the login functionality](img/00048.jpeg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![实现登录功能](img/00048.jpeg)'
- en: Using ListView and BaseAdapter
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用ListView和BaseAdapter
- en: Now let's implement a conversations list on Android. The Android equivalent
    of the `UITableView` and `UITableViewSource` iOS classes are `ListView` and `BaseAdapter`.
    There are parallel concepts for these Android classes, such as implementing abstract
    methods and recycling cells during scrolling. There are a few different types
    of adapters used in Android such as `ArrayAdapter` or `CursorAdaptor`, although
    `BaseAdapter` is generally best suited for simple lists.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在Android上实现一个对话列表。Android中`UITableView`和`UITableViewSource` iOS类的对应物是`ListView`和`BaseAdapter`。这些Android类有并行概念，例如实现抽象方法和在滚动时回收单元格。Android中使用了几种不同的适配器，例如`ArrayAdapter`或`CursorAdaptor`，尽管`BaseAdapter`通常最适合简单的列表。
- en: Implementing the conversations screen
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现对话屏幕
- en: 'Let''s implement our conversations screen. Let''s begin by making a new Android
    Activity in your `Activities` folder named `ConversationsActivity.cs`. Let''s
    start with only a couple of changes to the class definition as follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们实现我们的对话屏幕。让我们首先在您的`Activities`文件夹中创建一个新的Android Activity，命名为`ConversationsActivity.cs`。让我们从对类定义的以下几个更改开始：
- en: '[PRE5]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Perform the following steps to implement a couple of Android layouts:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以实现几个Android布局：
- en: Create a new Android layout in the `layout` folder of the `Resources` directory
    named `Conversations.axml`.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Resources`目录的`layout`文件夹中创建一个新的Android布局，命名为`Conversations.axml`。
- en: Drag a **ListView** control from **Toolbox** onto the layout, and set its **Id**
    to `@+id/conversationsList`.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**工具箱**中将**ListView**控件拖放到布局中，并设置其**ID**为`@+id/conversationsList`。
- en: Create a second Android layout in the `layout` folder in the `Resources` directory
    named `ConversationListItem.axml`.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Resources`目录的`layout`文件夹中创建第二个Android布局，命名为`ConversationListItem.axml`。
- en: Drag a **Text (Medium)** and a **Text (Small)** control onto the layout from
    the **Toolbox** pane.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**工具箱**面板中将**文本（中号）**和**文本（小号）**控件拖放到布局中。
- en: Set their IDs to `@+id/conversationUsername` and `@+id/conversationLastMessage`.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将它们的ID设置为`@+id/conversationUsername`和`@+id/conversationLastMessage`。
- en: Finally, let's set each of their **Margins** to `3dp` in the **Layout** tab
    of the **Properties** box.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，让我们将它们的**边距**都设置为`3dp`，在**属性**框的**布局**选项卡中。
- en: 'This will set up all the layout files we''ll need to use throughout the conversations
    screen. Your `ConversationListItem.axml` layout will look something like what''s
    shown in the following screenshot:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这样就会设置好我们将在对话屏幕中使用的所有布局文件。您的`ConversationListItem.axml`布局将类似于以下截图所示：
- en: '![Implementing the conversations screen](img/00049.jpeg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![实现对话屏幕](img/00049.jpeg)'
- en: 'Now we can implement `BaseAdapter` as a nested class inside `ConversationsActivity`
    as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以在`ConversationsActivity`内部实现`BaseAdapter`作为嵌套类，如下所示：
- en: '[PRE6]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The following is a review of what is going on inside the adapter:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对适配器内部发生的事情的回顾：
- en: We subclassed `BaseAdapter<Conversation>`.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们继承了`BaseAdapter<Conversation>`。
- en: We passed in `Context` (our activity) so that we can pull out `LayoutInflater`.
    This class enables you to load XML layout resources and inflate them into a view
    object.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们传递了`Context`（我们的活动）以便我们可以提取`LayoutInflater`。这个类使您能够加载XML布局资源并将它们填充到视图对象中。
- en: We implemented `GetItemId`. This is a general method used to identify rows,
    but we just returned the position for now.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们实现了`GetItemId`。这是一个用于识别行的一般方法，但我们现在只是返回位置。
- en: We set up `GetView`, which recycles the `convertView` variable by only creating
    a new view if it is null. We also pulled out the text views in our layout to set
    their text.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们设置了`GetView`，通过仅在新视图为null时创建新视图来回收`convertView`变量。我们还从布局中提取了文本视图来设置它们的文本。
- en: We overrode `Count` to return the number of conversations.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们重写了`Count`以返回对话的数量。
- en: We implemented an indexer to return a `Conversation` object for a position.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们实现了一个索引器，用于返回指定位置的`Conversation`对象。
- en: Overall, this should be fairly similar to what we did on iOS.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 总体来说，这应该与我们之前在iOS上所做的相当相似。
- en: Setting up the adapter
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置适配器
- en: 'Now let''s set up the adapter in our activity by adding the following to the
    body of `ConversationsActivity`:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过在`ConversationsActivity`的主体中添加以下内容来在我们的活动中设置适配器：
- en: '[PRE7]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This code will set up the adapter and reload our list of conversations when
    the activity appears on the screen. Note that we called `NotifyDataSetInvalidated`
    here so that `ListView` reloads its rows after the number of conversations has
    been updated. This is parallel to what we did on iOS by calling the `UITableView's`
    `ReloadData` method.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码将在活动出现在屏幕上时设置适配器并重新加载我们的会话列表。请注意，我们在这里调用了`NotifyDataSetInvalidated`，这样`ListView`在会话数量更新后可以重新加载其行。这与我们在iOS上通过调用`UITableView`的`ReloadData`方法所做的是平行的。
- en: 'Last but not least, we need to modify the `OnLogin` method we set up earlier
    in `LoginActivity` to start our new activity as follows:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，我们需要修改之前在`LoginActivity`中设置的`OnLogin`方法，以便启动我们的新活动，如下所示：
- en: '[PRE8]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now if we compile and run our application, we can navigate to a conversations
    list after logging in, as shown in the following screenshot:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们编译并运行我们的应用程序，登录后我们可以导航到会话列表，如下面的截图所示：
- en: '![Setting up the adapter](img/00050.jpeg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![设置适配器](img/00050.jpeg)'
- en: Implementing the friends list
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现朋友列表
- en: 'Before we start implementing the friends list screen, we must first add a menu
    item to `ActionBar` in our application. Let''s begin by creating a new `menu`
    folder within the `Resources` folder of our project. Next, create a new Android
    layout file named `ConversationsMenu.axml`. Remove the default layout created
    by XML, and replace it with the following:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始实现朋友列表屏幕之前，我们必须首先在我们的应用程序的`ActionBar`中添加一个菜单项。让我们首先在我们的项目的`Resources`文件夹中创建一个新的`menu`文件夹。接下来，创建一个名为`ConversationsMenu.axml`的新Android布局文件。删除由XML创建的默认布局，并用以下内容替换它：
- en: '[PRE9]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We set up a root menu with one menu item inside it.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们设置了一个包含一个菜单项的根菜单。
- en: 'The following is a breakdown of what we set for the item in XML:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码是我们在XML中为该项设置的详细说明：
- en: '`android:id`: We will use this later in C# to reference the menu item with
    `Resource.Id.addFriendMenu`.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android:id`：我们稍后将在C#中使用它来引用菜单项`Resource.Id.addFriendMenu`。'
- en: '`android:icon`: This is an image resource used to display the menu item. We
    used a built-in Android one for a generic *plus* icon.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android:icon`：这是一个用于显示菜单项的图像资源。我们使用了一个内置的Android通用**加号**图标。'
- en: '`android:showAsAction`: This will make the menu item visible if there is room
    for the item. If for some reason the device''s screen is too narrow, an overflow
    menu would be displayed for the menu item.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android:showAsAction`：如果空间允许，这将使菜单项可见。如果由于某种原因设备屏幕太窄，将显示一个溢出菜单来显示菜单项。'
- en: 'Now we can make some changes in `ConversationsActivity.cs` to display the menu
    item as follows:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以在`ConversationsActivity.cs`中做一些更改，以显示菜单项，如下所示：
- en: '[PRE10]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This code will take our layout and apply it to the menu at the top in our activity''s
    action bar. Next, we can add some code to be run when the menu item is selected
    as follows:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码将把我们的布局应用到活动动作栏顶部的菜单中。接下来，我们可以添加一些代码，以便在菜单项被选中时运行：
- en: '[PRE11]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now let's implement the next activity. Let's begin by making a copy of `Conversations.axml`
    found in the `layout` folder in the `Resources` directory and rename it `Friends.axml`.
    The only change we'll make in this file will be to rename the ListView's ID to
    `@+id/friendsList`.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们实现下一个活动。让我们首先复制`Resources`目录中`layout`文件夹中的`Conversations.axml`，并将其重命名为`Friends.axml`。我们在这个文件中要做的唯一更改是将ListView的ID重命名为`@+id/friendsList`。
- en: 'Next, perform the following steps to create a layout that can be used for the
    list items in `ListView`:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，执行以下步骤以创建一个可用于`ListView`中列表项的布局：
- en: Make a new Android layout called `FriendListItem.axml`.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的Android布局`FriendListItem.axml`。
- en: Open the layout and switch to the **Source** tab found at the bottom of the
    screen.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开布局并切换到屏幕底部的**源**标签。
- en: Change the root `LinearLayout` XML element to a `RelativeLayout` element.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将根`LinearLayout` XML元素更改为`RelativeLayout`元素。
- en: Switch back to the **Content** tab found at the bottom of the screen.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换回屏幕底部的**内容**标签。
- en: Drag a **Text (Large)** control from the **Toolbox** pane onto the layout and
    set its **Id** to `@+id/friendName`.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**工具箱**面板拖动一个**文本（大号）**控件到布局中，并将其**Id**设置为`@+id/friendName`。
- en: Drag an **ImageView** control from the **Toolbox** pane onto the layout; you
    can either let its **Id** be its default value or blank it out.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**工具箱**面板拖动一个**ImageView**控件到布局中；你可以让它保留其默认值或留空。
- en: Change the image view's image to `@android:drawable/ic_menu_add`. This is the
    same plus icon we used earlier in the chapter. You can select it from the **Resources**
    dialog under the **Framework Resources** tab.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将图像视图的图像更改为 `@android:drawable/ic_menu_add`。这是我们之前在章节中使用的相同加号图标。您可以从 **Framework
    Resources** 选项卡下的 **Resources** 对话框中选择它。
- en: Set the **Width** and **Height** of both the controls to `wrap_content`. This
    is found under the **Layout** tab under the **ViewGroup** section.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将两个控件的高度和宽度都设置为 `wrap_content`。这可以在 **ViewGroup** 部分的 **Layout** 选项卡下找到。
- en: Next, check the value for **Align Parent Right** on just the image view.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，检查图像视图上的 **Align Parent Right** 的值。
- en: Finally, set the **Margins** of both the controls to `3dp` in the **Layout**
    tab of the **Properties** box.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在 **Properties** 窗口的 **Layout** 选项卡中，将两个控件的外边距设置为 `3dp`。
- en: 'Using the Xamarin designer can be very productive, but some developers prefer
    a higher level of control. You might consider writing the XML code yourself as
    an alternative, which is fairly straightforward, as shown in the following code:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Xamarin 设计器可以非常高效，但一些开发者更喜欢更高层次的控制。你可能考虑自己编写 XML 代码作为替代方案，这相当直接，如下面的代码所示：
- en: '[PRE12]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Since we now have all the layouts we need for the new screen, let''s create
    an Android Activity in the `Activities` folder named `FriendsActivity.cs`. Let''s
    create the basic definition of the activity as follows, just like we did before:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们现在已经有了新屏幕所需的所有布局，让我们在 `Activities` 文件夹中创建一个名为 `FriendsActivity.cs` 的 Android
    Activity。让我们像之前一样创建活动的基本定义，如下所示：
- en: '[PRE13]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, let''s implement a nested `Adapter` class to set up the list view items
    as follows:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们实现一个嵌套的 `Adapter` 类来设置列表视图项，如下所示：
- en: '[PRE14]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: There is really no difference in this adapter and the previous one we implemented
    for the conversations screen. We only have to set the friend's name, and we use
    the `User` object instead of the `Conversation` object.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个适配器和之前我们为对话屏幕实现的适配器之间，实际上并没有太大的区别。我们只需要设置朋友的名字，并使用 `User` 对象而不是 `Conversation`
    对象。
- en: 'To finish setting up the adapter, we can update the body of the `FriendsActivity`
    class as follows:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成设置适配器，我们可以更新 `FriendsActivity` 类的主体如下：
- en: '[PRE15]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Last but not least, we can update `OnOptionsItemSelected` in the `ConversationsActivity`
    class as follows:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，我们可以在 `ConversationsActivity` 类中更新 `OnOptionsItemSelected` 如下：
- en: '[PRE16]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'So, if we compile and run the application, we can navigate to a fully implemented
    friends list screen, as shown in the following screenshot:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果我们编译并运行应用程序，我们可以导航到一个完全实现的联系人列表屏幕，如下面的截图所示：
- en: '![Implementing the friends list](img/00051.jpeg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![实现朋友列表](img/00051.jpeg)'
- en: Composing messages
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 消息编写
- en: The next screen is a bit more complicated. We will need to create a `ListView`
    that uses multiple layout files for each row, depending on the type of the row.
    We'll also need to perform some layout tricks to place a view below the `ListView`
    and set up the `ListView` to autoscroll.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个屏幕稍微复杂一些。我们需要创建一个 `ListView`，它根据每行的类型使用多个布局文件。我们还需要进行一些布局技巧，以便在 `ListView`
    下方放置一个视图并设置 `ListView` 以自动滚动。
- en: 'For the next screen, let''s begin by creating a new layout named `Messages.axml`
    in the `layout` folder of the `Resources` directory and then perform the following
    steps:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 对于下一个屏幕，让我们首先在 `Resources` 目录的 `layout` 文件夹中创建一个新的布局文件名为 `Messages.axml`，然后执行以下步骤：
- en: Drag a new **ListView** onto the layout. Set its **Id** to `@+id/messageList`.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将一个新的 **ListView** 拖动到布局中。将其 **Id** 设置为 `@+id/messageList`。
- en: Check the box for **Stack From Bottom**, and set **Transcript Mode** to `alwaysScroll`.
    This will set it up in order to display items from the bottom up.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 **Stack From Bottom** 的复选框，并将 **Transcript Mode** 设置为 `alwaysScroll`。这将按从下到上的顺序显示项目。
- en: Set the **Weight** value to `1` for the **ListView** in the **Layout** tab under
    the **LinearLayout** section.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **LinearLayout** 部分的 **Layout** 选项卡下，将 **ListView** 的 **Weight** 值设置为 `1`。
- en: Drag a new **RelativeLayout** onto the layout. Let its **Id** be the default
    value, or remove it.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将一个新的 **RelativeLayout** 拖动到布局中。让其 **Id** 使用默认值，或者将其移除。
- en: Drag a new **Button** inside **RelativeLayout**. Set its **Id** to `@+id/sendButton`.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将一个新的 **Button** 拖动到 **RelativeLayout** 内部。将其 **Id** 设置为 `@+id/sendButton`。
- en: Check the box for **Align Parent Right** in the **Layout** tab.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Layout** 选项卡中打开 **Align Parent Right** 的复选框。
- en: Drag a new **Plain Text** found in the **Text Field** section inside **RelativeLayout**
    to the left of the button. Set its **Id** to `@+id/messageText`.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 **RelativeLayout** 中 **Text Field** 部分的 **Plain Text** 拖动到按钮的左侧。将其 **Id**
    设置为 `@+id/messageText`。
- en: In the **Layout** tab, set **To Left Of** to `@+id/sendButton`, and set its
    **Width** to `match_parent`.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Layout** 选项卡中，将 **To Left Of** 设置为 `@+id/sendButton`，并将其 **Width** 设置为 `match_parent`。
- en: Check the box for **Center in Parent** to fix the vertical centering.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 **Center in Parent** 复选框以固定垂直居中。
- en: 'When completed, the XML file will be as follows:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，XML 文件将如下所示：
- en: '[PRE17]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Next, perform the following steps to make two more Android layouts:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，执行以下步骤以创建另外两个 Android 布局：
- en: Create a new layout named `MyMessageListItem.axml` in the `layout` folder of
    the `Resources` directory.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Resources` 目录的 `layout` 文件夹中创建一个名为 `MyMessageListItem.axml` 的新布局。
- en: Open the layout and switch to the **Source** tab. Change the root XML element
    to a `RelativeLayout` element.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开布局并切换到 **Source** 选项卡。将根 XML 元素更改为 `RelativeLayout` 元素。
- en: Switch back to the **Content** tab, and drag two **TextView** controls onto
    the layout.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换回 **Content** 选项卡，并将两个 **TextView** 控件拖放到布局中。
- en: In the **Id** field, enter `@+id/myMessageText` and `@+id/myMessageDate` respectively.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Id** 字段中，分别输入 `@+id/myMessageText` 和 `@+id/myMessageDate`。
- en: For both the views, set **Margin** to `3dp`, and **Width** and **Height** to
    `wrap_content`.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于这两个视图，设置 **Margin** 为 `3dp`，以及 **Width** 和 **Height** 为 `wrap_content`。
- en: For the first TextView, set its **Color** to `@android:color/holo_blue_bright`
    under the **Style** tab.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于第一个 TextView，在 **Style** 选项卡下将其 **Color** 设置为 `@android:color/holo_blue_bright`。
- en: For the second TextView, check the **Align Parent Right** checkbox under the
    **Layout** tab.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于第二个 TextView，在 **Layout** 选项卡下检查 **Align Parent Right** 复选框。
- en: Create a new layout named `TheirMessageListItem.axml` and repeat the process.
    Select a different color for the first TextView in the new layout.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `TheirMessageListItem.axml` 的新布局，并重复此过程。为新布局中的第一个 TextView 选择不同的颜色。
- en: 'Finally, we''ll need to create a new activity for the screen. Create a new
    Android Activity named `MessagesActivity.cs` in the `Activities` directory. Let''s
    begin with the standard code to set up an activity as follows:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要为屏幕创建一个新的活动。在 `Activities` 目录中创建一个名为 `MessagesActivity.cs` 的新 Android
    Activity。让我们从设置活动的标准代码开始，如下所示：
- en: '[PRE18]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Next, let''s implement a more complicated adapter than what we implemented
    earlier as follows:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们实现一个比之前实现的更复杂的适配器，如下所示：
- en: '[PRE19]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This includes everything except our implementation of `GetView`, which we'll
    get to shortly. Here, the first changes are some constants for `MyMessageType`
    and `TheirMessageType`. We then implemented `ViewTypeCount` and `GetItemViewType`.
    This is Android's mechanism for using two different layouts for list items in
    a list view. We use one type of layout for the user's messages and a different
    one for the other user in the conversation.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 这包括除了我们即将实现的 `GetView` 之外的所有内容。在这里，首先是一些 `MyMessageType` 和 `TheirMessageType`
    的常量。然后我们实现了 `ViewTypeCount` 和 `GetItemViewType`。这是 Android 用于在列表视图中使用两个不同布局的机制。我们为用户的消息使用一种类型的布局，为对话中的另一个用户使用不同的布局。
- en: 'Next, let''s implement `GetView` as follows:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们按照以下方式实现 `GetView`：
- en: '[PRE20]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Let''s break down our implementation through the following steps:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过以下步骤分解我们的实现：
- en: We first pull out the `message` object for the position of the row.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先提取了行位置的 `message` 对象。
- en: Next, we grab the view type that determines whether it is the current user's
    message or the other user in the conversation.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们获取视图类型，以确定它是当前用户的消息还是对话中的另一个用户。
- en: If `convertView` is `null`, we inflate the appropriate layout based on the type.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果 `convertView` 为 `null`，则根据类型填充适当的布局。
- en: Next, we pull the two text views, `messageText` and `dateText`, out of the `convertView`.
    We have to use the type value to make sure that we use the correct resource IDs.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们从 `convertView` 中提取两个文本视图，`messageText` 和 `dateText`。我们必须使用类型值来确保我们使用正确的资源
    ID。
- en: We set the appropriate text on both the text views using the `message` object.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用 `message` 对象在两个文本视图中设置适当的文本。
- en: We return `convertView`.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们返回 `convertView`。
- en: 'Now let''s finish `MessagesActivity` by setting up the rest of the adapter.
    First, let''s implement some member variables and the `OnCreate` method as follows:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过设置适配器的其余部分来完成 `MessagesActivity`。首先，让我们实现一些成员变量和 `OnCreate` 方法，如下所示：
- en: '[PRE21]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: So far this activity is fairly standard compared to our previous activities
    in this chapter. We also had to wire up the `Click` event of `sendButton` in `OnCreate`
    so that it sends the message and refreshes the list. We also used a trick to scroll
    the list view to the end by setting its selection to the last item.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 与本章中我们之前的活动相比，到目前为止这个活动相当标准。我们还在 `OnCreate` 中连接了 `sendButton` 的 `Click` 事件，以便发送消息并刷新列表。我们还使用了一个技巧，通过将选择设置为最后一个项目来滚动列表视图。
- en: 'Next, we''ll need to implement `OnResume` to load the messages, invalidate
    the adapter, and then scroll the list view to the end as follows:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要实现`OnResume`来加载消息，使适配器失效，然后将列表视图滚动到末尾，如下所示：
- en: '[PRE22]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'So finally, if you compile and run the app, you will be able to navigate to
    the messages screen, and add new messages to the list, as shown in the following
    screenshot:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 所以最终，如果你编译并运行这个应用，你将能够导航到消息屏幕，并向列表中添加新的消息，如下面的截图所示：
- en: '![Composing messages](img/00052.jpeg)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![撰写消息](img/00052.jpeg)'
- en: Summary
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we started out by going over the basic settings in the Android
    Manifest file. Next, we implemented a custom `Application` class to set up our
    `ServiceContainer`. We then went over the different types of Android layouts and
    implemented a login screen using native Android views. We implemented the friends
    list screen, and learned about the basics of `ListView` and adapters. Finally,
    we implemented the messages screen, and used the more advanced functionality available
    in list view adapters and layouts.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们首先回顾了AndroidManifest文件中的基本设置。接下来，我们实现了一个自定义的`Application`类来设置我们的`ServiceContainer`。然后，我们介绍了Android的不同布局类型，并使用原生Android视图实现了登录屏幕。我们实现了好友列表屏幕，并学习了`ListView`和适配器的基础知识。最后，我们实现了消息屏幕，并使用了列表视图适配器和布局中更高级的功能。
- en: After completing this chapter, you will have a partially functional Android
    version of XamChat. You will have gained a deeper understanding of the Android
    SDK and tools. You should be confident in developing your own Android applications
    using Xamarin. Take it upon yourself to implement the remaining screens that we
    did not cover in the chapter. If you get lost, feel free to review the full sample
    application included with this book. In the next chapter, we'll cover how to deploy
    to mobile devices and why is it very important to test your applications on real
    devices.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本章学习后，你将拥有一个部分功能的Android版XamChat。你将更深入地理解Android SDK和工具。你应该自信地使用Xamarin开发自己的Android应用。请自行实现本章未涵盖的剩余屏幕。如果你感到困惑，请随时查阅本书附带的全样本应用。在下一章中，我们将介绍如何部署到移动设备，以及为什么在实际设备上测试你的应用非常重要。
