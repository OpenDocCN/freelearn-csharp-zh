- en: '3'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Converting a Xamarin.Forms App into .NET MAUI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we dive too far into .NET MAUI, we will look back at an existing Xamarin.Forms
    app and convert it into .NET MAUI. This chapter will guide you through the steps
    to convert an existing Xamarin.Forms app running on Mono into a .NET MAUI app
    running on .NET 7\. We will discuss two different methods for converting your
    Xamarin.Forms application into .NET MAUI. The first method will use a new .NET
    MAUI project and move our old Xamarin.Forms code into the new project. The second
    method will use the **.NET Upgrade Assistant** tool to do some of the upgrades
    for us.
  prefs: []
  type: TYPE_NORMAL
- en: If you are new to .NET MAUI and are not coming from Xamarin.Forms app development,
    feel free to skip this chapter and go straight to the next project.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Moving code to a new .NET MAUI project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An overview of upgrading a Xamarin.Forms app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing and running .NET Upgrade Assistant
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To complete this project, you need to have Visual Studio installed on your **Macintosh**
    (**Mac**) or PC, as well as the .NET Mobile components. Refer to *Chapter 1*,
    *Introduction to .NET MAUI*, for more details on how to set up your environment.
    There are additional components that will be installed in this chapter, so you
    will need an internet connection to download and install .NET Upgrade Assistant.
    This chapter provides screenshots and instructions for Visual Studio on Windows.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will both be a classic **File** | **New** | **Project** chapter
    and use an existing app, guiding you step by step through the process of migrating
    an app from Xamarin.Forms to .NET MAUI. For the second app, you will need to download
    the source from this book’s GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the full source for the code in this chapter at [https://github.com/PacktPublishing/MAUI-Projects-3rd-Edition](https://github.com/PacktPublishing/MAUI-Projects-3rd-Edition)
    under the `Chapter03` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Project overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter is not meant to be an exhaustive tome of all the things you need
    to be aware of when converting your Xamarin.Forms app into .NET MAUI. Rather,
    it is an overview of what you need to consider when migrating your app, along
    with two walk-throughs of methods to accomplish that task. There are too many
    variations in application styles, versions, frameworks, custom controls, and so
    on for this one chapter to cover every scenario. That could take an entire book
    and would most likely be outdated by the time it was published. So, in this chapter,
    we are going to focus on a simple migration method that has the benefit of using
    the .NET MAUI Single Project feature and .NET Migration Assistant, which will
    automate much of the manual stuff and is constantly being updated.
  prefs: []
  type: TYPE_NORMAL
- en: The first part of this chapter will use a new Xamarin.Forms app created from
    the Shell template. The second part of this chapter will use .NET Upgrade Assistant
    to upgrade the open source app, BuildChat, which is available on GitHub at [https://github.com/mindofai/Build2019Chat](https://github.com/mindofai/Build2019Chat).
  prefs: []
  type: TYPE_NORMAL
- en: Every development book needs to have a chat app; this book is no different.
    For .NET Migration Assistant, we will use an existing chat app that was built
    using Xamarin.Forms. The app can be debugged and tested locally, so there is no
    need to set up and configure any cloud services.
  prefs: []
  type: TYPE_NORMAL
- en: The build time for this project is about one hour.
  prefs: []
  type: TYPE_NORMAL
- en: Migrating into a blank .NET MAUI template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This method of moving your existing app code into a new .NET MAUI app is used
    mainly for smaller, simpler apps that do not have a lot of external dependencies,
    such as NuGet, or native libraries. The largest benefit of this method is that
    your migrated app will be in a single project, targeting all the .NET MAUI-supported
    platforms. If your original app only targeted Android and iOS, using this method
    could get you Mac Catalyst and Windows targets for free. Using .NET Upgrade Assistant
    will not add any platforms that you didn’t already target.
  prefs: []
  type: TYPE_NORMAL
- en: To illustrate these steps, we will create a new project, just like we did in
    *Chapter 2*. This time, however, we will have to create a Xamarin.Forms project
    first.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new Xamarin.Forms app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps will guide you through creating a new Xamarin.Forms project:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open Visual Studio 2022 and select **Create a** **new project**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.1 – Visual Studio 2022](img/B19214_03_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.1 – Visual Studio 2022
  prefs: []
  type: TYPE_NORMAL
- en: This will open the **Create a new** **project** wizard.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the search field, type `Xamarin.Forms` and select the **Mobile App (Xamarin.Forms)**
    item from the list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.2 – New Xamarin.Forms project](img/B19214_03_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.2 – New Xamarin.Forms project
  prefs: []
  type: TYPE_NORMAL
- en: 'Complete the next page of the wizard by naming your project `MauiMigration`,
    and then click **Next**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.3 – Configuring the Xamarin.Forms project](img/B19214_03_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.3 – Configuring the Xamarin.Forms project
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the **Flyout** template and ensure that all three Xamarin.Forms platforms
    are checked:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.4 – Selecting the Xamarin.Forms template and platforms](img/B19214_03_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.4 – Selecting the Xamarin.Forms template and platforms
  prefs: []
  type: TYPE_NORMAL
- en: You may receive a few messages about out-of-support components. These are expected
    if this is the first time you are creating a Xamarin.Forms app and can be safely
    ignored.
  prefs: []
  type: TYPE_NORMAL
- en: Finalize the setup by clicking **Create** and wait for Visual Studio to create
    the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Before we begin to migrate this app, it’s a good idea to make sure it works
    properly.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Run the app and test out all the buttons, flyout options, and menus.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the **About** page, there is a **Learn more** button that will open a browser
    and navigate you to the Xamarin.Forms quickstart web page:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: "![Figure 3.5 – The Learn \uFEFFmore button](img/B19214_03_5.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 3.5 – The Learn more button
  prefs: []
  type: TYPE_NORMAL
- en: 'The flyout menu has three options: **About**, **Browse**, and **Logout**. Ensure
    you click on each one and explore all their functionality:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.6 – Flyout menu options](img/B19214_03_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.6 – Flyout menu options
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have explored this Xamarin.Forms app, let’s move on to creating
    the new .NET MAUI project, which will act as our new app.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new .NET MAUI app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will add a new project to the current solution to make things easier. To
    create a new .NET MAUI project, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In Visual Studio, right-click the `MauiMigration` solution item in **Solution
    Explorer** and select **File** | **Add** | **New Project**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.7 – Adding a new project to solution](img/B19214_03_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.7 – Adding a new project to solution
  prefs: []
  type: TYPE_NORMAL
- en: 'In the **Add a new project** dialog, select **.NET MAUI App** and click **Next**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.8 – Adding a new .NET MAUI project](img/B19214_03_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.8 – Adding a new .NET MAUI project
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `MyMauiApp` and click **Next**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.9 – Configuring the .NET MAUI project](img/B19214_03_9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.9 – Configuring the .NET MAUI project
  prefs: []
  type: TYPE_NORMAL
- en: In the **Additional Information** dialog, ensure that the selected framework
    is **.NET 7.0 (Standard Term Support)** and click **Create**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have the shell of the .NET MAUI app, we can start moving the important
    parts of the Xamarin.Forms app over to the .NET MAUI project.
  prefs: []
  type: TYPE_NORMAL
- en: Migrating the MauiMigration app to MyMauiApp
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Migrating a Xamarin.Forms app into a blank new .NET MAUI template will involve
    the following high-level steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Copy your app files into the new template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the Xamarin.Forms namespace to its .NET MAUI equivalent.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Update the app startup so that it uses your views.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The next few sections will explain how to accomplish these steps.
  prefs: []
  type: TYPE_NORMAL
- en: Copying files to a new project
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To begin, let’s copy the XAML and C# files and folders from the Xamarin.Forms
    project to the .NET MAUI project. In the `MauiMigration` project, select the `Models`,
    `Services`, `ViewModels`, and `Views` folders. We will copy these files instead
    of moving them so that we don’t destroy the original project. Right-click any
    of the selected folders and select `MauiApp` project and click **Paste**.
  prefs: []
  type: TYPE_NORMAL
- en: A few images are also needed; we will copy them from the `MauiMigration.UWP`
    project. Under the `MauiMigration.UWP` project, you will find three image files
    called `icon_about.png`, `icon_feed.png`, and `xamarin_logo.png`. Select all three
    files and copy them just like you did for the previous files. Paste the files
    into the `MyMauiApp/Resources/Images` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio may make some changes to your project file when you copy/paste
    files, such as adding new item groups that remove and add the same file to the
    project. You can safely remove these changes as the single project system knows
    how to handle `XAML` and `.png` files. If you get compilation errors related to
    missing images or errors in the `XAML` files, check `MyMAuiApp.csproj` for any
    additional `ItemGroups` that reference either the `.png` files or `XAML` files
    and remove them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows an example of the `MyMauiApp.csproj` file after
    copying the images from `MauiMigration.UWP`. *Figure 3**.10* shows the changes
    that Visual Studio added; these can be removed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.10 – Visual Studio added unnecessary items](img/B19214_03_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.10 – Visual Studio added unnecessary items
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will need to update the `XAML` files so that they reference .NET MAUI
    controls.
  prefs: []
  type: TYPE_NORMAL
- en: Updating namespaces
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Currently, the `XAML` files are still using the Xamarin.Forms namespace. To
    update these files, we need to change the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We must amend this like so:'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use the **Find and Replace** feature in Visual Studio to make these
    changes or manually edit each file. To use the **Find and Replace** dialog, follow
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In `MyMauiApp` project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the Visual Studio menu select **Edit** | **Find and Replace** | **Replace
    in Files** (or *Ctrl* + *Shift* + *H*) to open the **Find and** **Replace** dialog:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 3.11 – The Find and Replace dialog\uFEFF](img/B19214_03_11.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 3.11 – The Find and Replace dialog
  prefs: []
  type: TYPE_NORMAL
- en: In the **Look in** field, select **Current project**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Replace All** button; there should only be five places to make that
    change.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once completed, there are a few other changes that need to be made.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `NewItemPage.xaml` file, in the `Views` folder of the `MyMauiApp` project,
    remove the following highlighted text:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: ^using Xamarin\.[Forms,Essentials].*;
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: <!--
  prefs: []
  type: TYPE_NORMAL
- en: When the Flyout is visible this defines the content to display in the flyout.
  prefs: []
  type: TYPE_NORMAL
- en: FlyoutDisplayOptions="AsMultipleItems" will create a separate flyout item for
    each child element           https://docs.microsoft.com/dotnet/api/xamarin.forms.shellgroupitem.flyoutdisplayoptions?view=xamarin-forms
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: <FlyoutItem Title="About" Icon="icon_about.png">
  prefs: []
  type: TYPE_NORMAL
- en: <ShellContent Route="AboutPage" ContentTemplate="{DataTemplate local:AboutPage}"
    />
  prefs: []
  type: TYPE_NORMAL
- en: </FlyoutItem>
  prefs: []
  type: TYPE_NORMAL
- en: <FlyoutItem Title="Browse" Icon="icon_feed.png">
  prefs: []
  type: TYPE_NORMAL
- en: <ShellContent Route="ItemsPage" ContentTemplate="{DataTemplate local:ItemsPage}"
    />
  prefs: []
  type: TYPE_NORMAL
- en: </FlyoutItem>
  prefs: []
  type: TYPE_NORMAL
- en: <!-- When the Flyout is visible this will be a menu item you can tie a click
    behavior to  -->
  prefs: []
  type: TYPE_NORMAL
- en: <MenuItem Text="Logout" StyleClass="MenuItemLayoutStyle" Clicked="OnMenuItemClicked">
  prefs: []
  type: TYPE_NORMAL
- en: </MenuItem>
  prefs: []
  type: TYPE_NORMAL
- en: <!--
  prefs: []
  type: TYPE_NORMAL
- en: TabBar lets you define content that won't show up in a flyout menu. When this
    content is active
  prefs: []
  type: TYPE_NORMAL
- en: the flyout menu won't be available. This is useful for creating areas of the
    application where
  prefs: []
  type: TYPE_NORMAL
- en: you don't want users to be able to navigate away from. If you would like to
    navigate to this
  prefs: []
  type: TYPE_NORMAL
- en: content you can do so by calling
  prefs: []
  type: TYPE_NORMAL
- en: await Shell.Current.GoToAsync("//LoginPage");
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: <TabBar>
  prefs: []
  type: TYPE_NORMAL
- en: <ShellContent Route="LoginPage" ContentTemplate="{DataTemplate local:LoginPage}"
    />
  prefs: []
  type: TYPE_NORMAL
- en: </TabBar>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: <ShellContent
  prefs: []
  type: TYPE_NORMAL
- en: Title="Home"
  prefs: []
  type: TYPE_NORMAL
- en: ContentTemplate="{DataTemplate local:MainPage}"
  prefs: []
  type: TYPE_NORMAL
- en: Route="MainPage" />
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'MauiProgram.cs file and make the changes highlighted in the following code
    block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: At this point, you should be able to compile and run the converted project.
    Make sure you set `MyMauiApp` as the startup project before running. Play around
    with the app and make sure it is all working before moving on to the next section
    on manually migrating your apps to .NET MAUI.
  prefs: []
  type: TYPE_NORMAL
- en: Manual migration overview
  prefs: []
  type: TYPE_NORMAL
- en: In the previous section, we converted a simple Xamarin.Forms app into .NET MAUI
    using the Single Project system. This project did not use any advanced features
    of Xamarin.Forms, such as external NuGets, custom controls, or any commercial
    controls. These are additional items that you will have to consider when migrating
    your apps from Xamarin.Forms to .NET MAUI.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we are going to discuss the basic flow that you should go through
    to migrate your Xamarin.Forms app to .NET MAUI. This is by no means an all-inclusive
    list; the .NET MAUI team is updating a wiki page that details all their knowledge
    in one location.
  prefs: []
  type: TYPE_NORMAL
- en: Official migration guide
  prefs: []
  type: TYPE_NORMAL
- en: 'The guidelines for migrating your Xamarin.Forms apps to .NET MAUI are continually
    evolving since the release of .NET MAUI, based on usage and feedback. To review
    the latest guidelines, please visit the following URL in your favorite browser:
    [https://learn.microsoft.com/en-us/dotnet/maui/get-started/migrate?view=net-maui-7.0](https://learn.microsoft.com/en-us/dotnet/maui/get-started/migrate?view=net-maui-7.0).'
  prefs: []
  type: TYPE_NORMAL
- en: 'When migrating your apps from Xamarin.Forms to .NET MAUI, you will need to
    follow the overall steps outlined here:'
  prefs: []
  type: TYPE_NORMAL
- en: Convert the Xamarin.Forms projects from .NET Framework into .NET SDK style.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Update the code from Xamarin.Forms to .NET MAUI.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Update any incompatible dependencies with .NET 6+ versions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Address any breaking API changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the converted app and verify its functionality.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: .NET Upgrade Assistant is a tool that will attempt to perform the first four
    steps for you. However, before we dive into using .NET Upgrade Assistant, we are
    going to look at what each of these steps entails so that we have a firm understanding
    of how to migrate our app if .NET Upgrade Assistant is unable to operate on an
    app project.
  prefs: []
  type: TYPE_NORMAL
- en: Converting the Xamarin.Forms projects from .NET Framework into .NET SDK style
  prefs: []
  type: TYPE_NORMAL
- en: Some Xamarin.Forms projects are based on the .NET Framework project template.
    It is a verbose project format that has been updated for .NET projects. The new
    format, typically referred to as the SDK style, is a much more concise format
    with better defaults. Xamarin.Forms projects created with Visual Studio 16.5 or
    later use the newer SDK format.
  prefs: []
  type: TYPE_NORMAL
- en: 'To convert an old format project file, such as the one we will be using with
    .NET Upgrade Assistant, in the *Installing and running .NET Upgrade Assistant*
    section later in this chapter, you would need to change the `<Project />` element
    to the new SDK style, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Find a line like this in your project file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '2.  Replace it with the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Remember that you will have to make this change for all your Xamarin.Forms projects,
    platform-specific projects, and any shared library projects.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at the specific changes that you might have to make for a typical
    Xamarin.Forms project that targets both Android and iOS.
  prefs: []
  type: TYPE_NORMAL
- en: 'To convert the shared library project of a Xamarin.Forms app into a .NET MAUI
    project, we need to replace the contents of the `csproj` file with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The important bits are highlighted. `<UseMaui>True</UseMaui>` will enable the
    project system to automatically add the correct references to the project for
    .NET MAUI libraries. The `<TargetFrameworks>` elements are updated for the correct
    **Target Framework Monikers** (**TFMs**) for .NET 6 or 7.
  prefs: []
  type: TYPE_NORMAL
- en: .NET MAUI also requires an additional `<SupportedOSPlatformVersion>` property,
    which is set conditionally based on `TargetPlatformIdentifier`.
  prefs: []
  type: TYPE_NORMAL
- en: That is a significant amount of reduction from the .NET Framework `csproj` files.
    In addition to the property reduction, you can remove most of the `<ItemGroup>…</ItemGroup>`
    entries since all source files are now included by default. The groups to leave
    are the groups containing `<ProjectReferences />` entries.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve converted the shared project, let’s review the changes needed
    for an Android project.
  prefs: []
  type: TYPE_NORMAL
- en: 'As with all .NET Framework projects, we will need to change the `<Project …>`
    element to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, remove all the `<PropertyGroup>…</PropertyGroup>` elements since they
    are default values, and replace them with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Again, in the Android project, we set the `<UseMaui>` and `<``TargetFramework>`
    properties.
  prefs: []
  type: TYPE_NORMAL
- en: To finish migrating this project file, remove all the `<ItemGroup>` elements
    and their contents, except for the one group that contains the `<AndroidResource>`
    elements. Finally, remove the `<Import>` element at the bottom of the project
    file; it is no longer needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next project type to look at is an iOS project. The changes here will be
    very similar to the changes in an Android project but with an iOS twist. Xamarin.Forms
    iOS projects are also a .NET Framework style project, so we will need to change
    the `<Project …>` element to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we will need to remove all the existing `<PropertyGroup>` elements and
    add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Again, you will notice the `<UseMaui>` property being set, and that the `<TargetFramwork>`
    value is `net7.0-ios`.
  prefs: []
  type: TYPE_NORMAL
- en: To finish converting an iOS project, remove the `<ItemGroup>` and `<Import>`
    elements except for the one containing the `<ProjectReference>` items; those are
    still needed.
  prefs: []
  type: TYPE_NORMAL
- en: Updating code from Xamarin.Forms to .NET MAUI
  prefs: []
  type: TYPE_NORMAL
- en: Updating the code from Xamarin.Forms to .NET MAUI consists of several steps.
    First, we need to add some new code that is required to initialize .NET MAUI.
    Refer to the *Examining the files section* of *Chapter 2* for more details on
    the files that are needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first change you will need is in the shared project. Add a new class file
    called `MauiProgram.cs` with the following contents, minimally:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: You may have to add additional code to this file so that it can handle additional
    needs for your application, such as registering types for dependency injection
    or registering additional library features, such as logging.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Platforms/Android` folder, add a new class file named `MainApplication.cs`
    and update the class so that it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'We must also make a few adjustments to the `MainActivity` class. Open the `MainActivity.cs`
    file and make the changes highlighted in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: <uses-sdk android:minSdkVersion="21" android:targetSdkVersion="33" />
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'public partial class AppDelegate : MauiUIApplicationDelegate'
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: protected override MauiApp CreateMauiApp() => MauiProgram.
  prefs: []
  type: TYPE_NORMAL
- en: CreateMauiApp();
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: <ItemGroup>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <PackageReference Include="Microsoft.AspNetCore.SignalR.Client">
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <Version>7.0.9</Version>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </PackageReference>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <PackageReference Include="Xamarin.Forms" Version="5.0.0.2578" />
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <PackageReference Include="Xamarin.Android.Support.Design" Version="28.0.0.3"
    />
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <PackageReference Include="Xamarin.Android.Support.v7.AppCompat" Version="28.0.0.3"
    />
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <PackageReference Include="Xamarin.Android.Support.v4" Version="28.0.0.3" />
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <PackageReference Include="Xamarin.Android.Support.v7.CardView" Version="28.0.0.3"
    />
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <PackageReference Include="Xamarin.AndroidX.MediaRouter" Version="1.2.0" />
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <PackageReference Include="Xamarin.AndroidX.Palette" Version="1.0.0.5" />
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </ItemGroup>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <ItemGroup>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <PackageReference Include="Microsoft.AspNetCore.SignalR.Client" Version="7.0.9"
    />
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <PackageReference Include="Microsoft.Extensions.Logging.Abstractions" Version="7.0.1"
    />
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </ItemGroup>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <ItemGroup>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <PackageReference Include="Xamarin.AndroidX.MediaRouter" Version="1.2.0" />
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <PackageReference Include="Xamarin.AndroidX.Palette" Version="1.0.0.5" />
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <PackageReference Include="Microsoft.AspNetCore.SignalR.Client" Version="7.0.9"
    />
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <PackageReference Include="Microsoft.Extensions.Logging.Abstractions" Version="7.0.1"
    />
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </ItemGroup>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <ItemGroup>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <PackageReference Include="Microsoft.AspNetCore.SignalR.Client" Version="7.0.9"
    />
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <PackageReference Include="Microsoft.Extensions.Logging.Abstractions" Version="7.0.1"
    />
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </ItemGroup>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: using Microsoft.Maui;
  prefs: []
  type: TYPE_NORMAL
- en: namespace BuildChat.Droid
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '[Activity(Label = "BuildChat", Icon = "@mipmap/icon", Theme = "@style/Theme.MaterialComponents",
    MainLauncher = true, ConfigurationChanges = ConfigChanges.ScreenSize | ConfigChanges.Orientation)]'
  prefs: []
  type: TYPE_NORMAL
- en: 'public class MainActivity : MauiAppCompatActivity'
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: protected override void OnCreate(Bundle savedInstanceState)
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: base.OnCreate(savedInstanceState);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: using Foundation;
  prefs: []
  type: TYPE_NORMAL
- en: using Microsoft.Maui;
  prefs: []
  type: TYPE_NORMAL
- en: using Microsoft.Maui.Hosting;
  prefs: []
  type: TYPE_NORMAL
- en: namespace BuildChat.iOS
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: // The UIApplicationDelegate for the application. This class is responsible
    for launching the
  prefs: []
  type: TYPE_NORMAL
- en: // User Interface of the application, as well as listening (and optionally responding)
    to
  prefs: []
  type: TYPE_NORMAL
- en: // application events from iOS.
  prefs: []
  type: TYPE_NORMAL
- en: '[Register("AppDelegate")]'
  prefs: []
  type: TYPE_NORMAL
- en: 'public partial class AppDelegate : MauiUIApplicationDelegate'
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: protected override MauiApp CreateMauiApp() => MauiProgram.CreateMauiApp();
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Part 2: Basic Projects'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this part, you will learn about .NET MAUI features such as Shell, CollectionView,
    Image, Button, Label, CarouselView, Grid, Custom Controls, and Gestures. You will
    explore using location services, calling custom web APIs, and designing your XAML
    for different form factors.
  prefs: []
  type: TYPE_NORMAL
- en: 'This part has the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B19214_04.xhtml#_idTextAnchor274), *Building a News App Using
    .NET MAUI Shell*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B19214_05.xhtml#_idTextAnchor399), *Building a Matchmaking App
    with Rich UX Using Animations*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B19214_06.xhtml#_idTextAnchor513), *Building a Photo Gallery
    App Using CollectionView and CarouselView*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B19214_07.xhtml#_idTextAnchor569), *Building a Location Tracking
    App Using GPS and Maps*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B19214_08.xhtml#_idTextAnchor708), *Building a Weather App for
    Multiple Form Factors*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
