- en: 'Chapter 14: Using Popular Extensions'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [*Chapter 13*](B17873_13_ePub.xhtml#_idTextAnchor149), *Working with Extensions
    in Visual Studio*, we learned how to extend utilities and functionalities by installing
    extensions published by the Visual Studio community and third-party vendors. We
    can install these extensions using the extension manager in Visual Studio and
    then restart Visual Studio to see the changes in the user interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will analyze some free and useful extensions to increase
    productivity and improve our experience of using Visual Studio. We will install
    and review the extensions in the following sections:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding HTML Snippet Pack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cleaning up code with CodeMaid
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compiling web libraries with Web Compiler
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identifying white space with Indent Guides
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will start with HTML Snippet Pack, an extension that helps us include some
    additional code snippets in Visual Studio when coding HTML files.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To install the extensions in Visual Studio 2022, you must have previously installed
    Visual Studio 2022 with the web development workload, as shown in [*Chapter 1*](B17873_01_ePub.xhtml#_idTextAnchor013),
    *Getting Started with Visual Studio 2022*. It's also important to have the SPA
    project created in [*Chapter 4*](B17873_04_ePub.xhtml#_idTextAnchor052), *Creating
    Projects and Templates*.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can check out the changes made to the project in this chapter at the following
    link: [https://github.com/PacktPublishing/Hands-On-Visual-Studio-2022/tree/main/Chapter14](https://github.com/PacktPublishing/Hands-On-Visual-Studio-2022/tree/main/Chapter14).'
  prefs: []
  type: TYPE_NORMAL
- en: Adding HTML Snippet Pack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [*Chapter 6*](B17873_06_ePub.xhtml#_idTextAnchor081), *Adding Code Snippets*,
    we reviewed how code snippets can improve our productivity while we are coding.
    We also learned how to create, import, and remove code snippets using the Code
    Snippets Manager.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Visual Studio''s extension marketplace, we can find many extensions that
    add code snippets for different technologies by navigating to [https://marketplace.visualstudio.com/](https://marketplace.visualstudio.com/)
    and typing `snippet` in the search bar (see *Figure 14.1*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.1 – Extensions related to snippets in the Visual Studio Marketplace'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.1_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.1 – Extensions related to snippets in the Visual Studio Marketplace
  prefs: []
  type: TYPE_NORMAL
- en: One of the most popular snippet packs for web developers is **HTML Snippet Pack**.
    With this extension, you can code in HTML faster, creating pieces of code and
    HTML elements after typing some charactes in the editor. Let's install this extension
    and see how we can create HTML elements easily using snippets.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading and installing HTML Snippet Pack
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Navigate in Visual Studio to `HTML Snippet` in the search bar. Then, select
    **HTML Snippet Pack** and click **Download** (see *Figure 14.2*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.2 – HTML Snippet Pack in the Manage Extensions tool'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.02_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.2 – HTML Snippet Pack in the Manage Extensions tool
  prefs: []
  type: TYPE_NORMAL
- en: 'We will receive a notification, which means we need to close and open (restart)
    Visual Studio to complete the installation. After opening Visual Studio again,
    it will ask for confirmation to install the extension. Click on **Modify** (see
    *Figure 14.3*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.3 – Installing HTML Snippet Pack'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.03_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.3 – Installing HTML Snippet Pack
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we will see a progress bar, indicating that the installation is in progress.
    Finally, we will see a successful message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.4 – Installation of HTML Snippet Pack extension completed'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.04_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.4 – Installation of HTML Snippet Pack extension completed
  prefs: []
  type: TYPE_NORMAL
- en: Click **Close** and continue to Visual Studio.
  prefs: []
  type: TYPE_NORMAL
- en: Using HTML Snippet Pack
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need to navigate to an HTML file to use the HTML Snippet Pack extension,
    so let's go to `index.html`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Within this file, we can write the word `article` in the body element (see
    *Figure 14.5*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.5 – Typing article in index.html'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.05_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.5 – Typing article in index.html
  prefs: []
  type: TYPE_NORMAL
- en: 'After writing the word `article`, press *tab* on your keyboard to easily generate
    the HTML element for an article in this part of the code. In *Figure 14.6*, we
    can see the article element generated automatically:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.6 – The article generated using a code snippet'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.06_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.6 – The article generated using a code snippet
  prefs: []
  type: TYPE_NORMAL
- en: Just as we generated the `article` element, we can easily create elements for
    `li`, `ul`, `img`, `input`, and almost all the existing elements in the HTML standard.
  prefs: []
  type: TYPE_NORMAL
- en: You can read more information about HTML Snippet Pack on the official website
    and repository at [https://github.com/madskristensen/HtmlSnippetPack](https://github.com/madskristensen/HtmlSnippetPack).
  prefs: []
  type: TYPE_NORMAL
- en: Let's now review a different extension to analyze our code.
  prefs: []
  type: TYPE_NORMAL
- en: Cleaning up code with CodeMaid
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CodeMaid is an amazing extension that helps us to simplify and clean up code.
    It is free and compatible with C#, C++, F#, VB, PHP, PowerShell, R, JSON, XAML,
    XML, ASP, HTML, CSS, LESS, SCSS, JavaScript, and TypeScript.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can read more information about CodeMaid on the official website: [https://www.codemaid.net/](https://www.codemaid.net/).'
  prefs: []
  type: TYPE_NORMAL
- en: Let's install CodeMaid and see how we can use it.
  prefs: []
  type: TYPE_NORMAL
- en: Installing CodeMaid in Visual Studio 2022
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To install CodeMaid, navigate to `codemaid` in the search bar, and then select
    **CodeMaid VS2022** (see *Figure 14.7*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.7 – Installing CodeMaid from the Manage Extensions tool'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.07_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.7 – Installing CodeMaid from the Manage Extensions tool
  prefs: []
  type: TYPE_NORMAL
- en: 'After searching `codemaid`, click `SPAProject` again. You can click on **Modify**
    and then wait for the installation to complete:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.8 – The extension installer for CodeMaid in Visual Studio 2022'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.08_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.8 – The extension installer for CodeMaid in Visual Studio 2022
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you will see a new option in the **Extensions** menu that contains all
    the functionalities and configurations related to CodeMaid (see *Figure 14.9*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.9 – The new CodeMaid option in the Extensions menu'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.09_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.9 – The new CodeMaid option in the Extensions menu
  prefs: []
  type: TYPE_NORMAL
- en: Using CodeMaid
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this case, there is no active document, and therefore, many options are
    disabled, but we can use the **Cleanup All Code…** option to perform a cleanup
    on the whole project, using the default settings in CodeMaid. We will get a confirmation
    message before starting the process. Click on **Yes** to continue (see *Figure
    14.10*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.10 – Confirmation to clean up the project using CodeMaid'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.10_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.10 – Confirmation to clean up the project using CodeMaid
  prefs: []
  type: TYPE_NORMAL
- en: 'After confirming, CodeMaid will analyze each file at a time, look for white
    spaces and empty lines, and sort lines, among other things. You will see a progress
    bar and the current file being processed (see *Figure 14.11*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.11 – A cleanup in process using CodeMaid'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.11_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.11 – A cleanup in process using CodeMaid
  prefs: []
  type: TYPE_NORMAL
- en: 'After completing the cleanup, all the files will be saved. We can open a file
    to see the changes, but using the Git integration in Visual Studio, we can see
    the differences easily. This works only if you already have the project connected
    with a Git repo. You can go to the `Program.cs` to see the changes. An example
    of the changes is shown in *Figure 14.12*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.12 – A clean up in process using CodeMaid'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.12_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.12 – A clean up in process using CodeMaid
  prefs: []
  type: TYPE_NORMAL
- en: In `Program.cs`, we can see two lines with some spaces in the `if` statement
    that CodeMaid removed.
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: Reducing lines in code means reducing the size of a file. Blank lines and white
    spaces make code difficult to read and increase a project size when published.
  prefs: []
  type: TYPE_NORMAL
- en: 'CodeMaid has some options that we can turn on or turn off, depending on our
    needs. Navigate to **Extensions** | **CodeMaid** | **Options** and select the
    **Remove** section to choose scenarios where CodeMaid can remove code (see *Figure
    14.13*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.13 – User Settings for CodeMaid'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.13_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.13 – User Settings for CodeMaid
  prefs: []
  type: TYPE_NORMAL
- en: CodeMaid also has many options related to removing blank lines and blank spaces.
    By default, all the options are enabled, but you can click on the options that
    you want to disable to set up CodeMaid according to the guidelines in your project.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can read more information about CodeMaid on the official website: [https://www.codemaid.net/](https://www.codemaid.net/).'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you know how CodeMaid works and can use it to clean up your projects,
    let's review the next extension to compile web files in Visual Studio.
  prefs: []
  type: TYPE_NORMAL
- en: Compiling web libraries with Web Compiler
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are using TypeScript, LESS, or Sass in a project, you need to pre-compile
    the code to get the production version of your web project, so the browser can
    read every line of code. Note that the browser can only read CSS, HTML, and JavaScript.
    Using Web Compiler in Visual Studio, you can do this easily and see the precompiled
    code directly.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know what Web Compiler is, let's install it and learn how to take
    advantage of this tool.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Web Compiler
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To install Web Compiler, go to `web compiler` in the search bar (see *Figure
    14.14*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.14 – Searching for Web Compiler in Manage Extensions](img/Figure_14.14_B17873.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.14 – Searching for Web Compiler in Manage Extensions
  prefs: []
  type: TYPE_NORMAL
- en: We can now follow the same steps that we did in the *Adding HTML Snippet Pack*
    section to complete the installation. After closing and then opening Visual Studio,
    you will see that the installation of this new extension is completed. Now, we
    will be able to use it in our `SPAProject`.
  prefs: []
  type: TYPE_NORMAL
- en: Using Web Compiler
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To use Web Compiler, we can navigate and select any JavaScript file in the
    project, and we will see a new option in the menu after right-clicking. For example,
    let''s select`aspnetcore-react.js` (see *Figure 14.15*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.15 – The Web Compiler option in the project to compile a file'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.15_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.15 – The Web Compiler option in the project to compile a file
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the **Web Compiler** | **Compile file** option, we can compile the file
    and generate a new version using **ECMAScript 2009** (**ES5**), which is a JavaScript
    specification that allows us to support old browser versions. See the file generated
    in *Figure 14.16*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.16 – aspnetcore-react.es5.js, generated by Web Compiler'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.16_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.16 – aspnetcore-react.es5.js, generated by Web Compiler
  prefs: []
  type: TYPE_NORMAL
- en: The `aspnetcore-react.es5.js` file contains the same logic as `aspnetcore-react.js`,
    but it uses different syntaxes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code represents the first 20 lines of the `aspnetcore-react.js`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The `aspnetcore-react.js` file contains some logic related to the interaction
    between the `asp.net` application in the backend and the React application. This
    file uses the last features in JavaScript, so Web Compiler needs to compile the
    code to an old version to support the old browser and increase the compatibility
    with other libraries.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code represents the first 20 lines of the `aspnetcore-react.es5.js`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Each file added to Web Compiler will be included in a file called `compilerconfig.json`.
    This file is associated with the compilation process with Visual Studio. This
    means that we can build and publish the project normally, and the files associated
    will be generated automatically.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is an example of the `compilerconfig.json` file after using it in the
    `aspnetcore-react.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Each configuration is a JSON object that contains two properties – `inputFile`
    is the location of the source file to compile, and `outputFile` has the location
    of the file generated by Web Compiler.
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: You can use *Shift* + *Alt* + *Y* to compile all the files included in `compilerconfig.json`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information, you can read the documentation on GitHub: [https://github.com/failwyn/WebCompiler](https://github.com/failwyn/WebCompiler).'
  prefs: []
  type: TYPE_NORMAL
- en: Now you know how to use Web Compiler and how to transform JavaScript files to
    use ES5\. Let's see another extension that extends the functionalities in our
    editor and allows us to see some guides and easily distinguish white and blank
    spaces.
  prefs: []
  type: TYPE_NORMAL
- en: Identifying white spaces with Indent Guides
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [*Chapter 13*](B17873_13_ePub.xhtml#_idTextAnchor149), *Extensions in Visual
    Studio*, we reviewed some extensions in Visual Studio, including Color Preview.
    With these extensions, we learned how the text editor in Visual Studio can be
    extended to improve our experience and provide more tools for some technologies
    and scenarios. Indent Guides is another example of this type of extension that
    extends the text editor in Visual Studio.
  prefs: []
  type: TYPE_NORMAL
- en: Indent Guides is a simple but useful extension that helps us identify extra
    white spaces and indentations in the structure of code.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Indent Guides
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To install Indent Guides, go to `Indent Guides` in the search bar (see *Figure
    14.17*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.17 – Indent Guides in Manage Extensions'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.17_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.17 – Indent Guides in Manage Extensions
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on `index.html` file and see new guides that show us white spaces and
    tabs between text and the elements in the text editor (see *Figure 14.18*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.18 – Guides in the Visual Studio text editor'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.18_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.18 – Guides in the Visual Studio text editor
  prefs: []
  type: TYPE_NORMAL
- en: This tool is amazing for improving the formatting in our files and is compatible
    with all the programming languages supported by Visual Studio. There are some
    additional options that we can adjust to fit our preferences. Navigate to **Tools**
    | **Options** | **Indent Guides**. There, we will find many options to change
    the appearance, behavior, and highlights and set a quick start or default configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Visual Studio has a marketplace with many extensions that we can access using
    the Visual Studio **Manage Extensions** option. We can find many extensions related
    to code snippets in the Studio Marketplace and use HTML Snippet Pack to improve
    our productivity while coding in HTML files.
  prefs: []
  type: TYPE_NORMAL
- en: You now know how to use CodeMaid to clean up code and improve code quality in
    your projects. You can easily remove empty lines and white spaces and create a
    custom validation format for all the files in your project. You also learned how
    to install Web Compiler to compile and transform web files such as JavaScript
    files or libraries such as LESS and Sass into generic code that a browser can
    easily read. Finally, you explored the Indent Guides extension, which shows us
    white and blank spaces in code to identify how to improve the format and structure
    of files.
  prefs: []
  type: TYPE_NORMAL
- en: In [*Chapter 15*](B17873_15_ePub.xhtml#_idTextAnchor171), *Learning Keyboard
    Shortcuts*, you will review the most important shortcuts included in Visual Studio
    by default. With this knowledge, you will use a combination of some keyboard keys
    to perform common actions in Visual Studio.
  prefs: []
  type: TYPE_NORMAL
