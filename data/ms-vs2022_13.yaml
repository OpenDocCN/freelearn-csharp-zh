- en: '13'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '13'
- en: Writing Your Own Project Template
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写你自己的项目模板
- en: In this chapter, we will dive into the world of Visual Studio by exploring how
    to create custom project templates. These templates are incredibly powerful tools
    that allow us to streamline our development process, ensuring that our team starts
    every project with a consistent structure and configuration. We’ll begin by breaking
    down the fundamental structures that make up a project template, giving you a
    solid foundation to build upon. As we progress, we’ll discover how to integrate
    parameters into our templates, allowing for dynamic customization at the point
    of project creation. Finally, we’ll delve into advanced features, teaching you
    how to extend your project templates into full-fledged solution templates that
    can handle complex, multi-project solutions.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将深入探索Visual Studio的世界，通过了解如何创建自定义项目模板来展开。这些模板是极其强大的工具，使我们能够简化我们的开发过程，确保我们的团队能够以一致的结构和配置开始每个项目。我们将从剖析构成项目模板的基本结构开始，为你提供一个坚实的基础来构建。随着我们的进展，我们将发现如何将参数集成到我们的模板中，允许在项目创建点进行动态定制。最后，我们将深入研究高级功能，教你如何将项目模板扩展为完整的解决方案模板，以处理复杂的多项目解决方案。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Understanding project template structures
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解项目模板结构
- en: Building a basic project template
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建基本项目模板
- en: Customize project templates for different workflows
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为不同的工作流程自定义项目模板
- en: Integrating template parameters
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成模板参数
- en: Extending project templates with advanced features
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用高级功能扩展项目模板
- en: By the end of this chapter, you’ll not only have the knowledge to create and
    customize project templates, but you’ll also understand how to leverage these
    tools to enhance productivity and maintain consistency across your projects.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你不仅将拥有创建和自定义项目模板的知识，还将了解如何利用这些工具来提高生产力和保持项目之间的一致性。
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'While writing this chapter, I used the following version of Visual Studio:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写本章时，我使用了以下版本的Visual Studio：
- en: Visual Studio Enterprise 2022 Version 17.12.0
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio Enterprise 2022 版本 17.12.0
- en: Preview 1.0
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预览 1.0
- en: The code files for this chapter can be found at [https://github.com/PacktPublishing/Mastering-Visual-Studio-2022/tree/main/ch13](https://github.com/PacktPublishing/Mastering-Visual-Studio-2022/tree/main/ch13)
    .
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码文件可以在[https://github.com/PacktPublishing/Mastering-Visual-Studio-2022/tree/main/ch13](https://github.com/PacktPublishing/Mastering-Visual-Studio-2022/tree/main/ch13)找到。
- en: Understanding project template structure
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解项目模板结构
- en: We all use templates when we create a new project or a new item with Visual
    Studio. In this section, we will cover the difference between project and item
    templates and then see what files are involved in this process. Project templates
    in Visual Studio are powerful tools that help developers quickly set up new projects
    with predefined configurations and structures. On the other hand, we can create
    item templates for specific parts of the project. These templates provide a base
    that can be customized according to specific needs, streamlining the development
    process and ensuring consistency across projects.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用Visual Studio创建新项目或新项目项时，我们都会使用模板。在本节中，我们将介绍项目模板和项目项模板之间的区别，然后查看涉及此过程的文件。Visual
    Studio中的项目模板是强大的工具，可以帮助开发者快速设置具有预定义配置和结构的新项目。另一方面，我们可以为项目的特定部分创建项目项模板。这些模板提供了一个基础，可以根据特定需求进行定制，简化开发过程并确保项目之间的一致性。
- en: Both project templates and item templates in Visual Studio are reusable structures
    designed to simplify development by providing basic code frameworks and configurations
    that can be tailored to specific needs. Despite their similarities, they differ
    significantly in scope and application within the Visual Studio environment.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio中的项目模板和项目项模板都是可重用的结构，旨在通过提供基本的代码框架和配置来简化开发，这些框架和配置可以根据特定需求进行定制。尽管它们有相似之处，但在Visual
    Studio环境中的应用范围和作用上存在显著差异。
- en: '**Project templates** serve as foundational blueprints for creating new projects.
    They include the entire project structure, necessary files, references, and configuration
    settings tailored to a specific project type (e.g., ASP.NET Core Web App, Class
    Library). When starting a new project in Visual Studio, we choose a project template
    that matches our requirements. This template establishes the initial project framework,
    including default namespaces, assembly references, and compiler options, saving
    time and ensuring consistency across projects.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**项目模板**作为创建新项目的基石蓝图。它们包括整个项目结构、必要的文件、引用和针对特定项目类型（例如，ASP.NET Core Web App、类库）定制的配置设置。当在Visual
    Studio中开始新项目时，我们选择符合我们要求的模板。此模板建立了初始项目框架，包括默认命名空间、程序集引用和编译器选项，节省时间并确保项目之间的一致性。'
- en: '**Item templates** focus on individual components within a project. These templates
    can range from simple file types (e.g., XML, HTML, CSS) to complex structures
    involving multiple files and resources. They are designed to quickly add predefined
    items to an existing project. We use item templates when adding new elements to
    our project via the **Add New Item** dialog box. This could include anything from
    a class file or interface to a pre-configured web page. Item templates enable
    the rapid inclusion of these elements without the need for manual configuration.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**项目模板**专注于项目中的单个组件。这些模板的范围可以从简单的文件类型（例如，XML、HTML、CSS）到涉及多个文件和资源的复杂结构。它们旨在快速将预定义的项目元素添加到现有项目中。我们在通过**添加新项**对话框向项目中添加新元素时使用项目模板。这可能包括从类文件或接口到预配置的网页等任何内容。项目模板允许快速包含这些元素，而无需手动配置。'
- en: 'The creation of new templates involves working with the different files described
    in the following points:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新模板涉及与以下要点中描述的不同文件一起工作：
- en: '**Files to** **be created** :'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**要创建的文件**：'
- en: '**Source code files** : These are the initial coding files included with the
    template. For example, a C# class library template might start with a default
    **Class1.cs** file.'
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**源代码文件**：这些是模板中包含的初始编码文件。例如，C#类库模板可能以默认的**Class1.cs**文件开始。'
- en: '**Embedded resources** : This category includes images, configuration files,
    or other resources the project might require.'
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**嵌入式资源**：此类别包括项目可能需要的图像、配置文件或其他资源。'
- en: '**Project files** : These encompass the solution and project files (such as
    **.sln** and **.csproj** for C# projects) that outline the project’s structure
    and dependencies.'
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**项目文件**：这些包括解决方案和项目文件（例如，C#项目的**.sln**和**.csproj**文件），它们概述了项目的结构和依赖关系。'
- en: '**.** **vstemplate** :'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**.** **vstemplate**：'
- en: This XML file is essential for defining the template. It contains metadata such
    as the template’s name, description, icon, and project type.
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此XML文件对于定义模板至关重要。它包含有关模板的元数据，例如模板的名称、描述、图标和项目类型。
- en: It outlines the files to be included in the project and specifies any additional
    parameters or wizard data that need to be processed when the template is instantiated.
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它概述了要包含在项目中的文件，并指定了在实例化模板时需要处理的任何附加参数或向导数据。
- en: '**Compressed into a** **ZIP file** :'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**压缩成一个** **ZIP文件**：'
- en: Once the template and its associated files are prepared, they are compressed
    into a **.zip** file. This file is placed in a specific folder where Visual Studio
    can recognize it.
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦准备好模板及其相关文件，它们就会被压缩成一个**.zip**文件。此文件放置在Visual Studio可以识别的特定文件夹中。
- en: For project templates, the **.zip** file is placed in the **\Documents\Visual
    Studio <** **version>\Templates\ProjectTemplates** directory.
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于项目模板，**.zip**文件放置在**\Documents\Visual Studio <** **版本>\Templates\ProjectTemplates**目录中。
- en: For item templates, it goes into the **\Documents\Visual Studio <** **version>\Templates\ItemTemplates**
    directory.
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于项目模板，它们位于**\Documents\Visual Studio <** **版本>\Templates\ItemTemplates**目录中。
- en: Project templates in Visual Studio provide a starting point for entire projects,
    offering a structured foundation based on the chosen template’s specifications.
    Conversely, item templates serve to expedite the addition of individual components
    or files within those projects, streamlining the development workflow by providing
    reusable pieces of code or resources. Understanding the distinction between these
    two types of templates can significantly enhance productivity and consistency
    in software development practices.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio中的项目模板为整个项目提供了一个起点，提供了一个基于所选模板规格的结构化基础。相反，项目项模板用于加速在项目内添加单个组件或文件，通过提供可重用的代码片段或资源来简化开发工作流程。理解这两种模板之间的区别可以显著提高软件开发实践中的生产力和一致性。
- en: Now, let’s learn how to create basic templates.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们学习如何创建基本模板。
- en: Building a basic project template
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建基本项目模板
- en: 'In this section, we will cover the more convenient way to build a project template.
    The process consists of building a skeleton project with the minimum we need inside
    to fit with our company requirements for example. After that, we can export the
    existing project as a template using Visual Studio’s Export Template Wizard, by
    using the Visual Studio top bar menu: **Project** | **Export Template…** :'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍构建项目模板的更便捷方法。该过程包括构建一个具有最小需求的骨架项目，以满足我们公司的要求，例如。之后，我们可以使用Visual Studio的导出模板向导，通过使用Visual
    Studio顶栏菜单：**项目** | **导出模板…**将现有项目导出为模板：
- en: '![Figure 13.1 – Export Template…](img/B22218_13_1.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.1 – 导出模板…](img/B22218_13_1.jpg)'
- en: Figure 13.1 – Export Template…
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.1 – 导出模板…
- en: 'The preceding action will open the **Export Template** **Wizard** window:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 上述操作将打开**导出模板** **向导**窗口：
- en: '![Figure 13.2 – Export Template Wizard](img/B22218_13_2.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.2 – 导出模板向导](img/B22218_13_2.jpg)'
- en: Figure 13.2 – Export Template Wizard
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.2 – 导出模板向导
- en: First, we choose the type of template we want to export; either **Project template**
    or **Item template** .
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们选择要导出的模板类型；要么是**项目模板**，要么是**项模板**。
- en: Then, the tool allows us to define key details, such as the template’s name,
    description, icon, and preview images.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，该工具允许我们定义关键细节，例如模板的名称、描述、图标和预览图像。
- en: '![Figure 13.3 – Select Template Options](img/B22218_13_3.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.3 – 选择模板选项](img/B22218_13_3.jpg)'
- en: Figure 13.3 – Select Template Options
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.3 – 选择模板选项
- en: Upon completion, the project is bundled into a **.zip** file and saved to a
    chosen output location. Additionally, we can opt to directly import the template
    into Visual Studio for immediate utilization. To access and use our newly created
    template, open the dialog box for creating a new project.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，项目将被打包成一个**.zip**文件并保存到所选输出位置。此外，我们可以选择直接将模板导入Visual Studio以立即使用。要访问和使用我们新创建的模板，请打开创建新项目的对话框。
- en: '![Figure 13.4 – Use the custom template](img/B22218_13_4.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.4 – 使用自定义模板](img/B22218_13_4.jpg)'
- en: Figure 13.4 – Use the custom template
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.4 – 使用自定义模板
- en: We can locate the template by searching for its name or browsing through the
    list. Keep in mind that filtering by language or project type may not be supported
    for custom templates.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过搜索其名称或浏览列表来定位模板。请注意，对于自定义模板，可能不支持按语言或项目类型进行筛选。
- en: Let’s explore how to custom templates.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索如何自定义模板。
- en: Customizing project templates for different workflows
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为不同工作流程自定义项目模板
- en: There are two ways to update a Visual Studio template either by using the Export
    Template Wizard or by manually adjusting the files within the template.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 更新Visual Studio模板有两种方式，要么使用导出模板向导，要么手动调整模板内的文件。
- en: 'The first method is to utilize the Export Template Wizard by initiating a new
    project within the project template we are interested in modifying and then following
    these steps:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种方法是利用导出模板向导，通过在我们要修改的项目模板内启动一个新项目，然后按照以下步骤进行：
- en: Within the project, carry out the modifications we desire. This could encompass
    changing the output type, incorporating new files, or implementing other alterations.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目内执行我们想要的修改。这可能包括更改输出类型、添加新文件或实施其他更改。
- en: '**Export the modified template** : With our project adjusted, head to **Project**
    | **Export Template** to access the Export Template Wizard.'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**导出修改后的模板**：在调整了我们的项目后，转到**项目** | **导出模板**以访问导出模板向导。'
- en: '**Conclude the export process** : Adhere to the wizard’s instructions to successfully
    export our modified template as a **.** **zip** file.'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**完成导出过程**：遵循向导的说明，成功导出我们修改后的模板为**.zip**文件。'
- en: 'The other option is to apply the manual modification to a template by revising
    the **.vstemplate** by following these steps:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种选择是将手动修改应用于模板，通过以下步骤修改**.vstemplate**文件：
- en: '**Identify the template** : Locate the **.zip** archive corresponding to the
    template we intend to alter. Typically, this resides in **%USERPROFILE%\Documents\Visual**
    **Studio <version>\Templates\ProjectTemplates** .'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**识别模板**：找到我们打算修改的模板对应的**.zip**存档。通常，它位于**%USERPROFILE%\Documents\Visual**
    **Studio <version>\Templates\ProjectTemplates**。'
- en: '**Unpack the archive** : Extract the contents of the template archive.'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**解压缩存档**：提取模板存档的内容。'
- en: '**Edit the files** : Undertake the necessary edits, additions, or deletions
    to the files within the template.'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**编辑文件**：对模板中的文件进行必要的编辑、添加或删除。'
- en: '**Revise the .vstemplate file** : Adjust the **.vstemplate** XML file to accurately
    represent the changes made.'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**修改 .vstemplate 文件**：调整**.vstemplate** XML文件以准确反映所做的更改。'
- en: '**Archive the changes** : Compress all the modified files back into a **.**
    **zip** archive.'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**存档更改**：将所有修改后的文件压缩回一个**.zip**存档。'
- en: '**Implement the updated template** : Transfer the newly compressed **.zip**
    file to the original directory, replacing the outdated template files.'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**实施更新后的模板**：将新压缩的**.zip**文件传输到原始目录，替换过时的模板文件。'
- en: Customizing allows us to use some parameters and variables in existing templates.
    Let’s see in the next section how to achieve that.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 定制化允许我们在现有模板中使用一些参数和变量。让我们在下一节中看看如何实现这一点。
- en: Integrating template parameters and variables
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成模板参数和变量
- en: Now that we have seen how to open an existing **.vstemplate** in order to customize
    it, in this section, we will explore how to leverage parameters to dynamically
    replace values within the template when it’s instantiated. Using parameters and
    variables in **.vstemplate** files with Visual Studio allows us to create dynamic
    templates that can adapt to different project names, namespaces, and other customizable
    aspects. This feature enhances the reusability and customization of our templates,
    making template creation a powerful tool for streamlining development workflows.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了如何打开现有的**.vstemplate**文件以进行自定义，在本节中，我们将探讨如何利用参数在模板实例化时动态替换模板中的值。使用
    Visual Studio 中的**.vstemplate**文件中的参数和变量，我们可以创建动态模板，这些模板可以适应不同的项目名称、命名空间和其他可定制方面。此功能增强了模板的可重用性和可定制性，使模板创建成为简化开发工作流程的有力工具。
- en: '**Template parameters** are placeholders within our template that get replaced
    with actual values when the template is instantiated. These parameters can represent
    various aspects of our project, such as the project name, namespace, or even custom-defined
    values.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**模板参数**是我们模板中的占位符，在模板实例化时用实际值替换。这些参数可以代表我们项目的各个方面，例如项目名称、命名空间，甚至自定义定义的值。'
- en: 'Visual Studio provides a set of reserved template parameters that you can use
    directly in the templates. Here is the list of these reserved parameters, according
    to the Microsoft documentation:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio 提供了一组保留的模板参数，您可以直接在模板中使用这些参数。以下是这些保留参数的列表，根据微软的文档：
- en: '**clrversion** : The current version of the **common language** **runtime**
    ( **CLR** ).'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**clrversion**：当前版本的**公共语言****运行时**（**CLR**）。'
- en: '**ext_*** : The prefix added to any parameter to refer to variables of the
    parent template ( e.g., **ext_safeprojectname** ).'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ext_***：添加到任何参数前缀，以引用父模板中的变量（例如，**ext_safeprojectname**）。'
- en: '**guid[1-10]** : A GUID used to replace the project GUID in a project file.
    Up to 10 unique GUIDs can be specified ( e.g., **guid1** ).'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**guid[1-10]**：用于在项目文件中替换项目GUID的GUID。最多可以指定10个唯一的GUID（例如，**guid1**）。'
- en: '**itemname** : The name of the file in which the parameter is being used.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**itemname**：使用参数的文件的名称。'
- en: '**machinename** : The current computer name ( e.g., **Computer01** ).'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**machinename**：当前计算机名称（例如，**Computer01**）。'
- en: '**projectname** : The name provided by the user when the project was created.
    This applies only to project templates.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**projectname**：用户在创建项目时提供的名称。这仅适用于项目模板。'
- en: '**registeredorganization** : The registry key value from **HKEY_LOCAL_MACHINE\Software\Microsoft\WindowsNT\CurrentVersion\RegisteredOrganization**
    .'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**registeredorganization**：来自**HKEY_LOCAL_MACHINE\Software\Microsoft\WindowsNT\CurrentVersion\RegisteredOrganization**的注册表键值。'
- en: '**rootnamespace** : The root namespace of the current project followed by the
    subfolder of the current item, with slashes replaced by periods.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**rootnamespace** : 当前项目的根命名空间，后跟当前项的子文件夹，斜杠被点号替换。'
- en: '**defaultnamespace** : The root namespace of the current project.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**defaultnamespace** : 当前项目的根命名空间。'
- en: '**safeitemname** : The same as **itemname** but with all unsafe characters
    and spaces replaced by underscore characters.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**safeitemname** : 与 **itemname** 相同，但将所有不安全字符和空格替换为下划线字符。'
- en: '**safeitemrootname** : Same as **safeitemname** .'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**safeitemrootname** : 与 **safeitemname** 相同。'
- en: '**safeprojectname** : The name provided by the user when the project was created
    but with all unsafe characters and spaces removed. This applies only to project
    templates.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**safeprojectname** : 在创建项目时用户提供的名称，但已移除所有不安全字符和空格。这仅适用于项目模板。'
- en: '**targetframeworkversion** : The current version of the target . NET Framework.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**targetframeworkversion** : 目标 .NET Framework 的当前版本。'
- en: '**time** : The current time in a format based on Windows user settings (e.g.,
    DD/MM/YYYY 00:00:00).'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**time** : 基于Windows用户设置的格式（例如，DD/MM/YYYY 00:00:00）的当前时间。'
- en: '**specifiedsolutionname** : The name of the solution. Behavior varies based
    on whether **Place solution and project in the same directory** or **Create solution
    directory** is checked.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**specifiedsolutionname** : 解决方案名称。行为取决于是否勾选了**将解决方案和项目放在同一目录中**或**创建解决方案目录**。'
- en: '**userdomain** : The current user domain.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**userdomain** : 当前用户域。'
- en: '**username** : The current username.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**username** : 当前用户名。'
- en: '**webnamespace** : The name of the current website, used in web form templates
    to guarantee unique class names.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**webnamespace** : 当前网站的名称，用于网页表单模板以确保类名唯一。'
- en: '**year** : The current year in YYYY format.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**year** : 当前年份，格式为 YYYY。'
- en: '**solutiondirectory** : The directory of the solution.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**solutiondirectory** : 解决方案的目录。'
- en: '**destinationdirectory** : The path to the directory of the **.csproj** once
    created.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**destinationdirectory** : 创建 **.csproj** 后的目录路径。'
- en: These reserved parameters can be used to dynamically insert project-specific
    information into your templates. For instance, we can use the **$safeprojectname$**
    and **$year$** reserved parameters to dynamically generate the namespace and add
    a copyright notice.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这些保留参数可以用于在模板中动态插入项目特定的信息。例如，我们可以使用 **$safeprojectname$** 和 **$year$** 保留参数动态生成命名空间并添加版权声明。
- en: 'For this example, we will create a new template manually. This example will
    focus on creating a C# class library project template that uses several reserved
    template parameters to dynamically generate namespaces, class names, and file
    names based on user input and system information. Let’s get started with the steps:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个例子，我们将手动创建一个新的模板。本例将重点创建一个使用多个保留模板参数的 C# 类库项目模板，这些参数根据用户输入和系统信息动态生成命名空间、类名和文件名。让我们从以下步骤开始：
- en: 'First, define the structure of our project template in a **.vstemplate** file.
    This file specifies what gets created when the template is instantiated:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在 **.vstemplate** 文件中定义我们的项目模板结构。此文件指定在实例化模板时创建的内容：
- en: '[PRE0]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Notice that it’s common practice to specify **TargetFileName** for every **ProjectItem**
    if you need them to have a specific name in the newly created project. The second
    **<ProjectItem>** ( **Properties\AssemblyInfo.cs** ) does not have **TargetFileName**
    . If you want to ensure that this file has the same name in the new project, this
    is fine. If you want to replace parameters, it should also have the **ReplaceParameters="true"**
    attribute (as it currently does).
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，如果需要为每个 **ProjectItem** 指定 **TargetFileName** 以确保它们在新建的项目中具有特定的名称，这是一个常见的做法。第二个
    **<ProjectItem>**（**Properties\AssemblyInfo.cs**）没有 **TargetFileName**。如果您想确保此文件在新项目中具有相同的名称，这是可以的。如果您想替换参数，它也应该具有
    **ReplaceParameters="true"** 属性（如当前所示）。
- en: 'Next, create a C# class file named **Class1.cs** that will be part of our template.
    We’ll use the **$safeprojectname$** and **$year$** reserved parameters to dynamically
    generate the namespace and add a copyright notice:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建一个名为 **Class1.cs** 的 C# 类文件，该文件将成为我们模板的一部分。我们将使用 **$safeprojectname$**
    和 **$year$** 保留参数动态生成命名空间并添加版权声明：
- en: '[PRE1]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We will also create an **AssemblyInfo.cs** file under a **Properties** folder
    within our template. This file will contain assembly metadata, and we’ll use the
    **$projectname$** , **$year$** , and **$username$** reserved parameters to customize
    the assembly title and copyright:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还将在模板中的 **Properties** 文件夹下创建一个 **AssemblyInfo.cs** 文件。此文件将包含程序集元数据，我们将使用
    **$projectname$**、**$year$** 和 **$username$** 保留参数来自定义程序集标题和版权信息：
- en: '[PRE2]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: After creating these files, package them into a **.zip** file and place them
    in the Visual Studio templates directory or import them through Visual Studio’s
    template manager.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建这些文件后，将它们打包成**.zip**文件，并将它们放置在Visual Studio模板目录中，或者通过Visual Studio的模板管理器导入它们。
- en: 'When creating a new project based on this template, Visual Studio will prompt
    us for the project name and location. As a result, the **Class1.cs** file will
    be filled with the provided values:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 当基于此模板创建新项目时，Visual Studio将提示我们输入项目名称和位置。因此，**Class1.cs**文件将填充提供的值：
- en: '![Figure 13.5 – Generate Class1](img/B22218_13_5.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![图13.5 – 生成Class1](img/B22218_13_5.jpg)'
- en: Figure 13.5 – Generate Class1
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.5 – 生成Class1
- en: It will then replace the reserved parameters in the template files with the
    actual values, such as the safe project name, current year, and username. In this
    example, I choose **DummyTemplate** as the project name and the system takes the
    current year to set the **$** **year$** parameter.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，它将用实际值替换模板文件中的保留参数，例如安全的项目名称、当前年份和用户名。在这个例子中，我选择**DummyTemplate**作为项目名称，系统使用当前年份来设置**$**
    **year$**参数。
- en: 'At the point when we create a project from our custom template, you might notice
    that we can use the filter combo box to filter them. Within the **<TemplateData>**
    section of our **.vstemplate** file, we can add the following elements to specify
    tags:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们从自定义模板创建项目时，你可能会注意到我们可以使用过滤器组合框来过滤它们。在我们的**.vstemplate**文件的**<TemplateData>**部分中，我们可以添加以下元素来指定标签：
- en: '**<LanguageTag>** : This specifies the programming languages used in the template'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<LanguageTag>**：这指定了模板中使用的编程语言'
- en: '**<PlatformTag>** : This indicates the target platforms (e.g., Windows, web)'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<PlatformTag>**：这表示目标平台（例如，Windows，Web）'
- en: '**<ProjectTypeTag>** : This describes the type of project (e.g., Class Library,
    Console Application)'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<ProjectTypeTag>**：这描述了项目的类型（例如，类库、控制台应用程序）'
- en: 'Each tag element should contain the name of the tag as its text content:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 每个标签元素应包含标签的名称作为其文本内容：
- en: '[PRE3]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: When updating our template this way, we can observe the tags that appear on
    the description in the template list.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式更新我们的模板时，我们可以观察到模板列表中描述上出现的标签。
- en: '![Figure 13.6 – Template list with tags](img/B22218_13_6.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![图13.6 – 带有标签的模板列表](img/B22218_13_6.jpg)'
- en: Figure 13.6 – Template list with tags
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.6 – 带有标签的模板列表
- en: These tags allow us to leverage the three filters upon the list when we are
    looking for a template.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这些标签允许我们在寻找模板时利用列表上的三个过滤器。
- en: Sometimes, we need more than one project, and we expect to be more productive
    with a ready-to-use solution with multi-library projects to scaffold a clean architecture,
    for example; let’s see in the next section how we can achieve that.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，我们需要不止一个项目，并且我们期望使用一个带有多库项目的现成解决方案来构建一个干净的架构，例如；让我们在下一节中看看我们如何实现这一点。
- en: Extending project templates with advanced features
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展项目模板以包含高级功能
- en: In this section, we will go further by creating what we can call a solution
    template by combining multiple project templates.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将通过结合多个项目模板来创建一个可以称为解决方案模板的内容。
- en: 'Creating a multi-project solution template in Visual Studio involves several
    steps, including creating individual project templates, combining them into a
    single solution template, and configuring the solution template to instantiate
    multiple projects upon creation. Let’s get started:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在Visual Studio中创建一个多项目解决方案模板涉及几个步骤，包括创建单个项目模板，将它们组合成一个解决方案模板，并配置解决方案模板在创建时实例化多个项目。让我们开始吧：
- en: First, create the templates that will be included in the solution template.
    For that, follow the instructions provided in the *Building a basic project template*
    section of this chapter.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，创建将包含在解决方案模板中的模板。为此，请遵循本章“构建基本项目模板”部分提供的说明。
- en: Next, prepare a directory structure for the solution template. This involves
    creating a folder for the solution template and copying the unzipped contents
    of each project template into this directory.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，为解决方案模板准备一个目录结构。这包括为解决方案模板创建一个文件夹，并将每个项目模板解压缩的内容复制到这个文件夹中。
- en: '![Figure 13.7 – Folder structure](img/B22218_13_7.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![图13.7 – 文件夹结构](img/B22218_13_7.jpg)'
- en: Figure 13.7 – Folder structure
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.7 – 文件夹结构
- en: For this example, I created three project templates to scaffold the solution.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个例子中，我创建了三个项目模板来构建解决方案。
- en: 'Now, create or modify a **.vstemplate** file in the root of the solution template
    directory. This file defines the structure of our solution template, including
    references to the individual project templates. In this file, we set the **Project
    Type** option to **ProjectGroup** to indicate that this template represents a
    collection of projects as follows:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在解决方案模板目录的根目录下创建或修改一个 **.vstemplate** 文件。此文件定义了我们的解决方案模板的结构，包括对各个项目模板的引用。在此文件中，我们将
    **Project Type** 选项设置为 **ProjectGroup**，以表明此模板代表一组项目，如下所示：
- en: '[PRE4]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Inside **<TemplateContent>** , we use **<ProjectCollection>** instead of **<Project>**
    to define a collection of projects. Each child project is linked by a **<ProjectTemplateLink>**
    element that establishes the link, pointing to the relative path of the project
    template within the solution template directory.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **<TemplateContent>** 中，我们使用 **<ProjectCollection>** 而不是 **<Project>** 来定义一组项目。每个子项目通过一个
    **<ProjectTemplateLink>** 元素链接，该元素建立链接，指向解决方案模板目录中项目模板的相对路径。
- en: 'Once our solution template is configured, we do the following:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们的解决方案模板配置完成，我们将执行以下操作：
- en: We zip the contents of the solution template directory, including the modified
    **.vstemplate** file and the unzipped project templates
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将解决方案模板目录的内容进行压缩，包括修改后的 **.vstemplate** 文件和未压缩的项目模板
- en: We place the zipped file in the Visual Studio templates directory or import
    it through Visual Studio’s template manager
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将压缩文件放置在 Visual Studio 模板目录中或通过 Visual Studio 的模板管理器导入它
- en: Finally, test the solution template by creating a new project from it in Visual
    Studio to ensure that it correctly generates a solution with all the desired projects,
    through **Solution Explorer** .
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，通过在 Visual Studio 中从它创建一个新项目来测试解决方案模板，以确保它能够正确地生成包含所有所需项目的解决方案，通过**解决方案资源管理器**。
- en: '![Figure 13.8 – Solution architecture](img/B22218_13_8.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.8 – 解决方案架构](img/B22218_13_8.jpg)'
- en: Figure 13.8 – Solution architecture
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.8 – 解决方案架构
- en: As a result, we initiate a solution with three projects as defined in the template.
    This process allows us to create a reusable template for a solution that includes
    multiple projects, streamlining the setup of new solutions based on predefined
    configurations, saving time and ensuring consistency across projects.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们启动了一个包含三个项目的解决方案，正如模板中定义的那样。这个过程允许我们创建一个可重复使用的解决方案模板，该模板包含多个项目，简化了基于预定义配置的新解决方案的设置，节省了时间并确保了项目之间的一致性。
- en: Summary
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we’ve explored the art of crafting custom project templates
    in Visual Studio 2022, a crucial skill for any developer aiming to standardize
    and accelerate their workflow. We began by understanding the fundamental structures
    that form the backbone of project templates. We then delved into customization,
    showing you how to adapt these templates to suit different workflows, ensuring
    they meet the specific needs of your projects. From there, we explored the integration
    of parameters, allowing you to add dynamic elements to your templates for greater
    flexibility. Finally, we expanded our focus to include advanced features, enabling
    you to create solution templates that can manage intricate, multi-project solutions
    with ease.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了在 Visual Studio 2022 中制作自定义项目模板的艺术，这对于任何希望标准化和加速其工作流程的开发者来说是一项关键技能。我们首先理解了构成项目模板骨架的基本结构。然后我们深入到定制中，向您展示如何调整这些模板以适应不同的工作流程，确保它们满足您项目的特定需求。从那里，我们探讨了参数的集成，允许您向模板添加动态元素以获得更大的灵活性。最后，我们将重点扩展到高级功能，使您能够轻松创建可以管理复杂的多项目解决方案的解决方案模板。
- en: 'As we move forward, we’ll build on this knowledge by exploring another powerful
    aspect of Visual Studio: creating your own extensions. In the next chapter, we’ll
    dive into the world of custom tooling, where you’ll learn how to enhance your
    development environment even further by creating and deploying extensions tailored
    to your unique needs.'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们继续前进，我们将通过探索 Visual Studio 的另一个强大功能：创建自己的扩展来构建这一知识。在下一章中，我们将深入到自定义工具的世界，在那里你将学习如何通过创建和部署针对你独特需求的扩展来进一步增强你的开发环境。
