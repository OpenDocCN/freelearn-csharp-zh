["```cs\nnamespace com.noorcon.rpg2e \n{ \n   public class BaseCharacter \n   { \n      public string Name; \n      public string Description; \n\n      public float Strength; \n      public float Defense; \n      public float Dexterity; \n      public float Intelligence; \n      public float Health; \n   } \n} \n```", "```cs\nusing UnityEngine; \n\nnamespace com.noorcon.rpg2e \n{ \n   public class BarbarianCharacterController : MonoBehaviour \n   { \n\n      public Animator animator; \n      public float directionDampTime; \n\n      public float speed = 6.0f; \n      public float h = 0.0f; \n      public float v = 0.0f; \n\n      bool attack = false; \n      bool punch = false; \n      bool run = false; \n\n      bool jump = false; \n      bool die = false; \n      bool dead = false; \n\n      // Use this for initialization \n      void Start() \n      { \n         this.animator = GetComponent<Animator>() as Animator; \n      } \n\n      // Update is called once per frame \n      private Vector3 moveDirection = Vector3.zero; \n\n      void Update() \n      { \n\n         if (dead) \n         { \n            if (die) \n            { \n               die = !die; \n               animator.SetBool(\"Die\", die); \n            } \n         return; \n      } \n\n         if (Input.GetKeyDown(KeyCode.C)) \n         { \n            attack = true; \n         } \n         if (Input.GetKeyUp(KeyCode.C)) \n         { \n            attack = false; \n         } \n         animator.SetBool(\"Attack\", attack); \n\n         if (Input.GetKeyDown(KeyCode.P)) \n         { \n            punch = true; \n         } \n         if (Input.GetKeyUp(KeyCode.P)) \n         { \n            punch = false; \n         } \n         animator.SetBool(\"Punch\", punch); \n\n         if (Input.GetKeyDown(KeyCode.LeftShift)) \n         { \n            this.run = true; \n         } \n         if (Input.GetKeyUp(KeyCode.LeftShift)) \n         { \n            this.run = false; \n         } \n         animator.SetBool(\"Run\", run); \n\n         if (Input.GetKeyDown(KeyCode.Space)) \n         { \n            jump = true; \n         } \n         if (Input.GetKeyUp(KeyCode.Space)) \n         { \n            jump = false; \n         } \n         animator.SetBool(\"Jump\", jump); \n\n         if (Input.GetKeyDown(KeyCode.I)) \n         { \n            die = true; \n            dead = true; \n         } \n\n         animator.SetBool(\"Die\", die); \n      } \n\n```", "```cs\n      void FixedUpdate() \n      { \n         // The Inputs are defined in the Input Manager \n         // get value for horizontal axis \n         h = Input.GetAxis(\"Horizontal\"); \n         // get value for vertical axis \n         v = Input.GetAxis(\"Vertical\"); \n\n         speed = new Vector2(h, v).sqrMagnitude; \n\n         // Used to get values on console \n         Debug.Log(string.Format(\"H:{0} - V:{1} - Speed:{2}\", h, v,    \n         speed)); \n\n         animator.SetFloat(\"Speed\", speed); \n         animator.SetFloat(\"Horizontal\", h); \n         animator.SetFloat(\"Vertical\", v); \n      } \n   } \n} \n```", "```cs\nusing UnityEngine; \n\nnamespace com.noorcon.rpg2e \n{ \n   public class IKHandle : MonoBehaviour \n   { \n      Animator anim; \n\n      #region USED FOR MANUAL TESTING \n      Transform leftIKTarget; \n      Transform rightIKTarget; \n\n      Transform hintLeft; \n      Transform hintRight; \n\n      float ikWeight = 1f; \n      #endregion \n\n      // to make it dynamic \n      [Header(\"Dynamic IK Values\")] \n      Vector3 LeftFootPosition; \n      Vector3 RightFootPosition; \n\n      Quaternion LeftFootRotation; \n      Quaternion RightFootRotation; \n\n      float LeftFootWeight; \n      float RightFootWeight; \n\n      public Transform LeftFoot; \n      public Transform RightFoot; \n\n      [Header(\"Adjustment Properties for IK\")] \n      public float OffsetY; \n\n      public float LookIkWeight = 1.0f; \n      public float BodyWeight = 0.7f; \n      public float HeadWeight = 0.9f; \n      public float EyesWeight = 1.0f; \n      public float ClampWeight = 1.0f; \n\n      public Transform LookPosition; \n\n      // Use this for initialization \n      void Start() \n      { \n         anim = GetComponent<Animator>(); \n\n         LeftFoot = anim.GetBoneTransform(HumanBodyBones.LeftFoot); \n         RightFoot = anim.GetBoneTransform(HumanBodyBones.RightFoot); \n\n         LeftFootRotation = LeftFoot.rotation; \n         RightFootRotation = RightFoot.rotation; \n\n      } \n```", "```cs\n      // Update is called once per frame \n      void Update() \n      { \n         // we can set the look position here somewhere \n         Ray ray = new Ray(Camera.main.transform.position, \n         Camera.main.transform.forward); \n\n         Debug.DrawRay(Camera.main.transform.position, \n         Camera.main.transform.forward * 15, Color.cyan); \n\n         //lookPosition.position = ray.GetPoint(15); \n\n         RaycastHit leftHit; \n         RaycastHit rightHit; \n\n         Vector3 lpos = LeftFoot.TransformPoint(Vector3.zero); \n         Vector3 rpos = RightFoot.TransformPoint(Vector3.zero); \n\n         if (Physics.Raycast(lpos, -Vector3.up, out leftHit, 1)) \n         { \n            LeftFootPosition = leftHit.point; \n            LeftFootRotation = Quaternion.FromToRotation(transform.up, \n            leftHit.normal) * transform.rotation; \n         } \n\n         if (Physics.Raycast(rpos, -Vector3.up, out rightHit, 1)) \n         { \n            RightFootPosition = rightHit.point; \n            RightFootRotation = Quaternion.FromToRotation(transform.up,    \n            rightHit.normal) * transform.rotation; \n         } \n      } \n\n      void OnAnimatorIK() \n      { \n         LeftFootWeight = anim.GetFloat(\"MyLeftFoot\"); \n         RightFootWeight = anim.GetFloat(\"MyRightFoot\"); \n\n         anim.SetIKPositionWeight(AvatarIKGoal.LeftFoot, \n         LeftFootWeight); \n         anim.SetIKPositionWeight(AvatarIKGoal.RightFoot, \n         RightFootWeight); \n         anim.SetIKPosition(AvatarIKGoal.LeftFoot, LeftFootPosition + \n         new Vector3(0f, OffsetY, 0f)); \n         anim.SetIKPosition(AvatarIKGoal.RightFoot, RightFootPosition + \n         new Vector3(0f, OffsetY, 0f)); \n\n         anim.SetIKRotationWeight(AvatarIKGoal.LeftFoot, \n         LeftFootWeight); \n         anim.SetIKRotationWeight(AvatarIKGoal.RightFoot, \n         RightFootWeight); \n         anim.SetIKRotation(AvatarIKGoal.LeftFoot, LeftFootRotation); \n         anim.SetIKRotation(AvatarIKGoal.RightFoot, RightFootRotation); \n\n      } \n   } \n} \n```"]