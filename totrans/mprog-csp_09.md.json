["```cs\ndynamic person = new ExpandoObject();\nperson.FirstName = \"Jane\";\nperson.LastName = \"Doe\";\n```", "```cs\nConsole.WriteLine($\"{person.FirstName} {person.LastName}\");\n```", "```cs\nJane Doe\n```", "```cs\nvar person = new ExpandoObject() as IDictionary<string, object?>;\nperson[\"FirstName\"] = \"Jane\";\nperson[\"LastName\"] = \"Doe\";\n```", "```cs\ndynamic person = new ExpandoObject();\nperson[\"FirstName\"] = \"Jane\";\nperson[\"LastName\"] = \"Doe\";\n```", "```cs\nvar provider = (person as IDynamicMetaObjectProvider)!;\nvar meta = provider.GetMetaObject(Expression.Constant(person));\nvar members = string.Join(',', meta.GetDynamicMemberNames());\nConsole.WriteLine(members);\n```", "```cs\nFirstName,LastName\n```", "```cs\nforeach (var member in meta.GetDynamicMemberNames())\n{\n    var binder = Binder.GetMember(\n        CSharpBinderFlags.None,\n        member,\n        person.GetType(),\n        new[] {\n          CSharpArgumentInfo.Create(CsharpArgumentInfoFlags\n          .None, null) });\n    var site = CallSite<Func<CallSite, object,\n      object>>.Create(binder);\n    var propertyValue = site.Target(site, person);\n    Console.WriteLine($\"{member} = {propertyValue}\");\n}\n```", "```cs\nFirstName = Jane\nLastName = Doe\n```", "```cs\nFunc<object, object> BuildDynamicGetter(Type type, string propertyName)\n{\n    var binder = Binder.GetMember(\n        CSharpBinderFlags.None,\n        propertyName,\n        type,\n        new[] {\n          CSharpArgumentInfo.Create(CsharpArgumentInfoFlags\n          .None, null) });\n    var rootParameter =\n      Expression.Parameter(typeof(object));\n    var binderExpression = Expression.Dynamic(binder,\n      typeof(object), Expression.Convert(rootParameter,\n      type));\n    var getterExpression = Expression.Lambda<Func<object,\n      object>>(binderExpression, rootParameter);\n    return getterExpression.Compile();\n}\n```", "```cs\nvar firstNameExpression = BuildDynamicGetter(person.GetType(), \"FirstName\");\nvar lastNameExpression = BuildDynamicGetter(person.GetType(), \"LastName\");\nConsole.WriteLine($\"{firstNameExpression(person)} {lastNameExpression(person)}\");\n```", "```cs\nJane Doe\n```", "```cs\ndotnet new console\n```", "```cs\ndotnet add package NJsonSchema\n```", "```cs\n{\n  „$schema\": „http://json-schema.org/draft-04/schema#\",\n  \"title\": \"Person\",\n  \"type\": \"object\",\n  \"additionalProperties\": false,\n  \"properties\": {\n    \"FirstName\": {\n      \"type\": \"string\"\n    },\n    \"LastName\": {\n      \"type\": \"string\"\n    },\n    \"Birthdate\": {\n      \"type\": \"string\",\n      \"format\": \"date\"\n    }\n  }\n}\n```", "```cs\nusing System.Dynamic;\nusing NJsonSchema;\nnamespace Chapter9;\npublic class JsonSchemaType : DynamicObject\n{\n    readonly IDictionary<string, object?> _values = new\n      Dictionary<string, object?>();\n    readonly JsonSchema _schema;\n    public JsonSchemaType(JsonSchema schema)\n    {\n        _schema = schema;\n    }\n```", "```cs\npublic class InvalidTypeForProperty : Exception\n{\n    public InvalidTypeForProperty(string type, string\n      property) : base($\"Property '{property}' on '{type}'\n      is invalid.\")\n    {\n    }\n}\n```", "```cs\nJsonObjectType GetSchemaTypeFrom(Type type)\n{\n    return type switch\n    {\n        Type _ when type == typeof(string) =>\n          JsonObjectType.String,\n        Type _ when type == typeof(DateOnly) =>\n          JsonObjectType.String,\n        Type _ when type == typeof(int) =>\n          JsonObjectType.Integer,\n        Type _ when type == typeof(float) =>\n          JsonObjectType.Number,\n        Type _ when type == typeof(double) =>\n          JsonObjectType.Number,\n        _ => JsonObjectType.Object\n    };\n}\n```", "```cs\nvoid ValidateType(string property, object? value)\n{\n    if (value is not null)\n    {\n        var schemaType = GetSchemaTypeFrom(\n          value.GetType());\n        if (!_schema.ActualProperties[property]\n          .Type.HasFlag(schemaType))\n        {\n            throw new InvalidTypeForProperty(_schema.Title,\n              property);\n        }\n    }\n}\n```", "```cs\npublic override bool TrySetMember(SetMemberBinder binder, object? value)\n{\n    if (!_schema.ActualProperties.ContainsKey(binder.Name))\n    {\n        return false;\n    }\n    ValidateType(binder.Name, value);\n    _values[binder.Name] = value;\n    return true;\n}\n```", "```cs\npublic override bool TryGetMember(GetMemberBinder binder, out object? result)\n{\n    if (!_schema.ActualProperties.ContainsKey(binder.Name))\n    {\n        result = null!;\n        return false;\n    }\n    result = _values.ContainsKey(binder.Name)\n        ? result = _values[binder.Name] : result = null!;\n    return true;\n}\n```", "```cs\npublic override bool TryConvert(ConvertBinder binder, out object? result)\n{\n    if (binder.Type.Equals(typeof(Dictionary<string,\n      object?>)))\n    {\n        var returnValue = new Dictionary<string,\n          object?>(_values);\n        var missingProperties =\n          _schema.ActualProperties.Where(_ =>\n          !_values.Any(kvp => _.Key == kvp.Key));\n        foreach (var property in missingProperties)\n        {\n            object defaultValue = property.Value.Type\n              switch\n            {\n                JsonObjectType.Array =>\n                  Enumerable.Empty<object>(),\n                JsonObjectType.Boolean => false,\n                JsonObjectType.Integer => 0,\n                JsonObjectType.Number => 0,\n                _ => null!\n            };\n            returnValue[property.Key] = defaultValue;\n        }\n        result = returnValue;\n        return true;\n    }\n    return base.TryConvert(binder, out result);\n}\n```", "```cs\npublic override IEnumerable<string> GetDynamicMemberNames() => _schema.ActualProperties.Keys;\n```", "```cs\nusing NJsonSchema;\nusing Chapter9;\nvar schema = await JsonSchema.FromFileAsync(\"person.json\");\ndynamic personInstance = new JsonSchemaType(schema);\nvar personMetaObject = personInstance.GetMetaObject(Expression.Constant(personInstance));\nvar personProperties = personMetaObject.GetDynamicMemberNames();\nConsole.WriteLine(string.Join(',', personProperties));\n```", "```cs\nFirstName,LastName\n```", "```cs\npersonInstance.FirstName = \"Jane\";\nConsole.WriteLine($\"FirstName : '{personInstance.FirstName}'\");\n```", "```cs\nFirstName : 'Jane'\n```", "```cs\nConsole.WriteLine($\"LastName : '{personInstance.LastName}'\");\n```", "```cs\nLastName : ''\n```", "```cs\nvar dictionary = (Dictionary<string, object>)personInstance;\nConsole.WriteLine(JsonSerializer.Serialize(dictionary));\n```", "```cs\n{\"FirstName\":\"Jane\",\"LastName\":null}\n```", "```cs\npersonInstance.LastName = 42;\n```", "```cs\nUnhandled exception. Chapter9.InvalidTypeForProperty: Property 'LastName' on 'Person' is invalid.\n```", "```cs\npersonInstance.FullName = \"Jane Doe\";\n```", "```cs\nUnhandled exception. Microsoft.CSharp.RuntimeBinder.RuntimeBinderException: 'Chapter9.JsonSchemaType' does not contain a definition for 'FullName'\n```"]