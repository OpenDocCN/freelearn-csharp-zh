["```cs\ndotnet new webapi -n OutputFormatterSample -o OutputFormatterSample\n```", "```cs\ncd OutputFormatterSample\ncode .\n```", "```cs\n    builder.Services.AddControllers()\n        .AddXmlSerializerFormatters();\n    ```", "```cs\n    builder.Services.AddControllers()\n        .AddMvcOptions(options =>\n        {\n            options.OutputFormatters.Add(\n                new XmlSerializerOutputFormatter());\n        });\n    ```", "```cs\nbuilder.Services.AddControllers()\n    .AddMvcOptions(options =>\n    {\n        options.RespectBrowserAcceptHeader = true; \n          // false by default\n    });\n```", "```cs\nbuilder.Services.Configure<KestrelServerOptions>(options =>\n{\n    options.AllowSynchronousIO = true;\n});\n```", "```cs\n    [Route(\"api/[controller]\")]\n    [ApiController]\n    public class PersonsController : ControllerBase\n    {\n    }\n    ```", "```cs\n    [HttpGet]\n    public ActionResult<IEnumerable<Person>> Get()\n    {\n        var persons = A.ListOf<Person>(25);\n        return persons;\n    }\n    ```", "```cs\n    using GenFu;\n    using Microsoft.AspNetCore.Mvc;\n    using OutputFormatterSample.Models;\n    ```", "```cs\n    public class Person\n    {\n        public int Id { get; set; }\n        public string? FirstName { get; set; }\n        public string? LastName { get; set; }\n        public int Age { get; set; }\n        public string? EmailAddress { get; set; }\n        public string? Address { get; set; }\n        public string? City { get; set; }\n        public string? Phone { get; set; }\n    }\n    ```", "```cs\n    builder.Services.AddControllers()\n        .AddMvcOptions(options =>\n        {\n            options.RespectBrowserAcceptHeader = true; \n              // false by default\n            options.OutputFormatters.Add(\n                new XmlSerializerOutputFormatter());\n        });\n    ```", "```cs\n    public class VcardOutputFormatter : TextOutputFormatter\n    {\n        public string? ContentType { get; }\n        public VcardOutputFormatter()\n        {\n            SupportedMediaTypes.Add(\n                MediaTypeHeaderValue.Parse(\"text/vcard\"));\n            SupportedEncodings.Add(Encoding.UTF8);\n            SupportedEncodings.Add(Encoding.Unicode);\n        }\n        protected override bool CanWriteType(Type type)\n        {\n        }\n        public override Task WriteResponseBodyAsync(\n            OutputFormatterWriteContext context,\n             Encoding selectedEncoding)\n        {\n        }\n        private static void FormatVcard(\n            StringBuilder buffer, \n            Person person, \n            ILogger logger)\n        {\n        }\n    }\n    ```", "```cs\n    using Microsoft.AspNetCore.Mvc.Formatters;\n    using System.Text;\n    using Microsoft.Extensions.Logging;\n    using Microsoft.Net.Http.Headers;\n    using OutputFormatterSample.Models;\n    ```", "```cs\n    protected override bool CanWriteType(Type type)\n    {\n        if (typeof(Person).IsAssignableFrom(type)\n            || typeof(IEnumerable<Person>)\n                .IsAssignableFrom(type))\n        {\n            return base.CanWriteType(type);\n        }\n        return false;\n    }\n    ```", "```cs\n    public override Task WriteResponseBodyAsync(\n        OutputFormatterWriteContext context,\n        Encoding selectedEncoding)\n    {\n        var serviceProvider = \n          context.HttpContext.RequestServices;\n        var logger = serviceProvider.GetService(\n            typeof(ILogger<VcardOutputFormatter>)) as \n              ILogger;\n        var response = context.HttpContext.Response;\n        var buffer = new StringBuilder();\n        if (context.Object is IEnumerable<Person>)\n        {\n            foreach (var person in context.Object as \n              IEnumerable<Person>)\n            {\n                FormatVcard(buffer, person, logger);\n            }\n        }\n        else\n        {\n            var person = context.Object as Person;\n            FormatVcard(buffer, person, logger);\n        }\n        return response.WriteAsync(buffer.ToString());\n    }\n    ```", "```cs\n    private static void FormatVcard(\n        StringBuilder buffer, \n        Person person, \n        ILogger logger)\n    {\n        buffer.AppendLine(\"BEGIN:VCARD\");\n        buffer.AppendLine(\"VERSION:2.1\");\n        buffer.AppendLine(\n            $\"FN:{person.FirstName} {person.LastName}\");\n        buffer.AppendLine(\n            $\"N:{person.LastName};{person.FirstName}\");\n        buffer.AppendLine(\n            $\"EMAIL:{person.EmailAddress}\");\n        buffer.AppendLine(\n            $\"TEL;TYPE=VOICE,HOME:{person.Phone}\");\n        buffer.AppendLine(\n             $\"ADR;TYPE=home:;;{person.Address};\n                 {person.City}\");\n        buffer.AppendLine($\"UID:{person.Id}\");\n        buffer.AppendLine(\"END:VCARD\");\n        logger.LogInformation(\n            $\"Writing {person.FirstName}  \n              {person.LastName}\");\n    }\n    ```", "```cs\n    builder.Services.AddControllers()\n        .AddMvcOptions(options =>\n        {\n            options.RespectBrowserAcceptHeader = true; \n              // false by default\n            options.OutputFormatters.Add(\n                new XmlSerializerOutputFormatter());\n            // register the VcardOutputFormatter\n            options.OutputFormatters.Add(\n                new VcardOutputFormatter());\n        });\n    ```", "```cs\n    public override async Task WriteResponseBodyAsync(\n        OutputFormatterWriteContext context,\n        Encoding selectedEncoding)\n    {\n        var response = context.HttpContext.Response;\n        var csv = new CsvWriter(\n            new StreamWriter(response.Body),\n            CultureInfo.InvariantCulture);\n        IEnumerable<Person> persons;\n        if (context.Object is IEnumerable<Person>)\n        {\n            persons = context.Object as \n              IEnumerable<Person>;\n        }\n        else\n        {\n            var person = context.Object as Person;\n            persons = new List<Person> { person };\n        }\n        await csv.WriteRecordsAsync(persons);\n    }\n    ```", "```cs\n    builder.Services.AddControllers()\n        .AddMvcOptions(options =>\n        {\n            options.RespectBrowserAcceptHeader = true; \n               // false by default\n            options.OutputFormatters.Add(\n                new XmlSerializerOutputFormatter());\n            // register the VcardOutputFormatter\n            options.OutputFormatters.Add(\n                new VcardOutputFormatter());\n            // register the CsvOutputFormatter\n            options.OutputFormatters.Add(\n                new CsvOutputFormatter());\n        });\n    ```"]