- en: Prototyping
  prefs: []
  type: TYPE_NORMAL
- en: At this point in the book, you might have realized that, practical as it may
    be, game design happens in the designer's head first, on a document of some sort
    second, and only in a third step is it possible to implement it.
  prefs: []
  type: TYPE_NORMAL
- en: To actually make the game happen, the designer has to get their hands on a tool
    that allows them to create working software; to write some code. Not all game
    designers are programmers, and even if they know how to program, designing and
    programming are two different jobs both requiring a person's full attention (and
    the bigger the project, the more this truth cannot be bent).
  prefs: []
  type: TYPE_NORMAL
- en: There is one activity where a game designer is required to turn the design into
    a playable thing as if he was the only person working on it. This is the quintessence
    of practical game design.
  prefs: []
  type: TYPE_NORMAL
- en: This is the creation of a game prototype.
  prefs: []
  type: TYPE_NORMAL
- en: What is a prototype?
  prefs: []
  type: TYPE_NORMAL
- en: A prototype is a model built to prove a concept.
  prefs: []
  type: TYPE_NORMAL
- en: This definition is applicable to anything really, not only games. Most of the
    products we use every day, from the keyboard I am typing on to the complex machines
    that can fly outside the Earth's atmosphere and reach other planets, all of these
    things are the result of endless designs, prototypes, iterations, and failures.
  prefs: []
  type: TYPE_NORMAL
- en: Game prototypes are not meant to be representative of what the entire game will
    look like; in that case, we talk more about tech demo or pre-alpha development
    builds. If you have a pre-alpha ready, that means you are at a later stage of
    the development and you have probably already prototyped your core mechanics to
    get to the pre-alpha stage. Nonetheless, even at later stages, you might need
    to address problems that were not obvious before. Maybe finally feeling how your
    game actually plays in the hands of a playtester—or even your own—raises questions
    about something you could have done differently or better.
  prefs: []
  type: TYPE_NORMAL
- en: Prototyping ultimately means answering those questions. It is crucial to nail
    down what those questions are as early as possible.
  prefs: []
  type: TYPE_NORMAL
- en: 'They could be generic questions, such as Would this work?, Would this be more
    interesting?, or Which one is the best? We will be more specific later, but for
    now, keep this in mind: if you don''t have a clear question, why are you prototyping?
    And how will you be able to tell whether the prototype is working or not?'
  prefs: []
  type: TYPE_NORMAL
- en: Why a prototype?
  prefs: []
  type: TYPE_NORMAL
- en: The main reason why prototypes exist is that we need to narrow down the risk
    of making something that doesn't work. Imagine that you have infinite time and
    resources; what would be the point of creating a prototype? Why not just create
    the entire game, and if it doesn't work, we'd have all we need to try again? Prototypes
    exist exactly because we need to make the best use of the scarce time and resources
    we've got.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we build a prototype for a game, we''re generally looking at:'
  prefs: []
  type: TYPE_NORMAL
- en: Whether a mechanic is engaging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Selecting the best idea from a set of alternatives
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing the technical feasibility of an idea (where the idea can be anything
    from a full game to a graphics technique or AI algorithm)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the user can navigate the game UI effectively and intuitively
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Please note that our first point is a huge one! To know what a fun mechanic
    is and how to judge whether yours is fun or not, you'd need to master everything
    we said in [`Chapter 5`](index_split_133.html#filepos359600), Adaptation of Mechanics,
    and [`Chapter 6`](index_split_150.html#filepos399514), Invention of Mechanics;
    make sure to go back to those chapters whenever you need more clarity!
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Prototyping techniques
  prefs: []
  type: TYPE_NORMAL
- en: 'When it comes to creating a prototype, there are two main options: physical
    and digital.'
  prefs: []
  type: TYPE_NORMAL
- en: You would be surprised to know how many times a physical prototype is used in
    the video game industry. Many game mechanics can be reproduced through board games,
    card games, miniature games, or just one sheet of paper with a pen and maybe a
    few coloring pencils.
  prefs: []
  type: TYPE_NORMAL
- en: Digital prototypes are a bit more complex to put together, but of course, their
    fidelity to the medium and ability to create real-time environments and handle
    complex calculations makes them the go-to choice. Most of the time, though, it
    is always a great idea to start very simply on paper, and then move to digital
    with clearer ideas.
  prefs: []
  type: TYPE_NORMAL
- en: Paper prototyping
  prefs: []
  type: TYPE_NORMAL
- en: 'Paper prototypes are my favorites. Making them is as quick as it takes to write
    on a piece of paper and cut out some cardboard elements. Each time is like creating
    a little board game! Here''s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A simple sketch on a piece of paper might be a great start for a prototype;
    in this case, the emphasis is on the touch inputs for an RTS game
  prefs: []
  type: TYPE_NORMAL
- en: 'If you''re wondering what a paper prototype might look like, have a look at
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00068.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'A paper prototype for an alternative combat system for Battlehand: Heroes.
    We''re going to discuss this particular prototype as a case study later in this
    chapter'
  prefs: []
  type: TYPE_NORMAL
- en: I'm sure you imagined something much nicer and professional-looking. That's
    not the case at all!
  prefs: []
  type: TYPE_NORMAL
- en: Never trust a prototype that looks too good; as we said, by definition prototypes
    are stripped of anything not essential.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to note that there is a huge difference between a UX-UI paper
    prototype and a game paper prototype. Sometimes a game prototype might include
    UI and UX elements, but the questions we want to answer by paper prototyping a
    game are not related to usability or interface—we want to investigate the game
    mechanics and how fun they are. Always keep this in mind!
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Advantages of paper prototyping
  prefs: []
  type: TYPE_NORMAL
- en: 'So let''s have a look at the main advantages of paper prototyping:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Cheap: Paper prototypes are cheap, both in terms of time and resources.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'No programming involved: This is straightforward; everyone can create a paper
    prototype. You can apply your game design knowledge and be in full control of
    the game creation without involving any programmers or being limited by technology.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Easy and quick to create: You can create a paper prototype by sketching on
    a sheet of paper with a pencil. No creative process is quicker than this. Most
    of the prototypes require a bit more work though, such as cutting pieces of cardboard,
    printing some images or placeholders, and writing cards. Some paper prototypes
    can even use elements such as miniatures (from other games or easily purchasable
    online) or dice. No matter how much stuff you might need to create them, it will
    always be much quicker and easier than creating anything on a computer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Easy to try and iterate: This is another incredible advantage. You can build
    a paper prototype in a couple of hours and try it with anyone (friends, family,
    colleagues) without having to build any working software. Anything that doesn''t
    work can be changed immediately, even during the test itself. Iteration speed
    is the fastest it could be.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Abstraction: Abstraction is great when it comes to testing prototypes. There
    are no distractions coming from how the game looks or anything else that is not
    important. If those pieces of paper come to life and the rules generate fun dynamics,
    they could only get better by adding a theme and a visual aesthetic on top of
    them. Abstraction, as we are going to see in the next paragraph, is a double-edged
    sword as it also presents some risks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Limitations of paper prototypes
  prefs: []
  type: TYPE_NORMAL
- en: 'Of course, like any tools, paper prototypes present some disadvantages:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Abstraction: To abstract on a system in a way that works on paper before the
    virtual world, the experience is required. You need to be able to distill the
    essential elements and leave out everything else. You''d need to make compromises
    and still create something that can answer real questions for the game as it is
    going to be on screen. Experience is the only way to master abstraction. The good
    news is that you can start prototype games right now, without studying any programming
    language, even away from your computer. You don''t even have to invent a game,
    just pick an existing game and imagine how would you paper prototype some of its
    core mechanics. Don''t be afraid of failure. Prototyping is all about making mistakes
    when they don''t have dramatic repercussions. Prototype and fail as much as you
    can and with everything you can.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Struggle to represent complex and real-time scenarios: This is the main problem
    of paper prototypes. Just imagine what a paper prototype of a fighting game like
    Street Fighter would look like. Already giving you a headache, right? Even more
    difficult, imagine a paper prototype of a VR game, where the main mechanic is
    based on the navigation of a 3D space. Games that require the use of physical
    skill, complex calculations, physics, and many others present a huge challenge
    and sometimes they simply cannot be effectively abstracted into something that
    works on paper. So be aware that sometimes a paper prototype is simply not the
    right tool to answer your questions. That is fair enough, as fortunately, you
    have much more available!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Can''t fully replace digital prototypes: Another problem of paper prototypes
    is that they need to be translated into the digital world at some point. So they
    are indeed an extra step, as cheap as they are. The value of a paper prototype
    lies in the chance to catch big problems before any implementation; when your
    design seems to work on paper and the most evident problems have been discarded,
    move on to digital as soon as possible. Cheap and fast are the key-words for paper
    prototypes. As soon as a paper prototype shows signs of being slow and complex,
    you know this is the time to move on to digital or to realize you have to ask
    a more specific question and start from scratch again.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Digital prototyping
  prefs: []
  type: TYPE_NORMAL
- en: When your designs and paper prototypes come to life on screen is when things
    get serious. Be prepared to see what you have imagined in a very different way—be
    prepared to see things that don't work. The faster you realize something's wrong,
    the quicker you'll get back to the drawing board, and the better your chance of
    releasing a fun game. This is the idea behind digital prototypes. Put a working
    software together as soon as possible and iterate as much as you can on it to
    define and redefine your vision. Unlike paper prototyping, digital prototyping
    is a necessary step. If you're not prototyping, you are making a mistake. Period.
  prefs: []
  type: TYPE_NORMAL
- en: It might happen that the prototyping phase is skipped, maybe because there's
    no time, no resources or the team is extremely confident to just move on to production
    right away. Remember, prototyping means seeking answers to specific questions.
    If you already have these answers, there's no need for a prototype. But if the
    answers are not clear, and the prototyping phase is skipped and the team moves
    onto development, what is really happening is that a very complex and high-fidelity
    prototype is being developed with the intention of selling it as a finished product.
  prefs: []
  type: TYPE_NORMAL
- en: You can imagine how disastrous this approach would be if something doesn't work.
    You'd be surprised how often this happens, even in the most respected studios.
    And as a professional in the games industry, I guarantee you will hear a lot phrases
    such as "it's too late to change that", "it doesn't work, but we have to live
    with it" and so on and so forth. These phrases are the result of designs being
    implemented without questions, developed for months without early reviews and,
    in short, with no prototyping at all.
  prefs: []
  type: TYPE_NORMAL
- en: Common prototyping mistakes
  prefs: []
  type: TYPE_NORMAL
- en: The only con of developing a digital prototype is that it will take some time,
    although it's guaranteed that it will save time in the long run. There are also
    some other pitfalls, though. Prototypes are tools, and as such, they could be
    used in the wrong way.
  prefs: []
  type: TYPE_NORMAL
- en: Let's have a look at the most common mistakes and pitfalls of prototyping.
  prefs: []
  type: TYPE_NORMAL
- en: The never-ending prototype
  prefs: []
  type: TYPE_NORMAL
- en: When working on a prototype, it is easy to get attached and try to make it right
    by iterating on the same thing over and over again. If something doesn't work,
    the design has to change. The sooner the team realizes it, the more the prototyping
    phase will serve its purpose. The risk of a quickly built prototype is that it
    might miss some important elements that might end up being essential for making
    a final judgment. As part of the iterative nature of prototypes, this is fine.
    A prototype can start very small (that is, just the core mechanic of a new game),
    and expand to something larger through successive iterations (that is, core mechanics
    and a few puzzles or enemies). However, the risk is to keep iterating outside
    of the scope of the initial question, such as by building a progression system
    on top of that core mechanic because it felt weak or incomplete. Whenever you
    feel that a prototype is increasing in scope and starts looking like an entire
    game, it is probably time to stop and re-assess whether those initial questions
    have been answered.
  prefs: []
  type: TYPE_NORMAL
- en: Spending time creating systems
  prefs: []
  type: TYPE_NORMAL
- en: Diving into the game's final implementation with the hope of iterating later
    is always a bad idea. When building software, good engineering is required. The
    software has to be designed, just like the game. Systems need to be built before
    actual gameplay. Imagine a car racing game. The programmer needs to engineer a
    system that can handle different types of cars, with different values of speed,
    acceleration, braking, stability, and so on. He has to build this data system
    first, and only then will the designer be able to define the numbers and try them.
    When working on a prototype, the engineer should just hard-code the values the
    designer wants to try (maybe with a rudimentary system to expose those variables
    and make them changeable to the designer, so he can play with different values).
    The role of the programmer here is to get something playable on screen as soon
    as possible, by any means possible. System implementation should be always postponed
    to the implementation stage.
  prefs: []
  type: TYPE_NORMAL
- en: Using the prototype as a code-base for the production project
  prefs: []
  type: TYPE_NORMAL
- en: 'A good, quick, on-the-point prototype is very likely to be a code mess, full
    of hacks and horrendous code writing, especially if it was written by the designer
    himself. You don''t want to end up with that code in the final project. When a
    prototype works and all the questions have been answered, it''s time to start
    from scratch. Now is the time to build those systems and allow an engineer to
    design the code properly. Again, the mirage of using the prototype code as a base
    to save time is just that: a mirage. Some time might be saved early on, but rest
    assured that the first time a problem arises all the time initially saved and
    more will be lost. This is true even if the prototype worked perfectly fine.'
  prefs: []
  type: TYPE_NORMAL
- en: That said, some experienced engineers might be able to create prototypes with
    perfectly engineered code ready to be taken into production. It is their call
    in the end and there are surely situations where this would be possible. However,
    when a designer or another less technical team member is involved in the creation,
    is always a better idea to let the engineer make this kind of decision.
  prefs: []
  type: TYPE_NORMAL
- en: Spending time adding features, art, and effects
  prefs: []
  type: TYPE_NORMAL
- en: Any time spent adding stuff to a prototype that is not directly related to answering
    the initial questions is time lost. Not only that, every unnecessary thing added
    to a prototype is a step toward the prototype code evolving into the final game.
    Be wary of anything that seems to be working better after some good art, animations,
    or effects are added. You will be tempted to think that just by looking good a
    game could hide its design flaws.
  prefs: []
  type: TYPE_NORMAL
- en: That is never true.
  prefs: []
  type: TYPE_NORMAL
- en: Seeking confirmations
  prefs: []
  type: TYPE_NORMAL
- en: This is the most dangerous pitfall of prototyping.
  prefs: []
  type: TYPE_NORMAL
- en: If you are convinced you already have an answer and you are building a prototype
    to demonstrate that it is right at all costs, you're missing a great opportunity.
    It is crucial to remain open-minded. It is very likely that you'd be building
    a prototype based on a hypothesis to make something new and better.
  prefs: []
  type: TYPE_NORMAL
- en: Everyone would love to hear how brilliant the solution provided by their prototypes
    is, and it's great when it happens. If it doesn't, the biggest mistake you can
    make is to be protective of your work and fail to see how a negative response
    is as useful as a good one. A prototype that shows how something does not work
    is a success as much as one that has been proven right.
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember: the goal is to have answers, not to actually build the game.'
  prefs: []
  type: TYPE_NORMAL
- en: A step-by-step guide to prototyping
  prefs: []
  type: TYPE_NORMAL
- en: Here follows a step-by-step process for developing an effective prototype. These
    steps can be used to prototype an entire game or just a single feature, or maybe
    just to evaluate a change to an existing system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 1: Ask the right questions'
  prefs: []
  type: TYPE_NORMAL
- en: Whether the prototype is for trying out a game idea or a new mechanic or to
    evaluate and improve something within your game, you need to have a clear problem
    in mind and how you imagine the prototype is going to solve it. Never start prototyping
    if you don’t know what you need to evaluate or prove.
  prefs: []
  type: TYPE_NORMAL
- en: What would make a good question? And a bad one?
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Usually, good questions are specific. Asking whether a mechanic is fun or not
    would be a bad question. What do we mean by fun? A better question would probably
    be: does this mechanic provide enough decision-making for the player? Are his
    choices meaningful?'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Step 2: Select the framework and tools'
  prefs: []
  type: TYPE_NORMAL
- en: Paper or digital prototyping? If paper, is it going to need anything other than
    just pen and paper? Maybe dice, miniatures, cards? If digital, does it require
    a game engine? A spreadsheet? A presentation?
  prefs: []
  type: TYPE_NORMAL
- en: Some of these things might not be very clear at the beginning. In that case,
    start with something and evaluate what else you might need as you go. If you realize
    something does work—say you find out you're not able to prototype a system on
    paper—just scrap it and start over with a better tool.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 3: Create the rules'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is extremely important for paper prototypes: what are the rules? How do
    you actually play the prototype? Paper prototype rules look a lot like a board
    game rule manual. Make sure the rules are simple and clear. Also, digital prototypes
    need rules. What kind of mechanic do you need to implement? How will you be able
    to condense a complex game into its abstract and essential version?'
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 4: Implement and create the prototype'
  prefs: []
  type: TYPE_NORMAL
- en: It doesn't matter if this is writing the code or cutting out the elements with
    a pair of scissors. Make something playable happen as soon as possible
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 5: First Playtest'
  prefs: []
  type: TYPE_NORMAL
- en: As soon as you've got something playable, try it. Nothing is going to work as
    you imagined. The first play of a prototype is crucial because if you approach
    it with bias, thinking that it is going to work, you are committing one of the
    common mistakes. The first iteration of any prototype is not going to work. So
    when you play the first time, take notes and go back to the drawing board to make
    the changes you need. When we say play, we mean to play it with as many people
    as you can—especially people not involved in the development. At this stage what
    you really need is an unbiased opinion.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 6: Iterate'
  prefs: []
  type: TYPE_NORMAL
- en: Re-implement anything that wasn't right the last time, play with your variables,
    change the rules. Do this until you find an answer to your initial question.
  prefs: []
  type: TYPE_NORMAL
- en: Play and iterate should be quick processes. If you don't find your answers after
    a few iterations, it might well be that you're asking the wrong question or that
    you don't want to admit that the answers are just disproving your concept.
  prefs: []
  type: TYPE_NORMAL
- en: If your hypothesis is disproved by your prototype, don't try to pursue that
    solution anyway.
  prefs: []
  type: TYPE_NORMAL
- en: Prototyping is a process worth doing only if you’re willing to accept the consequences
    and dump what doesn't work.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 7: Move on'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are only two possible outcomes from the previous steps: you either prove
    or disprove your hypothesis. In both cases, the job of your prototype is over.
    If the answer is not the one you hoped for, don''t make the mistake of forcing
    things to work out your way. If the answer is positive, don''t try to add on top
    of your prototype and make it the feature or the game. Move on and build something
    new from the answers you have got, not from the prototype you have created.'
  prefs: []
  type: TYPE_NORMAL
- en: Prototyping exercise
  prefs: []
  type: TYPE_NORMAL
- en: So, you know the differences between paper and digital prototyping. You can
    start working and getting the experience right now with paper.
  prefs: []
  type: TYPE_NORMAL
- en: In fact, you must start right now.
  prefs: []
  type: TYPE_NORMAL
- en: Before reading on, grab a pen and a piece of paper and try to prototype something.
    It has to be something doable in under an hour, don't worry about trying something
    really cool or a real game idea you have. Try to get really practical.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some ideas:'
  prefs: []
  type: TYPE_NORMAL
- en: A racing game for two players A and B, such as Game of the Goose
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A simple combat system for a 1v1 card game
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A puzzle level for a platformer game such as Super Meat Boy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A 1v1 strategy game that uses a board and a grid, like Chess
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Don’t worry about the results, just try it and see what you come up with in
    under one hour.
  prefs: []
  type: TYPE_NORMAL
- en: The hands-on game designer
  prefs: []
  type: TYPE_NORMAL
- en: If you tried to create some paper prototypes, you might have found answers to
    your questions. If you did right, you might also have even more questions.
  prefs: []
  type: TYPE_NORMAL
- en: 'One question could be: does it really work like this? Absolutely yes.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Prototyping is about discovering, trying, and making mistakes. If you don''t
    try, you will never learn. The next step would be trying to create something in
    the digital world. Here things become tougher because you might not have any programming
    skills and probably not even know where to start. Mark these words: by learning
    how to use a game engine and program basic game mechanics and small prototypes,
    you will be ahead of any aspiring game designers who don''t have this skill.'
  prefs: []
  type: TYPE_NORMAL
- en: This is the real skill that will always give you an edge over the thousands
    of other designers that will be competing with you for the few design roles available
    in the game industry. Reading and studying is the bare minimum, so don't think
    that by reading this and many other game design books you will be any better than
    your competition. All of them have done the same!
  prefs: []
  type: TYPE_NORMAL
- en: 'The other factor that makes you a better (more desirable, to be precise) designer
    is your experience. If you have never worked on a game professionally, it is unlikely
    that you’ll be ever considered better than a designer who did. When you have little
    or no professional experience there''s only one thing that will make you stand
    out: your personal projects and the ability to design and implement your ideas.
    I call this game designer The hands-on game designer. It is a rare breed, and
    as such it is in high demand anywhere in the game industry.'
  prefs: []
  type: TYPE_NORMAL
- en: Learn how to implement and code your games. You don't need to learn how to go
    beyond the prototyping stage. You don't have to master computer science or software
    engineering principles. You just need to know how to make your design happen on
    screen in a prototype. Do so and you’ll have one foot already in your first job
    as a game designer.
  prefs: []
  type: TYPE_NORMAL
- en: Not only that, as your experience increases in game design, you will find your
    technical skills to be an incredible tool for communicating ideas, pitching projects,
    demonstrating your hypotheses, and most of all, for working independently or freeing
    up the engineers from some implementation work, leaving them more time to focus
    on more important tasks. You yourself will have more control over how your designs
    make it into the game. Be a hands-on designer. Be practical and evaluate your
    work in terms of how many things you can make happen.
  prefs: []
  type: TYPE_NORMAL
- en: A paper prototype case-study
  prefs: []
  type: TYPE_NORMAL
- en: We are going to examine in detail a case study from my personal work experience
    at Another Place Productions. At a certain point during the development of our
    latest game, Battlehand Heroes, we had to address an unexpected problem. The combat
    system that was good enough for the first title of the Battlehand IP was proving
    problematic in the new game.
  prefs: []
  type: TYPE_NORMAL
- en: Questioning a combat system
  prefs: []
  type: TYPE_NORMAL
- en: 'Battlehand: Heroes is a turn-based RPG in which the player builds his team
    of heroes, each with a unique deck of cards to battle. The combat system that
    worked quite well in the first game, Battlehand, was lacking the depth to engage
    a new generation of players. The first game was released in 2015, and player''s
    tastes and expectations for games always evolve, so games need to also. The players
    struggled to understand why they should play one card instead of another, how
    to choose their strategy, and how to correctly react to the enemy''s moves.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You might wonder how we actually found out these problems in the game: by playtesting!
    It is crucial to test your game as soon as possible with real players and note
    down everything about their experience. We''re going to talk more about playtesting
    and user research later in this book.'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: We discussed many different solutions for improving the core of the combat systems,
    but before committing the development team to any of those, we decided to prototype
    on paper the more promising ideas.
  prefs: []
  type: TYPE_NORMAL
- en: 'The combat system is based on 2v2 heroes battles, the player can manage each
    of his heroes and their own deck of 8 cards. Each hero belongs to an element:
    Earth, Fire, Water, Air, or Spirit. They are governed by a rock-paper-scissors
    (RPS) strength/weakness relation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00104.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Battlehand elemental RPS mechanic: Fire is strong against Earth, Earth is strong
    against Air, Air against Spirit, Spirit against Water and Water against Fire'
  prefs: []
  type: TYPE_NORMAL
- en: My hypothesis was that the game could have benefited from the introduction of
    a multi-layered RPS system on top of the elements. Up to this point, each hero
    could have cards that could be heal, shield, and attack. All of them balanced
    around their mere power (the more the damage, the shield points, or the HP cured,
    the better the card, basically). The idea was to try to assign to each card a
    property that could make it strong or weak against other cards regardless of their
    numbers. If a shield could block most of the attacks but some attacks can automatically
    pierce a shield, that would create an interesting scenario where the right card
    for the right situation may not always be the most powerful one, and it would
    be up to the player to select it.
  prefs: []
  type: TYPE_NORMAL
- en: Addressing the problem
  prefs: []
  type: TYPE_NORMAL
- en: This is an advanced, real-life scenario; as such, things are never exactly as
    predicted. In fact, the prototype needed to answer more than one question. But
    let's get back to the problems again.
  prefs: []
  type: TYPE_NORMAL
- en: 'The combat lacks depth in the sense that:'
  prefs: []
  type: TYPE_NORMAL
- en: One of the most important strategic choices in the fight is about which hero
    you select for that specific combat (to be strong against the enemy elements).
    The strategy should also propagate into the combat itself, not just exist in the
    pre-fight.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When it is time to play a card, the best one to play is always the most powerful.
    The choice could be more interesting.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All the heroes have access to all the card types (shields, heals, attacks),
    so each hero can fulfill all the roles in combat (healer, supporter, attacker,
    defender, and so on).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With these problems clearly in mind, we can ask the right questions.
  prefs: []
  type: TYPE_NORMAL
- en: Asking the right questions – step 1
  prefs: []
  type: TYPE_NORMAL
- en: 'Does the prototyped system:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a scenario where I don't always choose the most powerful card, but the
    most useful for that specific situation?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allow me to think and plan a few card draws ahead?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shift the attention from the RPS mechanic to the cards?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Selecting the tools – step 2
  prefs: []
  type: TYPE_NORMAL
- en: With a clear problem and clear questions to answer, it is time to identify which
    kind of prototype are we going to need. A great thing about old school turn-based
    RPG and card games is that using paper prototypes comes just naturally to them!
    If you consider the few other solutions to evaluate and prototype, paper prototyping
    sounds like the quickest and cheapest solution.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the rules – step 3
  prefs: []
  type: TYPE_NORMAL
- en: A paper prototype is always an abstraction of what you get in a digital game,
    so it's more important than ever to get in only the essential stuff.
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the rules I came up with:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00040.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Don't worry if these rules are not very clear to you, the point of this exercise
    is to understand the prototyping process more than the specific example!
  prefs: []
  type: TYPE_NORMAL
- en: 'For your reference, this is a screenshot of a few Battlehand Heroes cards at
    the time of the prototype creation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00132.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Four cards from an early version of Battlehand: Heroes'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, there is a huge difference between the real game mechanics and
    the prototype's rules, but the core is really the same. The questions we asked
    can be answered by a much simpler abstraction of the digital game.
  prefs: []
  type: TYPE_NORMAL
- en: Implementation – step 4
  prefs: []
  type: TYPE_NORMAL
- en: This is the part I love the most. To create the prototype, I simply cut 8 cards
    per hero and wrote the card rules on each of them. Then I created the various
    tokens needed and used 4 miniatures to represent the heroes.
  prefs: []
  type: TYPE_NORMAL
- en: I also used dice to keep track of the various numbers going on in the game and
    colored cardboard on which I took various notes related to the heroes during the
    gameplay.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each hero''s deck was designed to create a compelling experience with just
    a few cards. We will learn later about balancing and how to set up every number
    and variable in a game:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00199.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Our Water hero, with his 8 cards and all the necessary pieces to play the prototype
  prefs: []
  type: TYPE_NORMAL
- en: First play – step 5
  prefs: []
  type: TYPE_NORMAL
- en: The first play showed a very promising experience. Playing the prototype was
    fun and it was clear that the whole thing was on the right track. Of course, the
    initial questions were really spot-on, as the knowledge of the game we had was
    deep and based on a previous title for the same IP and a long list of well-known
    problems and possible improvements.
  prefs: []
  type: TYPE_NORMAL
- en: 'What really required some more thought were the rules. The damage and HP ranges
    were too tight: with attacks dealing 1 to 4 damage and heroes having from 6 to
    12 HP, some cards were too strong and some heroes were too weak.'
  prefs: []
  type: TYPE_NORMAL
- en: Another flaw was the lack of a combination of card plays (COMBO) to get greater
    advantages (that is, two consecutive DOT attacks dealing extra damage).
  prefs: []
  type: TYPE_NORMAL
- en: Iteration – step 6
  prefs: []
  type: TYPE_NORMAL
- en: 'With the problems of the first play in mind, the iterative process of improving
    the prototype started: we tweaked the numbers, added a combo system, and switched
    some of the cards (for example, we removed all the healing cards from a hero that
    was supposed to be more focused on attacking).'
  prefs: []
  type: TYPE_NORMAL
- en: 'By continuing to play the prototype, two other flaws emerged. Some battles
    were dragging on for too long in a sort of stall, so we added a damage crescendo
    after a certain number of turns passed. We also found that the combo was hard
    to line up and a bit unsatisfactory, so we decided on an extreme solution: lining
    up a combo means instant-killing the target hero. This little change spiced up
    the entire combat a lot, giving a great reward to long-term planning. Of course
    in the real game nothing that powerful would be implemented, but the game was
    clearly more fun and engaging. So we noted that down and kept it in mind for our
    final version of the combo system.'
  prefs: []
  type: TYPE_NORMAL
- en: Final step
  prefs: []
  type: TYPE_NORMAL
- en: Were all the questions answered?
  prefs: []
  type: TYPE_NORMAL
- en: 'I’d say yes, perfectly:'
  prefs: []
  type: TYPE_NORMAL
- en: Having different types of cards be more or less powerful against different types
    of shields moved the attention away from just the mere numbers, so I found myself
    going for a less powerful card that had the proper effect to rightly counter the
    enemy setup. This was happening consistently enough to make me think about new
    interesting types of cards and abilities and how to build a more effective deck.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The extreme combo system forced me to always think how to pull out a good combo
    and added a lot of thrill to the next card draw.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The elemental advantage became almost irrelevant, with the whole focus of the
    combat shifted onto the battle itself. It even cast some doubts about the elemental
    wheel, as it made it clear that the RPS mechanic was previously too much on the
    meta-game side (limiting the strategic choices to the pre-battle phase, when deciding
    which elements to bring into battle).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With these great answers, we were able to move to digital. As we mentioned,
    the downside of paper prototypes is that if they work on paper, you have to try
    them in the digital world too before starting the actual production. There are
    rare cases where the answer is so clear that you can move to production really
    quickly, but what you want to do with paper prototypes is to fail fast more than
    really find a working solution. If it doesn't work on paper, it most likely won't
    anywhere. On the other hand, if it does work on paper, you still have to make
    sure you can translate that abstraction into something that works in a video game.
  prefs: []
  type: TYPE_NORMAL
- en: From paper to digital
  prefs: []
  type: TYPE_NORMAL
- en: In our specific case, bringing the prototype to the digital game was a fairly
    easy and quick job.
  prefs: []
  type: TYPE_NORMAL
- en: 'As the game was already developed to a playable stage, the main job was to
    modify the current game system to reflect the new changes. Of course, we had to
    adapt the rules from the paper prototype to the digital game logic, implement
    them in the quickest and efficient way, play, and iterate:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00063.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The cards from the paper prototype were implemented in the digital game
  prefs: []
  type: TYPE_NORMAL
- en: Abstraction versus reality
  prefs: []
  type: TYPE_NORMAL
- en: After we implemented the prototype principles in the actual game, we were ready
    to start over with the iterations.
  prefs: []
  type: TYPE_NORMAL
- en: In fact, what has been proved on paper was just a quick way to commit to a more
    serious prototype. It wasn't a definitive answer that the system would have worked.
    Think about paper prototyping as a green light for the actual digital prototyping.
  prefs: []
  type: TYPE_NORMAL
- en: 'The digital prototype was replicating quite well the experience that we had
    on paper, but some improvements became obvious and necessary only at this stage:'
  prefs: []
  type: TYPE_NORMAL
- en: The focus on the numbers became too prominent again. Instead of enjoying the
    immediate action of dragging a card on the enemies and seeing its effect, a lot
    of calculations were required to understand which card was the best choice.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The number of cards (8 per hero's deck and 4 in each hand at any given time)
    was still overwhelming; with so many choices it felt like none were really meaningful
    (and some were too obviously wrong).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We needed to introduce the entire library of card effects. Not only Damage
    Over Time, Piercing shield, and the few others we had in the prototype—the list
    of Battlehand: Heroes card''s effects included many others, such as Speed Up,
    various immunities, Stun, Freeze, and dozens more. The complexity of rumped add
    a lot, and with those effects at the center of the RPS mechanic, the cognitive
    overload was a problem.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Moving on
  prefs: []
  type: TYPE_NORMAL
- en: 'After assessing the reality of the digital prototype, we iterated, again and
    again, removing everything that wasn''t quite working in the more realistic digital
    scenario. This process took around two weeks and when we felt we had all our answers,
    we went back to our game in the production environment, leaving the prototype
    behind. The following is a screenshot of how the battle screen looked prior to
    our updating:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00134.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Battlehand: Heroes before the combat system update. Note the Initiative bar
    on the right, the number of cards in the hand, and the card layout'
  prefs: []
  type: TYPE_NORMAL
- en: 'We made all the changes necessary to bring across all the good things that
    truly worked in our prototype, and we were confident in doing so. In the following
    screenshot, you can see what the game looked like after this process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00035.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Battlehand: Heroes after the combat system update, there are only three cards
    in each hero''s hand and their layout is much more essential'
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding screenshots can''t convey how the gameplay has changed from one
    version to other, but you can see how everything that we have changed in the layout
    of the battle screen and the cards reflects our findings from the prototyping:'
  prefs: []
  type: TYPE_NORMAL
- en: The number of cards in each hero's hand has been decreased to three (and those
    in the decks to six).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The numbers have been removed from the cards—both the turn counters (top-left
    corner) and the value of damage/healing/shield from the center of the card.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The target icon has been made clearer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each card has a clear effect, which can be seen on the round icon in the bottom
    left corner of the card. The first one, Smoking Girder, has the ability to destroy
    the target's shield in one hit. The second, Oil Drum, can weaken the enemy, increasing
    the damage he takes, and the last one, Kapow, always hits regardless of the target
    evading or any other modifier on the hero's accuracy.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The initiative bar has been removed and replaced with a turn bar (yellow bar
    with the five notches) above the HP bar of each character (the green bar underneath
    each character).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All of these changes reflect the need to change and tweak parts of the game
    that were simply not possible to evaluate without a prototype. They are the result
    of an iterative process that, through subsequent changes and evaluation, allowed
    us to sculpt a final product from a rough initial model.
  prefs: []
  type: TYPE_NORMAL
- en: The screenshots used in this chapter are for illustrative purposes only. We
    do not recommend you to misuse these in any way. For more information please consult
    the terms and conditions of the publishers mentioned in the Disclaimer section
    of this book.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Summary
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we have learned how to prototype a game and why it is important
    to do so. We described in detail paper prototyping and how you can start doing
    it right now, without any particular technical knowledge. This chapter heavily
    emphasized paper prototyping over its digital counterpart, because it is really
    at the core of what you can do to create a game and become a better game designer
    without having to learn anything else. The reader who, at this point of the book,
    will try to create his own paper prototype and start experimenting with some board
    game design is the one who already stepped out from being a learner to being a
    maker.
  prefs: []
  type: TYPE_NORMAL
- en: We moved onto digital prototyping, and how even pretty basic technical skills
    could make all the difference for a rookie game designer and give them a great
    competitive edge to break into the game industry and be able to give life to their
    own vision. We can't recommend enough that you practice with what you have learned
    so far. Regardless of the platform of your choice, design and create something,
    right now!
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have understood how to create the atoms of a game and implement
    them into prototypes, we're ready to learn how to tie them up into a consistent
    experience that has a beginning and (most of the time) an end. In the next chapter,
    we're going to talk about the use of Narrative and how to pace the progression
    of the player throughout the game experience.
  prefs: []
  type: TYPE_NORMAL
