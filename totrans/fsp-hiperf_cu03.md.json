["```cs\nList<'t> \n\n```", "```cs\nList<int> \n\n```", "```cs\n.method public static int32  fact(int32 x) cil managed \n{ \n  // Code size       44 (0x2c) \n  .maxstack  5 \n .locals init ([0] int32 V_0, \n [1] int32 a, \n [2] int32 V_2)\n\n```", "```cs\n  IL_0001:  ldarg.0 \n  IL_0002:  stloc.0 \n  IL_0003:  ldloc.0 \n  IL_0004:  ldc.i4.1 \n\n```", "```cs\n.method public static int32  main(string[] argv) cil managed \n{ \n  .entrypoint \n  .custom instance void [FSharp.Core]Microsoft.FSharp.Core.EntryPointAttribute::.ctor() = ( 01 00 00 00 )  \n  // Code size       19 (0x13) \n  .maxstack  8 \n  IL_0000:  nop \n  IL_0001:  ldstr      \"Hello F# world\"\n... \n  IL_0010:  pop \n  IL_0011:  ldc.i4.0 \n  IL_0012:  ret \n} // end of method Program::main \n\n```", "```cs\nlet Counter = \n    let count = ref 0 \n    // *Return a function that carries the current context* (ie. \"count\", on  \n    // the heap). Each time it is called, it will reference, and increment,  \n    // the same location \n    (fun () -> incr count; !count) \n\n```", "```cs\nO(log 1000) = 3 \n\n```", "```cs\nO(1000) = 1000 \n\n```", "```cs\nlet rec sum list = \n   match list with \n   | head :: tail -> head + sum tail \n   | [] -> 0 \n\n```", "```cs\nlet list3 = list1 @ list2  \n\n```", "```cs\ntype Map<[<EqualityConditionalOn>]''Key, [<EqualityConditionalOn;ComparisonConditionalOn>]'Value when 'Key : comparison >(comparer: IComparer<''Key>, tree: MapTree<'Key,'Value>) \n\n```", "```cs\nlet x = 10 \nlet result = lazy (x + 10) \nprintfn \"%d\" (result.Force()) \ndo() \n\n```", "```cs\nseq { for i in 1 .. 10 do yield i * i } \n\n```", "```cs\nlet multiplicationTable = \n  seq { for i in 1..9 do  \n            for j in 1..9 do  \n               yield (i, j, i*j) } \n\n```"]