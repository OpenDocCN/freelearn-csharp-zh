- en: '*Chapter 4*: Applying Art, Animation, and Particles'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第4章*: 应用艺术、动画和粒子'
- en: In this chapter, we'll apply several art effects to the player's ship and the
    scene that we imported back in [*Chapter 2*](B18381_02_Epub.xhtml#_idTextAnchor048)*,
    Adding and Manipulating Objects*. We will use several maps that wrap around your
    player's ship to give it a sci-fi theme, including some pretty particle effects
    that we will add to our neon-blue jet. We will also introduce a space background,
    which will also be built from particle effects. Then, you will get your hands
    dirty by setting up your own Unity Animator Controller, which we can use to manipulate
    the particles we've created in our scene to give the impression that our player's
    ship is thundering through space at lightspeed, then slowing down before the enemies
    come to attack. Finally, we will apply some animation to the enemies in our script.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将将几个艺术效果应用到玩家飞船和我们在[*第2章*](B18381_02_Epub.xhtml#_idTextAnchor048)*中导入的场景上，即*添加和管理对象*。我们将使用几个围绕玩家飞船包裹的地图，为它增添科幻主题，包括一些漂亮的粒子效果，我们将添加到我们的霓虹蓝喷气式飞机上。我们还将引入一个太空背景，它也将由粒子效果构建。然后，您将亲自动手设置自己的Unity动画控制器，我们可以用它来操纵我们在场景中创建的粒子，以产生玩家飞船以光速穿越太空的印象，然后在敌人进攻前减速。最后，我们将在我们的脚本中为敌人应用一些动画。
- en: A lot of this chapter is about becoming familiar with what Unity can do as an
    Editor and the majority of what we learn in the Editor is also possible to achieve
    through code. This is why, as a programmer, it's important to know what we can
    manipulate in a project.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的大部分内容是关于熟悉Unity作为编辑器能做什么，以及我们在编辑器中学到的绝大多数内容也可以通过代码实现。这就是为什么作为一个程序员，了解我们可以在项目中操作的内容非常重要。
- en: 'In short, we will be covering the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，我们将涵盖以下主题：
- en: Adding visuals to the player's ship
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为玩家飞船添加视觉效果
- en: Creating a particle effect
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建粒子效果
- en: Importing and animating scenery
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导入并动画化场景
- en: Animating three-dimensional enemies with a script
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用脚本动画三维敌人
- en: So, let's jump in and make a start on changing the appearance of the player's
    ship.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，让我们开始改变玩家飞船的外观吧。
- en: The core exam skills covered in this chapter
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本章涵盖的核心考试技能
- en: '*We will look at programming core interactions*:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们将探讨编程核心交互*：'
- en: Implementing and configuring game object behavior and physics
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现和配置游戏对象行为和物理
- en: '*We will also look at working in the art pipeline*:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们还将探讨在艺术管道中工作*：'
- en: Understanding materials, textures, and shaders, and writing scripts that interact
    with Unity's rendering API
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解材质、纹理和着色器，并编写与Unity渲染API交互的脚本
- en: Understanding lighting and writing scripts that interact with Unity's lighting
    API
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解光照并编写与Unity光照API交互的脚本
- en: Understanding two-dimensional and three-dimensional animation and writing scripts
    that interact with Unity's animation API
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解二维和三维动画，并编写与Unity动画API交互的脚本
- en: Understanding particle systems and effects and writing scripts that interact
    with Unity's particle system API
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解粒子系统和效果，并编写与Unity粒子系统API交互的脚本
- en: '*We will cover the programming for scene and environment design*:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们将涵盖场景和环境设计的编程*：'
- en: Identifying methods for implementing game object instantiation, destruction,
    and management
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 识别实现游戏对象实例化、销毁和管理的方法
- en: '*Finally, we will cover working in professional software development teams*:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '*最后，我们将涵盖在专业软件开发团队中工作*：'
- en: Recognizing techniques for structuring scripts for modularity, readability,
    and reusability
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 识别构建脚本以实现模块化、可读性和可重用性的技术
- en: Technical requirements
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The project content for this chapter can be found at [https://github.com/PacktPublishing/Unity-Certified-Programmer-Exam-Guide-Second-Edition/tree/main/Chapter_04](https://github.com/PacktPublishing/Unity-Certified-Programmer-Exam-Guide-Second-Edition/tree/main/Chapter_04).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的项目内容可以在[https://github.com/PacktPublishing/Unity-Certified-Programmer-Exam-Guide-Second-Edition/tree/main/Chapter_04](https://github.com/PacktPublishing/Unity-Certified-Programmer-Exam-Guide-Second-Edition/tree/main/Chapter_04)找到。
- en: You can download the entirety of each chapter's project files at [https://github.com/PacktPublishing/Unity-Certified-Programmer-Exam-Guide-Second-Edition](https://github.com/PacktPublishing/Unity-Certified-Programmer-Exam-Guide-Second-Edition).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以下载每个章节的项目文件完整版，链接为[https://github.com/PacktPublishing/Unity-Certified-Programmer-Exam-Guide-Second-Edition](https://github.com/PacktPublishing/Unity-Certified-Programmer-Exam-Guide-Second-Edition)。
- en: All the content for this chapter is held in the chapter's `unitypackage` file,
    including a `Complete` folder that holds all of the work we'll carry out in this
    chapter.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的所有内容都包含在章节的`unitypackage`文件中，包括一个`Complete`文件夹，其中包含我们在本章中将要完成的所有工作。
- en: 'Check out the following video to see the *Code in Action*: [https://bit.ly/3OHV4xi](https://bit.ly/3OHV4xi).'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频，了解*代码的实际应用*：[https://bit.ly/3OHV4xi](https://bit.ly/3OHV4xi)。
- en: Adding visuals to the player's ship prefab
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为玩家飞船预制件添加视觉效果
- en: In this section, we will focus on the player's ship. We'll create a series of
    different visual art techniques to make our ship look futuristic without physically
    changing its geometry. We will create and apply a type of material to our ship
    that is used as housing to hold and display several maps. These maps are responsible
    for targeting specific channels on our player's ship. Because this book is specifically
    for programmers, I have created several of these maps that you can drag and drop
    into the material component that sits within the **Inspector** window.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将专注于玩家飞船。我们将创建一系列不同的视觉艺术技巧，使我们的飞船看起来具有未来感，而无需物理改变其几何形状。我们将为我们的飞船创建并应用一种材料，这种材料用作外壳来存储和显示多个地图。这些地图负责针对玩家飞船上的特定通道。因为这本书是专门为程序员编写的，所以我创建了几张这样的地图，您可以将其拖放到位于**检查器**窗口中的材料组件中。
- en: Normally, if a three-dimensional model, such as the player's ship, has a texture
    applied to it, the model needs to undergo a method called **unwrapping**. Unwrapping
    is like peeling off the faces of the model and laying them down flat so that they
    can have textures applied to them. Then, the unpeeled faces are wrapped back around
    the three-dimensional model. If the model isn't unwrapped before we apply the
    texture, the texture of the ship will be scrambled as it doesn't know where it
    should display the textures correctly. We don't need to go any further into the
    details of unwrapping as it's beyond the scope of this book, but just remember
    that the player's ship model has to be unwrapped.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，如果一个三维模型，如玩家飞船，被应用了纹理，该模型需要经过一种称为**展开**的方法。展开就像剥去模型的表面并将其平铺开来，以便可以应用纹理。然后，未剥去的表面被重新包裹在三维模型周围。如果我们不先展开模型就应用纹理，飞船的纹理将会混乱，因为它不知道应该在何处正确显示纹理。我们不需要深入探讨展开的细节，因为这超出了本书的范围，但请记住，玩家的飞船模型必须进行展开。
- en: 'The following screenshot shows the three-dimensional model of our player''s
    ship on the left and its unwrapped version, which is textured, on the right:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了玩家飞船的三维模型在左侧，以及其展开版本，右侧带有纹理：
- en: '![Figure 4.1 – Player Ship 3D model and its UV map'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.1 – 玩家飞船3D模型及其UV图]'
- en: '](img/Figure_4.01_B18381.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_4.01_B18381.jpg]'
- en: Figure 4.1 – Player Ship 3D model and its UV map
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.1 – 玩家飞船3D模型及其UV图
- en: We will also be shining a colored light onto the ship, but only allowing certain
    parts of it to emit and ensuring the light doesn't shine on any other game object
    with Unity's layer system. The other major part of Unity that we will cover is
    the particle system; we will create our own particle jet that will animate from
    the rear of the ship.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将向飞船投射彩色光线，但只允许其某些部分发出光线，并确保光线不会照到任何其他使用Unity层系统的游戏对象。我们将涵盖Unity的另一个重要部分是粒子系统；我们将创建自己的粒子喷气式推进器，它将从飞船的尾部动画。
- en: 'The following screenshot shows what our player''s ship looks like currently
    on the left. By the end of this section, we will have a sci-fi-looking ship with
    an animated jet, shown on the right side of the screenshot:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了玩家飞船当前的外观，位于左侧。在本节结束时，我们将拥有一个具有动画喷气式推进器的科幻外观飞船，显示在截图的右侧：
- en: '![Figure 4.2 – The player''s ship will be textured and carry its own thruster
    particle effect in this chapter'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.2 – 在本章中，玩家飞船将被纹理化，并携带自己的推进器粒子效果]'
- en: '](img/Figure_4.02_B18381.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_4.02_B18381.jpg]'
- en: Figure 4.2 – The player's ship will be textured and carry its own thruster particle
    effect in this chapter
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.2 – 在本章中，玩家飞船将被纹理化，并携带自己的推进器粒子效果
- en: Let's now move on to creating a material that can be used to store the maps
    from this chapter's `unitypackage` download that is on GitHub.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们继续创建一个可以用来存储本章`unitypackage`下载中地图的材料。
- en: Creating a material for our player's ship prefab
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为玩家飞船预制件创建材料
- en: 'Currently, our player''s ship has a default material applied to it, which we
    can''t edit in the Unity Editor. To be able to change the ship''s color and apply
    several maps, we first need to create a material and then apply it to the player''s
    ship. To do this, follow these steps:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们的玩家飞船已经应用了一个默认材质，我们无法在Unity编辑器中编辑它。为了能够更改飞船的颜色并应用多个贴图，我们首先需要创建一个材质，然后将其应用到玩家的飞船上。为此，请按照以下步骤操作：
- en: In the `Assets/Material/Player` and right-click in an open space.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Assets/Material/Player`中右键单击空白区域。
- en: Left-click on **Create** at the top.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在顶部单击**创建**。
- en: Then, left-click on **Material**.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，单击**材质**。
- en: A material icon will appear, highlighted in blue. Rename this material `PlayerShip`.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将出现一个材质图标，以蓝色突出显示。将此材质重命名为`PlayerShip`。
- en: Tip
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 小贴士
- en: To rename a material when it isn't selected, left-click on the text below the
    icon twice to bring the blue highlight back up. Then, enter a name—in our case,
    `PlayerShip`. For Mac, hit *Enter* on the selected material and start typing its
    name to rename it.
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要在不选择材质的情况下重命名材质，请双击图标下方的文本以将蓝色突出显示恢复。然后，输入一个名称——在我们的例子中，是`PlayerShip`。对于Mac，在选定的材质上按*Enter*键并开始键入其名称以重命名它。
- en: 'The following screenshot shows how the material is created:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了材质的创建过程：
- en: '![Figure 4.3 – Creating a material in the Unity editor'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 4.3 – 在Unity编辑器中创建材质'
- en: '](img/Figure_4.03_B18381.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_4.03_B18381.jpg](img/Figure_4.03_B18381.jpg)'
- en: Figure 4.3 – Creating a material in the Unity Editor
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.3 – 在Unity编辑器中创建材质
- en: There are two ways to apply a material to the ship. The first and easiest way
    is to drag and drop the material to the `PlayerShip` model in the **Scene** view.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方法可以将材质应用到飞船上。第一种也是最简单的方法是将材质拖放到**场景**视图中的`PlayerShip`模型上。
- en: Tip
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: A material can be created and updated in the script through the `Renderer.material`
    property. Check out [https://docs.unity3d.com/ScriptReference/Renderer-material.html](https://docs.unity3d.com/ScriptReference/Renderer-material.html)
    to find out more.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过`Renderer.material`属性在脚本中创建和更新材质。查看[https://docs.unity3d.com/ScriptReference/Renderer-material.html](https://docs.unity3d.com/ScriptReference/Renderer-material.html)以获取更多信息。
- en: 'The second—and probably the better—way, as it''s a more controlled method in
    updating a material, is to select `PlayerShip` in the `PlayerShip` from its prefab
    folder. Then, in the **Inspector** window, do the following:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法——可能也是更好的方法，因为它是一种更受控的更新材质的方法——是在其预制文件夹中选择`PlayerShip`。然后，在**检查器**窗口中执行以下操作：
- en: Next to the **Mesh Renderer** component is the **Materials** drop-down arrow.
    Click on the arrow so that it points downward.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**网格渲染器**组件旁边是**材质**下拉箭头。单击箭头，使其指向下方。
- en: 'The two main points to look for within the component are the following:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在组件内部需要关注的两个主要点是以下内容：
- en: '`1`.'
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`1`。'
- en: '`Default-Material`.'
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Default-Material`。'
- en: Either click on the small button to the far right of `Default-Material` (or
    whatever the material is called), as in the following screenshot, or drag and
    drop the `PlayerShip` material we just made into the same location as `Default-Material`.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要么点击`Default-Material`（或 whatever the material is called）右侧的小按钮，如图所示，要么将我们刚刚创建的`PlayerShip`材质拖放到与`Default-Material`相同的位置。
- en: 'The following screenshot shows the location of the **Mesh Renderer** component
    situated within the **Inspector** window:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了位于**检查器**窗口中的**网格渲染器**组件的位置：
- en: '![Figure 4.4 – Player_Ship Mesh Renderer location in the Inspector window'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 4.4 – Player_Ship Mesh Renderer位置在检查器窗口中'
- en: '](img/Figure_4.04_B18381.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_4.04_B18381.jpg](img/Figure_4.04_B18381.jpg)'
- en: Figure 4.4 – player_ship Mesh Renderer location in the Inspector window
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.4 – player_ship Mesh Renderer位置在检查器窗口中
- en: Once that's done, `PlayerShip`, `1`, and `Default-Material` at the bottom of
    the `PlayerShip` (or whatever you named the material).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，`PlayerShip`、`1`和位于`PlayerShip`底部（或 whatever you named the material）的`Default-Material`。
- en: Tip
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: '`Default-Material` cannot be edited as it is typically shared with new **Mesh
    Renderer** game objects.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`Default-Material`不能被编辑，因为它通常与新的**网格渲染器**游戏对象共享。'
- en: Now, we need to update the ship's prefab (prefabs were explained in [*Chapter
    1*](B18381_01_Epub.xhtml#_idTextAnchor016), *Setting Up and Structuring Our Project*).
    If the `PlayerShip` model is still selected, go to the `PlayerShip` from the `Prefab`
    folder, this will not be necessary as we have updated the prefab directly. In
    the next section, we will break down the various maps we can now apply to the
    material.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要更新飞船的预制件（在 [*第 1 章*](B18381_01_Epub.xhtml#_idTextAnchor016)，*设置和构建我们的项目*）中提到的预制件。如果
    `PlayerShip` 模型仍然被选中，转到 `Prefab` 文件夹中的 `PlayerShip`，这将是必要的，因为我们已经直接更新了预制件。在下一节中，我们将分解我们现在可以应用于材质的各种地图。
- en: Applying maps to our PlayerShip material
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将地图应用于我们的玩家飞船材质
- en: Our newly created material for our `PlayerShip` prefab is now able to hold various
    maps. Our material will have empty slots for each map; these maps will add details
    to the player's ship, ranging from the color to fake details, such as cuts, dents,
    and grooves, that aren't physically modeled into the player's ship. We can also
    emphasize where the light will be absorbed by the player's ship.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为 `PlayerShip` 预制件创建的新材质现在可以容纳各种地图。我们的材质将为每个地图留出空槽；这些地图将为玩家的飞船添加细节，从颜色到假细节，如切割、凹痕和凹槽，这些细节并未物理建模到玩家的飞船中。我们还可以强调玩家飞船将吸收光的地方。
- en: 'Here is a selection of maps that we will apply to the `PlayerShip` prefab:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我们将应用于 `PlayerShip` 预制件的一些地图选择：
- en: '`playerShip_diff`): The albedo map contains the color of the image, which is
    similar to a diffuse map but without light and shadow. The following screenshot
    shows our albedo map:'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`playerShip_diff`): 反照率图包含图像的颜色，类似于漫反射图，但没有光和阴影。以下截图显示了我们的反照率图：'
- en: '![Figure 4.5 – PlayerShip albedo map'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.5 – 玩家飞船反照率图'
- en: '](img/Figure_4.05_B18381.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.05_B18381.jpg)'
- en: Figure 4.5 – PlayerShip albedo map
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.5 – 玩家飞船反照率图
- en: '`playerShip_met`): The metallic map focuses on the reflectivity and light of
    the surface. The following screenshot shows our metallic map:'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`playerShip_met`): 金属图专注于表面的反射性和光。以下截图显示了我们的金属图：'
- en: '![Figure 4.6 – PlayerShip metallic map'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.6 – 玩家飞船金属图'
- en: '](img/Figure_4.06_B18381.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.06_B18381.jpg)'
- en: Figure 4.6 – PlayerShip metallic map
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.6 – 玩家飞船金属图
- en: '`playerShip_em`): The emissive map receives no light, and is ideal for a glow-in-the-dark
    effect (self-illuminating). The following screenshot shows our emissive map:'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`playerShip_em`): 发射图不接受光线，非常适合发光效果（自发光）。以下截图显示了我们的发射图：'
- en: '![Figure 4.7 – PlayerShip emissive map'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.7 – 玩家飞船发射图'
- en: '](img/Figure_4.07_B18381.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.07_B18381.jpg)'
- en: Figure 4.7 – PlayerShip emissive map
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.7 – 玩家飞船发射图
- en: '`playerShip_nrm`): The normal map stores the direction of each pixel. The general
    use for this map is holding high-resolution details that give the illusion of
    more polygons in a mesh. The following screenshot shows our normal map:'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`playerShip_nrm`): 法线图存储每个像素的方向。此图的通用用途是保持高分辨率细节，给网格带来更多多边形的错觉。以下截图显示了我们的法线图：'
- en: '![Figure 4.8 – PlayerShip normal map'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.8 – 玩家飞船法线图'
- en: '](img/Figure_4.08_B18381.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.08_B18381.jpg)'
- en: Figure 4.8 – PlayerShip normal map
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.8 – 玩家飞船法线图
- en: '`playerShip_oc`): The occlusion map provides information on which areas of
    the model receive light. The following screenshot shows our occlusion map:'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`playerShip_oc`): 遮挡图提供有关模型哪些区域接收光的信息。以下截图显示了我们的遮挡图：'
- en: '![Figure 4.9 – PlayerShip occlusion map'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.9 – 玩家飞船遮挡图'
- en: '](img/Figure_4.09_B18381.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.09_B18381.jpg)'
- en: Figure 4.9 – PlayerShip occlusion map
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.9 – 玩家飞船遮挡图
- en: 'Now, we will apply these maps to the `PlayerShip` model by taking the following
    steps:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将通过以下步骤将这些地图应用于 `PlayerShip` 模型：
- en: Select the `player_ship` game object, which can be selected in either the `Assets/Prefab/Player`
    file path location).
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 `player_ship` 游戏对象，该对象可以在 `Assets/Prefab/Player` 文件路径位置中选择）。
- en: 'To make things easier when applying our maps to the `player_ship` material
    slots, lock the `player_ship` selected at the top of the **Inspector** window,
    as in the following screenshot (make sure you unlock the **Inspector** window
    once you''ve finished dragging and dropping files over):'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了在将我们的地图应用于 `player_ship` 材料槽时更容易操作，锁定位于 **检查器** 窗口顶部的 `player_ship` 选择，如图所示（确保在完成拖放文件后解锁
    **检查器** 窗口）：
- en: '![Figure 4.10 – Locking the Inspector window'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.10 – 锁定检查器窗口'
- en: '](img/Figure_4.10_B18381.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.10_B18381.jpg)'
- en: Figure 4.10 – Locking the Inspector window
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.10 – 锁定检查器窗口
- en: In the `Texture` folder into the `PlayerShip` material component slots.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Texture` 文件夹中，将地图拖放到 `PlayerShip` 材料组件槽中。
- en: Before we drag and drop the files into their designated boxes, be sure that
    your normal and emission maps are set up correctly. Let's start with the normal
    map.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们将文件拖放到指定的框中之前，请确保您的法线和发射贴图已正确设置。让我们从法线贴图开始。
- en: 'When it comes to applying a normal map, there are some extra procedures to
    cover. The first is that Unity may not recognize **Normal Map** as a normal map
    file. When we drag and drop the normal map file into its slot in the **Material**
    component, as in the previous screenshot, an information box appears in the **Inspector**
    window under the **Normal Map** slot. This contains a message (**This texture
    is not marked as a normal map**) with a **Fix Now** button. Click on this button
    so that the normal map is configured correctly. The following screenshot shows
    what the information box looks like:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到应用法线贴图时，有一些额外的步骤需要处理。首先，Unity 可能不会识别 **Normal Map** 作为法线贴图文件。当我们将法线贴图文件拖放到
    **Material** 组件中的槽位，如图中所示，**Inspector** 窗口下的 **Normal Map** 槽位会出现一个信息框。这个信息框包含一条消息（**This
    texture is not marked as a normal map**）和一个 **Fix Now** 按钮。点击此按钮，以便正确配置法线贴图。以下截图显示了信息框的外观：
- en: '![Figure 4.11 – Fixing normal maps'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.11 – 修复法线贴图'
- en: '](img/Figure_4.11_B18381.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.11_B18381.jpg)'
- en: Figure 4.11 – Fixing normal maps
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.11 – 修复法线贴图
- en: 'Another way of fixing this issue with the normal map is by doing the following:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种修复法线贴图问题的方法是执行以下操作：
- en: Select the normal map file in the **Project** window.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Project** 窗口中选择法线贴图文件。
- en: Then, in the **Inspector** window, we have a panel showing the normal map's
    **Import Settings** option.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在 **Inspector** 窗口中，我们有一个显示法线贴图的 **Import Settings** 选项的面板。
- en: At the top of the options area, click on the dropdown next to **Texture Type**
    and make sure it is selected as a **Normal Map**.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选项区域的顶部，点击 **Texture Type** 旁边的下拉菜单，确保它被选为 **Normal Map**。
- en: Finally, click on **Apply** at the lower-right corner of the **Inspector** window.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，点击 **Inspector** 窗口右下角的 **Apply** 按钮。
- en: 'The following screenshot shows a normal map file selected from the **Texture
    Type** dropdown and the **Normal map** selection in the dropdown:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了从 **Texture Type** 下拉菜单中选择法线贴图文件，并在下拉菜单中选择 **Normal map**：
- en: '![Figure 4.12 –Texture Type set to Normal map'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.12 – 将纹理类型设置为法线贴图'
- en: '](img/Figure_4.12_B18381.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.12_B18381.jpg)'
- en: Figure 4.12 –Texture Type set to Normal map
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.12 – 将纹理类型设置为法线贴图
- en: 'Another potential issue when dragging and dropping maps into the **Material**
    component is that you need to check the box next to the **Emission** slot before
    it can accept a map. The following screenshot highlights the **Emission** slot
    and shows you the box that needs to be checked:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 将地图拖放到 **Material** 组件时，另一个潜在问题是需要检查 **Emission** 槽旁边的框，才能接受地图。以下截图突出显示了 **Emission**
    槽，并显示了需要检查的框：
- en: '![Figure 4.13 – Emission check box checked'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.13 – Emission 检查框已勾选'
- en: '](img/Figure_4.13_B18381.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.13_B18381.jpg)'
- en: Figure 4.13 – Emission check box checked
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.13 – Emission 检查框已勾选
- en: Great, now we know the possible issues, we can drag and drop out files into
    their designated boxes.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 很好，现在我们知道了可能的问题，我们可以将文件拖放到指定的框中。
- en: 'Navigate to the `Assets/Texture` folder drag and drop each of the files into
    their correct slots:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到 `Assets/Texture` 文件夹，将每个文件拖放到正确的槽位中：
- en: '![Figure 4.14 – Drag and dropping maps into the Player Ship material correct
    slots'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.14 – 将地图拖放到玩家飞船材质的正确槽位'
- en: '](img/Figure_4.14_B18381.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.14_B18381.jpg)'
- en: Figure 4.14 – Drag and dropping maps into the Player Ship material correct slots
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.14 – 将地图拖放到玩家飞船材质的正确槽位
- en: Further Information
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息
- en: The material properties, such as the emission color, can be made and altered
    via script with the use of the `SetColor` property. For more information on changing
    a material's color or emission color, check out [https://docs.unity3d.com/ScriptReference/Material.SetColor.html](https://docs.unity3d.com/ScriptReference/Material.SetColor.html).
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 材质属性，如发射颜色，可以通过使用 `SetColor` 属性通过脚本创建和修改。有关更改材质颜色或发射颜色的更多信息，请参阅 [https://docs.unity3d.com/ScriptReference/Material.SetColor.html](https://docs.unity3d.com/ScriptReference/Material.SetColor.html)。
- en: Once we have dragged and dropped all the maps into their designated slots, our
    `player_ship` model should look different as it now has a metallic complexion.
    However, we aren't finished yet. We need to add some neon lights to the ship next.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们将所有地图拖放到指定的槽位，我们的 `player_ship` 模型应该看起来不同，因为它现在具有金属光泽。然而，我们还没有完成。接下来，我们需要在飞船上添加一些霓虹灯。
- en: Adding neon lights to our PlayerShip prefab
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向我们的`PlayerShip`预制体添加霓虹灯
- en: 'Our ship currently looks like metal, slightly dull with some sci-fi-style patterns
    on it. As this isn''t an art exam, our preliminary mission isn''t to make this
    ship look fantastic, but rather to understand the maps and effects that we''re
    adding to it. As mentioned briefly in the previous section, we can add some light
    to the ship that will also react to the ship''s maps. The following screenshot
    shows what our ship currently looks like with all the maps applied; yours may
    be shiny, but that doesn''t matter:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们目前的船看起来像金属，稍微有点暗淡，上面有一些科幻风格的图案。这不是艺术考试，我们的初步任务不是让这艘船看起来很棒，而是要了解我们添加到它上面的地图和效果。如前一小节简要提到的，我们可以在船上添加一些光线，这些光线也会对船的地图做出反应。以下截图显示了应用所有地图后我们的船目前的样子；你的可能很闪亮，但这并不重要：
- en: '![Figure 4.15 – Player Ship with all maps applied'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.15 – 应用所有地图的`Player Ship`'
- en: '](img/Figure_4.15_B18381.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.15_B18381.jpg)'
- en: Figure 4.15 – Player Ship with all maps applied
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.15 – 应用所有地图的`Player Ship
- en: Next, we are going to make parts of the ship light up in a sci-fi neon-blue
    color, combining a **Point** light with the emissive map.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将使船的部分区域以科幻霓虹蓝光点亮，结合**点光源**和发射图。
- en: 'To add a light to our ship, we need to do the following:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 要在我们的船上添加灯光，我们需要做以下几步：
- en: From the `Assets/Prefab/Player`.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`Assets/Prefab/Player`。
- en: Select `player_ship` and drag it to the **Hierarchy** window.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`player_ship`并将其拖动到**层次结构**窗口。
- en: Click on the `Light` into the dropdown.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下拉菜单中点击`Light`。
- en: When you see the `player_ship` from the **Hierarchy** window, hover your mouse
    in the **Scene** window, and press *F* on your keyboard to zoom in.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你在**层次结构**窗口中看到`player_ship`时，将鼠标悬停在**场景**窗口中，然后按键盘上的*F*键来放大。
- en: 'This **Point** light will act as a glow around the ship that will affect only
    the player''s ship and the emissive map with Unity''s layer system. But first,
    we will focus on the **Light** component settings in the **Inspector** window:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这个**点光源**将作为船周围的发光效果，只影响玩家的船和发射图，通过Unity的层系统。但首先，我们将关注**灯光**组件在**检查器**窗口中的设置：
- en: '![Figure 4.16 – player_ship''s Light component property values'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.16 – `player_ship`的灯光组件属性值'
- en: '](img/Figure_4.16_B18381.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.16_B18381.jpg)'
- en: Figure 4.16 – player_ship's Light component property values
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.16 – `player_ship`的灯光组件属性值
- en: 'With the **Point** light selected from the **Hierarchy** window, we can alter
    our new light settings in the **Inspector** window:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 从**层次结构**窗口中选择**点光源**，我们可以在**检查器**窗口中更改我们的新灯光设置：
- en: '`player_ship` will also have a yellow gizmo wrapped around it to represent
    the size of the light as shown in the following screenshot:'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`player_ship`还将有一个黄色的小工具围绕它，以表示光的大小，如下面的截图所示：'
- en: '![Figure 4.17 – Light gizmo surrounding the player_ship'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.17 – 围绕`player_ship`的光线小工具'
- en: '](img/Figure_4.17_B18381.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.17_B18381.jpg)'
- en: Figure 4.17 – Light gizmo surrounding the player_ship
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.17 – 围绕`player_ship`的光线小工具
- en: Tip
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: A gizmo is an indicator that shows up in the **Scene** window, which you will
    not see in the **Gam** window. A gizmo is displayed as guidance to show the location
    and/or the scale of something.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 小工具是一个在**场景**窗口中出现的指示器，你在**游戏**窗口中是看不到的。小工具作为指导显示，以显示某物的位置和/或比例。
- en: '`50`): The range will increase/decrease the size of the yellow sphere, pushing
    the light out more. I have set mine to `50` as I feel this covers the ship well
    enough.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`50`): 范围会增加/减少黄色球体的大小，使光线向外扩展更多。我觉得设置为`50`已经足够覆盖整个船了。'
- en: '`0080FFFF`. (This will set the red, green, blue, and alpha settings.)'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`0080FFFF`。（这将设置红色、绿色、蓝色和alpha设置。）'
- en: '`10`): The strength of the light.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`10`): 光的强度。'
- en: '`0`): The light bouncing onto other objects. Real-time indirect bounce shadowing
    is not supported for the **Point** light.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`0`): 光线弹射到其他物体上。对于**点光源**，不支持实时间接弹射阴影。'
- en: '**Render Mode** (**Important**): Makes sure the light remains on at all times
    and doesn''t turn off with performance drops.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**渲染模式**（**重要**）：确保灯光始终开启，不会因为性能下降而关闭。'
- en: '`PlayerShip`): We will talk about this next. We are using a blue light (in
    my case) to give the maps on the ship a neon light effect. We ideally don''t want
    the light to spread onto other assets if they come near the player''s ship.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PlayerShip`): 我们将在下一节讨论这个问题。我们使用蓝色光（以我的情况为例）给船上的地图添加霓虹灯效果。我们理想情况下不希望光线扩散到其他资产上，如果它们靠近玩家的船。'
- en: Important Note
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重要提示
- en: Play around with the **Light** component; don't feel like it has to have the
    exact same color or intensity as mine.
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在**光**组件上玩玩；不需要它与我的颜色或强度完全相同。
- en: 'Once these settings (apart from the culling mask) for our light have been updated
    in the **Inspector** window, our ship should have neon lights lit across it in
    various areas. In the following screenshot, I have placed eight spheres behind
    the player ship model. Notice now how our new neon light clashes against the spheres.
    I''ll explain how we can fix the issue of the light clashing with other objects
    in our game next:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦这些设置（除了剔除掩码）在我们的**检查器**窗口中更新，我们的飞船应该在各个区域点亮霓虹灯。在下面的截图中，我在玩家飞船模型后面放置了八个球体。注意现在我们的新霓虹灯光与球体发生了冲突。我将在下一部分解释我们如何解决灯光与游戏中的其他对象冲突的问题：
- en: '![Figure 4.18 – The player ship''s light clashing with near 3D objects'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 4.18 – 玩家飞船的光线与近3D对象的冲突'
- en: '](img/Figure_4.18_B18381.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_4.18_B18381.jpg)'
- en: Figure 4.18 – The player ship's light clashing with near 3D objects
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 4.18 – 玩家飞船的光线与近3D对象的冲突
- en: A culling mask will fix this issue as we can make the blue light only display
    on the player's ship with a specific layer mask.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用剔除掩码可以解决这个问题，因为我们可以使蓝色光线仅通过具有特定层掩码的玩家飞船显示。
- en: 'To make a new layer, we need to go to the **Tags & Layers** section, which
    can be accessed in two ways:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个新层，我们需要进入**标签 & 层**部分，这可以通过两种方式访问：
- en: The first way is by clicking on the **Layers** tab at the top right of the screen
    in the toolbar section. A dropdown will appear with the available layers. Click
    on the bottom option, **Edit Layers...**.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一种方法是点击屏幕右上角工具栏中的**层**选项卡。会出现一个包含可用层的下拉菜单。点击底部选项，**编辑层...**。
- en: 'The second way is by selecting any game object in the **Hierarchy** window
    and clicking on the tab next to **Layer**. Then, click on the bottom option, **Add
    Layer...**:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二种方法是在**层次结构**窗口中选择任何游戏对象，然后点击**层**旁边的选项卡。然后，点击底部选项，**添加层...**：
- en: '![Figure 4.19 – Adding a new layer'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 4.19 – 添加新层'
- en: '](img/Figure_4.19_B18381.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_4.19_B18381.jpg)'
- en: Figure 4.19 – Adding a new layer
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 4.19 – 添加新层
- en: The `31` as it has an internal use for the Editor.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`31`因为它有编辑器的内部用途。'
- en: 'Layers `8` to `30` are okay to use. I''m going to enter `PlayerShip` into the
    **User Layer 8** field, as in the following screenshot:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 层`8`到`30`可以使用。我将把`PlayerShip`输入到**用户层8**字段中，如下面的截图所示：
- en: '![Figure 4.20 – Adding a layer named PlayerShip'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 4.20 – 添加名为PlayerShip的层'
- en: '](img/Figure_4.20_B18381.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_4.20_B18381.jpg)'
- en: Figure 4.20 – Adding a layer named PlayerShip
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 4.20 – 添加名为PlayerShip的层
- en: 'Now, click on the `player_ship` GameObject in the scene or within the `Prefab`
    folder and change its point light **Culling Mask** option from **Everything**
    to **PlayerShip**:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在场景中或`Prefab`文件夹内点击`player_ship` GameObject，并将它的点光源**剔除掩码**选项从**所有内容**更改为**PlayerShip**：
- en: '![Figure 4.21 – PlayerShip layer in the drop-down list'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 4.21 – PlayerShip层在下拉列表中'
- en: '](img/Figure_4.21_B18381.jpg)'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_4.21_B18381.jpg)'
- en: Figure 4.21 – PlayerShip layer in the drop-down list
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 4.21 – PlayerShip层在下拉列表中
- en: Then, select the `player_ship` model from **Hierarchy**.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，从**层次结构**中选择`player_ship`模型。
- en: In the `player_ship` `PlayerShip`. Because we added a `player_ship` model.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`player_ship` `PlayerShip`中。因为我们添加了一个`player_ship`模型。
- en: 'Click **Yes, change children**, as in the following screenshot. This will change
    the **Point** light layer to **PlayerShip**:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**是，更改子对象**，如下面的截图所示。这将把**点**光源层更改为**PlayerShip**：
- en: '![Figure 4.22 – Confirm to change all children game objects'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 4.22 – 确认更改所有子游戏对象'
- en: '](img/Figure_4.22_B18381.jpg)'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_4.22_B18381.jpg)'
- en: Figure 4.22 – Confirm to change all children game objects
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 4.22 – 确认更改所有子游戏对象
- en: Tip
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: Once you have brought something into the `player_ship` prefab will always be
    instantiated by `PlayerSpawner`.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你将某物放入`player_ship`预制件，它将始终由`PlayerSpawner`实例化。
- en: 'The end result gives us a cool, neon shiny-blue ship that doesn''t affect any
    of the surrounding game objects, as in the following screenshot (yours may differ
    from this):'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 最终结果给我们一个酷炫的、霓虹般闪亮的蓝色飞船，它不会影响周围的任何游戏对象，如下面的截图所示（您的可能与这个不同）：
- en: '![Figure 4.23 – Our player ship now has neon emissive lights'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 4.23 – 我们的玩家飞船现在有霓虹发射灯'
- en: '](img/Figure_4.23_B18381.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_4.23_B18381.jpg)'
- en: Figure 4.23 – Our player ship now has neon emissive lights
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 4.23 – 我们的玩家飞船现在有霓虹发射灯
- en: So, let's now move on to the particles for the player's ship.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续为玩家飞船添加粒子。
- en: Adding particles to our PlayerShip prefab
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向我们的PlayerShip预制件添加粒子
- en: 'In this section, we will create a particle effect that will give the ship''s
    thrusters the illusion of movement. The particle system itself is split into different
    component categories that will affect the behavior of how a particle acts. We
    will focus on placement, direction, and the life cycle of a particle effect, which
    is a skill that can be transferred to other effects, such as fire, smoke, water
    leakage, and more. The following screenshot shows our player''s ship with an animated
    particle effect, which we are going to create now:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建一个粒子效果，给飞船的推进器带来运动的错觉。粒子系统本身分为不同的组件类别，这将影响粒子的行为。我们将关注放置、方向和粒子效果的寿命周期，这是一项可以转移到其他效果（如火焰、烟雾、水泄漏等）的技能。以下截图显示了我们的玩家飞船带有动画的粒子效果，这是我们接下来要创建的：
- en: '![Figure 4.24 – Player ship with particle effect'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 4.24 – 带有粒子效果的玩家飞船]'
- en: '](img/Figure_4.24_B18381.jpg)'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure_4.24_B18381.jpg]'
- en: Figure 4.24 – Player ship with particle effect
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 4.24 – 带有粒子效果的玩家飞船
- en: 'So, let''s make an empty game object to hold the particle system:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们创建一个空的游戏对象来包含粒子系统：
- en: Right-click in an open space of the **Hierarchy** window.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**层次**窗口的空白区域右键单击。
- en: From the drop-down menu that appears, select **Create Empty.**
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从出现的下拉菜单中选择**创建空对象**。
- en: Name the empty game object something such as `playerJet`.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将空游戏对象命名为类似`playerJet`的名称。
- en: We want this to follow the player's ship, so drag and drop the `player_ship`
    object back into the `playerJet` onto the `player_ship` game object.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们希望这个效果跟随玩家的飞船，所以将`player_ship`对象拖放到`playerJet`上，放置在`player_ship`游戏对象上。
- en: Finally, we need to move `playerJet` to the rear of our `player_ship` object
    to the point where the particles start firing. I'm moving mine onto its `0.5`.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们需要将`playerJet`移动到我们的`player_ship`对象后面，直到粒子开始发射的位置。我将我的移动到其`0.5`。
- en: 'The following screenshot indicates where the particles will start and the `playerJet`
    transform settings:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了粒子开始的位置和`playerJet`变换设置：
- en: '![Figure 4.25 – playerJet game object positioned behind the player ship'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 4.25 – playerJet游戏对象位于玩家飞船后面]'
- en: '](img/Figure_4.25_B18381.jpg)'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure_4.25_B18381.jpg]'
- en: Figure 4.25 – playerJet game object positioned behind the player ship
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 4.25 – playerJet游戏对象位于玩家飞船后面
- en: That's our empty game made and in place behind the player ship model. Now, we
    can add our particle effect to the empty game object in the next section.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们的空游戏对象就创建好了，并且放置在玩家飞船模型后面。现在，我们可以在下一节中将粒子效果添加到空游戏对象中。
- en: Creating a Particle Effect
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建粒子效果
- en: 'In this section, we will start creating our particle effect within the empty
    game object from the previous section; similar to what we did a couple of sections
    back, we need to make all particle systems a child to the `playerJet` game object:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将从上一节中的空游戏对象开始创建我们的粒子效果；类似于我们之前几节所做的那样，我们需要将所有粒子系统设置为`playerJet`游戏对象的子对象：
- en: In the `playerJet`.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`playerJet`中。
- en: From the dropdown, select **Effects**, then **Particle Effect**.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从下拉菜单中选择**效果**，然后选择**粒子效果**。
- en: Rename the `thruster`.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重命名`thruster`。
- en: 'We should now see a particle system that gives out its default particle spray
    pointing directly at us, as in the following screenshot:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在应该看到一个粒子系统，它以默认的粒子喷雾直接指向我们，如下面的截图所示：
- en: '![Figure 4.26 – Default particle system'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 4.26 – 默认粒子系统]'
- en: '](img/Figure_4.26_B18381.jpg)'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure_4.26_B18381.jpg]'
- en: Figure 4.26 – Default particle system
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 4.26 – 默认粒子系统
- en: Next, we need to scale and rotate the particle system to the correct size and
    make sure it's spraying in the correct direction.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要调整粒子系统的大小并旋转到正确的方向，确保它以正确的方向喷射。
- en: 'With our `thruster` object still selected, in the **Inspector** window, change
    its **Transform** component settings to the following:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在**检查器**窗口中，选择我们的`thruster`对象，将其**变换**组件设置更改为以下内容：
- en: '`0`, `0`, and `0`'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`0`，`0`，和`0`'
- en: '`0`, `90`, and `0`'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`0`，`90`，和`0`'
- en: '`0.3`, `0.3`, and `0.3`'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`0.3`，`0.3`，和`0.3`'
- en: Sometimes, our **Particle System** object might not update, or it might disappear
    in the **Scene** window when we alter or undo its settings.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们的**粒子系统**对象可能不会更新，或者在我们更改或撤销其设置时，它可能会在**场景**窗口中消失。
- en: 'To attempt to restart **Particle System** to active or animating in the **Scene**
    window, select **Particle System** in the **Hierarchy** window. You will notice
    a **Particle Effect** popup at the bottom-right corner of the **Scene** view.
    Then, take the following steps:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 要尝试在**场景**窗口中重启**粒子系统**使其激活或动画化，请在**层次**窗口中选择**粒子系统**。您将在**场景**视图的右下角注意到一个**粒子效果**弹出窗口。然后，执行以下步骤：
- en: Click **Stop** to stop the **Particle System** object from emitting.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**停止**以停止**粒子系统**对象的发射。
- en: Click **Restart**.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**重启**。
- en: 'The following screenshot shows the **Particle Effect** menu found at the bottom-right
    corner of the **Scene** window:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了位于**场景**窗口右下角的**粒子效果**菜单：
- en: '![Figure 4.27 – Particle Effect menu'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.27 – 粒子效果菜单'
- en: '](img/Figure_4.27_B18381.jpg)'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.27_B18381.jpg)'
- en: Figure 4.27 – Particle Effect menu
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.27 – 粒子效果菜单
- en: Hopefully, if the particle system wasn't active, it is now. If it still isn't,
    try selecting a different game object in the **Hierarchy** window, then go back
    to the particle system and repeat the stop/restart method again.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 希望如此，如果粒子系统之前未激活，现在应该是激活的。如果它仍然没有激活，请尝试在**层次**窗口中选择不同的游戏对象，然后回到粒子系统并再次重复停止/启动方法。
- en: 'With our `thruster` particle system still selected in the **Hierarchy** window,
    click the drop-down button in the **Inspector** window, as in the following screenshot:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 在**层次**窗口中仍然选中我们的`thruster`粒子系统后，在**检查器**窗口中点击下拉按钮，如下截图所示：
- en: '![Figure 4.28 – Particle System properties drop-down button'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.28 – 粒子系统属性下拉按钮'
- en: '](img/Figure_4.28_B18381.jpg)'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.28_B18381.jpg)'
- en: Figure 4.28 – Particle System properties drop-down button
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.28 – 粒子系统属性下拉按钮
- en: We are now presented with a list of options in the **Inspector** window that
    might seem overwhelming, but we will only be changing a few options to give our
    particle system the effect we are after. Most of the Unity properties have their
    own **ToolTips** options. If you don't know what any of these are, with the Unity
    Editor top bar selected, hover your mouse over one of the particle system properties.
    After a few seconds, a description telling you about the properties will appear.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们在**检查器**窗口中看到了一个可能看起来令人不知所措的选项列表，但我们只会更改几个选项，以使我们的粒子系统达到预期的效果。大多数Unity属性都有它们自己的**工具提示**选项。如果您不知道这些是什么，请选择Unity编辑器的顶部栏，将鼠标悬停在粒子系统属性上。几秒钟后，将出现一个描述这些属性的说明。
- en: 'The options we need to change for our particle system are the following:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要更改的粒子系统选项如下：
- en: '`0.05`:'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`0.05`：'
- en: '![Figure 4.29 – Duration property'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.29 – 持续时间属性'
- en: '](img/Figure_4.29_B18381.jpg)'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.29_B18381.jpg)'
- en: Figure 4.29 – Duration property
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.29 – 持续时间属性
- en: '**Prewarm**: When played, a pre-warmed system will be in a state as if it had
    emitted one loop cycle. It can only be used if the system is looping. This option
    should be ticked.'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**预加热**：当播放时，预加热的系统将处于仿佛已经发射了一个循环周期的状态。只有当系统循环时才能使用。此选项应勾选。'
- en: '`0`. This option should be set to `0.5`.'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`0`。此选项应设置为`0.5`。'
- en: '`0`.'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`0`。'
- en: '**3D Start Size**: This is the start size of particles.'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**3D起始大小**：这是粒子的起始大小。'
- en: '`1`, `2`.'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`1`，`2`。'
- en: 'To get the option of more fields, do the following:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取更多字段的选项，请执行以下操作：
- en: Click on the down arrow to the right of the option.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击选项右侧的下箭头。
- en: 'From the dropdown, click on **Random Between Two Constants**, as in the following
    screenshot:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从下拉菜单中，点击**在两个常量之间随机**，如下截图所示：
- en: '![Figure 4.30 – Select Random Between Two Constants'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.30 – 选择在两个常量之间随机'
- en: '](img/Figure_4.30_B18381.jpg)'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.30_B18381.jpg)'
- en: Figure 4.30 – Select Random Between Two Constants
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.30 – 选择在两个常量之间随机
- en: Information
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 信息
- en: The least expensive curve is **Constant** as it only requires one value.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 代价最低的曲线是**常量**，因为它只需要一个值。
- en: '**3D Start Rotation**: If enabled, we can control the rotation separately for
    each axis. This option should be ticked. To get the option of more fields, do
    the following:'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**3D起始旋转**：如果启用，我们可以分别对每个轴进行旋转控制。此选项应勾选。要获取更多字段的选项，请执行以下操作：'
- en: Click on the down arrow to the right of the option.
  id: totrans-250
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击选项右侧的下箭头。
- en: 'From the drop-down menu, click on **Random Between Two Constants** and enter
    the following vector rotations:'
  id: totrans-251
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从下拉菜单中，点击**在两个常量之间随机**并输入以下矢量旋转：
- en: '![](img/Table_01.jpg)'
  id: totrans-252
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Table_01.jpg)'
- en: '`00FFD5B7`.'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`00FFD5B7`。'
- en: '`4`.'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`4`。'
- en: 'The following screenshot provides a reference for the settings that should
    be set:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图提供了应设置的设置参考：
- en: '![Figure 4.31 – Overall Particle System property values'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.31 – 整体粒子系统属性值'
- en: '](img/Figure_4.31_B18381.jpg)'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.31_B18381.jpg)'
- en: Figure 4.31 – Overall Particle System property values
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.31 – 整体粒子系统属性值
- en: We've changed a lot of settings here. To summarize, we've created a cluster
    of particles that appear and soon get destroyed. If they last too long, our `thruster`
    object will travel across the screen (which you may or may not want). We have
    eliminated its direction because we will later change this to a force that will
    push the particles in a rough direction, making a less predictable pattern.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里更改了很多设置。总结一下，我们创建了一群出现后很快就会消失的粒子。如果它们存在时间过长，我们的`推进器`对象就会穿越屏幕（你可能希望也可能不希望这样）。我们消除了它的方向，因为我们将在稍后将其改为一个将粒子推向大致方向的力，从而形成一个不太可预测的模式。
- en: Tip
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: Remember that the more particles we have on the screen at once, the more demanding
    the scene will become. To keep things as smooth as possible, we make it so that
    our particles last as long as they need to (that is, they have a short lifetime)
    and we keep each particle size as small as possible, rather than big.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，屏幕上同时显示的粒子越多，场景的需求就越高。为了尽可能保持流畅，我们让粒子保持它们所需的时间（即，它们有较短的寿命），并且我们将每个粒子的大小保持尽可能小，而不是很大。
- en: 'The following screenshot shows our flickering particle system as it is now:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了我们现在闪烁的粒子系统：
- en: '![Figure 4.32 – Current Particle System state'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.32 – 当前粒子系统状态'
- en: '](img/Figure_4.32_B18381.jpg)'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.32_B18381.jpg)'
- en: Figure 4.32 – Current Particle System state
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.32 – 当前粒子系统状态
- en: Let's now continue going through the **Particle System** settings within the
    **Inspector** window.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们继续在**检查器**窗口中浏览**粒子系统**设置。
- en: Setting up the Emission section of our particle system
  id: totrans-267
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置粒子系统的发射部分
- en: 'In this section, we will control the rate of the particles in our particle
    system; under each heading, I will display an information box showing the tooltip
    description for this section. You can view tooltips by moving your mouse over
    the name of the section. This also works within the **Inspector** window for some
    values. An example of a tooltip is shown in the following screenshot:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将控制粒子系统的粒子速率；在每个标题下，我将显示一个信息框，显示该部分的提示描述。你可以通过将鼠标移至部分名称上查看提示信息。这同样适用于**检查器**窗口中的某些值。以下截图显示了提示信息的示例：
- en: '![Figure 4.33 – Emission tooltip'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.33 – 发射提示信息'
- en: '](img/Figure_4.33_B18381.jpg)'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.33_B18381.jpg)'
- en: Figure 4.33 – Emission tooltip
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.33 – 发射提示信息
- en: The next subsetting for the `thruster` particle system is `50`.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '`thruster`粒子系统的下一个子设置是`50`。'
- en: 'As mentioned before, if in doubt, crank the settings all the way up or down
    to see whether there are any instant visual answers to what the property does.
    You can always undo the setting. As an extra precaution, you can always save your
    work before changing any settings:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，如果有疑问，可以将设置调整到最大或最小，以查看是否有任何即时的视觉反馈来了解属性的作用。你总是可以撤销设置。作为额外的预防措施，在更改任何设置之前，你总是可以保存你的工作：
- en: '![Figure 4.34 – Emission''s Rate over Time set to 50'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.34 – 发射速率随时间设置为 50'
- en: '](img/Figure_4.34_B18381.jpg)'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.34_B18381.jpg)'
- en: Figure 4.34 – Emission's Rate over Time set to 50
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.34 – 发射速率随时间设置为 50
- en: We're not doing anything drastic here, just lowering the number of particles
    a little. Later on in this chapter, it may be a good idea, for performance's sake,
    to lower the variable even further, depending on what platform this game is being
    ported to.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我们并没有做任何激进的事情，只是稍微减少了粒子数量。在本章的后面部分，出于性能考虑，可能需要进一步降低变量，具体取决于这款游戏要移植到哪个平台。
- en: In the next section, we will set up how the particles enter the scene.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将设置粒子如何进入场景。
- en: Setting up the Shape section of our particle system
  id: totrans-279
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置粒子系统的形状部分
- en: In the next part of our setup of the particle system, we can alter the **Shape**
    setting and its properties.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们粒子系统设置的下一部分，我们可以更改**形状**设置及其属性。
- en: Information
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 信息
- en: The **Shape** tooltip description is **Shape of the emitter volume, which controls
    where particles are emitted and their initial direction**.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '**形状**的提示信息描述是**发射体积的形状，它控制了粒子的发射位置及其初始方向**。'
- en: 'In the **Shape** section, we will tighten the spawn point that the particles
    come from. The settings that we will change are as follows:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 在**形状**部分，我们将调整粒子发出的起始点。我们将更改的设置如下：
- en: '**Shape**: Defines the shape of the volume from which particles can be emitted
    and the direction of the start velocity. Set this option to **Sphere**.'
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**形状**：定义了粒子可以从中发射的体积形状以及起始速度的方向。将此选项设置为**球体**。'
- en: '`0.02`.'
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`0.02`.'
- en: 'All we need to focus on is the point that the particles have come from. Here''s
    a screenshot of the settings that need to be set:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要关注的只是粒子发出的点。以下是需要设置的设置截图：
- en: '![Figure 4.35 – Updating Shape to Sphere and its Radius to 0.02'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.35 – 更新形状为球体及其半径为0.02'
- en: '](img/Figure_4.35_B18381.jpg)'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_4.35_B18381.jpg)'
- en: Figure 4.35 – Updating Shape to Sphere and its Radius to 0.02
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.35 – 更新形状为球体及其半径为0.02
- en: 'Our player''s ship''s thrusters display more of a concentrated glow now:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 我们玩家的飞船推进器现在显示更多的集中光：
- en: '![Figure 4.36 – Our player ship''s glow appears more concentrated'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.36 – 我们玩家的飞船光现在更集中'
- en: '](img/Figure_4.36_B18381.jpg)'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_4.36_B18381.jpg)'
- en: Figure 4.36 – Our player ship's glow appears more concentrated
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.36 – 我们玩家的飞船光现在更集中
- en: As already mentioned, we stopped the direction of our particle system in the
    very first section, and in the next section, we will use **Force over Lifetime**
    to roughly direct where the particles will go.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们在第一个部分就停止了粒子系统的方向，在下一部分，我们将使用**Force over Lifetime**来大致指示粒子将去哪里。
- en: Setting up the Force over Lifetime section of our particle system
  id: totrans-295
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置粒子系统的**Force over Lifetime**部分
- en: In this short section, we'll alter the force of where we want our particles
    to go. Referring back to the previous screenshot, we can see that our ship has
    a glow that now just needs to be pushed back slightly to give the illusion of
    travel.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个简短的部分，我们将改变我们想要粒子去的地方的力。回顾之前的截图，我们可以看到我们的飞船有一个光，现在只需要稍微推回一点，以产生旅行的错觉。
- en: Information
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 信息
- en: The **Force over Lifetime** tooltip description is **Controls the force of each
    particle during its lifetime**.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '**Force over Lifetime**提示描述是**控制粒子在其生命周期内的力**。'
- en: Unlike other properties, this one needs to be turned on by selecting the check
    box to the left of its name.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他属性不同，这个属性需要通过选择其名称左侧的复选框来打开。
- en: 'Once activated, the only setting we need to adjust is setting `10`, as in the
    following screenshot:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦激活，我们唯一需要调整的设置是设置`10`，如下面的截图所示：
- en: '![Figure 4.37 – Force over Lifetime value updated'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.37 – 生命周期内力值更新'
- en: '](img/Figure_4.37_B18381.jpg)'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_4.37_B18381.jpg)'
- en: Figure 4.37 – Force over Lifetime value updated
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.37 – 生命周期内力值更新
- en: Tip
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: As mentioned before, be adventurous with the settings. Accidents and pushing
    limits can create new effects that might be useful for other parts of this game
    and future projects.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，在设置上要勇于尝试。意外和突破极限可以创造出可能对游戏其他部分和未来项目有用的新效果。
- en: 'So, now our particle looks stretched out and resembles a thruster, as in the
    following screenshot:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，现在我们的粒子看起来被拉伸了，类似于推进器，如下面的截图所示：
- en: '![Figure 4.38 – Particle System is now slightly stretched'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.38 – 粒子系统现在略微拉伸'
- en: '](img/Figure_4.38_B18381.jpg)'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_4.38_B18381.jpg)'
- en: Figure 4.38 – Particle System is now slightly stretched
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.38 – 粒子系统现在略微拉伸
- en: Let's now move on to changing the texture to see whether we can add some more
    detail to the particles.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来改变纹理，看看我们是否可以为粒子添加更多细节。
- en: Setting up the Renderer section of our particle system
  id: totrans-311
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置粒子系统的**Renderer**部分
- en: The **Renderer** section controls the visuals of each particle. This is where
    we can apply our own material. Within the material is a custom texture.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: '**Renderer**部分控制每个粒子的视觉效果。这是我们应用自己的材质的地方。在材质中有一个自定义纹理。'
- en: Information
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 信息
- en: The **Renderer** tooltip description is **Specifies how the particles are rendered**.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '**Renderer**提示描述是**指定粒子如何渲染**。'
- en: We are going to update the **Particle System** material so that it displays
    a sprite sheet, which we will use for animations in the next section.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将更新**Particle System**材质，使其显示精灵图集，我们将在下一节中使用它进行动画。
- en: Information
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 信息
- en: What's a sprite sheet? It is a series of images, typically in a grid formation,
    that is used for animation.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是精灵图集？它是一系列图像，通常以网格形式排列，用于动画。
- en: Drag and drop the `thruster` material file within the `Assets/Material` file
    path location to the **Material** field within the **Renderer** section, as in
    the following screenshot.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 将`thruster`材质文件拖放到**Renderer**部分的**Material**字段中，位置在`Assets/Material`文件路径，如下面的截图所示。
- en: 'The `player_ship` object now has the new `thruster` particle system material
    assigned, which looks dotty. In the following screenshot, the thumbnail of the
    `thruster` material is dragged and dropped into the **Material** field of the
    **Renderer** part:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '`player_ship` 对象现在分配了新的 `thruster` 粒子系统材质，看起来是点状的。在下面的截图中，`thruster` 材质的缩略图被拖放到
    **渲染器** 部分的 **材质** 字段中：'
- en: '![Figure 4.39 – Drag and drop thruster material in the Renderer/Material slot'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.39 – 将推进器材质拖放到渲染器/材质槽中'
- en: '](img/Figure_4.39_B18381.jpg)'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.39_B18381.jpg)'
- en: Figure 4.39 – Drag and drop thruster material in the Renderer/Material slot
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.39 – 将推进器材质拖放到渲染器/材质槽中
- en: With our material and texture applied, we now have lots of dots where the glow
    from the rear of the ship was. We have done everything correctly, but because
    this texture behaves like animation, we need to update its **Texture Sheet Animation**
    settings.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用了材质和纹理之后，我们现在在船尾发光的地方看到了很多点。我们已经做对了所有的事情，但是由于这个纹理表现得像动画，我们需要更新其 **纹理图集动画**
    设置。
- en: Setting up the Texture Sheet Animation section of our particle system
  id: totrans-324
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置粒子系统的纹理图集动画部分
- en: The final step in creating this particle effect is to let Unity animate a sprite
    sheet correctly. Before we set this up, let's take a look at the texture we are
    feeding into the particle system.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 创建粒子效果的最后一步是让 Unity 正确地动画化精灵图集。在我们设置这个之前，让我们先看看我们输入到粒子系统中的纹理。
- en: Information
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 信息
- en: The **Texture Sheet Animation** tooltip description is **Particle UV animation.
    This allows us to specify a texture sheet (a texture with multiple tiles/subframes)
    and animation or randomize over it per particle**.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: '**纹理图集动画** 工具提示描述是 **粒子 UV 动画。这允许我们指定一个纹理图集（具有多个瓦片/子帧的纹理）并按每个粒子进行动画或随机化**。'
- en: 'The following screenshot is from our `thruster` material:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图来自我们的 `thruster` 材质：
- en: '![Figure 4.40 – A sprite sheet'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.40 – 精灵图集'
- en: '](img/Figure_4.40_B18381.jpg)'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.40_B18381.jpg)'
- en: Figure 4.40 – A sprite sheet
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.40 – 精灵图集
- en: The previous screenshot contains 64 images in an 8 x 8 grid. No extra settings
    are needed for this texture. If there were an uneven number of multiple images,
    then we would have to approach this differently by using Unity's sprite Editor
    to cut out each image individually, which can get tedious.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 上一张截图包含一个 8 x 8 网格中的 64 张图片。这个纹理不需要额外的设置。如果有多余的图片数量，我们就必须使用 Unity 的精灵编辑器逐个裁剪每张图片，这可能会变得很繁琐。
- en: Further Information
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息
- en: More information about the sprite Editor can be found at [https://docs.unity3d.com/Manual/SpriteEditor.html](https://docs.unity3d.com/Manual/SpriteEditor.html).
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于精灵编辑器的信息可以在 [https://docs.unity3d.com/Manual/SpriteEditor.html](https://docs.unity3d.com/Manual/SpriteEditor.html)
    找到。
- en: Thankfully, we don't need to worry about doing that. Let's take a closer look
    at the material.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，我们不需要担心做这件事。让我们更仔细地看看材质。
- en: In the following screenshot, we can see that the **Shader** option (at the top
    of the screenshot) is set to the **Particles/Additive** category (ideal shader
    for glow effects), which is one of the most common shaders used for a particle
    system.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下截图中，我们可以看到 **着色器** 选项（截图顶部）设置为 **粒子/添加** 类别（理想的发光效果着色器），这是用于粒子系统中最常用的着色器之一。
- en: 'In the `Assets/Material` file location, we have our `thruster` material file.
    Clicking on the file displays its properties in the **Inspector** window:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Assets/Material` 文件位置，我们有我们的 `thruster` 材质文件。点击文件会在 **检查器** 窗口中显示其属性：
- en: '![Figure 4.41 – The thruster material properties'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.41 – 推进器材质属性'
- en: '](img/Figure_4.41_B18381.jpg)'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.41_B18381.jpg)'
- en: Figure 4.41 – The thruster material properties
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.41 – 推进器材质属性
- en: We can change the strength of the particle by changing its **Tint Color** brightness
    value, as in the previous screenshot. Feel free to make your own changes. I'm
    going to leave mine the way it is.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过改变其 **着色** 亮度值来改变粒子的强度，就像之前的截图所示。请随意进行自己的更改。我将保持我的设置不变。
- en: Coming back to the `8` and `8`.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 回到 `8` 和 `8`。
- en: Information
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 信息
- en: As you will recall, in the previous section, our particles looked dotty. That's
    because we were displaying all 64 images from the texture sheet in one particle.
    With the texture animation sheet, we have divided those 64 images into single
    images that will animate onto each particle.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所回忆的，在上一个部分中，我们的粒子看起来是点状的。这是因为我们在一个粒子中显示了纹理图集中的所有 64 张图片。有了纹理动画图集，我们将这 64
    张图片分成了单个图片，这些图片将动画化到每个粒子上。
- en: 'The following screenshot shows the continuation of our particle system with
    the **Texture Sheet Animation** settings:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了带有 **纹理表动画** 设置的粒子系统的延续：
- en: '![Figure 4.42 – Updating the Texture Sheet Animation Tiles values'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.42 – 更新纹理表动画瓦片值'
- en: '](img/Figure_4.42_B18381.jpg)'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.42_B18381.jpg)'
- en: Figure 4.42 – Updating the Texture Sheet Animation Tiles values
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.42 – 更新纹理表动画瓦片值
- en: 'This is our end result:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们的最终结果：
- en: '![Figure 4.43 – Our player ship''s thruster'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.43 – 我们玩家的推进器'
- en: '](img/Figure_4.43_B18381.jpg)'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.43_B18381.jpg)'
- en: Figure 4.43 – Our player ship's thruster
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.43 – 我们玩家的推进器
- en: If you're happy with the final result, we need to take one final step before
    saving our `player_ship` prefab. Because we changed the scale of `player_ship`
    in the `PlayerSpawner` script, we need to do the same for our `thruster` game
    object.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对自己的最终结果满意，在保存我们的 `player_ship` 预制件之前，我们需要采取最后一步。因为我们已经在 `PlayerSpawner`
    脚本中改变了 `player_ship` 的比例，所以我们也需要对我们的 `thruster` 游戏对象做同样的操作。
- en: 'To change the `localScale` setting of the `thruster` game object, we need to
    do the following:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改 `thruster` 游戏对象的 `localScale` 设置，我们需要执行以下操作：
- en: In the `Assets/Script`.
  id: totrans-355
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Assets/Script`。
- en: 'Double-click on the `PlayerSpawner` script and scroll down to the line of code
    that reads as follows:'
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击 `PlayerSpawner` 脚本，并向下滚动到以下代码行：
- en: '[PRE0]'
  id: totrans-357
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Just below the previous line of code, add the following code to size the `thruster`
    game object:'
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在上一行代码下方，添加以下代码以调整 `thruster` 游戏对象的大小：
- en: '[PRE1]'
  id: totrans-359
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The previous code accesses the player's ship's `ParticleSystem` component and
    changes its scale to `25` on all axes.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码访问玩家的船的 `ParticleSystem` 组件，并将其在所有轴上的比例缩放设置为 `25`。
- en: Save the `PlayerSpawner` script.
  id: totrans-361
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存 `PlayerSpawner` 脚本。
- en: Back in the Unity Editor, with the `player_ship` object selected in the **Hierarchy**
    window, click on the **Overrides | Apply All** button in the **Inspector** window.
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Unity 编辑器中，选择 **层次** 窗口中的 `player_ship` 对象，然后在 **检查器** 窗口中点击 **覆盖 | 应用全部**
    按钮。
- en: As mentioned, be brave with the particle system; use the tooltips if you aren't
    familiar with them and play around with the settings—you'll soon get used to it.
    You could copy and paste the `thruster` game object and alter its color, emissions,
    force, scale, and more. Mix things up to create different types of thrusters.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，对粒子系统要大胆；如果你不熟悉它们，请使用工具提示，并尝试调整设置——你很快就会习惯的。你可以复制并粘贴 `thruster` 游戏对象，并更改其颜色、排放、力、比例等。混合不同的元素以创建不同类型的推进器。
- en: 'Here''s one I made earlier with seven particle systems:'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我用七个粒子系统制作的一个例子：
- en: '![Figure 4.44 – A variety of particles added to the player ship'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.44 – 添加到玩家船上的各种粒子'
- en: '](img/Figure_4.44_B18381.jpg)'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.44_B18381.jpg)'
- en: Figure 4.44 – A variety of particles added to the player ship
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.44 – 添加到玩家船上的各种粒子
- en: '**Particle systems** can also be manipulated via scripting, which is why as
    Unity programmers, we are familiar with the properties but not so much with mastering
    the techniques. It is also likely you will be asked, in the Unity programmer exam,
    about the properties of a particle system and what a particle system is good for
    when it comes to creating effects. Even though we didn''t cover all of the properties
    in this section, it''s good practice to have a general understanding of what each
    property does—for example, knowing that the **Size over LifeTime** property simply
    shrinks the particle over time.'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: '**粒子系统** 也可以通过脚本进行操作，这就是为什么作为 Unity 程序员，我们熟悉属性，但并不擅长掌握技术。在 Unity 程序员考试中，你可能会被问到粒子系统的属性以及粒子系统在创建效果时有什么好处。尽管我们没有在本节中涵盖所有属性，但了解每个属性的作用是很好的实践——例如，了解
    **Size over LifeTime** 属性只是随着时间的推移缩小粒子。'
- en: One of the particle system properties we made use of was **Texture Sheet Animation**,
    where we provided a pre-made texture sheet to divide up our individual images
    to create an animation.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用的粒子系统属性之一是 **Texture Sheet Animation**，我们提供了一个预先制作的纹理表来分割我们的单个图像以创建动画。
- en: Information
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 信息
- en: When a particle system is made, it generates a predictable pattern. This is
    known as **Procedural Mode**; the benefit of this is that Unity knows where the
    particle is in the past and the future. It also helps performance when, for example,
    the camera is looking away from the particle system; then, it can be culled. However,
    if the particle system is modified by a property such as changing its simulation
    space to **World Space**, the particle system will become unpredictable and non-procedural,
    which will disable its ability to improve performance.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 当创建粒子系统时，它会生成一个可预测的模式。这被称为**程序模式**；这种模式的优点是Unity知道粒子在过去和未来的位置。当例如相机远离粒子系统时，这也帮助提高了性能；然后，它可以被裁剪。然而，如果粒子系统被修改，例如将其模拟空间更改为**世界空间**，粒子系统将变得不可预测和非程序化，这将使其无法提高性能。
- en: 'For more information about **Procedural Mode**, check out the following link:
    [https://blogs.unity3d.com/2016/12/20/unitytips-particlesystem-performance-culling](https://blogs.unity3d.com/2016/12/20/unitytips-particlesystem-performance-culling)/.'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 想了解更多关于**程序模式**的信息，请查看以下链接：[https://blogs.unity3d.com/2016/12/20/unitytips-particlesystem-performance-culling](https://blogs.unity3d.com/2016/12/20/unitytips-particlesystem-performance-culling)/。
- en: In the next section, we will use particle systems again, but this time for the
    background to create stars that appear to whizz past us. We will also animate
    the stars at different speeds using Unity's Animator Controller.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们还将使用粒子系统，但这次是为了背景创建星星，使其看起来在我们身边飞驰。我们还将使用Unity的动画控制器以不同的速度动画化星星。
- en: Importing and animating the background
  id: totrans-374
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导入和动画化背景
- en: In this section, we are going to get familiar with Unity's Animator Controller.
    We will make our player's ship travel at lightspeed (well, give the impression
    that it is, anyway) by creating a fast-moving background of stars and particles
    (yes, that's right, more particles) at the start of the level, then we'll slow
    everything down when there are enemies up ahead.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将熟悉Unity的动画控制器。我们将通过在关卡开始时创建一个快速移动的星星和粒子背景（是的，没错，更多的粒子）来让我们的玩家飞船以光速（好吧，至少给人一种这样的印象）移动，然后当前方出现敌人时，我们将放慢一切。
- en: 'Before we start animating at "lightspeed," we need to prepare the **Hierarchy**
    window:'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们以“光速”开始动画之前，我们需要准备**层次结构**窗口：
- en: In the **Hierarchy** window, right-click on an open-space area.
  id: totrans-377
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**层次结构**窗口中，在空白区域右键单击。
- en: Select **Create Empty** from the dropdown.
  id: totrans-378
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从下拉菜单中选择**创建空**。
- en: Click on the new game object and rename it `GameSpeed`.
  id: totrans-379
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击新游戏对象并将其重命名为`GameSpeed`。
- en: Do this again and name the second game object `_SceneAssets`.
  id: totrans-380
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次这样做，并将第二个游戏对象命名为`_SceneAssets`。
- en: Drag `GameSpeed` onto the `_SceneAssets` game object.
  id: totrans-381
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`GameSpeed`拖放到`_SceneAssets`游戏对象上。
- en: Make sure both game objects' **Transform** property values are set to **Reset**.
  id: totrans-382
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保两个游戏对象的**变换**属性值都设置为**重置**。
- en: Finally, drag the `_SceneAssets` game object from the `Assets/Prefab` **Project**
    window.
  id: totrans-383
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将`_SceneAssets`游戏对象从`Assets/Prefab` **项目**窗口拖动。
- en: Tip
  id: totrans-384
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 小贴士
- en: Remember, as well as regularly saving our scene and project, we also need to
    make sure we make prefabs that will be situated in the scene and used on a regular
    basis to store the game object and its components' settings.
  id: totrans-385
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 记住，除了定期保存场景和项目外，我们还需要确保我们创建的预制件将位于场景中并经常使用，以存储游戏对象及其组件的设置。
- en: That's the **Hierarchy** window set up and ready for some extra game objects
    to be added to our scene. Looking at how we create an active animating scene for
    our game, we can tackle this with one of two approaches for a side-scrolling shooter.
    One way is to have a large, static background and move the player and camera through
    the level, tackling enemies. The other way is to keep the camera still and make
    the background move or animate past the camera while we trigger enemies into the
    scene at set times. Why would we use the second way? Because when we make a game,
    as a programmer, we need to focus on what is important to us—in this case, the
    player is most important. Also, the player is clamped within the screen ratio.
    Arguably, it would be more awkward for us to develop and bug-test a moving clamped
    camera, forcing our player across a world scene with other game objects coming
    into play. We can also consider physics as a factor with debris and even more
    game objects colliding with each other, which can cause potential issues. As a
    programmer, I find it is always best to look for the simplest option.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 这是已经设置好的 **层次结构** 窗口，准备添加一些额外的游戏对象到我们的场景中。观察我们如何为游戏创建一个活跃的动画场景，我们可以用两种方法来处理侧滚动射击游戏。一种方法是有一个大型的静态背景，移动玩家和摄像机通过关卡，对抗敌人。另一种方法是保持摄像机静止，当我们在设定的时间触发敌人进入场景时，让背景移动或动画通过摄像机。为什么我们会选择第二种方法？因为当我们制作游戏时，作为一个程序员，我们需要关注对我们来说重要的事情——在这种情况下，玩家是最重要的。此外，玩家被限制在屏幕比例内。可以说，开发并调试一个移动的固定比例摄像机会更尴尬，迫使玩家穿越一个包含其他游戏对象的场景。我们还可以考虑物理因素，如碎片和更多游戏对象之间的碰撞，这可能会引起潜在的问题。作为一个程序员，我发现寻找最简单的选项总是最好的。
- en: 'With that said, let''s move on to making our background:'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，让我们继续制作我们的背景：
- en: Right-click on `GameSpeed` in the **Hierarchy** window.
  id: totrans-388
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **层次结构** 窗口中右键点击 `GameSpeed`。
- en: Select **Create Empty** from the dropdown.
  id: totrans-389
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从下拉菜单中选择 **创建空对象**。
- en: Click on the new game object and rename it `ScreenBackground`.
  id: totrans-390
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击新的游戏对象并将其重命名为 `ScreenBackground`。
- en: The `ScreenBackground` game object is going to house the stars particle system.
    The particle system that we will bring into our scene is pre-made; I didn't think
    it would be necessary to continue making more particles as we have already made
    one for our player's ship.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: '`ScreenBackground` 游戏对象将容纳星星粒子系统。我们将带入场景的粒子系统是预先制作的；我认为没有必要继续制作更多粒子，因为我们已经为玩家的飞船制作了一个。'
- en: From the `Assets/Particle` `warpStars_pe` prefab onto the `GameSpeed` game object
    in the **Hierarchy** window to make it a child.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `Assets/Particle` `warpStars_pe` 预制件到 **层次结构** 窗口中的 `GameSpeed` 游戏对象，使其成为子对象。
- en: 'With the changes we have made in this section, the **Hierarchy** window content
    should resemble the following screenshot:'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中我们做出的更改，**层次结构** 窗口的内容应该类似于以下截图：
- en: '![Figure 4.45 – Current Hierarchy layout'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.45 – 当前层次结构布局'
- en: '](img/Figure_4.45_B18381.jpg)'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_4.45_B18381.jpg]'
- en: Figure 4.45 – Current Hierarchy layout
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.45 – 当前层次结构布局
- en: 'We have updated our **Hierarchy** window again with the second particle system
    for this chapter. This has improved the structure and increased clarity as our
    game starts branching out into more functionality. Let''s now continue focusing
    on the particle system with its placement in the world scene:'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经更新了 **层次结构** 窗口，为这一章添加了第二个粒子系统。这改善了结构并增加了清晰度，因为我们的游戏开始扩展到更多功能。现在让我们继续关注粒子系统及其在场景中的放置：
- en: In the `warpStars_pe` if it isn't selected already.
  id: totrans-398
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `warpStars_pe` 中如果没有被选中。
- en: Moving our attention over to the **Inspector** window, set its **Transform**
    settings to the following:![](img/Table_02.jpg)
  id: totrans-399
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将注意力转移到 **检查器** 窗口中，将其 **变换** 设置调整为以下内容：![img/Table_02.jpg]
- en: With our particle system set up in the correct place, we can now focus on adding
    another layer to the background of our game, which will be a `ScreenBackground`
    texture on a large quad polygon.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的粒子系统设置在正确的位置后，我们现在可以专注于为游戏背景添加另一层，这将是一个大四边形上的 `ScreenBackground` 纹理。
- en: 'Let''s continue adding more functionality to the `ScreenBackground` game object:'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续向 `ScreenBackground` 游戏对象添加更多功能：
- en: In the `ScreenBackground`.
  id: totrans-402
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `ScreenBackground`。
- en: In the **Inspector** window, click on the **Add Component** button.
  id: totrans-403
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **检查器** 窗口中，点击 **添加组件** 按钮。
- en: From the dropdown that appears, start typing `Mesh Filter` until it is available
    to click on from the list.
  id: totrans-404
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从出现的下拉菜单中，开始输入 `网格过滤器` 直到它出现在可点击的列表中。
- en: 'The following screenshot shows the `ScreenBackground`, equipped with a three-dimensional
    **Quad** polygon mesh:'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了 `ScreenBackground`，配备了三维 **四边形** 多边形网格：
- en: '![Figure 4.46 – Quad mesh filter selected from the Mesh dropdown'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.46 – 从网格下拉菜单中选择四边形网格过滤器'
- en: '](img/Figure_4.46_B18381.jpg)'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.46_B18381.jpg)'
- en: Figure 4.46 – Quad mesh filter selected from the Mesh dropdown
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.46 – 从网格下拉菜单中选择四边形网格过滤器
- en: With the **Quad** mesh created, we need to make it visible in our **Scene**
    and **Game** windows with the **Mesh Renderer** component.
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 使用创建的 **四边形** 网格，我们需要通过 **网格渲染器** 组件使其在我们的 **场景** 和 **游戏** 窗口中可见。
- en: Select the `ScreenBackground` game object in the **Hierarchy** window and in
    the **Inspector** window, click on the **Add Component** button.
  id: totrans-410
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **层次结构** 窗口中选择 `ScreenBackground` 游戏对象，并在 **检查器** 窗口中，点击 **添加组件** 按钮。
- en: In the dropdown, start typing `Mesh Renderer` until you see it in the list,
    then click on it.
  id: totrans-411
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下拉菜单中，开始输入 `Mesh Renderer`，直到你在列表中看到它，然后点击它。
- en: 'Similar to what we did for our `player_ship` prefab and our previous particle
    system, we need to create and apply a material to our `ScreenBackground` object:'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们对 `player_ship` 预制件和之前的粒子系统所做的一样，我们需要为 `ScreenBackground` 对象创建并应用一个材料：
- en: Right-click in the open space of the `Assets/Material` file location.
  id: totrans-413
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Assets/Material` 文件位置的空白区域右键单击。
- en: Click on **Create** from the dropdown.
  id: totrans-414
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从下拉菜单中选择 **创建**。
- en: Then, click on **Material**.
  id: totrans-415
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，点击 **材料**。
- en: With the new material selected, rename it `backGround_Wallpaper`.
  id: totrans-416
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选择了新的材料后，将其重命名为 `backGround_Wallpaper`。
- en: 'Because our `ScreenBackground` game object now has a `MeshRenderer` object
    and we have created a material for it, we now need to apply it:'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们的 `ScreenBackground` 游戏对象现在有一个 `MeshRenderer` 对象，并且我们已经为它创建了一个材料，我们现在需要应用它：
- en: In the `ScreenBackground`.
  id: totrans-418
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `ScreenBackground`。
- en: 'Drag and drop the `backGround_Wallpaper` material from the **Project** window
    to the **Mesh Renderer** section, into the **Element 0** slot of the **Materials**
    subsection, as in the following screenshot:'
  id: totrans-419
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `backGround_Wallpaper` 材料从 **项目** 窗口拖放到 **网格渲染器** 部分，放入 **材料** 子部分的 **元素 0**
    插槽中，如下截图所示：
- en: '![Figure 4.47 – Drag and drop the backGround_wallpaper material into Element
    0'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.47 – 将 backGround_wallpaper 材料拖放到元素 0'
- en: '](img/Figure_4.47_B18381.jpg)'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.47_B18381.jpg)'
- en: Figure 4.47 – Drag and drop the backGround_wallpaper material into Element 0
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.47 – 将 backGround_wallpaper 材料拖放到元素 0
- en: Let's rewind and confirm what we have done so far in this section. We have our
    game objects in their correct positions in the `backGround_Wallpaper`.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下到目前为止在本节中完成的工作。我们已经将游戏对象放置在 `backGround_Wallpaper` 的正确位置。
- en: Now, we'll set the material up to be something quite basic. It doesn't require
    a lot of fancy shaders, so just a simple low-resource mobile shader will be fine.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将设置材料以使其变得相当基础。它不需要很多复杂的着色器，所以一个简单的低资源移动着色器就足够了。
- en: Information
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 信息
- en: Shaders are typically mathematical scripts that tell our material how its graphics
    and light behave.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 着色器通常是数学脚本，告诉我们的材料其图形和光照如何表现。
- en: Make sure `ScreenBackground` is still selected in the **Hierarchy** window.
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 确保在 **层次结构** 窗口中仍然选择了 `ScreenBackground`。
- en: 'In the **Inspector** window, scroll down to the **Material** component:'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 在 **检查器** 窗口中，向下滚动到 **材料** 组件：
- en: If the **Material** component isn't expanded, click on the arrow next to the
    white sphere.
  id: totrans-429
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果 **材料** 组件没有展开，请点击白色球体旁边的箭头。
- en: With the **Material** component expanded, we can see a lot of maps that we won't
    need, so let's change the shader to a more basic one.
  id: totrans-430
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当 **材料** 组件展开时，我们可以看到许多我们不需要的映射，所以让我们将着色器更改为更基础的类型。
- en: Click on the selection dropdown from the **Shader** field. Typically, **Standard**
    will be the default shader.
  id: totrans-431
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **着色器** 字段的选择下拉菜单。通常，**标准** 将是默认着色器。
- en: From the dropdown, click on **Mobile**.
  id: totrans-432
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从下拉菜单中，点击 **移动**。
- en: Then, click on **Diffuse**.
  id: totrans-433
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，点击 **漫反射**。
- en: 'The following screenshot shows this procedure:'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了此过程：
- en: '![Figure 4.48 – Selecting a Mobile Diffuse shader for our material'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.48 – 为我们的材料选择移动漫反射着色器'
- en: '](img/Figure_4.48_B18381.jpg)'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.48_B18381.jpg)'
- en: Figure 4.48 – Selecting a Mobile Diffuse shader for our material
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.48 – 为我们的材料选择移动漫反射着色器
- en: 'This has chopped our **Material** properties down to the minimum requirement,
    as in the following screenshot:'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 这将我们的 **材料** 属性简化到最小需求，如下截图所示：
- en: '![Figure 4.49 – backGround_wallpaper material''s current state'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.49 – backGround_wallpaper 材料的当前状态'
- en: '](img/Figure_4.49_B18381.jpg)'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.49_B18381.jpg)'
- en: Figure 4.49 – backGround_wallpaper material's current state
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.49 – backGround_wallpaper 材料当前状态
- en: The two things we really care about in this **Material** component are the **Texture**
    we are going to supply to it and its **Offset** value.
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个 **材质** 组件中，我们真正关心的是我们将要提供给它的 **纹理** 和其 **偏移量** 值。
- en: Information
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 信息
- en: What's an offset? **Offset** is the position where our texture is applied on
    our UV map. For example, if we increase the **Offset** property's **X** position,
    the texture applied to the material will overlap and appear on the other side
    of our quad.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是偏移量？**偏移量** 是我们的纹理在 UV 图上应用的位置。例如，如果我们增加 **偏移量** 属性的 **X** 位置，应用到材质上的纹理将重叠并出现在四边形的另一侧。
- en: 'We will now continue working with our background `ScreenBackground` texture:'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将继续处理我们的背景 `ScreenBackground` 纹理：
- en: With the **Material** component still in the **Inspector** window, there is
    a large square at the top right called **None (Texture)**. Click on **Select**
    (use the previous screenshot as a reference).
  id: totrans-446
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在仍然位于 **检查器** 窗口的 **材质** 组件中，右上角有一个大正方形，称为 **无（纹理）**。点击 **选择**（参考前面的截图）。
- en: A dropdown appears. Start typing `spaceBackground` until the option comes up,
    then click on it.
  id: totrans-447
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 出现了一个下拉菜单。开始输入 `spaceBackground`，直到出现选项，然后点击它。
- en: 'We should have a quad named `ScreenBackground` that is black with white dots
    on it, as in the following screenshot:'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该有一个名为 `ScreenBackground` 的四边形，其颜色为黑色，上面有白色的小点，如下面的截图所示：
- en: '![Figure 4.50 – Our quad spaceBackground'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.50 – 我们的 quad spaceBackground'
- en: '](img/Figure_4.50_B18381.jpg)'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_4.50_B18381.jpg)'
- en: Figure 4.50 – Our quad spaceBackground
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.50 – 我们的 quad spaceBackground
- en: Before we start animating this texture, we need to do the same as what we did
    for our particle system and update its `ScreenBackground` to cover the camera's
    frustum angle and our image to show up after the **Transform** update.
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始动画这个纹理之前，我们需要做与我们为粒子系统所做的一样，更新其 `ScreenBackground` 以覆盖摄像机的视锥角，并在 **变换**
    更新后显示我们的图像。
- en: In the `ScreenBackground` game object.
  id: totrans-453
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `ScreenBackground` 游戏对象中。
- en: 'In the **Inspector** window, update its **Transform** component with the following
    settings:'
  id: totrans-454
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **检查器** 窗口中，使用以下设置更新其 **变换** 组件：
- en: '![](img/Table_03.jpg)'
  id: totrans-455
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/Table_03.jpg)'
- en: 'The following screenshot shows our current scene view:'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图显示了我们的当前场景视图：
- en: We have a very large quad with a space texture.
  id: totrans-457
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们有一个非常大的四边形，上面有空间纹理。
- en: We have a white grid-like camera view.
  id: totrans-458
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们有一个白色的网格状相机视图。
- en: Our player's ship is in between the camera and the quad.
  id: totrans-459
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 玩家的飞船位于摄像机和四边形之间。
- en: 'The bottom right shows us what the user sees as an end result:'
  id: totrans-460
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 右下角显示了用户看到的最终结果：
- en: '![Figure 4.51 – Our current game scene environment setup'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.51 – 我们当前的游戏场景环境设置'
- en: '](img/Figure_4.51_B18381.jpg)'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_4.51_B18381.jpg)'
- en: Figure 4.51 – Our current game scene environment setup
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.51 – 我们当前的游戏场景环境设置
- en: We have updated our **Hierarchy** window to hold two background layers. The
    first layer shows passing stars with the second particle system we added from
    this chapter's downloads file. The second is a game object that holds a quad polygon
    with a texture. Let's now move on to creating the Animator Controller for our
    background and space warp particle.
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经更新了我们的 **层次结构** 窗口以包含两个背景层。第一层显示通过星星，第二层是我们从本章下载文件中添加的第二个粒子系统。第二层是一个包含纹理的四边形游戏对象。现在让我们继续为我们的背景和空间扭曲粒子创建动画控制器。
- en: Adding an Animator Controller
  id: totrans-465
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加动画控制器
- en: Using the Animator Controller is a way of controlling animation states. We will
    have our player's ship traveling at lightspeed for a couple of seconds, then we'll
    slow things down just before the enemies come to attack our player.
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 使用动画控制器是一种控制动画状态的方法。我们的玩家飞船将以光速行驶几秒钟，然后在我们玩家被敌人攻击之前，我们将放慢速度。
- en: 'The left-hand-side depiction of our ship in the following screenshot shows
    more streaking particles than the ship on the right. The starry background also
    moves faster on the left than on the right (which you can''t really see in these
    still screenshots):'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图中的左侧飞船比右侧的飞船有更多的拖尾粒子。星系背景在左侧也比在右侧移动得快（在这些静态截图中你几乎看不到）：
- en: '![Figure 4.52 – Animating the stars in the background will follow next'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.52 – 下一步将动画背景中的星星'
- en: '](img/Figure_4.52_B18381.jpg)'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_4.52_B18381.jpg)'
- en: Figure 4.52 – Animating the stars in the background will follow next
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.52 – 下一步将动画背景中的星星
- en: So, let's create and attach the animator to the parent of the `ScreenBackground`
    object and the particle system.
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们创建并将Animator附加到`ScreenBackground`对象和粒子系统的父对象上。
- en: Tip
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: With the Animator Controller, if you are animating multiple game objects at
    once, make sure your Animator Controller is the parent to these game objects.
    You can't have a child animating its parent (**parent** refers to the game objects
    above the object in the **Hierarchy** window).
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Animator Controller，如果您同时动画化多个游戏对象，请确保您的Animator Controller是这些游戏对象的父对象。不能有子对象动画化其父对象（**父对象**指的是**Hierarchy**窗口中对象上方的游戏对象）。
- en: 'Looking at the `GameSpeed` game object. As mentioned in the information box,
    the Animator Controller animates all the children, but it can''t animate parents.
    With that said, let''s add the Animator Controller:'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 查看`GameSpeed`游戏对象。如信息框中所述，Animator Controller会动画化所有子对象，但它不能动画化父对象。因此，让我们添加Animator
    Controller：
- en: In the `GameSpeed` game object.
  id: totrans-475
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`GameSpeed`游戏对象中。
- en: In the **Inspector** window, click on the **Add Component** button.
  id: totrans-476
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Inspector**窗口中，点击**Add Component**按钮。
- en: In the dropdown, start typing `Animator` until it appears and then click on
    it.
  id: totrans-477
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下拉菜单中，开始输入`Animator`，直到它出现，然后点击它。
- en: 'The following screenshot shows the `GameSpeed` game object:'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了`GameSpeed`游戏对象：
- en: '![Figure 4.53 – Select the Animator from the dropdown'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 4.53 – Select the Animator from the dropdown'
- en: '](img/Figure_4.53_B18381.jpg)'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_4.53_B18381.jpg]'
- en: Figure 4.53 – Select the Animator from the dropdown
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.53 – 从下拉菜单中选择Animator
- en: 'We now have the `GameSpeed` game object. The next thing to do is create and
    attach the Animator Controller to the **Controller** field. The following screenshot
    shows the **Animator** component settings:'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了`GameSpeed`游戏对象。接下来要做的就是创建并附加Animator Controller到**Controller**字段。以下截图显示了**Animator**组件的设置：
- en: '![Figure 4.54 – The Animator Controller component'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 4.54 – The Animator Controller component'
- en: '](img/Figure_4.54_B18381.jpg)'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_4.54_B18381.jpg]'
- en: Figure 4.54 – The Animator Controller component
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.54 – The Animator Controller component
- en: Before we do that, we need to create an `Animator` folder. In the `Assets` folder
    and create an empty folder. Name it `Animator`.
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行之前，我们需要创建一个`Animator`文件夹。在`Assets`文件夹中创建一个空文件夹。命名为`Animator`。
- en: 'Go inside the `Animator` folder and continue making the Animator Controller:'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 进入`Animator`文件夹，继续创建Animator Controller：
- en: Right-click in the **Project** window open space.
  id: totrans-488
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Project**窗口的空白区域右键点击。
- en: Click on **Create**.
  id: totrans-489
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**Create**。
- en: Click on the **Animator Controller** (see the left side of the following screenshot
    for reference).
  id: totrans-490
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**Animator Controller**（参考以下截图的左侧）。
- en: Rename the new `GameSpeed_Controller`.
  id: totrans-491
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重命名新的`GameSpeed_Controller`。
- en: Finally, drag and drop this Animator Controller to the `GameSpeed` Animator
    Controller in its **Inspector** window (refer to the right-hand side of the following
    screenshot for reference).
  id: totrans-492
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将此Animator Controller拖放到其**Inspector**窗口中的`GameSpeed` Animator Controller上（参考以下截图的右侧）。
- en: 'The following screenshot shows the creation of an Animator Controller and how
    to apply it to the **Animator** component:'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了Animator Controller的创建以及如何将其应用到**Animator**组件中：
- en: '![Figure 4.55 – Drag and drop the GameSpeed_Controller into the Animator Controller
    slot'
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 4.55 – Drag and drop the GameSpeed_Controller into the Animator Controller
    slot'
- en: '](img/Figure_4.55_B18381.jpg)'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_4.55_B18381.jpg]'
- en: Figure 4.55 – Drag and drop the GameSpeed_Controller into the Animator Controller
    slot
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.55 – 将GameSpeed_Controller拖放到Animator Controller槽中
- en: In this section, we created and applied our `GameSpeed` game object. In the
    next section, we will look at animation states within the Animator Controller.
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们创建并应用了`GameSpeed`游戏对象。在下一节中，我们将查看Animator Controller中的动画状态。
- en: Creating states in the Animator Controller
  id: totrans-498
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Animator Controller中创建状态
- en: In this section, we will use the Animator Controller to create a state for animating
    the background scene and particles at high speed; followed by the second state,
    which will slow the background and particles down to represent the player's ship
    going at a slower speed (which also helps make our game less distracting). Let's
    make the first state.
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用Animator Controller创建一个用于快速动画背景场景和粒子的状态；接着是第二个状态，将背景和粒子减速以表示玩家飞船以较慢的速度行驶（这也有助于使我们的游戏不那么分散注意力）。让我们创建第一个状态。
- en: 'To create a state, follow these instructions:'
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个状态，请按照以下说明操作：
- en: Double-click on the `GameSpeed_Controller` object that we placed in the `GameSpeed`
    **Animator** component.
  id: totrans-501
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击放置在`GameSpeed` **Animator**组件中的`GameSpeed_Controller`对象。
- en: 'The **Animator** window will open with some default states: **Entry**, **Any
    State,** and **Exit**.'
  id: totrans-502
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**动画器**窗口将打开并显示一些默认状态：**进入**、**任何状态**和**退出**。'
- en: Right-click in an open space within the **Animator** window.
  id: totrans-503
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**动画器**窗口内的空白区域右键单击。
- en: A dropdown will appear. Click on **Create State**.
  id: totrans-504
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将会出现一个下拉菜单。点击**创建状态**。
- en: 'Then, click on **Empty**:'
  id: totrans-505
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，点击**空**：
- en: '![Figure 4.56 – Create an empty animation state'
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.56 – 创建一个空动画状态'
- en: '](img/Figure_4.56_B18381.jpg)'
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.56_B18381.jpg)'
- en: Figure 4.56 – Create an empty animation state
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.56 – 创建一个空动画状态
- en: As you can guess, we've just created an empty state.
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所猜，我们刚刚创建了一个空状态。
- en: Repeat this process to create a second state.
  id: totrans-510
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复此过程以创建第二个状态。
- en: Further Information
  id: totrans-511
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更多信息
- en: Unity's Animator Controller also offers layering with our animation. So, for
    example, we can animate a player who can run, jump, and shoot. It's likely that
    we will want a couple of these animations playing at the same time, and we can
    do so with **Layers** (see the top-left corner of the previous screenshot). We
    can change the influence over each animation, or **Weight**, as it's referred
    to in Unity, and we can use the **Override** (information from other layers will
    be ignored) or **Additive** (added on top of another animation) settings to blend
    between animations.
  id: totrans-512
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Unity 的动画控制器还提供了与我们的动画的分层。例如，我们可以为一个可以跑步、跳跃和射击的玩家进行动画处理。我们可能希望同时播放几个这样的动画，我们可以通过**层**（参见上一张截图的左上角）来实现。我们可以改变每个动画的影响，或**权重**，在
    Unity 中被称为，并且我们可以使用**覆盖**（其他层的将忽略信息）或**叠加**（添加到另一个动画之上）设置来在动画之间混合。
- en: If you would like to find out more about animation layers, go to [https://docs.unity3d.com/Manual/AnimationLayers.html](https://docs.unity3d.com/Manual/AnimationLayers.html).
  id: totrans-513
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您想了解更多关于动画层的信息，请访问 [https://docs.unity3d.com/Manual/AnimationLayers.html](https://docs.unity3d.com/Manual/AnimationLayers.html)。
- en: 'Once we have created our second state, let''s do a bit of housekeeping:'
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们创建了第二个状态，让我们做一些整理：
- en: Click and drag **Exit** and **Any State** out of the way. We won't be using
    these. **Entry** will automatically attach itself to the first state we make.
  id: totrans-515
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击并拖动**退出**和**任何状态**到一边。我们不会使用这些。**进入**将自动附加到我们创建的第一个状态。
- en: Let's now rename our states.
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们重命名我们的状态。
- en: Click on the orange state called **New State**.
  id: totrans-517
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击名为**New State**的橙色状态。
- en: In the **Inspector** window, click in the top-right corner where it says **New
    State**.
  id: totrans-518
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**检查器**窗口中，点击右上角标有**新建状态**的位置。
- en: Delete this and rename it `BackGround_Intro_Speed`.
  id: totrans-519
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除此状态并将其重命名为`BackGround_Intro_Speed`。
- en: Press *Enter* on your keyboard to make sure it saves the name. If you click
    away, it sometimes doesn't save the change.
  id: totrans-520
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在键盘上按**Enter**键以确保保存名称。如果您点击离开，有时它不会保存更改。
- en: Now, rename the other state we made, currently titled `New State 0`. Rename
    this second state to `BackGround_InGame_Speed`.
  id: totrans-521
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将我们创建的另一个状态重命名为`New State 0`，将其重命名为`BackGround_InGame_Speed`。
- en: Tip
  id: totrans-522
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 小贴士
- en: You can zoom in and out and pan around the **Animator** window with your mouse
    wheel.
  id: totrans-523
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以使用鼠标滚轮放大和缩小**动画器**窗口。
- en: To zoom in, scroll the wheel up.
  id: totrans-524
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要放大，滚动鼠标滚轮向上。
- en: To zoom out, scroll the wheel down.
  id: totrans-525
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要缩小，滚动鼠标滚轮向下。
- en: To pan, hold the middle mouse button down.
  id: totrans-526
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要平移，按住鼠标中键。
- en: Don't worry about the exact placement of the states; that's more of a cosmetic
    issue. We just need to have an `BackGround_Intro_Speed` state, with a `BackGround_InGame_Speed`
    state near to it.
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 不要担心状态的精确位置；这更多是一个外观问题。我们只需要有一个`BackGround_Intro_Speed`状态，一个`BackGround_InGame_Speed`状态靠近它。
- en: 'The following screenshot shows the three states we should be focusing on:'
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了我们应该关注的三个状态：
- en: '![Figure 4.57 – Animator Controller states'
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.57 – 动画控制器状态'
- en: '](img/Figure_4.57_B18381.jpg)'
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.57_B18381.jpg)'
- en: Figure 4.57 – Animator Controller states
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.57 – 动画控制器状态
- en: These three animation states will eventually have lines attached to each of
    them; these lines allow a condition to be made (such as an `if` statement; see
    [https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/if-else](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/if-else)
    for more information) so that one state can move to another.
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: 这三个动画状态最终将连接到每个状态上的一些线条；这些线条允许创建一个条件（例如`if`语句；更多信息请参见 [https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/if-else](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/if-else)）以便一个状态可以移动到另一个状态。
- en: 'Before we look at this, we also need to be aware that each state can run at
    different speeds. We will alter the speed of the states to go in line with the
    speed of the animations they house. To change the animation speeds of our state,
    do the following:'
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们查看这个之前，我们还需要意识到每个状态可以以不同的速度运行。我们将调整状态的速度，使其与它们所包含的动画速度相匹配。要更改我们状态中的动画速度，请执行以下操作：
- en: In the `BackGround_InGame_Speed` state.
  id: totrans-534
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `BackGround_InGame_Speed` 状态中。
- en: In its `1` to `0.1`.
  id: totrans-535
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在其 `1` 到 `0.1`。
- en: The other state will remain the same.
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个状态将保持不变。
- en: As the scene starts, the first state is `BackGround_Intro_Speed`, then once
    that animation is connected to it (which we currently haven't done yet), `BackGround_InGame_Speed`
    is played next. We need to connect the last state so that it can be played after.
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: 当场景开始时，第一个状态是 `BackGround_Intro_Speed`，然后一旦该动画连接到它（我们目前还没有这样做），接下来将播放 `BackGround_InGame_Speed`。我们需要连接最后一个状态，以便它可以在之后播放。
- en: 'To connect a state, do the following:'
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: 要连接一个状态，请执行以下操作：
- en: In the `BackGround_Intro_Speed` state.
  id: totrans-539
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `BackGround_Intro_Speed` 状态中。
- en: From the dropdown, click on **Make Transition**.
  id: totrans-540
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从下拉菜单中，点击 **Make Transition**。
- en: Then, click on `BackGround_InGame_Speed`.
  id: totrans-541
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，点击 `BackGround_InGame_Speed`。
- en: We should now have one state connected to another.
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在应该有一个状态连接到另一个状态。
- en: In this section, we delved deeper into the Animator Controller, creating our
    intro and in-game animation states. We set the speed of the state and, finally,
    connected up the transition lines so that we know the flow of our animation states.
    All this structuring of extra game objects, the Animator Controller, and the states
    means we are now at the stage where we can start animating our scenery.
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们更深入地探讨了 Animator Controller，创建了我们的开场和游戏动画状态。我们设置了状态的速度，最后，连接了过渡线，以便我们知道动画状态流。所有这些额外游戏对象、Animator
    Controller 和状态的结构意味着我们现在已经到了可以开始动画化场景的阶段。
- en: Animation
  id: totrans-544
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动画
- en: Finally, we are actually going to animate something. We will only cover a basic
    animation but it will give us an understanding of the animation setup, which will
    support us in the exam and future projects.
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们实际上要动画化一些东西。我们只会覆盖一个基本的动画，但它将帮助我们理解动画设置，这将支持我们在考试和未来的项目中。
- en: 'So, let''s just jump in and animate the background and our background particles:'
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们直接进入并动画化背景以及我们的背景粒子：
- en: In the `Assets/Animator` folder location.
  id: totrans-547
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Assets/Animator` 文件夹位置。
- en: Right-click in the open space and click on **Create** from the dropdown.
  id: totrans-548
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在空白区域右键单击，并从下拉菜单中选择 **Create**。
- en: Then, click on **Animation**.
  id: totrans-549
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，点击 **Animation**。
- en: Name the new animation `BackGround_InGame_Speed`.
  id: totrans-550
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新动画命名为 `BackGround_InGame_Speed`。
- en: Repeat the process and name the new animation `BackGround_Intro_Speed`.
  id: totrans-551
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复此过程，并将新动画命名为 `BackGround_Intro_Speed`。
- en: 'The following screenshot shows the creation of an **Animation** file:'
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了创建 **Animation** 文件的过程：
- en: '![Figure 4.58 – Creating an Animation file in the Unity editor'
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.58 – 在 Unity 编辑器中创建动画文件'
- en: '](img/Figure_4.58_B18381.jpg)'
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.58_B18381.jpg)'
- en: Figure 4.58 – Creating an Animation file in the Unity Editor
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.58 – 在 Unity 编辑器中创建动画文件
- en: The introduction animation will be played once because it will be a surge of
    stars, then the second animation will loop, playing continuously to give the illusion
    of never-ending stars and particle stars moving past the **Game** window.
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: 开场动画将播放一次，因为它将是一阵星星的爆发，然后第二个动画将循环播放，连续播放以产生永不结束的星星和粒子星星穿过 **Game** 窗口的错觉。
- en: With that said, in the `BackGround_InGame_Speed` animation file, and in the
    **Inspector** window, check the box next to **Loop Time**.
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，在 `BackGround_InGame_Speed` 动画文件中，并在 **Inspector** 窗口中，勾选 **Loop Time**
    旁边的框。
- en: We now need to apply our two **Animation** files to their animation states in
    the **Animator** window.
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在需要在 **Animator** 窗口中将我们的两个 **Animation** 文件应用到它们的动画状态中。
- en: 'To hook these new **Animation** files up, do the following:'
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: 要连接这些新的 **Animation** 文件，请执行以下操作：
- en: In the `GameSpeed` game object.
  id: totrans-560
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `GameSpeed` 游戏对象中。
- en: Double-click on `GameSpeed_Controller`.
  id: totrans-561
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击 `GameSpeed_Controller`。
- en: The **Animator** window opens up. Select one of the two animation states we
    created in the Animator Controller.
  id: totrans-562
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Animator** 窗口打开。在动画控制器中选中我们创建的两个动画状态之一。'
- en: Drag and drop the **Animation** file we just made to the **Motion** field of
    the **Inspector** tab (refer to the following screenshot).
  id: totrans-563
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将我们刚刚创建的 **Animation** 文件拖放到 **Inspector** 选项卡的 **Motion** 字段中（参见图示）。
- en: Select the other state that we created and repeat the drag-and-drop process
    with the other matching **Animation** file.
  id: totrans-564
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择我们创建的另一个状态，并使用另一个匹配的 **Animation** 文件重复拖放过程。
- en: We now have the two Animator Controller states with an empty animation clip
    applied.
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在有两个Animator Controller状态，应用了空动画剪辑。
- en: 'The following screenshot shows our `BackGround_Intro_Speed` animation file
    dragged and dropped into the **Animation State** | **Motion** field:'
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示我们的`BackGround_Intro_Speed`动画文件被拖放到**动画状态** | **运动**字段中：
- en: '![Figure 4.59 – Drag and drop the BackGround_Intro_Speed file into the Motion
    slot'
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.59 – 将BackGround_Intro_Speed文件拖放到运动槽中]'
- en: '](img/Figure_4.59_B18381.jpg)'
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.59 – 图 4.59_B18381.jpg]'
- en: Figure 4.59 – Drag and drop the BackGround_Intro_Speed file into the Motion
    slot
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.59 – 将BackGround_Intro_Speed文件拖放到运动槽中
- en: Further Information
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息
- en: 'You can also create a blend tree in the Animator Controller. A blend tree is
    specifically built to blend a series of animations as one form. Within the blend
    tree, there are different types: **1D**, a series of **2D**, and **Direct**.'
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在Animator Controller中创建混合树。混合树专门用于将一系列动画混合成一种形式。在混合树中，有不同的类型：**1D**，一系列**2D**，和**直接**。
- en: Blend trees can be useful to change an animation from walking to running (**1D**)
    or for more complex animations, such as facial expressions (**Direct**).
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: 混合树可以用来将动画从行走改为跑步（**1D**）或用于更复杂的动画，如面部表情（**直接**）。
- en: To learn more about blend trees, check out [https://docs.unity3d.com/Manual/class-BlendTree.html](https://docs.unity3d.com/Manual/class-BlendTree.html).
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于混合树的信息，请查看[https://docs.unity3d.com/Manual/class-BlendTree.html](https://docs.unity3d.com/Manual/class-BlendTree.html)。
- en: Let's stay focused on our **Animation** file and start animating the scene.
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们专注于我们的**动画**文件，并开始对场景进行动画制作。
- en: 'First, we need to open the **Animation** window:'
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要打开**动画**窗口：
- en: At the top of the Unity Editor window, click on **Window**.
  id: totrans-576
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Unity编辑器窗口顶部，点击**窗口**。
- en: Then, click on **Animation**, or you can use the *Ctrl* (or *command* on macOS)
    + *6* shortcut.
  id: totrans-577
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，点击**动画**，或者可以使用*Ctrl*（或在macOS上为*command*）+ *6* 快捷键。
- en: 'Next, back in our `BackGround_Intro_Speed` animation file (this should be located
    in the `Assets/ Animator` folder structure). This will update the **Animation**
    name within the window (use the following screenshot as a reference):'
  id: totrans-578
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，回到我们的`BackGround_Intro_Speed`动画文件（这应该位于`Assets/Animator`文件夹结构中）。这将更新窗口内的**动画**名称（请参考以下截图）：
- en: '![Figure 4.60 – Animation window with the BackGround_Intro_Speed animation
    selected'
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.60 – 动画窗口，已选择BackGround_Intro_Speed动画]'
- en: '](img/Figure_4.60_B18381.jpg)'
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.60 – 图 4.60_B18381.jpg]'
- en: Figure 4.60 – Animation window with the BackGround_Intro_Speed animation selected
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.60 – 动画窗口，已选择BackGround_Intro_Speed动画
- en: Tip
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: Like most windows within Unity, we can lock the window so that it doesn't update
    to another game object or, in this case, animation.
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: 如同Unity中的大多数窗口，我们可以锁定窗口，使其不更新到另一个游戏对象或，在这种情况下，动画。
- en: To lock the window, click on the padlock symbol in the top-right corner of the
    **Animation** window.
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: 要锁定窗口，点击**动画**窗口右上角的锁形符号。
- en: Locking the animation is probably a good idea, at this point, as we will be
    clicking on different game objects within the **Hierarchy** and **Inspector**
    windows.
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: 在此阶段，锁定动画可能是个好主意，因为我们将在**层次结构**和**检查器**窗口中点击不同的游戏对象。
- en: 'We will animate the `spaceBackground` texture first:'
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先将动画`spaceBackground`纹理：
- en: Keep the `GameSpeed` game object selected in the **Hierarchy**. If we select
    something else, we will lose the animation functionality in the **Animation**
    window.
  id: totrans-587
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保持`GameSpeed`游戏对象在**层次结构**中选中。如果我们选择其他对象，我们将在**动画**窗口中失去动画功能。
- en: In the **Animation** window, click on the round red record button (above the
    **Animation** filename). Notice how the **Animation** window turns partially red,
    telling us we are in record mode.
  id: totrans-588
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**动画**窗口中，点击圆形红色录音按钮（位于**动画**文件名上方）。注意**动画**窗口部分变红，这告诉我们我们处于录音模式。
- en: Then, in the `ScreenBackground`.
  id: totrans-589
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在`ScreenBackground`。
- en: Now, in the `backGround_Wallpaper` material settings.
  id: totrans-590
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`backGround_Wallpaper`材质设置中。
- en: Also, make sure our **Animation** white indicator line is all the way to the
    left, as in the following screenshot.
  id: totrans-591
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同时，确保我们的**动画**白色指示线完全在左侧，如图所示。
- en: Next, change the `0` to `-10`. Notice how the fields turn red as this is noted
    in the **Animation** window.
  id: totrans-592
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将`0`改为`-10`。注意字段变红，因为在**动画**窗口中有提示。
- en: 'Now, click and hold the white line in the **Animation** window and move it
    across to the right so that it isn''t sitting on top of the animation it has just
    made:'
  id: totrans-593
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击并按住**动画**窗口中的白色线，将其移动到右侧，使其不位于刚刚制作的动画上方：
- en: '![Figure 4.61 – Animating the Offset value of the backGround_wallpaper material
    properties'
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.61 – 动画背景壁纸材质属性的偏移值'
- en: '](img/Figure_4.61_B18381.jpg)'
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.61_B18381.jpg)'
- en: Figure 4.61 – Animating the Offset value of the backGround_wallpaper material
    properties
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.61 – 动画背景壁纸材质属性的偏移值
- en: 'Change the `-10` to `1`. Notice, in the following screenshot, how the white
    lines in the `300` (5 minutes):'
  id: totrans-597
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`-10`更改为`1`。注意，在以下截图中的`300`（5分钟）：
- en: '![Figure 4.62 – Adding a second keyframe and changing the backGround_wallpaper
    Offset value'
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.62 – 添加第二个关键帧并更改背景壁纸偏移值'
- en: '](img/Figure_4.62_B18381.jpg)'
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.62_B18381.jpg)'
- en: Figure 4.62 – Adding a second keyframe and changing the backGround_wallpaper
    Offset value
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.62 – 添加第二个关键帧并更改背景壁纸偏移值
- en: Try moving the white lines backward and forward (**scrub** is the term used
    for this by animators) between our two animation points. Notice how the stars
    on the quad are moving.
  id: totrans-601
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的两个动画点之间前后移动白色线条（动画师称此为**scrub**）。注意四边形上的星星是如何移动的。
- en: 'Let''s now do something similar with the `warpStars_pe` particle system:'
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们对`warpStars_pe`粒子系统做类似的事情：
- en: Check that the **Animation** window is still locked and recording.
  id: totrans-603
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保动画窗口仍然锁定并记录。
- en: Move the animation indicator line all the way back to the left to the start
    of the other animation keyframe.
  id: totrans-604
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将动画指示线完全移回到左侧，到另一个动画关键帧的开始处。
- en: From the `warpStars_pe`.
  id: totrans-605
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`warpStars_pe`。
- en: 'In the **Transform** section of the **Inspector** tab, make the following changes:'
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: 在**检查器**标签页的**变换**部分，进行以下更改：
- en: '![](img/Table_04.jpg)'
  id: totrans-607
  prefs: []
  type: TYPE_IMG
  zh: '![图片 04](img/Table_04.jpg)'
- en: Then, scrub (move) the white lines to the exact same spot as the starry background
    keyframe.
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将白色线条移动到与星形背景关键帧完全相同的点。
- en: Tip
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: We can click the **Next Frame** button in the **Animation** window to jump to
    the next keyframe (the button to the right of the **Play** button, not the Editor
    play button).
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在**动画**窗口中点击**下一帧**按钮跳转到下一个关键帧（位于**播放**按钮右侧的按钮，而不是编辑器播放按钮）。
- en: 'With the `warpStars_pe` game object still selected, update its **Transform**
    settings in the **Inspector** window with the following values:'
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
  zh: 在**层次结构**窗口中仍然选择`warpStars_pe`游戏对象，并在**检查器**窗口中更新其**变换**设置，如下所示：
- en: '![](img/Table_05.jpg)'
  id: totrans-612
  prefs: []
  type: TYPE_IMG
  zh: '![图片 05](img/Table_05.jpg)'
- en: Try scrubbing backward and forward in the **Animation** window to see how it
    looks in the **Scene** view. You should see the particles moving from right to
    left.
  id: totrans-613
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**动画**窗口中尝试前后拖动，以查看在**场景**视图中看起来如何。你应该看到粒子从右向左移动。
- en: In the **Animation** window, turn off the record setting.
  id: totrans-614
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**动画**窗口中，关闭记录设置。
- en: That's one animation down and one to go. The next process is similar to what
    we've already done but a little quicker.
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: 这样一个动画就完成了，还有一个要完成。下一个过程与我们已经做过的类似，但稍微快一点。
- en: 'With the **warpStarts_pe** still selected in the **Hierarchy** window, and
    with the **Animation** window still open, do the following:'
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: 在**层次结构**窗口中仍然选择**warpStarts_pe**，并且动画窗口仍然打开，执行以下操作：
- en: 'Click and drag to select all keyframes with your mouse, as in the following
    screenshot:'
  id: totrans-617
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下截图所示，使用鼠标单击并拖动选择所有关键帧：
- en: '![Figure 4.63 – Select all keyframes'
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.63 – 选择所有关键帧'
- en: '](img/Figure_4.63_B18381.jpg)'
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.63_B18381.jpg)'
- en: Figure 4.63 – Select all keyframes
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.63 – 选择所有关键帧
- en: Let go of the mouse and press *Ctrl* (or *Command* on macOS) + *C* to copy the
    keyframes.
  id: totrans-621
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 释放鼠标并按*Ctrl*（或在macOS上为*Command*）+ *C*复制关键帧。
- en: 'Let''s now switch over to the `BackGround_InGame_Speed` animation by clicking
    on the name of our current animation and selecting the other, as in the following
    screenshot:'
  id: totrans-622
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，通过单击当前动画的名称并选择另一个，切换到`BackGround_InGame_Speed`动画，如图所示：
- en: '![Figure 4.64 – Selecting our second animation file, BackGround_InGame_Speed,
    in the'
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.64 – 在动画窗口中选择我们的第二个动画文件，BackGround_InGame_Speed'
- en: Animation window
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: 动画窗口
- en: '](img/Figure_4.64_B18381.jpg)'
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.64_B18381.jpg)'
- en: Figure 4.64 – Selecting our second animation file, BackGround_InGame_Speed,
    in the Animation window
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.64 – 在动画窗口中选择我们的第二个动画文件，BackGround_InGame_Speed
- en: Notice how the name has changed to reflect the animation we are in.
  id: totrans-627
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意名称如何更改以反映我们所在的动画。
- en: Now, click in the graph area and use the *Ctrl* (or *command* on macOS) + *V*
    keyboard commands.
  id: totrans-628
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在图表区域单击并使用*Ctrl*（或在macOS上为*command*）+ *V*键盘命令。
- en: 'We should now have pasted the previous animation into this one. We can manipulate
    the results within the window, as in the following screenshot:'
  id: totrans-629
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们应该已经将之前的动画粘贴到这个动画中。我们可以在窗口内操作结果，如图所示：
- en: Tip
  id: totrans-630
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 小贴士
- en: If you can't see all keyframes in the **Animation** window, select an open area
    within the window and press *F* on the keyboard. This will auto-fit all keyframes
    in.
  id: totrans-631
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您在**动画**窗口中看不到所有关键帧，请选择窗口内的一个开放区域，并在键盘上按下*F*键。这将自动调整所有关键帧。
- en: '![Figure 4.65 – BackGround_InGame_Speed animation file with its pasted keyframes'
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.65 – BackGround_InGame_Speed动画文件及其在动画窗口中粘贴的关键帧'
- en: in the Animation window
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: 在动画窗口中
- en: '](img/Figure_4.65_B18381.jpg)'
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.65_B18381.jpg)'
- en: Figure 4.65 – BackGround_InGame_Speed animation file with its pasted keyframes
    in the Animation window
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.65 – BackGround_InGame_Speed动画文件及其在动画窗口中粘贴的关键帧
- en: 'Finally, we can manipulate the keyframes:'
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以操作关键帧：
- en: Click on the **Animation** window to start recording.
  id: totrans-637
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**动画**窗口以开始录制。
- en: From the `ScreenBackground`.
  id: totrans-638
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`ScreenBackground`。
- en: From the `backGround_Wallpaper` `-10` to `1`.
  id: totrans-639
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`backGround_Wallpaper` `-10`到`1`。
- en: Click on the `1` to `2`.
  id: totrans-640
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`1`到`2`。
- en: Next, we alter the `warpStars_pe` animation within the `warpStars_pe` keyframe
    at the far left and press *Delete* on the keyboard. Now, move the last keyframe
    from the end to the beginning.
  id: totrans-641
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们在最左侧的`warpStars_pe`关键帧中修改`warpStars_pe`动画，并在键盘上按下*Delete*键。现在，将最后一个关键帧从末尾移动到开头。
- en: Before we stop recording, we need to stop the animation from easing out (slowing
    down near the end of the animation).
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
  zh: 在停止录制之前，我们需要停止动画的渐出（在动画末尾减速）。
- en: 'To make it so that our `backGround_Wallpaper` setting is on a fixed animation
    speed, we need to do the following:'
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
  zh: 要使我们的`backGround_Wallpaper`设置在固定的动画速度上，我们需要做以下操作：
- en: In the **Animation** window, click and drag to select all the keys.
  id: totrans-644
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**动画**窗口中，点击并拖动以选择所有键。
- en: Right-click, and from the dropdown, select **Both Tangents** | **Linear**.
  id: totrans-645
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击，从下拉菜单中选择**两个切线** | **线性**。
- en: Stop recording.
  id: totrans-646
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 停止录制。
- en: Let's recap what we have done so far. We have taken the `1` so that it comes
    back to the start of its **X** value of **Offset**.
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下到目前为止我们所做的工作。我们取了`1`，使其回到其**X**值**偏移**的起始位置。
- en: We moved the particles from left to right in the first animation; we kept the
    particles on the right in the second animation to stop the scene from being too
    cluttered and to show that we aren't going as fast.
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个动画中，我们将粒子从左到右移动；在第二个动画中，我们保持粒子在右侧，以避免场景过于杂乱，并显示我们并没有移动得那么快。
- en: We are now at the final steps of the animation; the rest of the work is done
    within the Animator Controller. From the Animator Controller, we can state what
    needs looping and how our animations relate to each other.
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在处于动画的最后步骤；其余工作在Animator Controller中进行。从Animator Controller中，我们可以声明需要循环的内容以及我们的动画如何相互关联。
- en: 'For the last time in this chapter, let''s visit the animation controller and
    start splicing our states from one to another:'
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的最后，让我们访问动画控制器，并开始从一种状态到另一种状态的拼接：
- en: From the `GameSpeed` game object.
  id: totrans-651
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`GameSpeed`游戏对象。
- en: Then, in the `GameSpeed_Controller`.
  id: totrans-652
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在`GameSpeed_Controller`。
- en: Now, click on the transition line between `BackGround_Intro_Speed` and `BackGround_InGame_Speed`
    (circled in the following reference screenshot).
  id: totrans-653
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击`BackGround_Intro_Speed`和`BackGround_InGame_Speed`之间的过渡线（以下参考截图所示）。
- en: 'With regard to the transition between one animation and another, the following
    screenshot sets the example of these states via the two blue bars. Select the
    following settings:'
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
  zh: 关于动画之间的过渡，以下截图通过两个蓝色条设置这些状态示例。选择以下设置：
- en: '**Has Exit Time**: Checked.'
  id: totrans-655
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**具有退出时间**：已勾选。'
- en: The **Has Exit Time** tooltip reads **Transition has a fixed exit time**.
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
  zh: '**具有退出时间**提示信息显示**过渡具有固定的退出时间**。'
- en: '`0.1`'
  id: totrans-657
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`0.1`'
- en: The **Exit Time** tooltip reads **Exit time is the normalized time from the
    current state**.
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
  zh: '**退出时间**提示信息显示**退出时间是当前状态的标准时间**。'
- en: '**Fixed Duration**: Checked.'
  id: totrans-659
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**固定持续时间**：已勾选。'
- en: The **Fixed Duration** tooltip reads **Transition duration is independent of
    state length**.
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
  zh: '**固定持续时间**提示信息显示**过渡持续时间与状态长度无关**。'
- en: '`2.5`'
  id: totrans-661
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`2.5`'
- en: The **Transition Duration (s)** tooltip reads **Transition duration in seconds**.
  id: totrans-662
  prefs: []
  type: TYPE_NORMAL
  zh: '**过渡持续时间（秒）**提示信息显示**过渡持续时间为秒**。'
- en: '`0.1`'
  id: totrans-663
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`0.1`'
- en: The **Transition Offset** tooltip reads **Normalized start time in the next
    state**.
  id: totrans-664
  prefs: []
  type: TYPE_NORMAL
  zh: '**过渡偏移**提示信息显示**下一个状态的标准开始时间**。'
- en: '**Interruption Source**: **None**'
  id: totrans-665
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**中断源**：**无**'
- en: 'The **Interruption Source** tooltip reads **Can be interrupted by transitions
    from**:'
  id: totrans-666
  prefs: []
  type: TYPE_NORMAL
  zh: '**中断源**提示信息显示**可以被以下过渡中断**：'
- en: '![Figure 4.66 – Transition values updated in the Inspector window'
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.66 – 在检查器窗口中更新过渡值'
- en: '](img/Figure_4.66_B18381.jpg)'
  id: totrans-668
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.66_B18381.jpg)'
- en: Figure 4.66 – Transition values updated in the Inspector window
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.66 – 在检查器窗口中更新过渡值
- en: The figures are rough for this transition. It's also quite unnatural to enter
    perfect figures for an animation. I recommend removing any enemies from the scene.
    Click the **Play** button and alter the selection bar above the graph. Each time
    this selection changes, the animation will play again. Keep an eye on the Animator
    Controller; you will see a progress bar start and end. This will help the timings
    of when the animation will splice over.
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过渡的图形比较粗糙。对于动画来说，输入完美的图形也很不自然。我建议从场景中移除任何敌人。点击**播放**按钮并调整图上的选择条。每次选择改变时，动画都会再次播放。注意Animator
    Controller；你会看到一个进度条开始和结束。这将有助于动画拼接的时间安排。
- en: Information
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
  zh: 信息
- en: Animation transitions can help blend one animation into another. For example,
    if we want an animation to move into another in an exact time frame, we would
    focus on the **Fixed Duration** and **Transition Duration** parameters (shown
    in the previous screenshot).
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
  zh: 动画过渡可以帮助将一个动画平滑地过渡到另一个。例如，如果我们想在精确的时间框架内将一个动画移动到另一个，我们会关注**固定持续时间**和**过渡持续时间**参数（如前一张截图所示）。
- en: For more information on animation transitions, check out [https://docs.unity3d.com/Manual/class-Transition.html](https://docs.unity3d.com/Manual/class-Transition.html).
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
  zh: 关于动画过渡的更多信息，请查看[https://docs.unity3d.com/Manual/class-Transition.html](https://docs.unity3d.com/Manual/class-Transition.html)。
- en: The results I have are very smooth and work well, but I recommend forgetting
    the figures. Put the Editor in **Play** mode and drag the selection bar back and
    forth until you get the splice that is right for you.
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
  zh: 我得到的结果非常平滑且效果良好，但我建议忘记图形。将编辑器置于**播放**模式，并拖动选择条直到得到适合你的拼接点。
- en: That is the end of the Animator Controller settings. It's one of those things
    that takes a long time to explain but is very quick to do once you know how.
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
  zh: 那就是Animator Controller设置的结束。这是那种解释起来需要很长时间但一旦知道了怎么做就非常快的事情。
- en: You might be eager to get back to coding as we have mainly been working in Unity's
    Editor tools. So, let's return to the IDE and start looking at animating next.
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能迫不及待地想要回到编码，因为我们主要一直在使用Unity的编辑器工具。那么，让我们回到IDE，开始看看如何进行动画制作。
- en: Animating our three-dimensional enemies
  id: totrans-677
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动画我们的三维敌人
- en: Here's a really easy, quick animation with the script for your enemies. Currently,
    the enemies just move up and down in a wave pattern. However, the units themselves
    remain static.
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个非常简单、快速的动画脚本，用于你的敌人。目前，敌人只是以波浪模式上下移动。然而，单位本身是静态的。
- en: 'Let''s give our enemies a bit of extra life with some code:'
  id: totrans-679
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用一些代码给我们的敌人增加一点额外的生命力：
- en: In the `Assets/Prefab/Enemies`.
  id: totrans-680
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Assets/Prefab/Enemies`。
- en: Double-click on the `enemy_wave` prefab and select the `enemy_wave_ring` in
    the **Hierarchy** window.
  id: totrans-681
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击`enemy_wave`预制体，并在**层次结构**窗口中选择`enemy_wave_ring`。
- en: In the **Inspector** window, click on the **Add Component** button.
  id: totrans-682
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**检查器**窗口中，点击**添加组件**按钮。
- en: Click on **New Script** at the bottom of the dropdown.
  id: totrans-683
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下拉菜单底部点击**新建脚本**。
- en: Name the new C# script `BasicEnemyRotate`.
  id: totrans-684
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新的C#脚本命名为`BasicEnemyRotate`。
- en: 'Then, enter this code:'
  id: totrans-685
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，输入以下代码：
- en: '[PRE2]'
  id: totrans-686
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This is a tiny script that animates the part of our enemy. There are two things
    to look closely at:'
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个微小的脚本，用于动画化我们的敌人部分。有两件事需要仔细查看：
- en: The variable is a private float named `speed` with a `SerializeField` attribute
    so that it can be seen in the **Inspector** window. More about this attribute
    can be found at [https://docs.unity3d.com/ScriptReference/SerializeField.html](https://docs.unity3d.com/ScriptReference/SerializeField.html).
  id: totrans-688
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量是一个名为`speed`的私有浮点数，具有`SerializeField`属性，因此可以在**检查器**窗口中看到。更多关于此属性的信息可以在[https://docs.unity3d.com/ScriptReference/SerializeField.html](https://docs.unity3d.com/ScriptReference/SerializeField.html)找到。
- en: In our `Update` function, we are rotating the game object over time based on
    the speed we are setting it at. I have set my enemy rotation speed to `200` in
    the **Inspector**
  id: totrans-689
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在我们的`Update`函数中，我们根据设定的速度随时间旋转游戏对象。我在**检查器**中将敌人的旋转速度设置为`200`。
- en: Once you have created, added and updated your script via the `enemy_wave` prefab
    new content.
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你通过`enemy_wave`预制体创建了、添加并更新了你的脚本新内容。
- en: 'To update the prefab click the left arrow in the top left corner of the **Hierarchy**
    window, as shown in the following image:'
  id: totrans-691
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要更新预制体，请点击**层次结构**窗口左上角的左箭头，如图下所示：
- en: '![](img/Figure_4.67_B18381.jpg)'
  id: totrans-692
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_4.67_B18381.jpg)'
- en: 'Figure 4.67: Updating prefab content'
  id: totrans-693
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.67：更新预制内容
- en: A pop up window will appear to confirm the new changes, simply click **Save**.
  id: totrans-694
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将出现一个弹出窗口以确认新的更改，只需点击**保存**。
- en: Now that you know how to update the prefab, select the `enemy_wave` prefab from
    the **Project** window again, double click it as before.
  id: totrans-695
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在你已经知道如何更新预制体，再次从**项目**窗口中选择`enemy_wave`预制体，像之前一样双击它。
- en: 'Next we are going to update it''s visuals by following these steps:'
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将按照以下步骤更新其视觉效果：
- en: Expand the `enemy_wave` game object in the `enemy_wave_core`.
  id: totrans-697
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`enemy_wave_core`中展开`enemy_wave`游戏对象。
- en: Select the small, round remote button to the right of the **Element 0** parameter
    in the **Mesh Renderer** component under the **Inspector** window.
  id: totrans-698
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**检查器**窗口下，选择**元素0**参数右侧的小型圆形遥控按钮。
- en: Select the `basicEnemyShip_Inner` material.
  id: totrans-699
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`basicEnemyShip_Inner`材质。
- en: Select `enemy_wave_ring` from the **Hierarchy** window.
  id: totrans-700
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**层次结构**窗口中选择`enemy_wave_ring`。
- en: From the `basicEnemyShip_Outer`.
  id: totrans-701
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`basicEnemyShip_Outer`。
- en: Finally, update the prefab as we did before by clicking the arrow in the top
    left corner of the **Hierarchy** window and then clicking **Save** on the popup
    window..
  id: totrans-702
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，像之前一样更新预制体，通过点击**层次结构**窗口左上角的箭头，然后在弹出的窗口中点击**保存**。
- en: 'Click **Play** at the top of the Editor and we should now see our enemies rotating
    and in color:'
  id: totrans-703
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在编辑器顶部点击**播放**，我们现在应该看到我们的敌人正在旋转并着色：
- en: '![Figure 4.67 – Rotating enemies moving toward the player'
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.67 – 正在向玩家移动的旋转敌人'
- en: '](img/Figure_4.68_B18381.jpg)'
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.68_B18381.jpg)'
- en: Figure 4.67 – Rotating enemies moving toward the player
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.67 – 正在向玩家移动的旋转敌人
- en: Lastly, move all new scripts into the `Script` folder.
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将所有新脚本移动到`Script`文件夹中。
- en: Later on, we could speed up the enemies' rotation, depending on the player's
    skill level, to make them look more aggressive.
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们可以根据玩家的技能水平加快敌人的旋转速度，使其看起来更具侵略性。
- en: This was a long chapter, but we covered particles and animation, which are important
    to know for the exam. With more practice and understanding, the benefits of what
    we've learned will really start to show. Now is a good time to get used to these
    two skills as they are commonly overlooked. It's these skills that will make you
    stand out from the rest.
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一章很长的内容，但我们涵盖了粒子和动画，这些对于考试来说很重要。通过更多的实践和理解，我们所学的益处将真正开始显现。现在是熟悉这两种技能的好时机，因为它们通常被忽视。正是这些技能让你与众不同。
- en: Summary
  id: totrans-710
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we jumped into the art world. We brought our player's ship
    to life, giving it a series of maps and a light. Then, we moved on to Unity's
    particle system and created a `thruster` object with an option to expand it. Then,
    we moved into animation and got our hands dirty, adding and animating the scene
    background and animating particle warp stars. We covered states and transitions,
    then calmed things down with some animation code for our enemies.
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们进入了艺术世界。我们让玩家的飞船栩栩如生，给它配备了一系列地图和灯光。然后，我们转向Unity的粒子系统，创建了一个带有扩展选项的`推进器`对象。接着，我们进入了动画制作，动手制作场景背景和动画粒子扭曲星。我们讨论了状态和转换，然后通过为敌人编写一些动画代码来平息一切。
- en: That was a lot! If you ever revisit this chapter, you will go through it much
    quicker as you'll see, if you haven't already, that you can copy and paste animation
    keyframes, copy and paste particle systems, and tweak them.
  id: totrans-712
  prefs: []
  type: TYPE_NORMAL
  zh: 这已经很多了！如果你再次回顾这一章，你会更快地完成它，因为你会发现，如果你还没有这样做，你可以复制和粘贴动画关键帧，复制和粘贴粒子系统，并对其进行调整。
- en: In the next chapter, we will look at a new scene where we upgrade the player's
    ship with the introduction of a shop before a level starts. We will also introduce
    the popular concept of **free-to-play games**, which is typically found in mobile
    games where the game is free to download, and the user is given the option of
    earning in-game credits by watching an advert.
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将查看一个新的场景，在该场景开始之前，我们将通过引入商店来升级玩家的飞船。我们还将介绍流行的**免费游玩游戏**概念，这在移动游戏中很常见，游戏可以免费下载，用户可以选择通过观看广告来获得游戏内积分。
- en: Well done! What you have learned will all contribute to your exam and future
    projects.
  id: totrans-714
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好！你所学的所有内容都将有助于你的考试和未来的项目。
