- en: Using All 360 Degrees
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用所有360度
- en: '360-degree photos and videos are a different way of using virtual reality that
    is accessible to consumers today, both in terms of experiencing them as well as
    producing and publishing them. Viewing prerecorded images requires much less compute
    power than rendering full 3D scenes, and this works very well on mobile phone-based
    VR in particular. In this chapter, we will explore the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 360度照片和视频是消费者今天可以体验、制作和发布的一种虚拟现实的不同方式。观看预先录制的图像所需的计算能力远低于渲染完整的3D场景，尤其是在基于手机的VR中效果非常好。在本章中，我们将探讨以下主题：
- en: Understanding 360-degree media and formats
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解360度媒体和格式
- en: Using textures to view globes, photo spheres, and skyboxes
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用纹理查看地球仪、全景照片和天空盒
- en: Adding 360-degree video to your Unity projects
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将360度视频添加到您的Unity项目中
- en: Writing and using custom shaders
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写和使用自定义着色器
- en: Capturing 360-degree images and video from within your Unity app
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在您的Unity应用程序中捕获360度图像和视频
- en: Note that the projects in this chapter are separate and not directly required
    by the other chapters in this book. If you decided to skip any of it or not save
    your work, that's okay.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，本章中的项目是独立的，并不直接需要本书中其他章节的项目。如果你决定跳过其中任何部分或没有保存你的工作，那没问题。
- en: 360-degree media
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 360度媒体
- en: The terms 360-degree and *virtual reality* are tossed around a lot lately, often
    in the same sentence. Consumers may be led to believe that it's all the same thing,
    it's all figured out, and it's all very easy to produce, when in fact it is not
    so simple.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 最近，360度和*虚拟现实*这两个术语被频繁使用，经常出现在同一句话中。消费者可能会被误导，认为这一切都是相同的，一切都已解决，制作起来非常简单，而实际上并非如此简单。
- en: Generally, the term 360-degree refers to viewing of prerecorded photos or videos
    in a manner that allows you to rotate your view's direction to reveal content
    that was just outside your field of view.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，360度一词指的是以允许你旋转视图方向以揭示视野之外内容的方式查看预先录制的照片或视频。
- en: Non-VR 360-degree media has become relatively common. For example, many real-estate
    listing sites provide panoramic previews with a web-based player that lets you
    interactively pan around to view the space. Similarly, Facebook and YouTube support
    uploading and playback of 360-degree videos and provides a player with interactive
    controls to look around during the playback. Google Maps lets you upload 360-degree
    still photosphere images, much like their Street View that you can create with
    an Android or iOS app or a consumer camera (for more information, visit [https://www.google.com/maps/about/contribute/photosphere/](https://www.google.com/maps/about/contribute/photosphere/)).
    The internet is teeming with 360-degree media!
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 非VR 360度媒体已经变得相对常见。例如，许多房地产列表网站提供基于网页的播放器，允许你交互式地平移查看空间的全景预览。同样，Facebook和YouTube支持上传和播放360度视频，并提供具有交互式控制功能的播放器，在播放过程中可以四处查看。Google
    Maps允许你上传360度静态球面图像，就像你可以使用Android或iOS应用程序或消费级相机创建的街景一样（更多信息，请访问[https://www.google.com/maps/about/contribute/photosphere/](https://www.google.com/maps/about/contribute/photosphere/))。互联网上充满了360度媒体！
- en: With a VR headset, viewing 360-degree media is surprisingly immersive, even
    just still photos. You're standing at the center of a sphere with an image projected
    onto the inside surface, but you feel like you're really there in the captured
    scene. Simply turn your head to look around. It's one of those things that gets
    people interested in VR the first time they see it, and it is a popular application
    for Google Cardboard and Gear VR, having jump-started the consumer VR revolution
    for a lot of people.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 使用VR头盔观看360度媒体非常令人沉浸，即使是静态照片也是如此。你站在一个球体的中心，图像投射到内部表面，但你感觉你真的在捕捉的场景中。只需转动你的头四处查看。这是那些第一次看到就会让人对VR产生兴趣的事情之一，并且它是Google
    Cardboard和Gear VR的流行应用，为许多人启动了消费级VR革命。
- en: Equirectangular projections
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 等角投影
- en: Ever since it was discovered that the Earth is round, cartographers and mariners
    have struggled with how to project the spherical globe onto a two-dimensional
    chart. The variations are plentiful and the history is fascinating (if you're
    fascinated by that sort of thing!) The result is an inevitable distortion of some
    areas of the globe.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 自从发现地球是圆的以来，制图员和航海家一直在努力将球形地球投影到二维图表上。变化多种多样，历史非常迷人（如果你对这类事情感兴趣的话！）结果是地球某些区域的不可避免扭曲。
- en: To learn more about map projections and spherical distortions, visit [http://en.wikipedia.org/wiki/Map_projection](http://en.wikipedia.org/wiki/Map_projection).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 想了解更多关于地图投影和球形畸变的信息，请访问 [http://en.wikipedia.org/wiki/Map_projection](http://en.wikipedia.org/wiki/Map_projection)。
- en: As a computer graphics designer, it's perhaps a little less mysterious than
    it was to ancient mariners because we know about *UV Texture mapping*.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名计算机图形设计师，这可能比古代航海家所面临的神秘性要小一些，因为我们了解 *UV 纹理映射*。
- en: 3D computer models in Unity are defined by *meshes*-a set of Vector3 points
    connected with edges, forming triangular-shaped facets. You can unwrap a mesh
    (in Blender, for instance) into a flattened 2D configuration to define the mapping
    of texture pixels to the corresponding areas on the mesh surface (UV coordinates).
    A globe of the Earth, when unwrapped, will be distorted, as defined by the unwrapped
    mesh. The resulting image is called a **UV Texture image**.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Unity 中的 3D 计算机模型由 *网格* 定义 - 一组通过边连接的 Vector3 点，形成三角形面。你可以将网格（例如在 Blender
    中）展开成扁平的 2D 配置，以定义纹理像素到网格表面的相应区域的映射（UV 坐标）。地球仪展开后将会扭曲，正如展开的网格所定义的那样。生成的图像称为 **UV
    纹理图像**。
- en: 'In computer graphic modeling, this UV mapping can be arbitrary and depends
    on the artistic requirements at hand. However, for 360-degree media, this typically
    is done using an *equirectangular* (or a Meridian) projection (for more information,
    visit [http://en.wikipedia.org/wiki/Equirectangular_projection](http://en.wikipedia.org/wiki/Equirectangular_projection)),
    where the sphere is unraveled into a cylindrical projection, stretching the texture
    as you progress towards the north and south poles while keeping the meridians
    as equidistant vertical straight lines. The following *Tissot''s indicatrix* (visit [http://en.wikipedia.org/wiki/Tissot%27s_indicatrix](http://en.wikipedia.org/wiki/Tissot%27s_indicatrix) for
    more information) shows a globe with strategically arranged identical circles
    (illustration by Stefan Kühn):'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算机图形建模中，这种 UV 映射可以是任意的，并且取决于手头的艺术要求。然而，对于 360 度媒体，这通常使用 *等角*（或子午线）投影（更多信息，请访问
    [http://en.wikipedia.org/wiki/Equirectangular_projection](http://en.wikipedia.org/wiki/Equirectangular_projection)）来完成，其中球体被展开成圆柱投影，当你向南北极前进时拉伸纹理，同时保持子午线作为等距的垂直直线。以下 *Tissot's
    indicatrix*（更多信息请访问 [http://en.wikipedia.org/wiki/Tissot%27s_indicatrix](http://en.wikipedia.org/wiki/Tissot%27s_indicatrix)）显示了一个地球仪，其中战略性地排列了相同的圆圈（Stefan
    Kühn 绘制）：
- en: '![](img/f695cbde-47c3-4a57-b695-d7a76748677b.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f695cbde-47c3-4a57-b695-d7a76748677b.png)'
- en: 'The following image shows the globe unwrapped with an equirectangular projection:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图像显示了使用等角投影展开的地球仪：
- en: '![](img/9e26ea8f-b682-4664-bde2-102d79283334.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9e26ea8f-b682-4664-bde2-102d79283334.png)'
- en: 'Illustration by Eric Gaba - Wikimedia Commons user: Sting'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 由 Eric Gaba 绘制 - 维基媒体 Commons 用户：Sting
- en: We will use an equirectangular mesh for our photo spheres and an appropriately
    projected (warped) image for its texture map.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为我们的照片球体使用等角网格，并为它的纹理图使用适当的投影（扭曲）图像。
- en: VR is hacking your field of view
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 虚拟现实正在黑客攻击你的视野
- en: OK, but why are 360-degree media in virtual reality so compelling? There's a
    huge difference in how we experience viewing a 360-degree video on a flat screen
    versus inside a VR headset. For example, an IMAX cinema theater with larger screens
    than that of the conventional cinema encompasses more of your peripheral vision
    and has a wider **field of view** (**FOV**). A mobile phone or computer monitor,
    at a natural viewing distance, is about a 26-degree FOV; a movie theatre is 54
    degrees (IMAX is 70 degrees). Oculus Rift and HTC VIVE are about 120 degrees.
    In human vision, one eye is about 160 degrees, both eyes combined provides about
    a 200-degree horizontal field of view.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，但为什么虚拟现实中的 360 度媒体如此吸引人？我们在平屏幕上观看 360 度视频和在 VR 头盔内观看时的体验有巨大的差异。例如，IMAX 电影院比传统电影院拥有更大的屏幕，它包含了更多的你的周边视野，并且有更宽的
    **视野**（**FOV**）。在自然观看距离下，手机或电脑显示器大约是 26 度的 FOV；电影院是 54 度（IMAX 是 70 度）。Oculus Rift
    和 HTC VIVE 大约是 120 度。在人类视觉中，一只眼睛大约是 160 度，两只眼睛结合提供大约 200 度的水平视野。
- en: For more information about FOV adjustments in conventional video games, read
    the excellent article *All about* FOV (July 18, 2014) by visiting [http://steamcommunity.com/sharedfiles/filedetails/?id=287241027](http://steamcommunity.com/sharedfiles/filedetails/?id=287241027).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 想了解更多关于传统视频游戏中视野调整的信息，请阅读优秀的文章 *关于视野的一切*（2014年7月18日）并访问 [http://steamcommunity.com/sharedfiles/filedetails/?id=287241027](http://steamcommunity.com/sharedfiles/filedetails/?id=287241027)。
- en: In VR, you're not so obviously limited by the FOV and physical dimensions of
    the screen because you can easily move your head to change your view direction
    at any time. This provides a fully immersive view, horizontal 360 degrees, as
    you look side to side and up and down by 180 degrees. In VR, with your head still,
    the field of view is only significant with regard to the outer reaches of your
    peripheral vision and eyeball movement. But move your head (at the neck and/or
    full body); the software detects the change in head pose (viewing direction) and
    updates the display. The result is you believe to have an uninterrupted view of
    the 360-degree image.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在VR中，你不会那么明显地受到FOV（视场）和屏幕物理尺寸的限制，因为你可以轻松地移动头部来改变你的观看方向。这提供了完全沉浸式的视角，水平360度，当你左右和上下看时，可以由180度实现。在VR中，当你头部不动时，视场只与你的外围视野和眼球运动有关。但当你移动头部（颈部和/或全身）时，软件会检测头部姿势（观看方向）的变化并更新显示。结果是，你相信自己有一个不间断的360度图像视角。
- en: 180-degree media
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 180度媒体
- en: I sometimes joke that taking pictures and videos with my consumer 360-degree
    camera is like shooting a landscape and a selfie at the same time! Especially
    if you're holding the camera when taking the pictures, you are always in it. But
    really, when you take a photo, you're most likely already facing the action, and
    so when viewing the photo the user is also facing the action. So maybe all you
    need is 180 degrees. Furthermore, it can be tedious to look all the way behind
    you. As the name implies, a 180-degree image is half a 360 one, projected onto
    a hemisphere.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我有时开玩笑说，用我的消费级360度相机拍照和录视频就像同时拍摄风景照和自拍！尤其是当你拍照时手持相机，你总是出现在照片中。但事实上，当你拍照时，你很可能已经面对着动作，所以当查看照片时，用户也在面对着动作。所以可能你只需要180度。此外，向后看可能会很麻烦。正如其名所示，180度图像是360度图像的一半，投影到一个半球上。
- en: In 2017, Google introduced a standard for 180-degree media intended for VR ([https://vr.google.com/vr180/](https://vr.google.com/vr180/)).
    In addition to offering equirectangular projection, the cameras have two lenses
    for capturing stereographic, one for each eye. It works pretty well for a 180-degree
    view because while you can move left-right to look around, the actual movement
    needed is relatively small (human peripheral vision is about 200-degree horizontal
    anyway). Stereo 360 is more challenging.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 2017年，谷歌为VR引入了180度媒体的标准（[https://vr.google.com/vr180/](https://vr.google.com/vr180/)）。除了提供等角投影外，这些相机有两个镜头用于捕捉立体图像，每个眼睛一个。对于180度视角来说，效果相当不错，因为虽然你可以左右移动来环顾四周，但实际上需要的移动相对较小（人类的水平外围视野大约是200度）。立体360度更具挑战性。
- en: Stereo 360-degree media
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 立体180度媒体
- en: To capture monoscopic 360-degree media, you can use a consumer 360-degree camera.
    These cameras typically have a couple of back-to-back super wide angle lenses
    and corresponding image sensors. The resulting image captures are stitched together,
    using clever algorithms to avoid seams, and the result is processed into an equirectangular
    projection. Viewing it in VR, each eye sees the same 360 photo. For landscapes,
    such as mountain views or other large areas, where the subject is more than 20
    meters from your viewing position, it is fine because there is no parallax. Each
    eye sees pretty much from the same viewing angle. But if the photo includes objects
    closer to you, it will look incorrect, or at least artificially flattened, because
    you expect parallax where each eye has a slightly different view.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要捕捉单视角360度媒体，你可以使用消费级360度相机。这些相机通常有几个背对背的超广角镜头和相应的图像传感器。通过巧妙算法将捕获的图像拼接在一起，避免接缝，然后将结果处理成等角投影。在VR中观看，每只眼睛看到相同的360度照片。对于风景，如山景或其他大区域，如果主题距离你的观看位置超过20米，那就没问题，因为没有视差。每只眼睛几乎从相同的观看角度看到。但如果照片包括离你更近的物体，它看起来可能不正确，或者至少是人为地扁平，因为你会期望有视差，而每只眼睛有略微不同的视角。
- en: What about true 360-degree stereo? Shouldn't each eye have its own photo sphere
    offset from the other eye's position?
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，真正的360度立体是什么样的呢？难道每只眼睛不应该有自己的从另一只眼睛位置偏移的球面照片吗？
- en: To capture *stereo* 360-degree media, it cannot simply be photographed by two
    360 cameras from two viewpoints but can be constructed by stitching together images
    from a rotating stereo pair. The distance between camera image captures simulates
    a human's separation between eyes (IPD, interpupillary distance).  There is a
    new generation of consumer cameras (such as *Fuze Camera*, [https://vuze.camera/](https://vuze.camera/) with
    eight cameras), and high-end professional camera rigs, such as *Google Jump* ([https://vr.google.com/jump/](https://vr.google.com/jump/)),
    which arranges sixteen separate cameras in a cylindrical array. Advanced image
    processing software then constructs stereographic views.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要捕获*立体*360度媒体，不能简单地由两个从两个视点拍摄的360度摄像机拍摄，而可以通过拼接旋转立体对中的图像来构建。摄像机图像捕获之间的距离模拟了人类眼睛之间的分离（IPD，瞳距）。有一代新的消费级摄像机（如*Fuze
    Camera*，[https://vuze.camera/](https://vuze.camera/)，拥有八个摄像头），以及高端专业摄像机装置，如*Google
    Jump* ([https://vr.google.com/jump/](https://vr.google.com/jump/))，它在一个圆柱阵列中排列了十六个独立的摄像头。然后，先进的图像处理软件构建立体视图。
- en: Google has introduced an advanced file format for stereo 360-degree video: *omni-directional
    stereo*, or ODS. It is a variant of conventional equirectangular projections with
    the advantages of avoiding bad seams or dead zones, it is pre-rendered for faster
    playback, and video uses conventional encoding so you can edit using conventional
    tools.  And Unity supports ODS in their Panoramic Skybox shaders (see the topic
    later in this chapter).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌推出了一种用于立体360度视频的高级文件格式：*全向立体*，或ODS。它是一种传统的等经线投影的变体，具有避免不良接缝或死区的优点，它预先渲染以实现更快的播放，视频使用传统的编码，因此您可以使用传统的工具进行编辑。Unity支持其在全景天空盒着色器中的ODS（见本章后面的主题）。
- en: For a more detailed explanation of the challenges and geometry of stereo 360
    media captures, see the Google whitepaper *Rendering Omni-directional Stereo Content*
    ([https://developers.google.com/vr/jump/rendering-ods-content.pdf](https://developers.google.com/vr/jump/rendering-ods-content.pdf)).
    Also, check out the article *Stereographic 3D Panoramic Images* by Paul Bourke
    (May 2002) by visiting [http://paulbourke.net/stereographics/stereopanoramic/](http://paulbourke.net/stereographics/stereopanoramic/).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 对于立体360度媒体捕获的挑战和几何形状的更详细解释，请参阅谷歌白皮书《渲染全向立体内容》（[https://developers.google.com/vr/jump/rendering-ods-content.pdf](https://developers.google.com/vr/jump/rendering-ods-content.pdf)）。此外，通过访问[http://paulbourke.net/stereographics/stereopanoramic/](http://paulbourke.net/stereographics/stereopanoramic/)，您可以查看保罗·博克（2002年5月）撰写的文章《立体3D全景图像》。
- en: Fun with photo globes
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 玩转照片球
- en: To begin exploring these concepts, let's have a little fun as we apply an ordinary
    (rectangular) image as a texture to a sphere, just to see what it does and how
    bad it looks. Then, we'll use a properly distorted equirectangular photosphere
    texture.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始探索这些概念，让我们在将普通（矩形）图像作为纹理应用到球体上时玩点小乐趣，看看它会做什么以及看起来有多糟糕。然后，我们将使用正确扭曲的等经线球面纹理。
- en: Crystal balls
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 水晶球
- en: '*Auntie Em! Auntie Em!* cried Dorothy in the Wizard of Oz, as she gazed into
    a crystal ball seeking help from the Wicked Witch. Let''s consider making a crystal
    ball using Unity, *my little pretty!*'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在《绿野仙踪》中，多萝西对着水晶球寻求邪恶女巫的帮助时，她喊道：“阿姨！阿姨！”让我们考虑使用Unity制作一个水晶球，*我的小宝贝！*
- en: 'First, set up a new scene for this chapter by performing the following steps:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，通过以下步骤为这一章设置一个新的场景：
- en: Create a new scene by navigating to File | New Scene. Then, navigate to File
    | Save Scene As... and name it `360Degrees`.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过导航到文件 | 新场景创建一个新的场景。然后，通过导航到文件 | 保存场景为...并将它命名为`360Degrees`。
- en: Create a new plane by navigating to GameObject | 3D Object | Plane and reset
    its transformation using the Transform component's *gear* icon | Reset.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过导航到GameObject | 3D Object | Plane创建一个新的平面，并使用变换组件的*齿轮*图标重置其变换 | 重置。
- en: Set the Main Camera Position to (`0`, `0`, `-1`)
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将主摄像机位置设置为（`0`，`0`，`-1`）
- en: You can choose to use the MeMyselfEye camera rig we've been using throughout
    the book, but it is not necessary in this project. The Main Camera will implement
    the VR camera based on the SDK you've selected in Player Settings. We will not
    be using device-specific input or other features.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以选择使用我们在整本书中使用的MeMyselfEye摄像机装置，但在这个项目中不是必需的。主摄像机将实现基于您在玩家设置中选择的SDK的VR摄像机。我们将不会使用特定于设备的输入或其他功能。
- en: Now, create the first sphere and write a rotator script while we're at it. I'm
    using the `EthanSkull.png` image that was provided with this book (drag and drop
    it into your Project Assets Textures folder).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在创建第一个球体时，同时编写一个旋转脚本。我正在使用这本书提供的 `EthanSkull.png` 图片（将其拖放到您的 Project Assets
    Textures 文件夹中）。
- en: 'Then, perform the following steps:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，执行以下步骤：
- en: Create a new sphere by navigating to GameObject | 3D Object | Sphere, reset
    its transformation using the Transform component's *gear* icon | Reset, and name
    it `CrystalBall`.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过导航到 GameObject | 3D Object | Sphere 创建一个新的球体，使用变换组件的 *齿轮* 图标重置其变换 | 重置，并将其命名为
    `CrystalBall`。
- en: Set its Position to (`0`, `1.5`, `0`).
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其位置设置为（`0`，`1.5`，`0`）。
- en: Drag and drop the texture named `EthanSkull` (you can use any photo that you
    want) onto the sphere.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将名为 `EthanSkull` 的纹理（你可以使用任何照片）拖放到球体上。
- en: Create a new script by navigating to Add Component | New Script and name it
    `Rotator`.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过导航到添加组件 | 新脚本并命名为 `Rotator` 来创建一个新的脚本。
- en: Note that dropping the texture onto the game object will automatically create
    a corresponding Material named `EthanSkull.mat` in your `Materials/` folder, with
    this texture in the Albedo texture map slot.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，将纹理拖放到游戏对象上会自动在您的 `Materials/` 文件夹中创建一个名为 `EthanSkull.mat` 的相应材质，并在Albedo纹理贴图槽中使用此纹理。
- en: 'Open the `rotator.cs` script and write it, as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 `rotator.cs` 脚本并编写如下：
- en: '[PRE0]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note that we added a `Tooltip` attribute for the Unity Editor that gives the
    developer more detail how to use the `rate` values.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们为Unity编辑器添加了一个 `Tooltip` 属性，为开发者提供了更多关于如何使用 `rate` 值的详细信息。
- en: 'Then, set the rotation rate so that it spins around the *y* axis 20 degrees
    per second, as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，设置旋转速率，使其围绕 *y* 轴每秒旋转20度，如下所示：
- en: On the Rotator Script component, set Rate for X, Y, Z as (`0`, `20`, `0`).
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在旋转脚本组件上，将X、Y、Z的速率设置为（`0`，`20`，`0`）。
- en: Save the scene. Try it in VR.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存场景。在VR中尝试它。
- en: '![](img/d934cac4-dcc4-4e67-a1f5-d19d02aa51fd.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d934cac4-dcc4-4e67-a1f5-d19d02aa51fd.png)'
- en: '*Is that scary or what?* No worries. The projected image may be distorted,
    but it looks wicked cool. For some applications, a little distortion is the artistic
    intent, and you don''t need to worry about it.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '*这是不是有点吓人？* 别担心。投影的图像可能会扭曲，但它看起来很酷。对于某些应用，一点扭曲是艺术意图，你不必担心。'
- en: Careful editing such as smudging the edges of the photo can help avoid seams
    in the texture map.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细编辑，如模糊照片的边缘，可以帮助避免纹理贴图中的接缝。
- en: 'While we''re at it, lets try making the ball look more like crystal glass by
    adjusting the shader properties:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在这里时，让我们尝试通过调整着色器属性来使球体看起来更像水晶玻璃：
- en: Select `CrystalBall` in Inspector
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器中选择 `CrystalBall`
- en: Set its Metallic value to `0.75`
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其金属值设置为 `0.75`
- en: Set its Smoothness value to `0.75`
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其光滑度值设置为 `0.75`
- en: Open the Albedo color (click the color swatch), and adjust the Alpha (A) value
    to `100`
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Albedo颜色（点击颜色块），并将Alpha（A）值调整为 `100`
- en: That looks better. Add more objects with various textures into your scene to
    visualize the transparency and specular highlights.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这样看起来更好。将更多具有不同纹理的对象添加到场景中，以可视化透明度和镜面高光。
- en: 'If you''re interested in more realistic glass simulation for your crystal balls,
    here are some suggestions:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对水晶球的更逼真的玻璃模拟感兴趣，这里有一些建议：
- en: Consider adding a reflection probe to the scene ([https://docs.unity3d.com/Manual/class-ReflectionProbe.html](https://docs.unity3d.com/Manual/class-ReflectionProbe.html))
    so the surface seems to reflect other objects in the scene.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑向场景中添加一个反射探针（[https://docs.unity3d.com/Manual/class-ReflectionProbe.html](https://docs.unity3d.com/Manual/class-ReflectionProbe.html))，以便表面看起来像在反射场景中的其他对象。
- en: For transparency and refraction, a `GlassRefractive` material is provided in
    the Standard Assets Effects package.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于透明度和折射，Standard Assets Effects 包中提供了一个 `GlassRefractive` 材质。
- en: Try a custom shader in your material. An example of a Simple Glass shader is
    given in the Unity ShaderLab documentation ([https://docs.unity3d.com/Manual/SL-CullAndDepth.html](https://docs.unity3d.com/Manual/SL-CullAndDepth.html)).
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在您的材质中尝试一个自定义着色器。Unity ShaderLab文档中给出了一个简单玻璃着色器的示例（[https://docs.unity3d.com/Manual/SL-CullAndDepth.html](https://docs.unity3d.com/Manual/SL-CullAndDepth.html))。
- en: Also consider third-party materials and shaders that simulate glass with refraction,
    distortions, glass surface patterns, and colors (search the Asset Store, [https://assetstore.unity.com/search?q=category%3A121&q=glass](https://assetstore.unity.com/search?q=category%3A121&q=glass)).
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 还可以考虑第三方材质和着色器，它们可以模拟具有折射、扭曲、玻璃表面图案和颜色的玻璃（在Asset Store中搜索，[https://assetstore.unity.com/search?q=category%3A121&q=glass](https://assetstore.unity.com/search?q=category%3A121&q=glass))。
- en: Note that transparency should be used sparingly in VR applications as it requires
    additional rendering passes per pixel, potentially slowing your frame generation
    and causing unwanted latency.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Globes
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next, we'll make another sphere and add a texture, like we just did, but this
    time use a texture with an equirectangular (photosphere) distortion.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the `Tissot_euirectangular.png` image, which is included with this book
    (and available on Wikipedia at [https://en.wikipedia.org/wiki/Tissot%27s_indicatrix#/media/File:Tissot_behrmann.png](https://en.wikipedia.org/wiki/Tissot%27s_indicatrix#/media/File:Tissot_behrmann.png)),  into
    your Texture folder and perform the following steps:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: Create a new sphere and name it `Globe`. Add the `Rotator` script if you want.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the texture named `Tissot_equirectangular` onto the sphere.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Try it in VR. Take a close look at the globe, as shown in the following image:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dd9f3888-fb32-406f-8169-a9d864dffbab.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
- en: 'Note that unfortunately the Tissot circles are oval, not circular, except along
    the equator. It turns out that the default sphere provided in Unity does not mesh
    well for equirectangular texture maps. Instead, I have provided one designed specifically
    for this purpose, `PhotoSphere.fbx` (which happens to be the default sphere model
    in 3D Studio Max). Let''s try it:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: Import the `PhotoSphere.fbx` file by dragging it into your Project Assets Models
    folder (or through the menu: Assets | Import New Asset...).
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new equirectangular sphere by dragging the `PhotoSphere` model from Project
    Assets into Scene.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its position and name it `Globe2`. Add the `Rotator` script if you want.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the texture named `Tissot_equirectangular` onto the sphere.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Try it in VR. *Much better.* You can see the texture is correctly mapped now;
    the circles are round (and the underlying mesh grid is more regular):'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4b928357-0792-4f5e-8f71-7daeacca25dc.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
- en: Now you can apply any 360 degree photo to the globe, creating your own *photo-globes*
    or virtual Christmas tree ornaments!
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: Expanding upon this topic further, you could build a nice model of the Solar
    System. Equirectangular texture maps of each of the planets and moons can be downloaded
    free from Solar System Scope ([https://www.solarsystemscope.com/](https://www.solarsystemscope.com/)).
    Data regarding the rate of rotation (day/night) and orbit (around the sun) can
    be found on the NASA site ([https://nssdc.gsfc.nasa.gov/planetary/factsheet/index.html](https://nssdc.gsfc.nasa.gov/planetary/factsheet/index.html)).
    A complete Unity tutorial project can be found in the book *Augmented Reality
    for Developers* ([https://www.amazon.com/Augmented-Reality-Developers-Jonathan-Linowes/dp/1787286436](https://www.amazon.com/Augmented-Reality-Developers-Jonathan-Linowes/dp/1787286436)).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: Another idea is that photo globes have been used as a teleportation mechanism
    in VR games-- as a player, you grab a globe depicting another scene, put it on
    your face and you are teleported into that world. See the topic on *Capturing 360-degree
    media* for how to capture a 360-degree photo of your Unity scenes.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个想法是，照片球体在VR游戏中已被用作传送机制——作为玩家，你抓住描绘另一个场景的球体，把它放在你的脸上，你就会被传送到那个世界。有关如何捕获Unity场景的360度照片，请参阅*捕获360度媒体*这一主题。
- en: Rendering photospheres
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 渲染全景球
- en: The inverse of a globe is a photosphere. Where a globe maps an equirectangular
    texture onto the outside surface of a sphere, a photosphere would map the texture
    onto the inside surface, and you view it from the inside so it surrounds you.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 地球的倒数是全景球。地球将等经线纹理映射到球体的外表面，而全景球会将纹理映射到内部表面，并且你从内部观看，这样它就包围了你。
- en: For our examples, I'm using the `Farmhouse.png` image which is provided with
    this book, as shown below. Feel free to use your own 360-degree photo, whether
    you have a 360-degree camera such as the Ricoh Theta or other brand, use a photo
    stitching app for Android or iOS, or download one from any number of photo sources
    on the web.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的示例，我正在使用本书提供的`Farmhouse.png`图像，如下所示。您可以使用自己的360度照片，无论您是否有理光Theta这样的360度相机，还是使用Android或iOS的图片拼接应用，或者从网络上的任何数量照片源下载。
- en: '![](img/a52dc709-37e7-43c5-b207-0f6e2686fd2a.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a52dc709-37e7-43c5-b207-0f6e2686fd2a.png)'
- en: As we've seen, Unity ordinarily renders only the outward-facing surfaces of
    objects. This is determined, mathematically, as the *normal* direction vector
    of each facet of its surface mesh. A Plane is the simplest example. Back in [Chapter
    2](b9905cec-c089-4696-a683-bc7b65c4fa83.xhtml), *Content, Objects, and Scale*,
    we created a big screen image plane with the Grand Canyon on it. When you are
    facing the plane, you see the image. But if you move around behind the plane,
    it is not rendered, as if it were not in the scene at all. Similarly, suppose
    there is a cube or sphere in front of you; you will see it rendered, lit, and
    shaded. But if you put your head inside the object, it seems to disappear, because
    you're now looking at the inside faces of the object's mesh. This is all handled
    by the shader. And since we want to change it, we need to use a different shader.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，Unity通常只渲染物体的外表面。这在数学上由其表面网格每个面的**法线**方向向量决定。平面是最简单的例子。在[第2章](b9905cec-c089-4696-a683-bc7b65c4fa83.xhtml)“内容、对象和比例”中，我们创建了一个带有大峡谷的大屏幕图像平面。当你面对平面时，你会看到图像。但是如果你在平面后面移动，它不会被渲染，就像它根本不在场景中一样。同样，假设你面前有一个立方体或球体；你会看到它被渲染、照明和着色。但是如果你把头伸进物体里面，它似乎消失了，因为你现在正在看物体的内部面。这一切都是由着色器处理的。而且由于我们想要改变它，我们需要使用不同的着色器。
- en: Writing a custom Inward shader
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写自定义内着色器
- en: We are going to write a custom shader to render our texture on the inside of
    the sphere mesh.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将编写一个自定义着色器来在球体网格的内部渲染我们的纹理。
- en: Shaders are a critical part of the Unity rendering pipeline, and it's where
    a lot of the magic of computer graphics and virtual reality actually occurs. Unity
    provides an impressive set of built-in shaders, as you've likely noticed just
    by opening the Shader select list on any object's Material in the Inspector. Many
    asset packages you import may also include shaders that implement custom effects,
    including some we've already used in previous chapters, such as TextMeshPro and
    TiltBrush. The VR toolkits from Oculus, Google Daydream, and SteamVR also include
    shaders that provide an extra kick in performance and optimization of the rendering
    pipeline.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 着色器是Unity渲染管道的关键部分，也是计算机图形学和虚拟现实中的许多魔法实际发生的地方。Unity提供了一套令人印象深刻的内置着色器，正如您可能通过在检查器中打开任何对象的Shader选择列表所注意到的。您导入的许多资产包也可能包括实现自定义效果的着色器，包括我们在前几章中已经使用的一些，如TextMeshPro和TiltBrush。Oculus、Google
    Daydream和SteamVR的VR工具包也包括提供额外性能和渲染管道优化的着色器。
- en: Writing shaders is an advanced topic in computer graphics and Unity development.
    Nonetheless, Unity provides tools to facilitate the programming of shaders (see
    [https://docs.unity3d.com/Manual/SL-Reference.html](https://docs.unity3d.com/Manual/SL-Reference.html)),
    including a declarative language called *ShaderLab*, a lot of documentation and
    tutorials, and example shaders to work from. We are not going to go very deep
    here but many find it a very interesting and valuable skill to learn.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 编写着色器是计算机图形和Unity开发的高级主题。尽管如此，Unity提供了工具来简化着色器的编程（请参阅[https://docs.unity3d.com/Manual/SL-Reference.html](https://docs.unity3d.com/Manual/SL-Reference.html)），包括名为*ShaderLab*的声明性语言、大量文档和教程以及可从中工作的示例着色器。我们不会深入探讨，但许多人发现这是一项非常有趣且宝贵的技能。
- en: 'To create a new shader, begin as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个新的着色器，开始如下：
- en: Navigate to Create | Shader | Unlit Shader and name it `MyInwardShader`
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到创建 | 着色器 | Unlit Shader，并将其命名为`MyInwardShader`
- en: Double-click the new shader file to open it for editing
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击新的着色器文件以打开它进行编辑
- en: 'To turn the shader into an inside shader, all you need to do is add the line
    `Cull Front`, for example, immediately after the `Tags` line as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 要将着色器转换为内部着色器，你只需要添加一行`Cull Front`，例如，紧接在`Tags`行之后，如下所示：
- en: '[PRE1]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `Cull` command tell the shader whether to ignore front or back facing surfaces.
    The default is Back; we're changing it to cull the front ones and render the back
    ones. (For details on this, see [https://docs.unity3d.com/Manual/SL-CullAndDepth.html](https://docs.unity3d.com/Manual/SL-CullAndDepth.html).)
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`Cull`命令告诉着色器是否忽略正面或背面朝向的表面。默认是背面；我们将将其更改为裁剪正面并渲染背面。（有关详细信息，请参阅[https://docs.unity3d.com/Manual/SL-CullAndDepth.html](https://docs.unity3d.com/Manual/SL-CullAndDepth.html)。）'
- en: Save the file. Now we can use it in our project.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 保存文件。现在我们可以在我们的项目中使用它。
- en: Notice that the top line of the shader file names it `Shader "Unlit/MyInwardShader"`,
    which means you'll find it in the select Shader | Unlit submenu, or you can modify
    it without the submenu to `Shader "MyInwardShader"`.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 注意着色器文件的第一行将其命名为`Shader "Unlit/MyInwardShader"`，这意味着你可以在选择Shader | Unlit子菜单中找到它，或者你可以不使用子菜单将其修改为`Shader "MyInwardShader"`。
- en: Since we're inverting the texture, it may appear mirrored backwards. We will
    fix that by setting its X Tiling to `-1`, as we will see.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们正在反转纹理，它可能看起来是反向镜像的。我们将通过将其X平铺设置为`-1`来修复它，正如我们将看到的。
- en: 'An alternative approach is to invert the vertex normals within the shader.
    We used that technique in the first edition of this book, and it is shown here:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是着色器内反转顶点法线。我们在本书的第一版中使用了该技术，这里展示了它：
- en: '[PRE2]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Briefly, this shader script declares the following:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，这个着色器脚本声明了以下内容：
- en: Lets you supply  both a texture and a color property
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许你提供纹理和颜色属性
- en: Does no culling of surfaces (the texture will be visible both inside and out)
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不进行表面裁剪（纹理将在内部和外部都可见）
- en: Uses a simple Lambert diffuse lighting algorithm (versus unlit or the Standard
    Unity physically-based lighting)
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用简单的Lambert漫反射光照算法（与未照明或标准Unity物理光照相比）
- en: The `vert` function inverts the mesh vertices (by multiplying the normal vector
    by `-1`)
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`vert`函数通过乘以法向量`-1`来反转网格顶点'
- en: The `surf` renderer copies the texture pixel and also lets you tint it with
    an Albedo color (but forces Alpha to be opaque)
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`surf`渲染器复制纹理像素，并允许你使用Albedo颜色对其进行着色（但强制Alpha为不透明）'
- en: You can use this shader instead of the quick one we wrote previously.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用这个着色器代替我们之前写的快速着色器。
- en: Consider what would happen if you used an Alpha channel in your shader settings
    and set up a cutout mask. It would allow photospheres with some areas completely
    transparent. This opens the possibility of nesting multiple photospheres to create
    visual layers of 360 activity within your scene!
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一下，如果你在着色器设置中使用了Alpha通道并设置了一个裁剪遮罩会发生什么。这将允许照片球体的一些区域完全透明。这为在场景内嵌套多个照片球体以创建360度活动视觉层提供了可能性！
- en: Magic orbs
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 魔法球体
- en: Before we do full 360-photo viewing, for fun let's first consider a special
    case, *magic orbs*. For this example, we'll look at the sphere from the inside,
    mapping a 360-degree image onto its inside surface. Then, we'll put a solid colored
    *shell* around the outside. So, you really have to stick your head into the sphere
    to see what's there, or grab the sphere and "put it on your eyes!"
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们进行完整的360度照片查看之前，为了好玩，让我们首先考虑一个特殊情况，*魔法球体*。对于这个例子，我们将从内部查看球体，将360度图像映射到其内部表面。然后，我们将在外部放置一个实色*壳体*。所以，你真的需要把头伸进球体里才能看到里面的东西，或者抓起球体，“戴”在眼睛上！
- en: 'To build it, follow these steps:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建它，请按照以下步骤操作：
- en: Create a new material by navigating to Assets | Create | Material and name it
    `FarmhouseInward`.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过导航到资产 | 创建 | 材质创建一个新的材质，并将其命名为`FarmhouseInward`。
- en: In Inspector, use the Shader selector and choose Unlit | MyInwardShader, the
    one we just created.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器中，使用着色器选择器并选择Unlit | MyInwardShader，这是我们刚刚创建的。
- en: Locate the `Farmhouse` texture image and drag it onto the shader component's
    Albedo texture. If needed, set Tiling X to `-1` to compensate for mirroring.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定位到`Farmhouse`纹理图像，并将其拖拽到着色器组件的Albedo纹理上。如果需要，将Tiling X设置为`-1`以补偿镜像。
- en: Add a new sphere to the scene, dragging the `PhotoSphere.fbx` from your *Models*
    folder introduced before, and name it "MagicOrb."
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将一个新的球体添加到场景中，将之前介绍的`PhotoSphere.fbx`从你的*模型*文件夹中拖拽出来，并将其命名为"MagicOrb"。
- en: Drag the `FarmhouseInward` material onto the sphere.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`FarmhouseInward`材质拖拽到球体上。
- en: 'We''ll encase it in a solid colored orb by performing the following steps:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 通过以下步骤，我们将将其封装在一个单色球体中：
- en: Select the `MagicOrb` object in Hierarchy, right-click, and navigate to 3D Object
    | Sphere so that the new sphere is a child.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层次结构中选择`MagicOrb`对象，右键单击，导航到3D对象 | 球体，以便新的球体成为子对象。
- en: Set its Scale to something a little bigger than the inner sphere, such as (`1.02`,
    `1.02`, `1.02`)
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其缩放设置为略大于内球体的大小，例如（`1.02`, `1.02`, `1.02`）
- en: Disable its Sphere Collider component by unchecking it.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过取消勾选禁用其球体碰撞器组件。
- en: Find a solid material, such as the one we made in a previous chapter named `RedMaterial`,
    and drag it onto the new sphere.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到一个实色材质，例如我们在前一章中制作的名为`RedMaterial`的材质，并将其拖拽到新的球体上。
- en: Try it in VR. From the outside, it looks like a solid ball, but lean into it
    and there's a whole new little world in there! The following image is a capture
    of what I see. It's like peering into an egg shell!
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在VR中尝试。从外面看，它像一个实心球，但靠近它，里面有一个全新的小世界！以下图片是我看到的截图。就像透过鸡蛋壳看进去一样！
- en: '![](img/4e051aec-b008-4d5b-b497-9b7bd2764a29.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4e051aec-b008-4d5b-b497-9b7bd2764a29.png)'
- en: For non-positionally tracked mobile VR devices, you may not be able to do this
    in VR, but you can manually drag the camera rig in the Scene view while playing
    the scene in the Editor. Or, add some locomotion as described in [Chapter 7](f2007cb4-12b9-4c13-b47e-7143866f3e50.xhtml), *Locomotion
    and Comfort*. Or, make the orb grab-able, so the player can pick it up and move
    it very close to their face, using techniques described in [Chapter 5](21722631-9544-4b1e-a888-877d34b0fff7.xhtml),
    *Handy Interactables*.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 对于非位置跟踪的移动VR设备，你可能无法在VR中完成此操作，但可以在编辑器中播放场景的同时，在场景视图中手动拖拽相机装置。或者，添加一些如第7章所述的移动，*移动和舒适度*。或者，使球体可抓取，这样玩家就可以拿起它并将其移动到非常接近他们脸部的位置，使用第5章中描述的技术，*便捷交互对象*。
- en: If you want to dive deeper into shaders, as an exercise, try and see how you
    could modify InwardShader to take an additional Color parameter that is used to
    render the outward facing surface, while the texture is used to render the inward
    facing ones.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要深入了解着色器，作为一个练习，尝试看看你如何修改InwardShader以接受一个额外的颜色参数，该参数用于渲染外表面，而纹理用于渲染内表面。
- en: Photospheres
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 光晕层
- en: '*Yes sir, it''s all the rage these days. It''s better than panoramas. It''s
    better than selfies. It may be even better than Snapchat! We''re finally getting
    to the moment that you''ve been waiting for! It''s 360-degree photospheres!*'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '*是的，先生，这现在是热门话题。它比全景图好。它比自拍好。它甚至可能比Snapchat更好！我们终于到了你一直等待的时刻！这是360度光晕层！*'
- en: We covered a lot of topics in this chapter, which will now make it fairly easy
    to talk about 360-degree photospheres. To build one, we'll just make a very big
    sphere with the `MyInwardShader` shader.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们涵盖了众多主题，这将使得讨论360度光晕层变得相对容易。要构建一个，我们只需使用`MyInwardShader`着色器制作一个非常大的球体。
- en: 'Start with a new empty scene:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 开始一个新的空场景：
- en: Create a new scene by navigating to File | New Scene. Then, File | Save Scene
    and name it `PhotoSphere`. Delete the default Main Camera.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过导航到文件 | 新场景创建一个新的场景。然后，文件 | 保存场景并将其命名为`PhotoSphere`。删除默认的主相机。
- en: Add the `MyMyselfEye` prefab and reset its Transform Position to (`0`, `0`,
    `0`).
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`MyMyselfEye`预制件，并将其变换位置重置为（`0`, `0`, `0`）。
- en: Create an equirectangular sphere by dragging the `PhotoSphere` model from the `Project
    Models` folder into the scene (as imported from `PhotoSphere.fbx` in the previous
    example).
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过从`Project Models`文件夹中将`PhotoSphere`模型拖拽到场景中（如前一个示例中从`PhotoSphere.fbx`导入），创建一个等经线球体。
- en: Reset its Transform  (*gear* icon | Reset) and set its Scale to (`10`, `10`,
    `10`).
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重置其变换（*齿轮图标* | 重置）并将其缩放设置为（`10`, `10`, `10`）。
- en: Create a material (Create | Material) and name it to `PhotoSphere Material`.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个材质（创建 | 材质）并将其命名为`PhotoSphere Material`。
- en: Navigate to Shader | Unlit | MyInwardShader (as created earlier in this chapter).
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到着色器 | 无光照 | MyInwardShader（如本章前面创建）。
- en: Drag the `Photosphere` Material onto the `Photosphere` game object.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Photosphere`材质拖放到`Photosphere`游戏对象上。
- en: If there will be other objects in the Scene, you may need to disable shadows.
    On the Photosphere game object, in its Mesh Renderer component, uncheck the Receive
    Shadows checkbox.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果场景中将有其他对象，您可能需要禁用阴影。在球面游戏对象上，在其Mesh Renderer组件中取消选中接收阴影复选框。
- en: 'Now, to add the photo:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，要添加照片：
- en: Import the photo that you want to use; ours is named `FarmHouse.jpg`.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入您想要使用的照片；我们的照片命名为`FarmHouse.jpg`。
- en: With `PhotoSphere` selected (or the `PhotoSphere Material` itself), drag the
    `FarmHouse` texture onto the Albedo texture tile.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`PhotoSphere`（或`PhotoSphere Material`本身），将`FarmHouse`纹理拖放到Albedo纹理图块上。
- en: Set the Tiling X value to `-1` to compensate for the mirror inversion, if necessary.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果需要，将Tiling X值设置为`-1`以补偿镜像反转。
- en: Press Play. You should now see the photosphere surrounding you in the scene.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 按下播放。现在您应该能在场景中看到环绕您的球面照片。
- en: 'If you are using a device with positional tracking, such as the Oculus Rift,
    we need to disable it. Create a new script on  `MemMyselfEye` as follows:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是带有位置跟踪的设备，例如Oculus Rift，我们需要禁用它。在`MemMyselfEye`上创建一个新的脚本如下：
- en: '[PRE3]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You may find that the default texture resolution and/or compression are not
    high enough quality for your taste. To modify the resolution, follow these steps:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会发现默认的纹理分辨率和/或压缩质量不足以满足您的需求。要修改分辨率，请按照以下步骤操作：
- en: Select the texture (Farmhouse.png)
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择纹理（Farmhouse.png）
- en: In Inspector, change the Max Size to `4096` or `8192`
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器中，将最大尺寸更改为`4096`或`8192`
- en: Press Apply to re-import the texture
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下应用以重新导入纹理
- en: Note the file size (at bottom of Inspector) can grow exponentially, affecting
    the final size of your app, load times, and runtime performance. Also try the
    other compression settings, including the new Crunch Compression ([https://blogs.unity3d.com/2017/11/15/updated-crunch-texture-compression-library/](https://blogs.unity3d.com/2017/11/15/updated-crunch-texture-compression-library/)).
    You can configure these settings on a per-platform basis.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 注意文件大小（检查器底部）可能会呈指数级增长，影响您应用程序的最终大小、加载时间和运行时性能。还可以尝试其他压缩设置，包括新的Crunch压缩（[https://blogs.unity3d.com/2017/11/15/updated-crunch-texture-compression-library/](https://blogs.unity3d.com/2017/11/15/updated-crunch-texture-compression-library/)）。您可以根据每个平台配置这些设置。
- en: 'To switch images, repeat the last two steps: import the asset and assign it
    to the Albedo texture of the `Photosphere Mataterial`. If you want to do this
    in-game, you can do this in a script (for example, by using `Material.mainTexture()`).'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 要切换图像，重复最后两个步骤：导入资产并将其分配给`Photosphere Mataterial`的Albedo纹理。如果您想在游戏中这样做，可以在脚本中完成（例如，使用`Material.mainTexture()`）。
- en: Playing 360-degree videos
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 播放360度视频
- en: The steps for adding a 360-degree video are pretty much the same as adding a
    regular rectangular one to your project (see [https://docs.unity3d.com/Manual/class-MovieTexture.html](https://docs.unity3d.com/Manual/class-MovieTexture.html)). To
    play a 360-degree video, you use a  `Video Player` to render the video on a `Render
    Texture`.  If you do not have a 360-degree video handy, search the web free downloads
    and pick one that's not too long and a limited file size.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 添加360度视频的步骤与将常规矩形视频添加到项目中的步骤大致相同（见[https://docs.unity3d.com/Manual/class-MovieTexture.html](https://docs.unity3d.com/Manual/class-MovieTexture.html)）。要播放360度视频，您使用`Video
    Player`在`Render Texture`上渲染视频。如果您没有现成的360度视频，可以在网上搜索免费下载，并选择一个不太长且文件大小有限的一个。
- en: Depending on the format of your video, you may need to install QuickTime on
    your system first before you can import it into Unity, for the conversion codec.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您视频的格式，您可能需要首先在系统上安装QuickTime，然后才能将视频导入Unity进行转换编解码器。
- en: If you would like, start a new scene and reset the MyMyselfEye Transform to
    the origin. Then, import a 360 video into your Project Assets. Note its dimensions
    (for example, a 4K video is 4096 x 2048). You can see it in Inspector, if you're
    not sure.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您愿意，开始一个新的场景并将MyMyselfEye变换重置到原点。然后，将360度视频导入到您的项目资产中。注意其尺寸（例如，4K视频是4096 x
    2048）。如果您不确定，可以在检查器中查看。
- en: 'Add a video player to your project as follows:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下方式将视频播放器添加到您的项目中：
- en: Create an Empty named `"VideoPlayer"`
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`"VideoPlayer"`的空对象
- en: Add Component | Video Player
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加组件 | 视频播放器
- en: Drag your video file onto its Video Clip slot
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您的视频文件拖放到其视频剪辑槽中
- en: Check the Play On Awake checkbox and the Loop checkbox
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择“唤醒时播放”和“循环”复选框
- en: Ensure Render Mode is set to Render Texture
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保渲染模式设置为渲染纹理
- en: 'Now, we will create a `Render Texture`, a special Unity texture that will be
    rendered at runtime by the video player:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将创建一个 `Render Texture`，这是Unity的一个特殊纹理，将在运行时由视频播放器渲染：
- en: In your Project Assets, Create | Render Texture, name it `"Video Render Texture"`
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的项目资源中，创建 | 渲染纹理，命名为 `"Video Render Texture"`
- en: Set the Size to exactly the size of your video, (such as 4096 x 2048).
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将大小设置为视频的确切大小，(例如 4096 x 2048)。
- en: Setting Anti aliasing to 2 samples is recommended.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 建议将抗锯齿设置为2个样本。
- en: You can set Depth Buffer to No Depth Buffer
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以将深度缓冲区设置为无深度缓冲区
- en: Select VideoPlayer in Hierarchy and drag VideoRenderTexture onto its Target
    Texture slot
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层次结构中选择视频播放器，并将视频渲染纹理拖放到其目标纹理槽中
- en: 'Now, create your photosphere:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，创建你的全景照片：
- en: Create a new 3D Sphere and name it "VideoSphere"
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的3D球体并命名为 "VideoSphere"
- en: Reset its Transform, so its Position is (`0`, `0`, `0`), then set its Scale
    to  (`10`, `10`, `10`)
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重置其变换，使其位置为 (`0`, `0`, `0`), 然后将缩放设置为 (`10`, `10`, `10`)
- en: Drag Video Render Texture onto the sphere and make a new Material (or you could
    have separately created this material first)
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将视频渲染纹理拖放到球体上并创建一个新的材质（或者你可以在创建材质之前先创建这个材质）
- en: Change the Material Shader to MyInwardShader
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将材质着色器更改为MyInwardShader
- en: 'A resulting VideoPlayer in Inspector is shown here:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 这里显示了Inspector中的结果视频播放器：
- en: '![](img/4f207c7e-e32f-44d4-8c85-1e12178cb4f3.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4f207c7e-e32f-44d4-8c85-1e12178cb4f3.png)'
- en: Press Play. You now have a basic 360 video player built with Unity.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 按下播放。你现在已经使用Unity构建了一个基本的360度视频播放器。
- en: To review, the sphere uses a material with an inward shader. The shader renders
    an equirectangular texture on the inside of the sphere. The video player modifies
    that texture each update with the next video frame.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 为了复习，球体使用的是向内着色器的材质。着色器在球体的内部渲染一个等角纹理。视频播放器在每个更新中都会用下一个视频帧修改那个纹理。
- en: When building for Android and iOS, you must put your video file (such as MP4)
    into a folder named *StreamingAssets* in your Project Assets. For more information
    on this and other considerations for Video Player and codecs, see the Unity documentation
    at [https://docs.unity3d.com/ScriptReference/Video.VideoPlayer.html](https://docs.unity3d.com/ScriptReference/Video.VideoPlayer.html).
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 当为Android和iOS构建时，你必须将你的视频文件（例如MP4）放入项目资源中的名为 *StreamingAssets* 的文件夹中。有关此信息和视频播放器和编解码器的其他考虑因素，请参阅Unity文档[https://docs.unity3d.com/ScriptReference/Video.VideoPlayer.html](https://docs.unity3d.com/ScriptReference/Video.VideoPlayer.html)。
- en: 'If the video has audio, we can make the video an Audio Source as follows:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 如果视频有音频，我们可以将视频作为音频源如下设置：
- en: Select the VideoPlayer and Add Component | Audio Source
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择视频播放器并添加组件 | 音频源
- en: Drag `VideoPlayer` itself onto its Video Player component's Audio Source slot
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 `VideoPlayer` 本身拖放到其视频播放器组件的音频源槽中
- en: 'As with all Unity components, the video player has an API and can be controlled
    via scripting. For example, to simply pause the video with a button click, you
    could add this script to the `VideoPlayer`:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 与所有Unity组件一样，视频播放器有一个API，可以通过脚本进行控制。例如，要简单地通过按钮点击暂停视频，你可以在 `VideoPlayer` 上添加此脚本：
- en: '[PRE4]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'For additional tips, also check out the tutorial from Unity *Getting started
    in interactive 360 video: Download our sample project* at  [https://blogs.unity3d.com/2018/01/19/getting-started-in-interactive-360-video-download-our-sample-project/](https://blogs.unity3d.com/2018/01/19/getting-started-in-interactive-360-video-download-our-sample-project/).'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 对于额外的提示，还可以查看Unity的教程 *交互式360视频入门：下载我们的示例项目* [https://blogs.unity3d.com/2018/01/19/getting-started-in-interactive-360-video-download-our-sample-project/](https://blogs.unity3d.com/2018/01/19/getting-started-in-interactive-360-video-download-our-sample-project/)。
- en: Using Unity skyboxes
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Unity skyboxes
- en: Back in the olden days, or at least before 360 photos, we simply referred to
    *skyboxes* as the way to create background imagery in computer graphics. Skyboxes
    depict what's far on the horizon, may contribute to the ambient lighting of the
    scene, be used for rendering reflections on object surfaces, and are not interactable.
    Unity supports skyboxes as part of the Lighting Environment for each scene. We
    used skyboxes already in a few of the previous chapters' projects (including Wispy
    Sky and Skull Platform ones).
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在古代，或者至少在360度照片之前，我们简单地称 *skyboxes* 为在计算机图形中创建背景图像的方式。Skyboxes描绘了地平线上的远处，可能有助于场景的环境光照，用于在物体表面上渲染反射，并且不可交互。Unity支持每个场景的照明环境中的skyboxes。我们已经在之前几章的项目中使用了skyboxes（包括Wispy
    Sky和Skull Platform项目）。
- en: Common sources of skyboxes are cylindrical panorama, spherical panorama (360
    images), and a six-sided cube. We won't consider the cylindrical one, since it's
    less useful for VR.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 天空盒的常见来源包括圆柱形全景、球形全景（360度图像）和六面体。我们不会考虑圆柱形，因为它在VR中不太有用。
- en: Six-sided or cubemap skyboxes
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 六面体或立方体贴图天空盒
- en: 'A skybox can be represented by a six sides of a cube, where each side is akin
    to a camera capturing its view pointing in each of the six directions, as illustrated
    here:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 天空盒可以表示为一个立方体的六个面，每个面都类似于一个摄像头捕捉其六个方向之一的视图，如图所示：
- en: '![](img/78ce7543-9205-4ef8-9d59-52b9e69e89d8.jpg)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/78ce7543-9205-4ef8-9d59-52b9e69e89d8.jpg)'
- en: 'Given these six images, as textures, you''d create a *six-sided* skybox material
    like the one shown next for the WispySky cubemap. And then, set it in the Lighting
    window as the Skybox Material for the scene:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 给定这六张图片，作为纹理，你会创建一个如WispySky立方体贴图所示的下**六面体**天空盒材质。然后，在灯光窗口中将其设置为场景的天空盒材质：
- en: '![](img/17612320-89bb-42d0-a15b-c2d3827a621a.png)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/17612320-89bb-42d0-a15b-c2d3827a621a.png)'
- en: Alternatively, you could combine the six images into a single *cubemap* image,
    laid out similarly.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你也可以将六张图片合并成一张单独的**立方体贴图**图像，布局类似。
- en: Cubemaps have an advantage because equirectangular textures waste pixels where
    the image is stretched at the top and bottom poles of the spherical projection.
    On the other hand, care must be taken to properly design images so they'll smoothly
    stitch together and not cause seams or other visual artifacts.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 立方体贴图的优势在于，等经纬度纹理在球形投影的顶部和底部极点拉伸图像时浪费了像素。另一方面，必须仔细设计图像，以确保它们可以平滑拼接，不会产生接缝或其他视觉伪影。
- en: A variant over traditional cubemaps is the **Equi-Angular Cubemap** (**EAC**).
    EAC strives to have even more uniform pixel sizes and "equal angle pixel distribution
    in 3D."  (See [https://blog.google/products/google-vr/bringing-pixels-front-and-center-vr-video/](https://blog.google/products/google-vr/bringing-pixels-front-and-center-vr-video/).)
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 传统的立方体贴图的一个变体是**等角立方体贴图**（**EAC**）。EAC力求拥有更加均匀的像素大小和“在3D空间中均匀的像素角度分布”。（参见[https://blog.google/products/google-vr/bringing-pixels-front-and-center-vr-video/](https://blog.google/products/google-vr/bringing-pixels-front-and-center-vr-video/)。）
- en: But most 360 media today, especially coming from consumer cameras, use equirectangular
    projections, aka spherical panoramas.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 但如今大多数360度媒体，尤其是来自消费级相机的媒体，都使用等经纬度投影，也就是球形全景。
- en: Spherical panoramic skyboxes
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 球形全景天空盒
- en: Using a 360 photo for a skybox is referred to a *spherical panoramic*. Earlier
    in this chapter we used a spherical game object to render an equirectangular texture
    and placed the player camera dead-center inside it. Now, we'll now use the same
    image in a skybox. (Note, this will also work for 180-degree content.)
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 使用360度照片作为天空盒被称为**球形全景**。在本章的早期，我们使用球形游戏对象渲染等经纬度纹理，并将玩家摄像头放置在其中的正中央。现在，我们将使用相同的图像在天空盒中。
    （注意，这同样适用于180度内容。）
- en: 'Start with a new empty scene:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 从一个新的空场景开始：
- en: Create a new scene by navigating to File | New Scene. Then, File | Save Scene and
    name it `Skybox`. Replace the `Main Camera` with the `MyMyselfEye` prefab.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过导航到文件 | 新场景来创建一个新的场景。然后，文件 | 保存场景并将它命名为`Skybox`。将`Main Camera`替换为`MyMyselfEye`预制体。
- en: Assuming you're using the `Farmhouse.jpg` image as earlier, create a new `Material`
    and name it `Farmhouse Skybox`.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设你正在使用`Farmhouse.jpg`图像，如之前所述，创建一个新的`Material`并将其命名为`Farmhouse Skybox`。
- en: For the material's Shader, choose Skybox | Panoramic.
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于材质的着色器，选择天空盒 | 全景。
- en: Drag your 360 image (`Farmhouse.jpg`) onto the Spherical texture area.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你的360度图像（`Farmhouse.jpg`）拖放到球形纹理区域。
- en: Set the Mapping to Latitude Longitude Layout.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将映射设置为经纬度布局。
- en: Set the Image Type to 360 Degrees.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将图像类型设置为360度。
- en: 'The Material settings are shown here:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 材料设置如下所示：
- en: '![](img/d3e9a35d-d730-4581-bd73-702ab099fab3.png)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d3e9a35d-d730-4581-bd73-702ab099fab3.png)'
- en: 'Now to use it in your scene:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 现在要在场景中使用它：
- en: Open the Lighting window tab (if not in your Editor, navigate to Window | Lighting)
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开灯光窗口标签（如果不在你的编辑器中，请导航到窗口 | 灯光）
- en: Drag your `Farmhouse Skybox` material onto the Skybox Material slot
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你的`Farmhouse Skybox`材质拖放到天空盒材质槽中。
- en: 'The Lighting Environment settings are shown here:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 灯光环境设置如下所示：
- en: '![](img/0d6bd60f-d428-4a70-a8f8-8ffe841991e9.png)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0d6bd60f-d428-4a70-a8f8-8ffe841991e9.png)'
- en: Press Play. *Voila! *You should now see the photosphere surrounding you in the
    scene. That was almost too easy. Thank goodness!
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 按下播放。*哇！*你现在应该能在场景中看到围绕你的照片球体。这几乎太简单了。谢天谢地！
- en: One thing that's interesting is, since skyboxes are always rendered as if at
    a very far distance away, the camera will always be at the center of the photosphere.
    Thus, we don't need to set the camera rig at the origin, and we don't need to
    disable positional tracking, as we did for the spherical game object version of
    this project. Wherever you move, the skybox will surround you just the same. If
    your 360 image contains content (people or objects) that are relatively near,
    this may feel very unnatural, as if the objects are projected or flattened against
    the spherical projection (which they are!). This is why skyboxes are generally
    used for landscapes and wide open spaces. (Later, we'll see how this can be solved
    using *stereo* skyboxes.)
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的一点是，由于天空盒始终以非常远的距离渲染，因此相机将始终位于球面的中心。因此，我们不需要在原点设置相机装置，也不需要禁用位置跟踪，就像我们在本项目的球形游戏对象版本中做的那样。无论您走到哪里，天空盒都会围绕您。如果您的
    360 度图像包含相对较近的内容（人或物体），这可能会感觉非常不自然，就像物体被投影或压扁在球形投影上（它们确实是！）这就是为什么天空盒通常用于风景和开阔空间。（稍后，我们将看到如何使用
    *立体* 天空盒来解决这个问题。）
- en: At this point, you can add more content to your scene. After all, we're in Unity
    and not just making an generic 360 photo viewer. Enhance your lovely outdoor scene
    by adding falling snow or leaves (for example, see the *Falling Leaves* particle
    package, [https://assetstore.unity.com/packages/3d/falling-leaves-54725](https://assetstore.unity.com/packages/3d/falling-leaves-54725)).
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您可以为场景添加更多内容。毕竟，我们在 Unity 中，而不仅仅是制作一个通用的 360 度照片查看器。通过添加下雪或落叶（例如，参见 *Falling
    Leaves* 粒子包，[https://assetstore.unity.com/packages/3d/falling-leaves-54725](https://assetstore.unity.com/packages/3d/falling-leaves-54725)）来增强您可爱的户外场景。
- en: A common application is to use a 360 image in a lobby scene, and add an interactive
    menu panel for launching other apps or scenes. The Google Daydream lobby comes
    to mind.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 常见的应用是在大厅场景中使用 360 度图像，并添加一个交互式菜单面板来启动其他应用或场景。例如，谷歌 Daydream 大厅。
- en: Another application is to make the 360 image more interactive by add UI canvases
    to label content in the photo. It may take some thoughtful work to align the labels
    with the photosphere. Then, using a camera raycast, you can dynamically highlight
    what the player is looking at (see [Chapter 4](b12be869-72d7-4dc4-a9bc-d166b9002bb1.xhtml),
    *Gaze-Based Control* for coding tips).
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个应用是通过添加 UI 画布来标注照片中的内容，使 360 度图像更具交互性。这可能需要一些深思熟虑的工作来将标签与球面相匹配。然后，使用相机射线投射，您可以动态突出显示玩家正在查看的内容（参见[第
    4 章](b12be869-72d7-4dc4-a9bc-d166b9002bb1.xhtml)，*基于注视的控制*，获取编码技巧）。
- en: 360 video skyboxes
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 360 度视频天空盒
- en: 'Turning your skybox into a 360 degree video player is nearly identical to the
    steps outlined previously for the spherical game object version. We won''t repeat
    everything again, but briefly it goes as follows:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 将您的天空盒转换为 360 度视频播放器几乎与之前为球形游戏对象版本概述的步骤相同。我们不会重复所有内容，但简要来说如下：
- en: Set up a `Video Player` to play back the video source to a `Render Texture`
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置一个 `Video Player` 来播放视频源到 `Render Texture`
- en: Set up a `Skybox Material` that will receive the `Render Texture`
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置一个 `Skybox Material` 以接收 `Render Texture`
- en: Set the scene to use the `Skybox Material`
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将场景设置为使用 `Skybox Material`
- en: Note, according to Unity, equirectangular videos should have an aspect ratio
    of exactly 2:1 (or for 180-degree content, 1:1) for the skybox shader. Also, many
    desktop hardware video decoders are limited to 4K resolutions and mobile hardware
    video decoders are often limited to 2K or less, limiting the resolution that can
    be played back in real time on those platforms.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，根据 Unity，等角圆柱体视频的天空盒着色器应具有精确的 2:1 宽高比（或对于 180 度内容，1:1）。此外，许多桌面硬件视频解码器限制在
    4K 分辨率，而移动硬件视频解码器通常限制在 2K 或更低，这限制了在这些平台上可以实时播放的分辨率。
- en: 3D stereo skyboxes
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3D 立体天空盒
- en: 'If you have a 360 image or video with stereo views, for each of the left and
    right eyes, Unity can now use that too. As of Unity 2017.3, the Panoramic Skybox
    material supports 3D textures in with a 3D layout. You can specify Side by side
    or Over under, as shown here:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有一个带有立体视图的 360 度图像或视频，Unity 现在可以为左右眼使用这些图像。截至 Unity 2017.3，全景天空盒材质支持具有 3D
    布局的 3D 纹理。您可以选择并排或上下，如图所示：
- en: '![](img/a4bb26a6-bff9-459c-a55a-3be8628c4a59.png)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a4bb26a6-bff9-459c-a55a-3be8628c4a59.png)'
- en: An example 3D stereographic equirectangular over-under image is given in the
    next topic, where we discuss capturing 360 media within your Unity project.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一主题中给出了一个示例 3D 立体等角圆柱体上下图像，我们将讨论在您的 Unity 项目中捕捉 360 度媒体。
- en: Capturing 360-degrees in Unity
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Unity 中捕捉 360 度
- en: We've talked about using 360-degree media captured using 360 cameras. But what
    if you wanted to capture a 360 image or video from within your Unity app and share
    it on the internet? This could be useful for marketing and promoting your VR apps,
    or just simply using Unity as a content generation tool but using 360 video as
    the final distribution medium.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了使用360度相机捕获的360度媒体。但如果你想在Unity应用内捕获360度图像或视频并在互联网上分享呢？这可以用于市场营销和推广你的VR应用，或者仅仅是将Unity作为一个内容生成工具，但使用360度视频作为最终的分发媒介。
- en: Capturing cubemaps and reflection probes
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 捕获立方体贴图和反射探针
- en: Unity includes support for capturing scene views as part of its lighting engine. A
    call to `camera.RenderToCubemap()` will bake a static cubemap of your scene, using
    the camera's current position and other settings.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: Unity包括支持将其照明引擎的一部分捕获场景视图。调用`camera.RenderToCubemap()`将烘焙场景的静态立方体贴图，使用相机的当前位置和其他设置。
- en: 'The example script given in the Unity documentation,  [https://docs.unity3d.com/Documentation/ScriptReference/Camera.RenderToCubemap.html](https://docs.unity3d.com/Documentation/ScriptReference/Camera.RenderToCubemap.html),
    implements an editor wizard for capturing a cubemap of your scene directly in
    the Editor, and is included here:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: Unity文档中给出的示例脚本，[https://docs.unity3d.com/Documentation/ScriptReference/Camera.RenderToCubemap.html](https://docs.unity3d.com/Documentation/ScriptReference/Camera.RenderToCubemap.html)，实现了一个编辑器向导，可以直接在编辑器中捕获场景的立方体贴图，并包含在此处：
- en: '[PRE5]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To run the wizard:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行向导：
- en: Create an Empty game object for the camera position to capture from
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个空的游戏对象作为捕获位置
- en: Create a cubemap to render into (Assets | Create | Legacy | Cubemap)
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个用于渲染的立方体贴图（Assets | Create | Legacy | Cubemap）
- en: Set Face size to a high resolution, such as `2048`
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将面大小设置为高分辨率，例如`2048`
- en: Check the Readable checkbox
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择可读复选框
- en: Run the wizard (GameObject | Render into Cubemap)
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行向导（GameObject | Render into Cubemap）
- en: Drag the position object into the Render From Position slot
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将位置对象拖入Render From Position槽
- en: Drag cubemap into the Cubemap slot
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将立方体贴图拖入Cubemap槽
- en: Press Render!
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下渲染！
- en: This `.cubemap` file can now be used in a Skybox Cubemap material.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这个`.cubemap`文件可以用于Skybox Cubemap材质。
- en: A similar but different approach is to use Reflection probes. They're normally used
    by objects with reflective materials to render realistic surface reflections (see
    [https://docs.unity3d.com/Manual/class-ReflectionProbe.html](https://docs.unity3d.com/Manual/class-ReflectionProbe.html)). A
    reflection probe captures a spherical view of its surroundings and is then stored
    as a cubemap. Scene designers will strategically place multiple reflection probes
    in a scene to provide more realistic rendering. You can repurpose a reflection
    probe as a 360 image capture of your scene! Since they're intended for reflection
    lighting, they're usually low resolution.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种类似但不同的方法是使用反射探针。它们通常用于具有反射材质的对象，以渲染逼真的表面反射（见[https://docs.unity3d.com/Manual/class-ReflectionProbe.html](https://docs.unity3d.com/Manual/class-ReflectionProbe.html)）。反射探针捕获其周围环境的球形视图，然后存储为立方体贴图。场景设计师会策略性地在场景中放置多个反射探针，以提供更逼真的渲染。你可以将反射探针作为场景的360度图像捕获！由于它们旨在用于反射照明，通常分辨率较低。
- en: Unity chooses where to store the reflection probe lightmap file (`.exr`) depending
    on your lighting settings. To save it under your *Assets* folder (rather than
    the GI cache), go to the Lighting tab, disable Realtime Global Illumination, and
    disable Auto Generate. This will generate the refection probe `.exr` file in a
    folder with the same name as your scene.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: Unity根据你的照明设置选择存储反射探针光照贴图文件（`.exr`）的位置。要将它保存在你的*Assets*文件夹下（而不是GI缓存），转到照明选项卡，禁用实时全局照明，并禁用自动生成。这将生成与场景同名的文件夹中的反射探针`.exr`文件。
- en: Try adding one to your scene by navigating to GameObject | Light | Reflection
    Probe. Set Resolution to a high value, like `2048`. Then, press Bake.  You can
    then assign this `.exr` file to a Skybox Cubemap material, making a quick and
    easy 360 scene-shot.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 通过导航到GameObject | Light | Reflection Probe尝试在你的场景中添加一个。将分辨率设置为高值，如`2048`。然后，按烘焙。然后你可以将这个`.exr`文件分配给Skybox
    Cubemap材质，快速轻松地制作360度场景快照。
- en: Using a third-party package for 360 image capture
  id: totrans-255
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用第三方包进行360度图像捕获
- en: 'There are a number of packages that provide the ability to capture 360 images
    and video in Unity, including:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多包提供了在Unity中捕获360度图像和视频的能力，包括：
- en: 360 Panorama Capture from eVRydayVR (free) ([https://assetstore.unity.com/packages/tools/camera/360-panorama-capture-38755](https://assetstore.unity.com/packages/tools/camera/360-panorama-capture-38755))
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: eVRydayVR 的 360 Panorama Capture (免费) ([https://assetstore.unity.com/packages/tools/camera/360-panorama-capture-38755](https://assetstore.unity.com/packages/tools/camera/360-panorama-capture-38755))
- en: VR Panorama 360 PRO from OliVR ($49) ([https://assetstore.unity.com/packages/tools/video/vr-panorama-360-pro-renderer-35102](https://assetstore.unity.com/packages/tools/video/vr-panorama-360-pro-renderer-35102))
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OliVR 的 VR Panorama 360 PRO ($49) ([https://assetstore.unity.com/packages/tools/video/vr-panorama-360-pro-renderer-35102](https://assetstore.unity.com/packages/tools/video/vr-panorama-360-pro-renderer-35102))
- en: Oculus 360-Capture-SDK (free), includes a sample Unity project ([https://github.com/facebook/360-Capture-SDK](https://github.com/facebook/360-Capture-SDK))
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Oculus 360-Capture-SDK (免费)，包含一个示例 Unity 项目 ([https://github.com/facebook/360-Capture-SDK](https://github.com/facebook/360-Capture-SDK))
- en: Each of these packages support mono and stereoscopic capture, sequenced captures
    for video encoding, and possibly other features for color conversion, antialiasing,
    camera image effects, and 3D spatialized audio.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 这些软件包都支持单眼和立体捕获，序列化捕获用于视频编码，以及可能的其他功能，如颜色转换、抗锯齿、相机图像效果和 3D 空间化音频。
- en: 'Using the  360 Panorama Capture script from eVRydayVR, for example, to capture
    a single 360 image, open a scene you want to capture, then:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 eVRydayVR 的 360 Panorama Capture 脚本，例如，要捕获单个 360 图像，打开您想要捕获的场景，然后：
- en: Create an Empty game object, named `CapturePanorama`, positioned where you want
    to make the capture
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个空的游戏对象，命名为 `CapturePanorama`，放置在您想要进行捕获的位置
- en: Add the Capture Panorama script as a component
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 Capture Panorama 脚本作为组件
- en: Press Play, then press *P* on the keyboard
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下播放，然后按键盘上的 *P* 键
- en: 'The screen will fade to black, and an image will be captured and saved to your
    project root directory. The component options are shown here:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 屏幕将变为黑色，并将捕获的图像保存到您的项目根目录。组件选项如下所示：
- en: '![](img/5594290d-e4aa-4bc6-979b-39cb13e54e2e.png)'
  id: totrans-266
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5594290d-e4aa-4bc6-979b-39cb13e54e2e.png)'
- en: To capture video, you would enable the Capture Every Frame checkbox. It recommends
    the open source *ffmpeg* tool ([https://www.ffmpeg.org/](https://www.ffmpeg.org/))
    to assemble the frames and encode the video. See the README file for details.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 要捕获视频，您需要启用 Capture Every Frame 复选框。它推荐使用开源的 *ffmpeg* 工具 ([https://www.ffmpeg.org/](https://www.ffmpeg.org/))
    来组装帧并编码视频。有关详细信息，请参阅 README 文件。
- en: Of course, this component can also be controlled via scripts, and can be built
    into your runtime game, not just used in the Editor.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，此组件也可以通过脚本进行控制，并可以构建到您的运行时游戏中，而不仅仅是用于编辑器。
- en: Unity built-in stereo 360 image and video capture
  id: totrans-269
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Unity 内置的立体 360 图像和视频捕获
- en: As of Unity 2018.1, Unity includes an integrated stereo 360 image and video
    capture capability. The feature is based on Google's omni-directional stereo (ODS),
    described at the beginning of this chapter. Details in this section summarize
    the Unity Blogs post from January, 2018 ([https://blogs.unity3d.com/2018/01/26/stereo-360-image-and-video-capture/](https://blogs.unity3d.com/2018/01/26/stereo-360-image-and-video-capture/)),
    which explains how to capture ODS stereo cubemaps and convert them to stereo equirectangular
    textures.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 截至 Unity 2018.1，Unity 包含了集成的立体 360 图像和视频捕获功能。该功能基于 Google 的全向立体 (ODS)，如本章开头所述。本节中的详细信息总结了
    2018 年 1 月的 Unity 博客文章 ([https://blogs.unity3d.com/2018/01/26/stereo-360-image-and-video-capture/](https://blogs.unity3d.com/2018/01/26/stereo-360-image-and-video-capture/))，该文章解释了如何捕获
    ODS 立体立方体贴图并将它们转换为立体等角纹理。
- en: 'To capture a scene in Editor or standalone player, call `camera.RenderToCubemap()`
    once per eye. We used this function earlier; there is a variant that takes a `stereoEye`
    parameter, for example:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 要在编辑器或独立播放器中捕获场景，每次对每个眼睛调用一次 `camera.RenderToCubemap()`。我们之前使用过此函数；有一个接受 `stereoEye`
    参数的变体，例如：
- en: '[PRE6]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To convert cubemaps to stereo equirectangular maps, call `RenderTexture.ConvertToEquirect()` as
    follows:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 要将立方体贴图转换为立体等角贴图，按照以下方式调用 `RenderTexture.ConvertToEquirect()`：
- en: '[PRE7]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Using the Unity frame recorder ([https://github.com/Unity-Technologies/GenericFrameRecorder](https://github.com/Unity-Technologies/GenericFrameRecorder)),
    a sequence of these images can be captured as frames of a stereo 360 video.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Unity 帧记录器 ([https://github.com/Unity-Technologies/GenericFrameRecorder](https://github.com/Unity-Technologies/GenericFrameRecorder))，可以将这些图像作为立体
    360 视频的帧序列捕获。
- en: 'To capture in the PC standalone build, you need to enable the 360 Stereo Capture
    in the Build Settings, as shown here, so Unity generates the shader variants required
    by this feature:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 PC 独立构建中捕获，您需要在构建设置中启用 360 Stereo Capture，如图所示，这样 Unity 就会生成此功能所需的着色器变体：
- en: '![](img/4556c754-2c22-4e95-83db-9c99e7aa2557.jpg)'
  id: totrans-277
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4556c754-2c22-4e95-83db-9c99e7aa2557.jpg)'
- en: 'Here is an example of a resulting stereo equirectangular video capture (from
    the Unity blog, [https://blogs.unity3d.com/wp-content/uploads/2018/01/image5-2.gif](https://blogs.unity3d.com/wp-content/uploads/2018/01/image5-2.gif)):'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个立体等经纬度视频捕获结果的示例（来自Unity博客，[https://blogs.unity3d.com/wp-content/uploads/2018/01/image5-2.gif](https://blogs.unity3d.com/wp-content/uploads/2018/01/image5-2.gif))：
- en: '![](img/4e293df6-c23e-4662-9b62-1b95e06258fb.jpg)'
  id: totrans-279
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4e293df6-c23e-4662-9b62-1b95e06258fb.jpg)'
- en: Summary
  id: totrans-280
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 360-degree media is compelling because VR hacks your field of view (FOV). The
    view you see is updated in real time as you move your head around, making it seem
    to have no edges. We started this chapter by describing what 360-degree images
    are, and how the surface of a sphere would be flattened (projected) into a 2D
    image, and equirectangular projections in particular. Stereo 3D media includes
    separate equirectangular views for the left and right eyes.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 360度媒体令人着迷，因为VR技术改变了你的视野（FOV）。当你移动头部时，你所看到的视图会实时更新，使其看起来没有边缘。我们本章一开始就描述了360度图像是什么，以及球面的表面是如何被压扁（投影）成二维图像的，特别是等经纬度投影。立体3D媒体包括为左右眼分别提供的等经纬度视图。
- en: We began exploring this in Unity by simply mapping a regular image on the outside
    of a sphere, and were perhaps frightened by the distortions. Then, we saw how
    an equirectangular texture covers the sphere evenly. Next, we inverted the sphere
    with a custom shader, mapping the image inside the sphere, making it a 360 photosphere
    viewer. And, we added video.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在Unity中开始探索这一概念，通过简单地将常规图像映射到球体的外部，并可能因此对产生的扭曲感到惊讶。然后，我们看到了等经纬度纹理是如何均匀地覆盖球体的。接下来，我们使用自定义着色器反转球体，将图像映射到球体内部，使其成为一个360度全景照片查看器。然后，我们添加了视频。
- en: Then, we looked at using skyboxes instead of a game object for rendering 360
    media. We saw how Unity supports cubemaps and spherical panoramas, video skyboxes,
    and 3D stereo skyboxes too.  Lastly, we explored capturing 360 media from within
    your Unity scenes using third-party packages and Unity's built-in API.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们探讨了使用天空盒而不是游戏对象来渲染360度媒体的方法。我们看到了Unity如何支持立方体贴图和球形全景，视频天空盒以及3D立体天空盒。最后，我们探讨了使用第三方包和Unity内置API从Unity场景中捕获360度媒体的方法。
- en: In the next chapter, we consider an important application of virtual reality,
    for storytelling. Using the animation and cinematic editing feature of Unity,
    we build a short VR cinematic experience.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨虚拟现实的一个重要应用，即叙事。利用Unity的动画和电影剪辑功能，我们构建了一个简短的VR电影体验。
