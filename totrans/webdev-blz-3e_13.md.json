["```cs\n    dotnet new install bunit.template \n    ```", "```cs\n[Fact]\npublic void CounterStartsAtZero()\n{\n    // Arrange\nvar cut = RenderComponent<Counter>();\n    // Assert that content of the paragraph shows counter\n// at zero\n    cut.Find(\"p\").MarkupMatches(\"<p>Current count: 0</p>\");\n} \n```", "```cs\n[Fact]\npublic void ClickingButtonIncrementsCounter()\n{\n    // Arrange\nvar cut = RenderComponent<Counter>();\n    // Act - click button to increment counter\n    cut.Find(\"button\").Click();\n    // Assert that the counter was incremented\n    cut.Find(\"p\").MarkupMatches(\"<p>Current count: 1</p>\");\n} \n```", "```cs\n [Fact]\n    public void CounterStartsAtZero()\n    {\n        // Arrange\nvar cut = Render(@<Counter />);\n        // Assert that content of the paragraph shows counter at zero\n        cut.Find(\"p\").MarkupMatches(@<p>Current count: 0</p>);\n    } \n```", "```cs\n    using Data.Models;\n    using Data.Models.Interfaces;\n    using System.Collections.Generic;\n    using System.Threading.Tasks; \n    ```", "```cs\n    internal class BlogApiMock :IBlogApi\n    {\n    } \n    ```", "```cs\n    public async Task<BlogPost?> GetBlogPostAsync(string id)\n    {\n        BlogPost post = new()\n        {\n            Id = id,\n            Text = $\"This is a blog post no {id}\",\n            Title = $\"Blogpost {id}\",\n            PublishDate = DateTime.Now,\n            Category = await GetCategoryAsync(\"1\"),\n        };\n        post.Tags.Add(await GetTagAsync(\"1\"));\n        post.Tags.Add(await GetTagAsync(\"2\"));\n        return post;\n    }\n    public Task<int> GetBlogPostCountAsync()\n    {\n        return Task.FromResult(10);\n    }\n    public async Task<List<BlogPost>?> GetBlogPostsAsync(int numberofposts, int startindex)\n        {\n            List<BlogPost> list = new();\n            for (int a = 0; a < numberofposts; a++)\n            {\n                list.Add(await GetBlogPostAsync($\"{startindex + a}\"));\n            }\n            return list;\n        } \n    ```", "```cs\n     public async Task<List<Category>?> GetCategoriesAsync()\n        {\n            List<Category> list = new();\n            for (int a = 0; a < 10; a++)\n            {\n                list.Add(await GetCategoryAsync($\"{a}\"));\n            }\n            return list;\n        }\n        public Task<Category?> GetCategoryAsync(string id)\n        {\n            return Task.FromResult(new Category() { Id = id, Name = $\"Category {id}\" });\n        } \n    ```", "```cs\n     public Task<List<Comment>> GetCommentsAsync(string blogPostId)\n        {\n            var comments= new List<Comment>\n            {\n                new Comment { BlogPostId = blogPostId, Date = DateTime.Now, Id = \"Comment1\", Name = \"Rocket Raccoon\", Text = \"I really want that arm!\" }\n            };\n            return Task.FromResult(comments);\n        } \n    ```", "```cs\n     public Task<Tag?> GetTagAsync(string id)\n        {\n            return Task.FromResult(new Tag() { Id = id, Name = $\"Tag {id}\" });\n        }\n        public async Task<List<Tag>?> GetTagsAsync()\n        {\n            List<Tag> list = new();\n            for (int a = 0; a < 10; a++)\n            {\n                list.Add(await GetTagAsync($\"{a}\"));\n            }\n            return list;\n        } \n    ```", "```cs\n     public Task<BlogPost?> SaveBlogPostAsync(BlogPost item)\n        {\n            return Task.FromResult(item);\n        }\n        public Task<Category?> SaveCategoryAsync(Category item)\n        {\n            return Task.FromResult(item);\n        }\n        public Task<Tag?> SaveTagAsync(Tag item)\n        {\n            return Task.FromResult(item);\n        }     public Task<Comment?> SaveCommentAsync(Comment item)\n        {\n            return Task.FromResult(item);\n        }\n        public Task DeleteBlogPostAsync(string id)\n        {\n            return Task.CompletedTask;\n        }\n        public Task DeleteCategoryAsync(string id)\n        {\n            return Task.CompletedTask;\n        }\n        public Task DeleteTagAsync(string id)\n        {\n            return Task.CompletedTask;\n        }\n      public Task DeleteCommentAsync(string id)\n      {\n            return Task.CompletedTask;\n      } \n    ```", "```cs\n    @using SharedComponents.Pages\n    @using Data.Models.Interfaces\n    @using SharedComponents.ReusableComponents \n    ```", "```cs\n    @inherits TestContext \n    ```", "```cs\n    @code{\n    [Fact(DisplayName =\"Checks that the Home component shows 10 posts\")]\n        public void Shows10Blogposts()\n        {\n            // Act\n    var cut = Render(@<Home />);\n            // Assert that the content has 10 article tags (each representing a blogpost)\n            Assert.Equal(10,cut.FindAll(\"article\").Count());\n        }\n    } \n    ```", "```cs\n    public HomeTest()\n    {\n          Services.AddScoped<IBlogApi, BlogApiMock>();\n    } \n    ```", "```cs\n    Counter.razor \n    CounterCSharpTests.cs\n    CounterRazorTests.cs \n    ```", "```cs\n [Fact(DisplayName =\"Checks if log in is showed\")]\n    public void ShouldShowLogin()\n    {\n        // Arrange\nthis.AddTestAuthorization();\n        // Act\nvar cut = Render(@<LoginStatus />);\n\n        // Assert that there is a link with the text Log in\n        Assert.Equal(\"Log in\",cut.Find(\"a\").InnerHtml);\n    } \n```", "```cs\n [Fact(DisplayName =\"Checks if logout is showed\")]\n    public void ShouldShowLogout()\n    {\n        // Arrange\nvar authContext = this.AddTestAuthorization();\n        authContext.SetAuthorized(\"Testuser\", AuthorizationState.Authorized);\n        // Act\nvar cut = Render(@<LoginStatus />);\n\n        // Assert that there is a link with the text Log out\n        Assert.Equal(\"Log out\",cut.Find(\"a\").InnerHtml);\n    } \n```", "```cs\njsmodule = await jsRuntime.InvokeAsync<IJSObjectReference>(\"import\", \"/_content/SharedComponents/ReusableComponents/BlogButton.razor.js\");\nreturn await jsmodule.InvokeAsync<bool>(\"showConfirm\", ConfirmMessage); \n```", "```cs\nvar moduleInterop = this.JSInterop.SetupModule(\"/_content/SharedComponents/ReusableComponents/BlogButton.razor.js\");\n    var showconfirm = moduleInterop.Setup<bool>(\"showConfirm\", \"Are you sure?\").SetResult(true); \n```", "```cs\n@using Data.Models; @using SharedComponents.ReusableComponents;\n@inherits TestContext\n@code {\n    [Fact(DisplayName = \"Test if js method 'showConfirm' is called upon using JS interop\")]\n    public void ShouldShowConfirm()\n    {\n        // Arrange\nvar moduleInterop = this.JSInterop.SetupModule(\"/_content/SharedComponents/ReusableComponents/BlogButton.razor.js\");\n        moduleInterop.Setup<bool>(\"showConfirm\", \"Are you sure?\").SetResult(true);\n        var cut = Render(@<BlogButton OnClick=\"()=>{}\" ConfirmMessage=\"Are you sure?\"/>);\n        // Act\nvar buttons = cut.FindAll(\"button\");\n        buttons.First().Click();\n        // Assert\n        JSInterop.VerifyInvoke(\"showConfirm\");\n}\n} \n```", "```cs\n@inherits TestContext\n@using Bunit\n@using SharedComponents.ReusableComponents;\n@code\n    {\n        [Fact]\n        public void AlertTest()\n        {\n            //Arrange\n            SharedComponents.ReusableComponents.Alert/AlertStyle style = default!;\n            var cut = Render(@<Alert\n                  Style=\"@style\"\n                  >\n                  <ChildContent>\n<b>ChildContent fragment</b></ChildContent>\n                  </Alert>\n);\n            //Act\n//Assert\n        }\n    } \n```", "```cs\n[Fact]\n public void AlertStyleTest()\n {\n     //Arrange\n     Alert.AlertStyle style = Alert.AlertStyle.Primary;\n     var cut = Render(@<Alert Style=\"@style\">\n     <ChildContent>\n         <b>ChildContent fragment</b>\n     </ChildContent>\n </Alert>\n );\n     //Act\n//Assert\n     cut.MarkupMatches(\"\"\"<div class=\"alert alert-primary\" role=\"alert\"><b>ChildContent fragment</b></div>\"\"\");\n } \n```"]