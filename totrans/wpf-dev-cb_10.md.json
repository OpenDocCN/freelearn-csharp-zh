["```cs\n<Grid.RowDefinitions> \n    <RowDefinition Height=\"Auto\"/> \n    <RowDefinition Height=\"Auto\"/> \n    <RowDefinition Height=\"Auto\"/> \n    <RowDefinition Height=\"Auto\"/> \n    <RowDefinition Height=\"*\"/> \n</Grid.RowDefinitions>\n```", "```cs\n<TextBlock Text=\"Username:\" \n           Grid.Row=\"0\" \n           Margin=\"0 4 0 0\"/> \n<TextBlock Text=\"Password:\" \n           Grid.Row=\"2\" \n           Margin=\"0 4 0 0\"/> \n\n<TextBox x:Name=\"username\" \n         Grid.Row=\"1\"/> \n<TextBox x:Name=\"password\" \n         Grid.Row=\"3\"/> \n\n<StackPanel Orientation=\"Horizontal\" \n            HorizontalAlignment=\"Center\" \n            VerticalAlignment=\"Center\" \n            Grid.Row=\"4\"> \n    <Button Content=\"Login\"/> \n    <Button Content=\"Cancel\"/> \n</StackPanel> \n```", "```cs\n<Window.Resources> \n    <Style TargetType=\"TextBox\"> \n        <Setter Property=\"Height\" \n                Value=\"24\"/> \n    </Style> \n\n    <Style TargetType=\"Button\"> \n        <Setter Property=\"Margin\" \n                Value=\"4\"/> \n        <Setter Property=\"Width\" \n                Value=\"60\"/> \n        <Setter Property=\"Height\" \n                Value=\"30\"/> \n    </Style> \n</Window.Resources>\n```", "```cs\n<Window x:Class=\"CH10.LivePropertyExplorerDemo.MainWindow\" \n\n        Title=\"Live Property Explorer Demo\" Height=\"150\" Width=\"400\"> \n    <Grid> \n        <Button x:Name=\"myButton\" \n                Content=\"Click here\"/> \n    </Grid> \n</Window> \n```", "```cs\n<Button x:Name=\"myButton\" \n        Content=\"Click here\" \n        Height=\"30\" \n        Width=\"200\" \n        FontSize=\"18\" \n        FontWeight=\"Bold\" \n        Foreground=\"Red\"> \n    <Button.Background> \n        <LinearGradientBrush> \n            <GradientStop Color=\"#FFFF5454\"  \n                          Offset=\"0\"/> \n            <GradientStop Color=\"#FFFFF754\"  \n                          Offset=\"0.3\"/> \n            <GradientStop Color=\"#FFFFF754\"  \n                          Offset=\"0.8\"/> \n            <GradientStop Color=\"#FFFF5454\"  \n                          Offset=\"1\"/> \n        </LinearGradientBrush> \n    </Button.Background> \n</Button> \n```", "```cs\n<Grid Margin=\"10\"> \n    <Grid.RowDefinitions> \n        <RowDefinition Height=\"Auto\"/> \n        <RowDefinition Height=\"Auto\"/> \n        <RowDefinition Height=\"Auto\"/> \n    </Grid.RowDefinitions> \n    <StackPanel Orientation=\"Horizontal\" \n                Grid.Row=\"0\" \n                Margin=\"4\"> \n        <TextBlock Text=\"From:\" \n                   Margin=\"4\"/> \n        <TextBox x:Name=\"fromValue\" \n                 Text=\"100\" \n                 Width=\"100\" \n                 MaxLength=\"10\" \n                 Margin=\"4\"/> \n\n        <TextBlock Text=\"To:\" \n                   Margin=\"4\"/> \n        <TextBox x:Name=\"toValue\" \n                 Text=\"1000000000\" \n                 Width=\"100\" \n                 MaxLength=\"10\" \n                 Margin=\"4\"/> \n\n        <Button x:Name=\"calculateButton\" \n                Content=\"Calculate\" \n                Margin=\"4\" \n                Padding=\"8 2\" \n                Click=\"OnCalculateClicked\"/> \n    </StackPanel> \n\n    <TextBlock x:Name=\"oddResultBlock\" \n               Grid.Row=\"1\" \n               Text=\"Total odd numbers: 0\" \n               Margin=\"4\"/> \n\n    <TextBlock x:Name=\"evenResultBlock\" \n               Grid.Row=\"2\" \n               Text=\"Total even numbers: 0\" \n               Margin=\"4\"/> \n</Grid> \n```", "```cs\nprivate int totalOdd = 0; \nprivate int totalEven = 0;\n```", "```cs\nprivate void CalculateOddEven(int from, int to) \n{ \n    for (int i = from; i <= to; i++) \n    { \n        if (i % 2 == 0) { totalEven++; } \n        else { totalOdd++; } \n    } \n} \n```", "```cs\nprivate void OnCalculateClicked(object sender,  \n                        RoutedEventArgs e) \n{ \n    totalOdd = 0; \n    totalEven = 0; \n\n    if (int.TryParse(fromValue.Text, out int from) && \n        int.TryParse(toValue.Text, out int to)) \n    { \n        calculateButton.IsEnabled = false; \n\n        CalculateOddEven(from, to); \n\n        oddResultBlock.Text = \"Total odd numbers: \" +  \n                               totalOdd; \n        evenResultBlock.Text = \"Total even numbers: \" +  \n                                totalEven; \n        calculateButton.IsEnabled = true; \n    } \n}\n```", "```cs\nThreadPool.QueueUserWorkItem(_ => \n{ \n    CalculateOddEven(from, to); \n}); \n```", "```cs\nThreadPool.QueueUserWorkItem(_ => \n{ \n    CalculateOddEven(from, to); \n\n    Dispatcher.BeginInvoke(new Action(() => \n    { \n        oddResultBlock.Text = \"Total odd numbers: \" +  \n                               totalOdd; \n        evenResultBlock.Text = \"Total even numbers: \" +  \n                                totalEven; \n        calculateButton.IsEnabled = true; \n    })); \n}); \n```", "```cs\n<Button x:Name=\"cancelButton\" \n        Content=\"Cancel\" \n        IsEnabled=\"False\" \n        Margin=\"4\" \n        Padding=\"8 2\" \n        Click=\"OnCancelClicked\"/> \n```", "```cs\nprivate CancellationTokenSource tokenSource = null; \n```", "```cs\nprivate void OnCancelClicked(object sender,  \n                             RoutedEventArgs e) \n{ \n    if (tokenSource != null) \n    { \n        tokenSource.Cancel(); \n        tokenSource = null; \n    } \n} \n```", "```cs\nprivate void CalculateOddEven(int from,  \n                              int to,  \n                              CancellationToken token)\n```", "```cs\nfor (int i = from; i <= to; i++) \n{ \n    if (token.IsCancellationRequested) \n    { \n        totalOdd = -1; \n        totalEven = -1; \n        return; \n    } \n```", "```cs\nprivate void CalculateOddEven(int from,  \n                              int to,  \n                              CancellationToken token) \n{ \n    for (int i = from; i <= to; i++) \n    { \n        if (token.IsCancellationRequested) \n        { \n            totalOdd = -1; \n            totalEven = -1; \n            return; \n        } \n\n        if (i % 2 == 0) { totalEven++; } \n        else { totalOdd++; } \n    } \n} \n```", "```cs\ntokenSource = new CancellationTokenSource(); \nThreadPool.QueueUserWorkItem(_ => \n{ \n    CalculateOddEven(from, to, tokenSource.Token); \n\n    Dispatcher.BeginInvoke(new Action(() => \n    { \n        if (totalOdd < 0 || totalEven < 0) \n        { \n            oddResultBlock.Text = \"Operation canceled!\"; \n            evenResultBlock.Text = string.Empty; \n        } \n        else \n        { \n            oddResultBlock.Text = \"Total odd numbers: \" +  \n                                   totalOdd; \n            evenResultBlock.Text = \"Total even numbers: \" +  \n                                    totalEven; \n        } \n\n        calculateButton.IsEnabled = true; \n        cancelButton.IsEnabled = false; \n    })); \n}); \n```", "```cs\nprivate void OnCalculateClicked(object sender,  \n  RoutedEventArgs e) \n{ \n    totalOdd = 0; \n    totalEven = 0; \n\n    if (int.TryParse(fromValue.Text, out int from) && \n        int.TryParse(toValue.Text, out int to)) \n    { \n        calculateButton.IsEnabled = false; \n\n        var worker = new BackgroundWorker(); \n        worker.DoWork += OnWorker_DoWork; \n        worker.RunWorkerCompleted +=  \n                        OnWorker_WorkCompleted; \n        worker.RunWorkerAsync(new Tuple<int, int>(from, to)); \n    } \n} \n```", "```cs\nprivate void OnWorker_DoWork(object sender,  \n   DoWorkEventArgs e) \n{ \n    var argument = (Tuple<int, int>)e.Argument; \n    CalculateOddEven(argument.Item1, argument.Item2); \n} \n```", "```cs\nprivate void OnWorker_WorkCompleted(object sender,  \n RunWorkerCompletedEventArgs e) \n{ \n    if (sender is BackgroundWorker worker) \n    { \n        worker.RunWorkerCompleted -=  \n         OnWorker_WorkCompleted; \n        worker.DoWork -= OnWorker_DoWork; \n        worker = null; \n    } \n\n    oddResultBlock.Text = \"Total odd numbers: \" +  \n      totalOdd; \n    evenResultBlock.Text = \"Total even numbers: \" +  \n      totalEven; \n\n    calculateButton.IsEnabled = true; \n}\n```", "```cs\n<Grid.RowDefinitions> \n    <RowDefinition Height=\"*\"/> \n    <RowDefinition Height=\"20\"/> \n    <RowDefinition Height=\"Auto\"/> \n</Grid.RowDefinitions> \n```", "```cs\n<TextBlock x:Name=\"clock\" \n           Grid.Row=\"0\" \n           Text=\"00:00:00\" \n           FontSize=\"80\" \n           HorizontalAlignment=\"Center\" \n           VerticalAlignment=\"Center\"/> \n```", "```cs\n<StackPanel Grid.Row=\"2\" \n            Margin=\"10\" \n            Orientation=\"Horizontal\" \n            HorizontalAlignment=\"Center\" \n            VerticalAlignment=\"Center\"> \n    <Button x:Name=\"startButton\" \n            Content=\"Start\" \n            Margin=\"4\" \n            Height=\"26\" \n            Width=\"100\" \n            Click=\"OnStartTimer\"/> \n    <Button x:Name=\"stopButton\" \n            Content=\"Stop\" \n            Margin=\"4\" \n            Height=\"26\" \n            Width=\"100\" \n            IsEnabled=\"False\" \n            Click=\"OnStopTimer\"/> \n</StackPanel> \n```", "```cs\nusing System; \nusing System.Windows; \nusing System.Windows.Threading; \n```", "```cs\nprivate DispatcherTimer dispatcherTimer = null; \n```", "```cs\npublic MainWindow() \n{ \n    InitializeComponent(); \n\n    dispatcherTimer = new DispatcherTimer(); \n    dispatcherTimer.Interval = TimeSpan.FromSeconds(1.0); \n    dispatcherTimer.Tick += OnTimerTick; \n} \n```", "```cs\nprivate void OnTimerTick(object sender,  \n EventArgs e) \n{ \n    clock.Text = DateTime.Now.ToString(\"hh:mm:ss\"); \n} \n```", "```cs\nprivate void OnStartTimer(object sender,  \n RoutedEventArgs e) \n{ \n    if (dispatcherTimer != null) \n    { \n        dispatcherTimer.Start(); \n\n        startButton.IsEnabled = false; \n        stopButton.IsEnabled = true; \n    } \n} \n```", "```cs\nprivate void OnStopTimer(object sender,  \n RoutedEventArgs e) \n{ \n    if (dispatcherTimer != null) \n    { \n        dispatcherTimer.Stop(); \n\n        startButton.IsEnabled = true; \n        stopButton.IsEnabled = false; \n    } \n} \n```"]