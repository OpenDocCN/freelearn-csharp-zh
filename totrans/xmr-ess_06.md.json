["```cs\n    public string DataDir { get; set; }\n    . . .\n    protected string GetFilename()\n    {\n        return Path.Combine (DataDir, \"NationalParks.json\");\n    }\n    ```", "```cs\n    public void Load()\n    {\n      if (File.Exists (GetFilename())) {\n        string serializedParks =\n            File.ReadAllText (GetFilename());\n            _parks = JsonConvert.DeserializeObject\n                <List<NationalPark>> (serializedParks);\n      }\n      else\n      _parks = new List<NationalPark> ();\n    }\n    ```", "```cs\n     NationalParksData.Instance.DataDir =\n         System.Environment.GetFolderPath (\n            System.Environment.SpecialFolder.MyDocuments);\n    NationalParksData.Instance.Load ();\n    ```", "```cs\n    NationalParksData.Instance.DataDir =\n        Environment.CurrentDirectory;\n    NationalParksData.Instance.Load ();\n    ```", "```cs\n    private void DoneClicked (object sender, EventArgs e)\n    {\n        ToPark ();\n        NationalParksData.Instance.Save (_park);\n        NavigationController.PopViewControllerAnimated (true);\n    }\n    ```", "```cs\n    partial void DeleteClicked (UIButton sender)\n    {\n        NationalParksData.Instance.Delete(_park);\n       NavigationController.PopToRootViewController(true);\n    }\n    ```", "```cs\n    public interface IFileHandler\n    {\n        bool FileExists (string filename);\n        Task<string> ReadAllText (string filename);\n        Task WriteAllText (string filename, string content);\n    }\n    ```", "```cs\n    public IFileHandler FileHandler { get; set; }\n    . . .\n    public async Task Load()\n    {\n      if (FileHandler.FileExists (GetFilename())) {\n        string serializedParks =\n          await FileHandler.ReadAllText (GetFilename());\n      Parks = JsonConvert.DeserializeObject\n              <List<NationalPark>> (serializedParks);\n      }\n      . . .\n    }\n    . . .\n    public Task Save(NationalPark park)\n    {\n      . . .\n      return FileHandler.WriteAllText (\n        GetFilename (), serializedParks);\n    }\n    public Task Delete(NationalPark park)\n    {\n      . . .\n      return FileHandler.WriteAllText (\n        GetFilename (), serializedParks);\n    }\n    ```", "```cs\n    #region IFileHandler implementation\n    public bool FileExists (string filename)\n    {\n        return File.Exists (filename);\n    }\n    public async Task<string> ReadAllText (string filename)\n    {\n        using (StreamReader reader =\n            File.OpenText(filename)) {\n            return await reader.ReadToEndAsync();\n        }\n    }\n    public async Task WriteAllText (string filename,\n        string content)\n    {\n        using (StreamWriter writer =\n            File.CreateText (filename)) {\n            await writer.WriteAsync (content);\n        }\n    }\n    #endregion\n    ```", "```cs\n    _adapter = new NationalParksAdapter (this);\n    NationalParksData.Instance.FileHandler =\n        new FileHandler ();\n    NationalParksData.Instance.DataDir =\n      System.Environment.GetFolderPath (\n          System.Environment.SpecialFolder.MyDocuments);\n    await NationalParksData.Instance.Load ();\n    ```", "```cs\n    protected override void OnResume ()\n    {\n       basse.OnResume ();\n       if (_adapter != null)\n           _adapter.NotifyDataSetChanged ();\n    }\n    ```", "```cs\n    NationalParksData.Instance.FileHandler =\n        new FileHandler ();\n    NationalParksData.Instance.DataDir = \n        Environment.CurrentDirectory;\n    await NationalParksData.Instance.Load ();\n    TableView.Source = dataSource = new DataSource (this);\n    TableView.ReloadData ();\n    ```"]