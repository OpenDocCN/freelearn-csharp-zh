- en: '4'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '4'
- en: Managing NoSQL Data Using Azure Cosmos DB
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Azure Cosmos DB 管理NoSQL数据
- en: This chapter is about managing NoSQL data by using Azure Cosmos DB. You will
    learn about some of the key concepts of Cosmos DB like its APIs, ways to model
    your data, and throughput provisioning, which influences costs. You will create
    some Cosmos DB resources using the local emulator and in the Azure cloud. Then
    you will learn how to work with more traditional data using the Core (SQL) API.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍如何使用Azure Cosmos DB管理NoSQL数据。您将了解Cosmos DB的一些关键概念，如其API、数据建模方式以及吞吐量配置，这些都会影响成本。您将使用本地模拟器和Azure云创建一些Cosmos
    DB资源。然后您将学习如何使用Core（SQL）API处理更传统的数据。
- en: In an optional online-only section, you can learn how to work with graph data
    using the Gremlin API.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个可选的在线部分，您可以学习如何使用Gremlin API处理图数据。
- en: 'This chapter will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Understanding NoSQL databases
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解NoSQL数据库
- en: Creating Cosmos DB resources
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 Cosmos DB 资源
- en: Manipulating data with the Core (SQL) API
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Core（SQL）API操作数据
- en: Exploring server-side programming
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索服务器端编程
- en: Cleaning up Azure resources
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清理 Azure 资源
- en: Understanding NoSQL databases
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解NoSQL数据库
- en: Two of the most common places to store data are in a **Relational Database Management
    System** (**RDBMS**) such as SQL Server, PostgreSQL, MySQL, and SQLite, or in
    a **NoSQL** database such as Azure Cosmos DB, Redis, MongoDB, and Apache Cassandra.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 存储数据的两个最常见地方是在关系数据库管理系统（RDBMS）中，如SQL Server、PostgreSQL、MySQL和SQLite，或者是在NoSQL数据库中，如Azure
    Cosmos DB、Redis、MongoDB和Apache Cassandra。
- en: Relational databases were invented in the 1970s. They are queried with **Structured
    Query Language** (**SQL**). At the time, data storage costs were high, so they
    reduced data duplication as much as possible via a process known as *normalization*.
    Data is stored in tabular structures with rows and columns that are tricky to
    refactor once in production. They can be difficult and expensive to scale.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 关系数据库是在20世纪70年代发明的。它们使用**结构化查询语言**（SQL）进行查询。当时，数据存储成本很高，因此它们通过称为*规范化*的过程尽可能减少数据冗余。数据存储在具有行和列的表格结构中，一旦在生产中重构就变得复杂。它们可能难以扩展且成本高昂。
- en: NoSQL databases do not just mean “no SQL;” they can also mean “not only SQL.”
    They were invented in the 2000s, after the internet and the web had become popular
    and adopted much of the learning from that era of software.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: NoSQL数据库不仅仅意味着“非SQL”，它们也可以意味着“不仅SQL”。它们是在2000年代发明的，在互联网和万维网变得流行并采纳了那个时代软件的许多学习成果之后。
- en: They are designed for massive scalability and high performance, and to make
    programming easier by providing maximum flexibility and allowing schema changes
    at any time because they do not enforce a structure.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 它们被设计用于大规模可扩展性和高性能，通过提供最大灵活性和允许随时进行模式更改（因为它们不强制执行结构）来简化编程。
- en: Cosmos DB and its APIs
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Cosmos DB及其API
- en: Azure Cosmos DB is a NoSQL data store that supports multiple APIs. Its native
    API is SQL-based. It also supports alternative APIs like MongoDB, Cassandra, and
    Gremlin.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Cosmos DB是一个支持多个API的NoSQL数据存储。其原生API基于SQL。它还支持MongoDB、Cassandra和Gremlin等替代API。
- en: 'Azure Cosmos DB stores data in **atom-record-sequence** (**ARS**) format. You
    interact with this data via an API that you choose when you create the database:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Cosmos DB以**原子记录序列**（ARS）格式存储数据。您可以通过在创建数据库时选择的API与这些数据交互：
- en: 'The **API for MongoDB** supports recent MongoDB wire protocol versions, which
    allow existing clients to work with the data as if they are interacting with an
    actual MongoDB database. Tools like `mongodump` and `mongorestore` can be used
    to move any existing data into Azure Cosmos DB. You can check the latest MongoDB
    support at the following link: [https://learn.microsoft.com/en-us/azure/cosmos-db/mongodb/mongodb-introduction#how-the-api-works](https://learn.microsoft.com/en-us/azure/cosmos-db/mongodb/mongodb-introduction#how-the-api-works).'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MongoDB API**支持最新的MongoDB线协议版本，允许现有客户端像与实际的MongoDB数据库交互一样处理数据。可以使用`mongodump`和`mongorestore`等工具将任何现有数据移动到Azure
    Cosmos DB。您可以在以下链接中查看最新的MongoDB支持：[https://learn.microsoft.com/en-us/azure/cosmos-db/mongodb/mongodb-introduction#how-the-api-works](https://learn.microsoft.com/en-us/azure/cosmos-db/mongodb/mongodb-introduction#how-the-api-works)。'
- en: The **API for Cassandra** supports the **Cassandra Query Language** (**CQL**)
    wire protocol version 4, which allows existing clients to work with the data as
    if they are interacting with an actual Cassandra database.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Cassandra API**支持Cassandra查询语言（CQL）线协议版本4，允许现有客户端像与实际的Cassandra数据库交互一样处理数据。'
- en: For a new project, sometimes known as a “green field” project, Microsoft recommends
    the **Core (SQL) API**.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于一个新项目，有时被称为“绿地”项目，Microsoft建议使用**Core（SQL）API**。
- en: For existing projects that use alternative APIs, you could choose to use the
    appropriate API so that your clients and tools do not need to be updated while
    gaining the benefits of data stored in Azure Cosmos DB. This reduces migration
    costs.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于使用替代API的现有项目，您可以选择使用适当的API，这样您的客户端和工具就不需要更新，同时获得存储在Azure Cosmos DB中的数据的好处。这降低了迁移成本。
- en: If the relationships between data items have metadata that needs analyzing,
    then using the **Gremlin API for Cosmos DB** to treat Cosmos DB as a graph data
    store is a good choice.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果数据项之间的关系具有需要分析的元数据，那么使用**Cosmos DB的Gremlin API**将Cosmos DB作为图数据存储来处理是一个不错的选择。
- en: '**Good Practice**: If you are unsure which API to choose, select Core (SQL)
    as the default.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：如果您不确定要选择哪个API，请选择默认的Core（SQL）。'
- en: In this book, we will first use the native Core (SQL) API for Cosmos DB. This
    allows the developer to query JSON documents using a language like SQL. The Core
    (SQL) API uses JSON’s type system and JavaScript’s function system.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我们将首先使用Cosmos DB的本地Core（SQL）API。这允许开发人员使用像SQL这样的语言查询JSON文档。Core（SQL）API使用JSON的类型系统和JavaScript的函数系统。
- en: Document modeling
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文档建模
- en: 'A typical JSON document representing a product from the Northwind database,
    the example database that we used in *Chapter 2*, *Managing Relational Data Using
    SQL Server*, when stored in Azure Cosmos DB might look like the following:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 一个典型的JSON文档，代表来自Northwind数据库的产品，这是我们用于*第2章*，*使用SQL Server管理关系数据*的示例数据库，当存储在Azure
    Cosmos DB中时可能看起来如下：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Unlike with a relational database model, it is common to **embed** related data,
    which involves duplicating data such as the category and supplier information
    across multiple products. This is good practice if the related data is bounded.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 与关系数据库模型不同，嵌入相关数据是常见的，这涉及到在多个产品中重复数据，如类别和供应商信息。如果相关数据是有限的，这是一种良好的实践。
- en: For example, for a product, there will only ever be one supplier and one category,
    so those relationships are bounded to one, which means limited to one each. If
    we were modeling a category and decided to embed its related products, then that
    could be poor practice because having all the product details as an array would
    be unbounded. Instead, we might choose to only store a unique identifier for each
    product and reference the product details stored elsewhere.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，对于一个产品，将只有一个供应商和一个类别，所以这些关系被限制为只有一个，这意味着每个都是有限的。如果我们正在模拟一个类别并决定嵌入其相关产品，那么这可能是不良实践，因为将所有产品细节作为一个数组存储将是无界的。相反，我们可能选择只为每个产品存储一个唯一的标识符，并引用存储在其他地方的产品详情。
- en: You should also consider how frequently the related data is updated. The more
    frequently it needs to be updated, the more you should avoid embedding it. If
    related data is unbounded but infrequently updated, then embedding might still
    be a good choice.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 您还应该考虑相关数据更新的频率。需要更新的频率越高，您就越应该避免嵌入。如果相关数据是无界的但更新频率较低，那么嵌入可能仍然是一个不错的选择。
- en: Deliberately but carefully **denormalizing** parts of your data model implies
    that you will need to execute fewer queries and updates for common operations,
    reducing costs both in money and performance.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 故意但谨慎地**非规范化**数据模型的部分意味着您将需要执行更少的查询和更新以进行常见操作，从而在金钱和性能方面降低成本。
- en: 'Use embedding (denormalized data) when:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下情况下使用嵌入（非规范化数据）：
- en: The relationships are contained, like property owned by a person, or the children
    of a parent.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关系是包含的，就像人拥有的财产，或者父母的子女。
- en: The relationships are one-to-one or one-to-few, i.e., the related data is bounded.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关系是一对一或一对少数，即相关数据是有限的。
- en: The related data needs infrequent updates.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 相关数据需要不频繁的更新。
- en: The related data often or always needs to be included in query results.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 相关数据通常或总是需要包含在查询结果中。
- en: '**Good Practice**: Denormalized data models provide better read performance
    but worse write performance.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：非规范化数据模型提供了更好的读取性能，但写入性能较差。'
- en: Imagine that you want to model an article and its comments on a popular news
    website. The comments are unbounded and, for an engaging article, would frequently
    be added to, especially during the hours or days after it is published while it
    is topical news. Or imagine an investor with stock they trade. The current price
    of that stock would be frequently updated.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，你想要在流行的新闻网站上对一篇文章及其评论进行建模。评论数量是不受限制的，对于一篇引人入胜的文章，评论通常会频繁添加，尤其是在发布后的数小时或数天内，尤其是当它是时事新闻时。或者想象一个进行股票交易的投资者。该股票的当前价格会频繁更新。
- en: In these scenarios, you would want to **normalize** the related data either
    wholly or partially. For example, you could choose to embed the most liked comments
    that will be shown at the top of the list directly under the article. Other comments
    could be stored separately and referenced using their primary keys. You could
    choose to embed stock information for long-term investments that are held for
    many years, like the price the investment was purchased at and the price on the
    first day of each month since then (but not the live current price), but reference
    stock information for short-term investments for day trading.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些场景中，你可能希望完全或部分地**标准化**相关数据。例如，你可以选择将最被喜欢的评论直接嵌入到文章顶部显示，其他评论可以单独存储并使用它们的主键进行引用。你可以选择嵌入长期投资（如持有多年的投资）的股票信息，如购买时的价格和自那时起每月第一天的价格（但不包括实时当前价格），但对于短期投资（如日内交易）则引用股票信息。
- en: 'Use referencing (normalized data) when:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下情况下使用引用（标准化数据）：
- en: The relationships are one-to-many or many-to-many and unbounded.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关系是一对多或多对多，且数量不受限制。
- en: The related data needs frequent updates.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 相关数据需要频繁更新。
- en: '**Good Practice**: Normalized data models require more queries, which worsens
    read performance but provides better write performance.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：标准化数据模型需要更多的查询，这会降低读取性能但提供更好的写入性能。'
- en: 'You can read more about modeling documents in Azure Cosmos DB at the following
    link: [https://learn.microsoft.com/en-us/azure/cosmos-db/sql/modeling-data](https://learn.microsoft.com/en-us/azure/cosmos-db/sql/modeling-data).'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在以下链接中了解更多关于在Azure Cosmos DB中建模文档的信息：[https://learn.microsoft.com/en-us/azure/cosmos-db/sql/modeling-data](https://learn.microsoft.com/en-us/azure/cosmos-db/sql/modeling-data)。
- en: Consistency levels
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一致性级别
- en: Azure Cosmos DB is distributed globally and scales elastically. It relies on
    replication to provide low latency and high availability all over the world. To
    achieve this, you must accept and choose tradeoffs.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Cosmos DB是全球分布且可弹性扩展的。它依赖于复制来提供全球范围内的低延迟和高可用性。为了实现这一点，你必须接受并选择权衡。
- en: To ease the life of a programmer, you want total consistency of data. If data
    is modified anywhere in the world, then any subsequent read operation should see
    that change. The best consistency is known as **linearizability**. Linearizability
    increases the latency of write operations and reduces the availability of read
    operations because it must wait for replication to occur globally.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让程序员的编程生活更轻松，你希望数据具有完全的一致性。如果数据在世界上的任何地方被修改，那么任何后续的读取操作都应该看到这个变化。最佳的一致性被称为**线性化**。线性化增加了写入操作的延迟并减少了读取操作的可用性，因为它必须等待全局复制完成。
- en: A more relaxed consistency level improves latency and availability at the cost
    of potentially increased complexity for the programmer because data might be inconsistent.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 更宽松的一致性级别可以提高延迟和可用性，但可能会增加程序员的复杂性，因为数据可能不一致。
- en: 'Most NoSQL databases only offer two levels of consistency: strong and eventual.
    Azure Cosmos DB offers five to provide exactly the level of consistency that suits
    your project.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数NoSQL数据库只提供两种一致性级别：强一致性和最终一致性。Azure Cosmos DB提供五种，以提供适合你项目的确切一致性级别。
- en: 'You choose the level of data consistency, and this will be guaranteed by the
    **Service-Level Agreement** (**SLA**), as shown in the following, ordered from
    the strongest to the weakest:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 你选择数据的一致性级别，这将由以下**服务级别协议**（**SLA**）保证，按从最强到最弱排序：
- en: '**Strong** consistency guarantees linearizability across all regions globally.
    All other consistency levels are collectively known as “relaxed.” You might ask,
    “Why not set Strong consistency in all scenarios?” If you are familiar with relational
    databases, then you should be familiar with transaction isolation levels. These
    are similar conceptually to NoSQL consistency levels. The strongest level of transaction
    isolation level is `SERIALIZABLE`. Weaker levels include `READUNCOMMITTED` and
    `REPEATABLE READ`. You would not want to use `SERIALIZABLE` in all scenarios for
    the same reason you wouldn’t want to use Strong consistency in all scenarios.
    They both slow down operations, and sometimes, to an unacceptable point. Your
    users will complain about a lack of performance, or even an inability to perform
    a task at all. So, you need to look carefully at each task you are attempting
    and determine the minimal required level for that task. Some developers prefer
    to default to the strongest level and weaken it for scenarios that are “too slow.”
    Other developers prefer to default to the weakest level and strengthen it for
    scenarios that introduce too much inconsistency. As you become more familiar with
    NoSQL development, you will be able to judge quicker what level is best for different
    scenarios.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**强**一致性保证了全球所有区域内的线性化。所有其他一致性级别统称为“宽松”。您可能会问：“为什么不在所有场景中都设置强一致性？”如果您熟悉关系数据库，那么您应该熟悉事务隔离级别。这些在概念上类似于NoSQL一致性级别。事务隔离级别的最强级别是`SERIALIZABLE`。较弱的级别包括`READUNCOMMITTED`和`REPEATABLE
    READ`。您不会想在所有场景中都使用`SERIALIZABLE`，原因与您不会想在所有场景中都使用强一致性的原因相同。它们都会减慢操作，有时甚至达到无法接受的程度。您的用户会抱怨性能不足，甚至无法执行任务。因此，您需要仔细查看您尝试执行的任务，并确定该任务所需的最小级别。一些开发者更喜欢默认为最强级别，并在“太慢”的场景中降低级别。其他开发者更喜欢默认为最弱级别，并在引入太多不一致性的场景中加强级别。随着您对NoSQL开发的熟悉程度提高，您将能够更快地判断不同场景的最佳级别。'
- en: '**Bounded staleness** consistency guarantees the ability to read your own write
    within the write region, monotonic read within the region (meaning the values
    do not increase or decrease, like a monotone voice, and remain in a consistent
    order), and consistent prefix, and the staleness of read data is restricted to
    a specific number of versions for which the reads lag behind the writes within
    a specified time interval. For example, the time interval might be ten minutes
    and the number of versions might be three. That would mean that a maximum of three
    writes can be made in any ten-minute period before a read operation must reflect
    those changes.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**有界不新鲜**一致性保证了在写入区域中读取自己的写入、区域内的单调读取（意味着值不会增加或减少，就像单调的声音一样，并保持一致顺序），以及一致前缀，并且读取数据的不新鲜度被限制在特定数量的版本上，这些版本在指定的时间间隔内落后于写入。例如，时间间隔可能是十分钟，版本数可能是三个。这意味着在任何十分钟内最多可以进行三次写入，然后读取操作必须反映这些更改。'
- en: '**Session** consistency guarantees the ability to read your own write within
    the write region, monotonic read, and consistent prefix.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**会话**一致性保证了在写入区域中读取自己的写入、单调读取和一致前缀的能力。'
- en: '**Consistent prefix** consistency only guarantees the order that writes can
    then be read.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一致前缀**一致性仅保证写入可以被读取的顺序。'
- en: '**Eventual** consistency does not guarantee that the order of writes will match
    the order of reads. When writes pause, reads will eventually catch up as the replicas
    synchronize. It is possible for a client to read values older than the ones it
    read before. **Probabilistic Bounded Staleness** (**PBS**) is a measurement that
    shows how eventual your consistency is currently. You can monitor it in the Azure
    portal.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最终**一致性不保证写入的顺序将与读取的顺序匹配。当写入暂停时，随着副本同步，读取最终会赶上。客户端可能读取到比之前读取的值更旧的值。**概率有界不新鲜**（**PBS**）是一个衡量当前一致性最终性的度量。您可以在Azure门户中监控它。'
- en: 'You can read more details about consistency levels at the following link: [https://learn.microsoft.com/en-us/azure/cosmos-db/consistency-levels](https://learn.microsoft.com/en-us/azure/cosmos-db/consistency-levels).'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以在以下链接中了解更多有关一致性级别的详细信息：[https://learn.microsoft.com/en-us/azure/cosmos-db/consistency-levels](https://learn.microsoft.com/en-us/azure/cosmos-db/consistency-levels).
- en: Hierarchy of components
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组件层次结构
- en: 'The hierarchy of components for Azure Cosmos DB is:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Cosmos DB的组件层次结构如下：
- en: '**Account**: You can create up to 50 accounts via the Azure portal.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**账户**：您可以通过Azure门户创建最多50个账户。'
- en: '**Database**: You can have an unlimited number of databases per account. We
    will create a database named `Northwind`.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据库**：每个账户可以有无限数量的数据库。我们将创建一个名为`Northwind`的数据库。'
- en: '**Container**: You can have an unlimited number of containers per database.
    We will create a container named `Products`.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**容器**：每个数据库可以有无限数量的容器。我们将创建一个名为`Products`的容器。'
- en: '**Partition**: These are created and managed automatically within a container,
    and you can have an unlimited number. Partitions are either logical or physical.
    A **logical partition** contains items with the same partition key and defines
    the scope for transactions. Multiple logical partitions are mapped to a **physical
    partition**. Small containers may only need one physical partition. You should
    not concern yourself with physical partitions since you have no control over them.
    Focus on deciding what your partition key should be because that defines the items
    stored in a logical partition.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分区**：这些是在容器内自动创建和管理的，并且您可以有无限多个。分区可以是逻辑的或物理的。一个**逻辑分区**包含具有相同分区键的项目，并定义了事务的作用域。多个逻辑分区映射到一个**物理分区**。小型容器可能只需要一个物理分区。您不需要担心物理分区，因为您无法控制它们。关注决定您的分区键应该是什么，因为这定义了存储在逻辑分区中的项目。'
- en: '**Item**: This is a stored entity in a container. We will add items that represent
    each product, like Chai tea.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Item**：这是容器中存储的实体。我们将添加代表每个产品的项目，例如奶茶。'
- en: '“Item” is a deliberately generic term and is used by the Core (SQL) API to
    refer to a JSON document but can also be used for the other APIs. The other APIs
    also have their own more specific terms:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: “Item”是一个故意通用的术语，由Core（SQL）API用来指代JSON文档，但也可以用于其他API。其他API也有它们自己的更具体的术语：
- en: Cassandra uses **row**.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cassandra使用**行**。
- en: MongoDB uses **document**.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MongoDB使用**文档**。
- en: Graph databases like Gremlin use **vertex** and **edge**.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类似于Gremlin的图数据库使用**顶点**和**边**。
- en: Throughput provisioning
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 带宽配置
- en: Throughput is measured as **request units per second** (**RU/s**). A single
    **request unit** (**RU**) is about the cost of performing a `GET` request for
    a 1KB document using its unique identifier. Creating, updating, and deleting cost
    more RUs; for example, a query might cost 46.54 RUs, or a delete operation might
    cost 14.23 RUs.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 带宽以**每秒请求单位**（**RU/s**）来衡量。单个**请求单位**（**RU**）大约是使用其唯一标识符对1KB文档执行`GET`请求的成本。创建、更新和删除的成本更高RU；例如，一个查询可能成本46.54
    RU，或者一个删除操作可能成本14.23 RU。
- en: Throughput must be provisioned in advance, although you can scale up and down
    at any time in increments or decrements of 100 RU/s. You will be billed per hour.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 带宽必须在事先进行配置，尽管您可以在任何时间以100 RU/s的增量或减量进行上下调整。您将按小时计费。
- en: 'You can discover how much a request costs in RUs by getting the `RequestCharge`
    property. You can learn more at the following link: [https://learn.microsoft.com/en-us/azure/cosmos-db/sql/find-request-unit-charge](https://learn.microsoft.com/en-us/azure/cosmos-db/sql/find-request-unit-charge).
    We will output this property in all the example code that we run in this chapter.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过获取`RequestCharge`属性来发现一个请求在RU（请求单位）中的成本。您可以在以下链接中了解更多信息：[https://learn.microsoft.com/en-us/azure/cosmos-db/sql/find-request-unit-charge](https://learn.microsoft.com/en-us/azure/cosmos-db/sql/find-request-unit-charge)。在本章中运行的示例代码中，我们将输出此属性。
- en: You must provision throughput to run CRUD operations (creates, reads, updates,
    and deletes). You must estimate throughput by calculating the number of operations
    you’ll need to support throughout the year. For example, a commerce website might
    need to expect much greater throughput at Thanksgiving in the US or Singles Day
    in China.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须配置带宽以运行CRUD操作（创建、读取、更新和删除）。您必须通过计算您需要支持的年度操作数量来估计带宽。例如，一个电子商务网站可能需要在美国的感恩节或中国的光棍节预期更大的带宽。
- en: Most throughput settings are applied at the container level, or you can do so
    at the database level and have the settings shared across all containers. Throughput
    is distributed equally among partitions.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数带宽设置都是在容器级别应用的，或者您也可以在数据库级别进行，并将设置共享到所有容器中。带宽在分区之间平均分配。
- en: Once provisioned throughput is exhausted, Cosmos DB will start rate-limiting
    access requests, and your code will have to wait and retry later. Luckily, we
    will use the .NET SDK for Cosmos DB, which automatically reads the `retry-after`
    response header and retries after that time limit.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦配置的带宽耗尽，Cosmos DB将开始对访问请求进行速率限制，并且您的代码将不得不等待并稍后重试。幸运的是，我们将使用Cosmos DB的.NET
    SDK，它将自动读取`retry-after`响应头并在该时间限制之后重试。
- en: Using the Azure portal, you can provision between 400 RU/s and 250,000 RU/s.
    At the time of writing, the 400 RU/s minimum would cost about US$35 per month.
    You would then also need to add the cost of storage depending on how many GBs
    you want to store, for example, US$5 for a few GBs.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Azure门户，您可以在400 RU/s和250,000 RU/s之间进行配置。在撰写本文时，400 RU/s的最低费用约为每月35美元。然后您还需要根据您想要存储的GB数添加存储费用，例如，存储少量GB的费用为5美元。
- en: 'The free tier of Cosmos DB allows up to 1,000 RU/s and 25 GB of storage. You
    can use a calculator at the following link: [https://cosmos.azure.com/capacitycalculator/](https://cosmos.azure.com/capacitycalculator/).'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Cosmos DB的免费层允许最高1,000 RU/s和25 GB的存储。您可以在以下链接中使用计算器：[https://cosmos.azure.com/capacitycalculator/](https://cosmos.azure.com/capacitycalculator/)。
- en: 'Factors that affect RUs:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 影响RU的因素：
- en: '**Item size**: A 2KB document costs twice as much as a 1KB document.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**项目大小**：2KB的文档比1KB的文档成本高两倍。'
- en: '**Indexed properties**: Indexing all item properties costs more than indexing
    a subset of properties.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**索引属性**：索引所有项目属性比索引属性子集的成本更高。'
- en: '**Consistency**: Strict consistency costs twice as many RUs as looser consistency.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一致性**：严格的致性比宽松的致性多花费两倍的RU。'
- en: '**Query complexity**: The number of predicates (filters), the number of results,
    the number of custom functions, projections, the size of the dataset, and so on,
    all increase the cost in RUs.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**查询复杂度**：谓词（过滤器）的数量、结果的数量、自定义函数的数量、投影、数据集的大小等，都会增加RU的成本。'
- en: Partition strategies
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分区策略
- en: A good partition strategy allows a Cosmos DB database to grow and efficiently
    run queries and transactions. A good partition strategy is about choosing a suitable
    **partition key**. It is set for a container and cannot be changed.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 一个好的分区策略允许Cosmos DB数据库高效地增长并运行查询和事务。一个好的分区策略是选择一个合适的**分区键**。它为容器设置后不能更改。
- en: The partition key should be chosen to evenly distribute operations across the
    database to avoid hot partitions, meaning a partition that handles more requests,
    so it is busier than other partitions.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 分区键应选择以均匀分布在数据库中的操作，以避免热点分区，即处理更多请求、比其他分区更繁忙的分区。
- en: A property that will be unique for an item and will often be used to look up
    an item might be a good choice. For example, for US citizens, a person’s social
    security number. However, partition keys do not have to be unique. The partition
    key value will be combined with an item ID to uniquely identify an item.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个项目将唯一且经常用于查找项目的属性，可能是一个不错的选择。例如，对于美国公民，一个人的社会保障号码。然而，分区键不必是唯一的。分区键值将与项目ID结合，以唯一标识一个项目。
- en: Partitions are automatically created by Cosmos DB when needed. There is no negative
    impact on your applications and services from the automatic creation and deletion
    of partitions. Each partition can grow up to a maximum of 20 GB. Cosmos DB will
    automatically split partitions when needed.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 当需要时，Cosmos DB会自动创建分区。自动创建和删除分区对您的应用程序和服务没有负面影响。每个分区可以增长到最大20 GB。当需要时，Cosmos
    DB会自动拆分分区。
- en: 'A container should have a partition key that possesses these attributes:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 容器应具有以下属性的分区键：
- en: High cardinality so that items are distributed evenly across partitions.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高基数，以便项目在分区之间均匀分布。
- en: Evenly distributed requests across partitions.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在分区之间均匀分布请求。
- en: Evenly distributed storage across partitions.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在分区之间均匀分布存储。
- en: Data storage design
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据存储设计
- en: 'With relational databases, the schemas are rigid and inflexible. The Northwind
    database’s products are all food-related, so the schema might not change much.
    But if you are building a commerce system for a company that sells everything
    from clothes to electronic equipment to books, then a semi-structured data store
    like the following would be better:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在关系数据库中，模式是刚性和不灵活的。Northwind数据库的产品都是与食品相关的，因此模式可能不会改变很多。但如果你正在为一家从服装到电子产品到书籍都销售的公司构建商业系统，那么以下半结构化数据存储会更好：
- en: 'Clothing: Sizes like S, M L, XL; brand; color.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服装：尺寸如S、M、L、XL；品牌；颜色。
- en: 'Shoes: Sizes like 7, 8, 9; brand; color.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 鞋子：尺寸如7、8、9；品牌；颜色。
- en: 'Televisions: Sizes like 40”, 52”; screen technology like OLED, LCD; brand.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电视：尺寸如40英寸、52英寸；屏幕技术如OLED、LCD；品牌。
- en: 'Books: Number of pages; author; publisher.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 书籍：页数；作者；出版社。
- en: Being schema-less, Azure Cosmos DB can add new types of products with different
    structures and properties simply by adding a new product with that structure to
    a container. You will see examples of this in the code that you write later in
    this chapter.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Azure Cosmos DB 是无模式的，它可以简单地通过向容器添加具有该结构的新产品来添加不同结构和属性的新产品类型。你将在本章稍后编写的代码中看到这个示例。
- en: Migrating data to Cosmos DB
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将数据迁移到 Cosmos DB
- en: The open-source **Azure Cosmos DB Data Migration Tool** can import data into
    Azure Cosmos DB from many different sources, including Azure Table Storage, SQL
    databases, MongoDB, text files in JSON and CSV formats, HBase, and more.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 开源的 **Azure Cosmos DB 数据迁移工具**可以从许多不同的来源将数据导入 Azure Cosmos DB，包括 Azure 表存储、SQL
    数据库、MongoDB、JSON 和 CSV 格式的文本文件、HBase 等。
- en: 'We will not use this migration tool in this book, so if you think it will be
    useful to you, then you can learn how to use it at the following link: [https://github.com/Azure/azure-documentdb-datamigrationtool](https://github.com/Azure/azure-documentdb-datamigrationtool).'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 本书不会使用此迁移工具，所以如果你认为它对你有用，你可以在以下链接学习如何使用它：[https://github.com/Azure/azure-documentdb-datamigrationtool](https://github.com/Azure/azure-documentdb-datamigrationtool)。
- en: That’s quite enough theory. Now, let’s look at something more practical, how
    to create Cosmos DB resources so we can work with them in code.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 理论已经足够多了。现在，让我们看看一些更实际的内容，如何创建 Cosmos DB 资源，以便我们可以在代码中与之交互。
- en: Creating Cosmos DB resources
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 Cosmos DB 资源
- en: To see Azure Cosmos DB in action, first, we must create Cosmos DB resources.
    We can manually create them in the cloud using the Azure portal or programmatically
    create them using the Azure Cosmos DB .NET SDK. Azure Cosmos DB resources created
    in the cloud have a cost unless you use a trial or free account.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看 Azure Cosmos DB 的实际应用，首先，我们必须创建 Cosmos DB 资源。我们可以通过 Azure 门户手动在云中创建它们，或者使用
    Azure Cosmos DB .NET SDK 以编程方式创建它们。在云中创建的 Azure Cosmos DB 资源除非你使用试用或免费账户，否则会产生费用。
- en: You can also create Azure Cosmos DB resources locally using an emulator, which
    will cost you nothing. At the time of writing, the Azure Cosmos DB Emulator only
    supports Windows. If you want to use Linux or macOS, then you can try to use the
    Linux Emulator, which is currently in preview, or you could host the emulator
    in a Windows virtual machine.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用模拟器在本地创建 Azure Cosmos DB 资源，这不会花费你任何费用。截至写作时，Azure Cosmos DB 模拟器仅支持 Windows。如果你想使用
    Linux 或 macOS，那么你可以尝试使用目前处于预览阶段的 Linux 模拟器，或者你可以在 Windows 虚拟机上托管模拟器。
- en: Using an emulator on Windows to create Azure Cosmos DB resources
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Windows 上的模拟器创建 Azure Cosmos DB 资源
- en: If you do not have a Windows computer, then just read through this section without
    completing the steps yourself, and then in the next section, you will use the
    Azure portal to create Azure Cosmos DB resources.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有 Windows 计算机，那么只需阅读本节内容，无需亲自完成步骤，然后在下一节中，你将使用 Azure 门户创建 Azure Cosmos DB
    资源。
- en: 'Let’s use the Azure Cosmos DB Emulator on Windows to create Azure Cosmos DB
    resources like a database and container:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用 Windows 上的 Azure Cosmos DB 模拟器创建类似数据库和容器的 Azure Cosmos DB 资源：
- en: 'Download and install the latest version of the Azure Cosmos DB Emulator on
    your local Windows computer from the following link (direct to the MSI installer
    file): [https://aka.ms/cosmosdb-emulator](https://aka.ms/cosmosdb-emulator).'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从以下链接下载并安装最新版本的 Azure Cosmos DB 模拟器到你的本地 Windows 计算机（直接到 MSI 安装程序文件）：[https://aka.ms/cosmosdb-emulator](https://aka.ms/cosmosdb-emulator)。
- en: The most recent version of the emulator at the time of writing is 2.14.12, released
    on March 20, 2023\. Earlier versions of the emulator are not supported by the
    developer team. If you have an older version installed, then remove it and install
    the latest.
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 写作时的最新模拟器版本是 2.14.12，发布于 2023 年 3 月 20 日。早期版本的模拟器不受开发团队支持。如果你安装了旧版本，请将其删除并安装最新版本。
- en: Make sure the Azure Cosmos DB Emulator is running.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保 Azure Cosmos DB 模拟器正在运行。
- en: The **Azure Cosmos DB Emulator** user interface should start automatically,
    but if not, start your favorite browser and navigate to `https://localhost:8081/_explorer/index.html`.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Azure Cosmos DB 模拟器**的用户界面应该会自动启动，但如果未启动，请打开你喜欢的浏览器并导航到 `https://localhost:8081/_explorer/index.html`。'
- en: Note that the Azure Cosmos DB emulator is running, hosted at `localhost` on
    port `8081`, with a **Primary Key** that you will need to securely connect to
    the service, as shown in *Figure 4.1*:![](img/B19587_04_01.png)
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意，Azure Cosmos DB 模拟器正在运行，托管在 `localhost` 的 `8081` 端口上，使用你将需要安全连接到服务的**主键**，如图
    *4.1* 所示：![](img/B19587_04_01.png)
- en: 'Figure 4.1: The Azure Cosmos DB Emulator user interface on Windows'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图4.1：Windows上的Azure Cosmos DB模拟器用户界面
- en: 'The default primary key for the emulator is the same value for everyone. You
    can specify your own key value by starting the emulator at the command line with
    the `/key` switch. You can learn about starting the emulator at the command line
    at the following link: [https://learn.microsoft.com/en-us/azure/cosmos-db/emulator-command-line-parameters](https://learn.microsoft.com/en-us/azure/cosmos-db/emulator-command-line-parameters).'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 模拟器的默认主键对每个人都是相同的值。您可以通过在命令行中使用`/key`开关启动模拟器来指定自己的键值。您可以在以下链接中了解如何在命令行中启动模拟器：[https://learn.microsoft.com/en-us/azure/cosmos-db/emulator-command-line-parameters](https://learn.microsoft.com/en-us/azure/cosmos-db/emulator-command-line-parameters)。
- en: In the navigation bar on the left, click **Explorer**, and then click **New
    Container**.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧的导航栏中，点击**资源管理器**，然后点击**新建容器**。
- en: 'Complete the following information:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成以下信息：
- en: For **Database id**, select **Create new** and enter `Northwind`.
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于**数据库ID**，选择**创建新**并输入`Northwind`。
- en: Select the **Share throughput across containers** check box.
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择**跨容器共享吞吐量**复选框。
- en: For **Database throughput**, select **Autoscale**.
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于**数据库吞吐量**，选择**自动缩放**。
- en: Set **Database max RU/s** as `4000`. This will use a minimum of 400 RU/s and
    autoscale up to 4,000 RU/s when needed.
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将**数据库最大RU/s**设置为`4000`。这将使用至少400 RU/s，并在需要时自动扩展到4,000 RU/s。
- en: For **Container id**, enter `Products`.
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于**容器ID**，输入`Products`。
- en: For **Partition key**, enter `/productId`.
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于**分区键**，输入`/productId`。
- en: Click **OK**.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**确定**。
- en: 'In the tree on the left, expand the **Northwind** database, expand the **Products**
    container, and select **Items**, as shown in *Figure 4.2*:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧的树中，展开**Northwind**数据库，展开**Products**容器，并选择**Items**，如图*4.2*所示：
- en: '![](img/B19587_04_02.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19587_04_02.png)'
- en: 'Figure 4.2: The empty items in the Products container in the Northwind database'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.2：Northwind数据库中Products容器中的空条目
- en: In the toolbar, click **New Item**.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在工具栏中点击**新建条目**。
- en: 'Replace the contents of the editor window with a JSON document that represents
    a product named `Chai`, as shown in the following JSON:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将编辑器窗口的内容替换为表示名为`Chai`的产品的JSON文档，如下所示JSON：
- en: '[PRE1]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In the toolbar, click **Save**, and note the extra properties that are automatically
    added to any item, including `id`, `_etag`, and `_ts`, as shown highlighted in
    the following JSON:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在工具栏中点击**保存**，并注意自动添加到任何项目中的额外属性，包括`id`、`_etag`和`_ts`，如图所示高亮显示的以下JSON：
- en: '[PRE2]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Click **New Item**.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**新建条目**。
- en: 'Replace the contents of the editor window with a JSON document that represents
    a product named `Chang`, as shown in the following JSON:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将编辑器窗口的内容替换为表示名为`Chang`的产品的JSON文档，如下所示JSON：
- en: '[PRE3]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Click **Save**.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**保存**。
- en: Click **New Item**.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**新建条目**。
- en: 'Replace the contents of the editor window with a JSON document that represents
    a product named `Aniseed Syrup`, as shown in the following JSON:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将编辑器窗口的内容替换为表示名为`Aniseed Syrup`的产品的JSON文档，如下所示JSON：
- en: '[PRE4]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Click **Save**.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**保存**。
- en: 'Click the first item in the list and note that all the items have been automatically
    assigned GUID values for their `id` properties, as shown in *Figure 4.3*:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击列表中的第一个条目，并注意所有条目都已自动分配了GUID值作为其`id`属性，如图*4.3*所示：
- en: '![](img/B19587_04_03.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19587_04_03.png)'
- en: 'Figure 4.3: A saved JSON document item in the Azure Cosmos DB emulator'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.3：Azure Cosmos DB模拟器中保存的JSON文档项
- en: In the toolbar, click **New SQL Query**, and note the default query text is
    `SELECT * FROM c`.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在工具栏中点击**新建SQL查询**，并注意默认查询文本是`SELECT * FROM c`。
- en: 'Modify the query text to return all products supplied by `Exotic Liquids`;
    in the toolbar, click **Execute Query**, and note that all three products are
    included in the array of results, as shown in *Figure 4.4* and in the following
    query:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改查询文本以返回由`Exotic Liquids`供应的所有产品；在工具栏中点击**执行查询**，并注意所有三个产品都包含在结果数组中，如图*4.4*所示，以及以下查询：
- en: '[PRE5]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![](img/B19587_04_04.png)'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](img/B19587_04_04.png)'
- en: 'Figure 4.4: A query to return all products supplied by Exotic Liquids'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图4.4：查询以返回由Exotic Liquids供应的所有产品
- en: Keywords are case-insensitive, so `WHERE` is treated the same as `Where` or
    `where`. Property names are case-sensitive so `CompanyName` is different from
    `companyName`, and will return zero results.
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 关键字不区分大小写，因此`WHERE`与`Where`或`where`相同。属性名称区分大小写，因此`CompanyName`与`companyName`不同，将返回零结果。
- en: 'Modify the query text to return all products in category 2, as shown in the
    following query:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改查询文本以返回类别2中的所有产品，如下所示查询：
- en: '[PRE6]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Execute the query and note that one product is included in the array of results.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行查询并注意结果数组中包含一个产品。
- en: Using the Azure portal to create Azure Cosmos DB resources
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Azure 门户创建 Azure Cosmos DB 资源
- en: If you would prefer to only use the Azure Cosmos DB Emulator to avoid any costs,
    then feel free to skip this section, or just read through it without completing
    the steps yourself.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您只想使用 Azure Cosmos DB 模拟器以避免任何费用，则可以跳过此部分，或者只是阅读它而不亲自完成步骤。
- en: 'Now, let’s use the Azure portal to create Azure Cosmos DB resources like an
    account, database, and container in the cloud:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用 Azure 门户在云中创建 Azure Cosmos DB 资源，如账户、数据库和容器：
- en: 'If you do not have an Azure account, then you can sign up for one for free
    at the following link: [https://azure.microsoft.com/free/](https://azure.microsoft.com/free/).'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您没有 Azure 账户，则可以在以下链接免费注册一个：[https://azure.microsoft.com/free/](https://azure.microsoft.com/free/)。
- en: 'Navigate to the Azure portal and sign in: [https://portal.azure.com/](https://portal.azure.com/).'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 Azure 门户并登录：[https://portal.azure.com/](https://portal.azure.com/)。
- en: In the Azure portal menu, click **+ Create a resource**.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Azure 门户菜单中，点击**+ 创建资源**。
- en: On the **Create a resource** page, search for, or click, **Azure Cosmos DB**,
    and then on the **Azure Cosmos DB** page, click **Create**.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**创建资源**页面上，搜索或点击**Azure Cosmos DB**，然后在**Azure Cosmos DB**页面上点击**创建**。
- en: On the **Which API best suits your workload?** page, in the **Azure Cosmos DB
    for NoSQL** box, note the description, **Azure Cosmos DB’s core, or native API
    for working with documents. Supports fast, flexible development with familiar
    SQL query language and client libraries for .NET, JavaScript, Python, and Java.**,
    and then click the **Create** button.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**哪个 API 最适合您的工作负载**页面上，在**Azure Cosmos DB for NoSQL**框中，注意描述，**Azure Cosmos
    DB 的核心或本地 API，用于处理文档。支持使用熟悉的 SQL 查询语言和 .NET、JavaScript、Python 和 Java 客户端库进行快速、灵活的开发**，然后点击**创建**按钮。
- en: 'On the **Basics** tab:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**基本**选项卡上：
- en: Select your **Subscription**. Mine is named `Pay-As-You-Go`.
  id: totrans-161
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择您的**订阅**。我的订阅名为 `Pay-As-You-Go`。
- en: Select a **Resource Group** or create a new one. I used the name `apps-services-book`.
  id: totrans-162
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择一个**资源组**或创建一个新的。我使用了名称 `apps-services-book`。
- en: Enter an Azure Cosmos DB **Account Name**. I used `apps-services-book`.
  id: totrans-163
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入 Azure Cosmos DB **账户名称**。我使用了 `apps-services-book`。
- en: Select a **Location**. I chose **(Europe) UK South** as it is the closest to
    me.
  id: totrans-164
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择一个**位置**。我选择了**（欧洲）英国南部**，因为它离我最近。
- en: Set **Capacity mode** to **Provisioned throughput**.
  id: totrans-165
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将**容量模式**设置为**预配吞吐量**。
- en: Set **Apply Free Tier Discount** to **Do not apply**.
  id: totrans-166
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将**应用免费层折扣**设置为**不应用**。
- en: '**Good Practice**: Only apply the free tier discount now if you want this account
    to be the *only* account within your subscription to be on the free tier. You
    might be better off saving this discount for another account that you might use
    for a real project, rather than a temporary learning account while reading this
    book. With Azure Cosmos DB free tier, you will get the first 1,000 RU/s and 25
    GB of storage for free in an account. You can only enable a free tier on one account
    per subscription. Microsoft estimates this has a value of $64/month.'
  id: totrans-167
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**良好实践**：如果您希望此账户成为您订阅中**唯一**一个处于免费层的账户，请现在仅应用免费层折扣。您可能最好将此折扣保留给另一个您可能用于实际项目的账户，而不是在阅读此书时用作临时学习账户。使用
    Azure Cosmos DB 免费层，您将获得免费的前 1,000 RU/s 和 25 GB 存储空间。您只能在每个订阅的账户上启用一个免费层。微软估计这价值每月
    64 美元。'
- en: Select the **Limit total account throughput** check box.
  id: totrans-168
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择**限制总账户吞吐量**复选框。
- en: 'Click the **Next: Global Distribution** button and review the options but leave
    them at their defaults.'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步：全局分发**按钮并查看选项，但保留默认设置。
- en: 'Click the **Next: Networking** button and review the options but leave them
    at their defaults.'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步：网络**按钮并查看选项，但保留默认设置。
- en: 'Click the **Next: Backup Policy** button and review the options but leave them
    at their defaults.'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步：备份策略**按钮并查看选项，但保留默认设置。
- en: 'Click the **Next: Encryption** button and review the options but leave them
    at their defaults.'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步：加密**按钮并查看选项，但保留默认设置。
- en: Click the **Review + create** button.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**审查 + 创建**按钮。
- en: Note the **Validation Success** message, review the summary, and then click
    the **Create** button.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意**验证成功**消息，查看摘要，然后点击**创建**按钮。
- en: Wait for the deployment to complete. This will take a few minutes.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待部署完成。这可能需要几分钟。
- en: Click the **Go to resource** button. Note that you are probably directed to
    the **Quick Start** page with steps to follow to create a container and so on,
    depending on if this is the first time that you have created an Azure Cosmos DB
    account.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**转到资源**按钮。请注意，你可能被引导到**快速入门**页面，其中包含创建容器等步骤，具体取决于这是你第一次创建 Azure Cosmos DB
    账户。
- en: 'In the left navigation, click **Overview**, and note the information about
    your Azure Cosmos DB account, as shown in *Figure 4.5*:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧导航中，点击**概览**，并注意你的 Azure Cosmos DB 账户信息，如图 4.5 所示：
- en: '![](img/B19587_04_05.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19587_04_05.png)'
- en: 'Figure 4.5: Azure Cosmos DB account Overview page'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.5：Azure Cosmos DB 账户概览页面
- en: In the navigation on the left, in the **Settings** section, click **Keys**,
    and note the **URI** and **PRIMARY KEY** needed to programmatically work with
    this Azure Cosmos DB account, as shown in *Figure 4.6*:![](img/B19587_04_06.png)
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧导航中，在**设置**部分，点击**密钥**，并注意用于以编程方式使用此 Azure Cosmos DB 账户所需的**URI**和**主键**，如图
    4.6 所示：![](img/B19587_04_06.png)
- en: 'Figure 4.6: Keys to programmatically work with the Azure Cosmos DB account'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 4.6：用于以编程方式与 Azure Cosmos DB 账户工作的密钥
- en: '**Good Practice**: Unlike the primary key that is shared by all developers
    of the Cosmos DB emulator, your Cosmos DB primary keys in Azure are unique and
    must be kept secret. I deleted the Cosmos DB account that I used to write this
    chapter so the keys in the screenshot above are useless.'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**良好实践**：与所有 Cosmos DB 模拟器开发者共享的主键不同，你的 Azure Cosmos DB 主键是唯一的，并且必须保密。我删除了用于编写本章的
    Cosmos DB 账户，因此上面的截图中的密钥已失效。'
- en: In the navigation on the left, click **Data Explorer**, and if a video pops
    up, then close it.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧导航中，点击**数据资源管理器**，如果弹出视频，请关闭它。
- en: In the toolbar, click **New Container**.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在工具栏中，点击**新建容器**。
- en: Complete the steps listed in the emulator section, *Using an emulator on Windows
    to create Azure Cosmos DB resources*, starting at *step 6* where you fill in the
    information about the new container, and going up to the end of that section.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从模拟器部分列出的步骤开始，*在 Windows 上使用模拟器创建 Azure Cosmos DB 资源*，从*步骤 6*开始填写新容器信息，直到该部分的结尾。
- en: Using a .NET app to create Azure Cosmos DB resources
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 .NET 应用创建 Azure Cosmos DB 资源
- en: 'Next, we will create a console app project for creating the same Azure Cosmos
    DB resources in either the local emulator or in the cloud, depending on which
    URI and primary key you choose to use:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个控制台应用程序项目，用于在本地模拟器或云端创建相同的 Azure Cosmos DB 资源，具体取决于你选择的 URI 和主键：
- en: 'Use your preferred code editor to create a new project, as defined in the following
    list:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用你偏好的代码编辑器创建一个新项目，如下列所示：
- en: 'Project template: **Console App** / `console`'
  id: totrans-189
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目模板：**控制台应用程序** / `console`
- en: 'Solution file and folder: `Chapter04`'
  id: totrans-190
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解决方案文件和文件夹：`Chapter04`
- en: 'Project file and folder: `Northwind.CosmosDb.SqlApi`'
  id: totrans-191
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目文件和文件夹：`Northwind.CosmosDb.SqlApi`
- en: 'In the project file, treat warnings as errors, add a package reference for
    Azure Cosmos, add a project reference to the Northwind data context project that
    you created in *Chapter 3*, *Building Entity Models for SQL Server Using EF Core*,
    and import the `Console` class statically and globally, as shown highlighted in
    the following markup:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目文件中，将警告视为错误，为 Azure Cosmos 添加一个包引用，将项目引用添加到你在*第 3 章*中创建的 Northwind 数据上下文项目，*使用
    EF Core 为 SQL Server 构建实体模型*，并静态和全局地导入`Console`类，如下所示的高亮标记：
- en: '[PRE7]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Build the `Northwind.CosmosDb.SqlApi` project at the command prompt or terminal
    using the following command: `dotnet build`.'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符或终端中使用以下命令构建`Northwind.CosmosDb.SqlApi`项目：`dotnet build`。
- en: '**Warning!** If you are using Visual Studio 2022 and you reference a project
    outside of the current solution, then using the **Build** menu gives the following
    error:'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**警告！**如果你正在使用 Visual Studio 2022 并且引用了当前解决方案之外的项目，那么使用**构建**菜单会得到以下错误：'
- en: '`NU1105 Unable to find project information for ''C:\apps-services-net8\Chapter03\Northwind.Common.DataContext.SqlServer\Northwind.Common.DataContext.SqlServer.csproj''.
    If you are using Visual Studio, this may be because the project is unloaded or
    not part of the current solution.`'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`NU1105 无法找到项目信息 ''C:\apps-services-net8\Chapter03\Northwind.Common.DataContext.SqlServer\Northwind.Common.DataContext.SqlServer.csproj''。如果你正在使用
    Visual Studio，这可能是由于项目未加载或不是当前解决方案的一部分。`'
- en: You must enter a `dotnet build` command at the command prompt or terminal. In
    **Solution Explorer**, you can right-click the project and select **Open in Terminal**.
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你必须在命令提示符或终端中输入`dotnet build`命令。在**解决方案资源管理器**中，你可以右键单击项目并选择**在终端中打开**。
- en: 'Add a class file named `Program.Helpers.cs`, delete any existing statements,
    and then add statements to define a partial `Program` class with a method to output
    a section title to the console, as shown in the following code:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为 `Program.Helpers.cs` 的类文件，删除任何现有语句，然后添加语句以定义一个部分 `Program` 类，其中包含一个将部分标题输出到控制台的方法，如下面的代码所示：
- en: '[PRE8]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Add a class file named `Program.Methods.cs`.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为 `Program.Methods.cs` 的类文件。
- en: 'In `Program.Methods.cs`, add statements to import the namespace for working
    with Azure Cosmos. Then, define a method for the `Program` class that creates
    a Cosmos client and uses it to create a database named `Northwind` and a container
    named `Products`, in either the local emulator or in the cloud, as shown in the
    following code:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.Methods.cs` 中，添加语句以导入用于与 Azure Cosmos 一起工作的命名空间。然后，为 `Program` 类定义一个方法，创建一个
    Cosmos 客户端并使用它来创建一个名为 `Northwind` 的数据库和一个名为 `Products` 的容器，无论是在本地模拟器还是云端，如下面的代码所示：
- en: '[PRE9]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Note the following in the preceding code:'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意以下代码中的内容：
- en: When using the emulator, the `endpointUri` and `primaryKey` are the same for
    everyone.
  id: totrans-204
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当使用模拟器时，`endpointUri` 和 `primaryKey` 对每个人都是相同的。
- en: The constructor for a `CosmosClient` requires the `endpointUri` and `primaryKey`.
    Never store your primary key in your source code and then check it in to a public
    Git repository! You should get it from an environment variable or other secure
    place like Azure Key Vault.
  id: totrans-205
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CosmosClient` 构造函数需要 `endpointUri` 和 `primaryKey`。永远不要将您的 primary key 存储在源代码中，然后将其检查到公共
    Git 仓库中！您应该从环境变量或其他安全位置，如 Azure Key Vault 中获取它。'
- en: When creating a database, you must specify a name and throughput in RUs per
    second.
  id: totrans-206
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建数据库时，您必须指定一个名称以及每秒的 RUs 吞吐量。
- en: When creating a container, you must specify a name and partition key path, and
    you can optionally set an indexing policy and override the throughput, which defaults
    to the database throughput.
  id: totrans-207
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建容器时，您必须指定一个名称和分区键路径，并且您可以可选地设置索引策略并覆盖吞吐量，默认为数据库吞吐量。
- en: The response to a request to create an Azure Cosmos DB resource includes an
    HTTP status code like `200` `OK` if the resource already exists, or `201` `Created`
    if the resource did not exist but has now been successfully created. The response
    also includes information about the resource like its `Id`.
  id: totrans-208
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 Azure Cosmos DB 资源请求的响应包括类似于 `200` `OK` 的 HTTP 状态码，如果资源已存在，或者 `201` `Created`，如果资源不存在但现在已成功创建。响应还包括有关资源的信息，如其
    `Id`。
- en: 'In `Program.cs`, delete the existing statements and then add a statement to
    call the method to create Azure Cosmos resources, as shown in the following code:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 中，删除现有语句，然后添加一个调用创建 Azure Cosmos 资源方法的语句，如下面的代码所示：
- en: '[PRE10]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Run the console app and note the results, as shown in the following output:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行控制台应用程序并注意结果，如下面的输出所示：
- en: '[PRE11]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In the Azure Cosmos DB Emulator or Azure portal, use **Data Explorer** to delete
    the `Northwind` database. (You must hover your mouse cursor over the database
    and then click the **…** ellipsis button.) You will be prompted to enter its name
    to confirm deletion because this operation cannot be undone.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Azure Cosmos DB 模拟器或 Azure 门户中，使用 **数据资源管理器** 删除 `Northwind` 数据库。（您必须将鼠标光标悬停在数据库上，然后单击
    **…** 省略号按钮。）您将被提示输入其名称以确认删除，因为此操作无法撤销。
- en: It is important to delete the `Northwind` database at this point. Later in this
    chapter, you will programmatically add the 77 products from the SQL Server `Northwind`
    database to the Cosmos DB `Northwind` database. If you still have the three sample
    products in its `Products` container, then you will have issues.
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此阶段删除 `Northwind` 数据库非常重要。在本章的后面部分，您将程序化地将 SQL Server `Northwind` 数据库中的 77
    个产品添加到 Cosmos DB `Northwind` 数据库中。如果您仍然在其 `Products` 容器中有三个示例产品，那么您将遇到问题。
- en: 'Run the console app and note that because we have just deleted the database,
    the code we have executed has (re)created the database, as shown in the following
    output:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行控制台应用程序并注意，因为我们刚刚删除了数据库，所以我们执行的代码已经（重新）创建了数据库，如下面的输出所示：
- en: '[PRE12]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: You do not need to delete the database again because it will be empty of any
    products.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 您不需要再次删除数据库，因为它将没有任何产品。
- en: We now have a Cosmos DB database resource to work with, either in the local
    emulator or in the Azure cloud. Now, let’s learn how to perform CRUD operations
    on it using the SQL API.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有一个可用于本地模拟器或 Azure 云的 Cosmos DB 数据库资源。现在，让我们学习如何使用 SQL API 在其上执行 CRUD 操作。
- en: Manipulating data with the Core (SQL) API
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Core (SQL) API 操作数据
- en: The most common API for working with data in Azure Cosmos DB is Core (SQL).
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Azure Cosmos DB 中处理数据的最常见 API 是 Core (SQL)。
- en: 'The full documentation for the Core (SQL) API can be found at the following
    link: [https://learn.microsoft.com/en-us/azure/cosmos-db/sql/](https://learn.microsoft.com/en-us/azure/cosmos-db/sql/).'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: Core (SQL) API 的完整文档可以在以下链接中找到：[https://learn.microsoft.com/en-us/azure/cosmos-db/sql/](https://learn.microsoft.com/en-us/azure/cosmos-db/sql/).
- en: Performing CRUD operations with the Cosmos SQL API
  id: totrans-222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Cosmos SQL API 执行 CRUD 操作
- en: 'You can perform CRUD operations on JSON documents in Cosmos with the SQL API
    by calling the following most common overloads of methods on an instance of the
    `Microsoft.Azure.Cosmos.Container` class:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过调用 `Microsoft.Azure.Cosmos.Container` 类实例上的以下最常见方法重载在 Cosmos 中使用 SQL API
    对 JSON 文档执行 CRUD 操作：
- en: '`ReadItemAsync<T>(id, partitionKey)`: Where `T` is the item type to get, `id`
    is its unique identifier, and `partitionKey` is its partition key value.'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ReadItemAsync<T>(id, partitionKey)`：其中 `T` 是要获取的项目类型，`id` 是其唯一标识符，`partitionKey`
    是其分区键值。'
- en: '`ReadManyItemsAsync<T>(idsAndPartitionKeys)`: Where `T` is the item type to
    get, and `idsAndPartitionKeys` are the unique identifiers and partition key values
    of a read-only list of items to retrieve.'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ReadManyItemsAsync<T>(idsAndPartitionKeys)`：其中 `T` 是要获取的项目类型，`idsAndPartitionKeys`
    是要检索的只读项目列表的唯一标识符和分区键值。'
- en: '`CreateItemAsync(object)`: Where `object` is an instance of the item type to
    insert.'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CreateItemAsync(object)`：其中 `object` 是要插入的项目类型的实例。'
- en: '`DeleteItemAsync<T>(id, partitionKey)`: Where `T` is the item type to delete,
    `id` is its unique identifier, and `partitionKey` is its partition key value.'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DeleteItemAsync<T>(id, partitionKey)`：其中 `T` 是要删除的项目类型，`id` 是其唯一标识符，`partitionKey`
    是其分区键值。'
- en: '`PatchItemAsync<T>(id, partitionKey`, `patchOperations)`: Where `T` is the
    item type to update, `id` is its unique identifier, `partitionKey` is its partition
    key value, and `patchOperations` is a read-only list of property changes.'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PatchItemAsync<T>(id, partitionKey, patchOperations)`：其中 `T` 是要更新的项目类型，`id`
    是其唯一标识符，`partitionKey` 是其分区键值，`patchOperations` 是属性更改的只读列表。'
- en: '`ReplaceItemAsync<T>(object`, `id)`: Where `T` is the item type to replace,
    `id` is its unique identifier, and `object` is an instance of the item type to
    replace it with.'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ReplaceItemAsync<T>(object, id)`：其中 `T` 是要替换的项目类型，`id` 是其唯一标识符，`object` 是要替换的项目类型的实例。'
- en: '`UpsertItemAsync<T>(object`, `id)`: Where `T` is the item type to either insert
    or replace, `id` is its unique identifier, and `object` is an instance of the
    item type to insert or replace the existing item with.'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UpsertItemAsync<T>(object, id)`：其中 `T` 是要插入或替换的项目类型，`id` 是其唯一标识符，`object`
    是要插入或替换现有项目的项目类型实例。'
- en: '**Good Practice**: Cosmos DB uses HTTP as its underlying communication protocol
    and so the “patch” and “replace” operations are implemented using `PATCH` and
    `PUT`. Just like those HTTP methods, `PATCH` is more efficient because only the
    properties that need to change are sent in the request.'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '**最佳实践**：Cosmos DB 使用 HTTP 作为其底层通信协议，因此“补丁”和“替换”操作使用 `PATCH` 和 `PUT` 实现。就像那些
    HTTP 方法一样，`PATCH` 更高效，因为只有需要更改的属性才在请求中发送。'
- en: 'Each method returns a response that has the following common properties:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 每个方法都返回一个包含以下常见属性的响应：
- en: '`Resource`: The item that was created/retrieved/updated/deleted.'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Resource`：创建/检索/更新/删除的项目。'
- en: '`RequestCharge`: A `double` value indicating the request charge measured in
    RUs.'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RequestCharge`：表示以RUs为单位的请求费用的 `double` 值。'
- en: '`StatusCode`: An HTTP status code value; for example, `404` when a `ReadItemAsync<T>`
    request fails to find the item.'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`StatusCode`：HTTP状态码值；例如，当 `ReadItemAsync<T>` 请求无法找到项目时，为 `404`。'
- en: '`Headers`: A dictionary of HTTP response headers.'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Headers`：HTTP响应头字典。'
- en: '`Diagnostics`: Useful information for diagnostics.'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Diagnostics`：用于诊断的有用信息。'
- en: '`ActivityId`: A GUID value that is useful for tracking this activity through
    multi-tiered services.'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ActivityId`：一个用于通过多级服务跟踪此活动的GUID值。'
- en: Let’s copy all the products from the Northwind database in SQL Server to Cosmos.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将 SQL Server 中的 Northwind 数据库中的所有产品复制到 Cosmos。
- en: 'Since the entity classes in the EF Core for SQL Server class libraries are
    designed for the normalized data structure in the Northwind SQL database, we will
    create new classes to represent items in Cosmos that have embedded related data.
    They will use JSON casing conventions since they represent JSON documents:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 EF Core for SQL Server 类库中的实体类是为 Northwind SQL 数据库中的规范化数据结构设计的，因此我们将创建新类来表示
    Cosmos 中的项目，这些项目包含嵌入式相关数据。它们将使用 JSON 命名约定，因为它们表示 JSON 文档：
- en: In the `Northwind.CosmosDb.SqlApi` project, add a new folder named `Models`.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.CosmosDb.SqlApi` 项目中，添加一个名为 `Models` 的新文件夹。
- en: In the `Models` folder, add a class file named `CategoryCosmos.cs`.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Models` 文件夹中添加一个名为 `CategoryCosmos.cs` 的类文件。
- en: 'Modify its content to define a `CategoryCosmos` class, as shown in the following
    code:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改其内容以定义一个 `CategoryCosmos` 类，如下面的代码所示：
- en: '[PRE13]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We must deliberately not follow usual .NET casing conventions because we cannot
    dynamically manipulate the serialization and the resulting JSON must use camel
    case.
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们必须故意不遵循常规 .NET 命名约定，因为我们不能动态操作序列化，并且生成的 JSON 必须使用驼峰式命名。
- en: 'In the `Models` folder, add a class file named `SupplierCosmos.cs`, and modify
    its content to define a `SupplierCosmos` class, as shown in the following code:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Models` 文件夹中，添加一个名为 `SupplierCosmos.cs` 的类文件，并修改其内容以定义一个 `SupplierCosmos`
    类，如下面的代码所示：
- en: '[PRE14]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In the `Models` folder, add a class file named `ProductCosmos.cs`, and modify
    its content to define a `ProductCosmos` class, as shown in the following code:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Models` 文件夹中，添加一个名为 `ProductCosmos.cs` 的类文件，并修改其内容以定义一个 `ProductCosmos` 类，如下面的代码所示：
- en: '[PRE15]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '**Good Practice**: All JSON document items in Cosmos must have an `id` property.
    To control the value, it is good practice to explicitly define that property in
    the model. Otherwise, the system will assign a GUID value, as you saw earlier
    in this chapter when using the **Data Explorer** to manually add a new item.'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**良好实践**：Cosmos 中的所有 JSON 文档项都必须有一个 `id` 属性。为了控制其值，在模型中显式定义该属性是一个好习惯。否则，系统将分配一个
    GUID 值，正如您在本章前面使用 **数据资源管理器** 手动添加新项时所见。'
- en: 'In `Program.Methods.cs`, add statements to import namespaces for the Northwind
    data context and entities types, the Northwind Cosmos types, and EF Core extensions,
    as shown in the following code:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.Methods.cs` 文件中，添加语句以导入 Northwind 数据上下文和实体类型、Northwind Cosmos 类型以及
    EF Core 扩展的命名空间，如下面的代码所示：
- en: '[PRE16]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In `Program.Methods.cs`, add statements to define a method to get all the products
    in the Northwind SQL database, including their related category and supplier,
    and then insert them as new items in the `Products` container in Cosmos, as shown
    in the following code:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.Methods.cs` 文件中，添加语句以定义一个方法，从 Northwind SQL 数据库获取所有产品，包括其相关类别和供应商，然后将它们作为新项插入到
    Cosmos 的 `Products` 容器中，如下面的代码所示：
- en: '[PRE17]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In `Program.cs`, comment out the call to create the Azure Cosmos resources,
    and then add a statement to call the method to insert all the products, as shown
    in the following code:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 文件中，注释掉创建 Azure Cosmos 资源的调用，然后添加一个调用插入所有产品的语句，如下面的代码所示：
- en: '[PRE18]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Run the console app and note the results, which should be 77 product items
    inserted, as shown in the following partial output:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行控制台应用程序并注意结果，应该显示已插入 77 个产品项，如下面的部分输出所示：
- en: '[PRE19]'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Run the console app again and note the results, which should show that the
    product items already exist, as shown in the following partial output:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次运行控制台应用程序并注意结果，应该显示产品项已存在，如下面的部分输出所示：
- en: '[PRE20]'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In the Azure Cosmos DB Emulator or Azure portal **Data Explorer**, confirm that
    there are 77 product items in the `Products` container.
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Azure Cosmos DB 模拟器或 Azure 门户 **数据资源管理器** 中，确认 `Products` 容器中有 77 个产品项。
- en: 'In `Program.Methods.cs`, add statements to define a method to list all the
    items in the `Products` container, as shown in the following code:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.Methods.cs` 文件中，添加语句以定义一个方法来列出 `Products` 容器中的所有项，如下面的代码所示：
- en: '[PRE21]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'In `Program.cs`, add statements to import the namespaces to work with cultures
    and encodings, simulate French culture, comment out the call to create the product
    items, and then add a statement to call the method to list the product items,
    as shown in the following code:'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 文件中，添加语句以导入用于处理文化和编码的命名空间，模拟法语文化，注释掉创建产品项的调用，然后添加一个调用列出产品项的语句，如下面的代码所示：
- en: '[PRE22]'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Run the console app and note the results, which should be 77 product items,
    as shown in the following partial output:'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行控制台应用程序并注意结果，应该显示 77 个产品项，如下面的部分输出所示：
- en: '[PRE23]'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'In `Program.Methods.cs`, add statements to define a method to delete all the
    items in the `Products` container, as shown in the following code:'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.Methods.cs` 文件中，添加语句以定义一个方法来删除 `Products` 容器中的所有项，如下面的代码所示：
- en: '[PRE24]'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'In `Program.cs`, comment out the call to list the product items, and then add
    a statement to call the method to delete the product items, as shown in the following
    code:'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 文件中，注释掉列出产品项的调用，然后添加一个调用删除产品项的语句，如下面的代码所示：
- en: '[PRE25]'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Run the console app and note the results, which should be 77 product items
    deleted, as shown in the following partial output:'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行控制台应用程序并注意结果，应该显示已删除 77 个产品项，如下面的部分输出所示：
- en: '[PRE26]'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: In the Azure Cosmos DB Emulator or Azure portal **Data Explorer**, confirm that
    the `Products` container is empty.
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Azure Cosmos DB 模拟器或 Azure 门户 **数据探索器** 中，确认 `Products` 容器为空。
- en: Understanding SQL queries
  id: totrans-275
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解 SQL 查询
- en: 'The following keywords and more are available when writing SQL queries for
    Azure Cosmos DB:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 在为 Azure Cosmos DB 编写 SQL 查询时，以下关键字和更多内容可用：
- en: '`SELECT` to select from item properties. Supports `*` for all and `TOP` for
    limiting the results to the first specific number of items.'
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `SELECT` 从项目属性中选择。支持 `*` 用于所有和 `TOP` 用于限制结果为前特定数量的项目。
- en: '`AS` to define aliases.'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `AS` 来定义别名。
- en: '`FROM` to define the items to select from. Some of the previous queries used
    `FROM c`, where `c` is an implied alias for the items in the container. Since
    a SQL query is executed within the context of a container like `Products`, you
    can use any alias you like, so `FROM Items c` or `FROM p` would work equally well.'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `FROM` 来定义要选择的项目。一些之前的查询使用了 `FROM c`，其中 `c` 是容器中项目的隐含别名。由于 SQL 查询是在类似于 `Products`
    的容器上下文中执行的，因此您可以使用任何您喜欢的别名，所以 `FROM Items c` 或 `FROM p` 都会同样有效。
- en: '`WHERE` to define a filter.'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `WHERE` 来定义过滤器。
- en: '`LIKE` to use pattern matching. `%` means zero, one, or more characters. `_`
    means a single character. `[a-f]` or `[aeiou]` means a single character within
    the defined range or set. `[^aeiou]` means not in the range or set.'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `LIKE` 进行模式匹配。`%` 表示零个、一个或多个字符。`_` 表示单个字符。`[a-f]` 或 `[aeiou]` 表示定义范围内或集合中的单个字符。`[^aeiou]`
    表示不在范围内或集合中。
- en: '`IN`, `BETWEEN` are range and set filters.'
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IN`、`BETWEEN` 是范围和集合过滤器。'
- en: '`AND`, `OR`, `NOT` for Boolean logic.'
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AND`、`OR`、`NOT` 用于布尔逻辑。'
- en: '`ORDER BY` to sort the results.'
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `ORDER BY` 对结果进行排序。
- en: '`DISTINCT` to remove duplicates.'
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `DISTINCT` 来删除重复项。
- en: '`COUNT`, `AVG`, `SUM`, and other aggregate functions.'
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`COUNT`、`AVG`、`SUM` 和其他聚合函数。'
- en: 'To query the `Products` container using the Core (SQL) API, you might write
    the following code:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Core（SQL）API 查询 `Products` 容器，您可能编写以下代码：
- en: '[PRE27]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Let’s try executing a SQL query against our product items:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试执行一个针对我们的产品项的 SQL 查询：
- en: 'In `Program.cs`, uncomment the call to (re)create the product items and modify
    the call to `ListProductItems` to pass a SQL query that filters the products to
    only show the products in the Beverages category and only their ID, name, and
    unit price, as shown in the following code:'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 中，取消注释调用（重新）创建产品项的调用，并将 `ListProductItems` 的调用修改为传递一个 SQL 查询，该查询过滤产品以仅显示饮料类别的产品及其
    ID、名称和单价，如下面的代码所示：
- en: '[PRE28]'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Run the console app and note the results, which should be the 12 product items
    in the Beverages category, as shown in the following output:'
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行控制台应用程序并注意结果，应该是饮料类别的 12 个产品项，如下面的输出所示：
- en: '[PRE29]'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'In the Azure Cosmos DB Emulator or Azure portal **Data Explorer**, create a
    new SQL query, use the same SQL text, and execute it, as shown in *Figure 4.7*:'
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Azure Cosmos DB 模拟器或 Azure 门户 **数据探索器** 中，创建一个新的 SQL 查询，使用相同的 SQL 文本，并执行它，如图
    *4.7* 所示：
- en: '![](img/B19587_04_07.png)'
  id: totrans-295
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B19587_04_07.png)'
- en: 'Figure 4.7: Executing a SQL query in Data Explorer'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.7：在数据探索器中执行 SQL 查询
- en: 'Click **Query Stats**, and note the request charge (3.19 RUs), the number of
    records (12), and the output document size (752 bytes), as shown in *Figure 4.8*:'
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **查询统计**，并注意请求费用（3.19 RUs）、记录数（12）和输出文档大小（752 字节），如图 *4.8* 所示：
- en: '![](img/B19587_04_08.png)'
  id: totrans-298
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B19587_04_08.png)'
- en: 'Figure 4.8: Query statistics in Data Explorer'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.8：数据探索器中的查询统计信息
- en: 'Other useful query statistics include:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 其他有用的查询统计包括：
- en: Index hit document count.
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 索引命中文档计数。
- en: Index lookup time.
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 索引查找时间。
- en: Document load time.
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文档加载时间。
- en: Query engine execution time.
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查询引擎执行时间。
- en: Document write time.
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文档写入时间。
- en: Exploring other SQL queries with Cosmos DB
  id: totrans-306
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索使用 Cosmos DB 的其他 SQL 查询
- en: 'Try executing the following queries:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试执行以下查询：
- en: '[PRE30]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Although queries defined using strings are the most common way of working with
    Cosmos DB, you can also create permanently stored objects using server-side programming.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然使用字符串定义的查询是处理 Cosmos DB 最常见的方式，但您也可以使用服务器端编程创建永久存储的对象。
- en: Exploring server-side programming
  id: totrans-310
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索服务器端编程
- en: Azure Cosmos DB server-side programming consists of **stored procedures**, **triggers**,
    and **user-defined functions** (**UDFs**) written in JavaScript.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Cosmos DB 服务器端编程包括用 JavaScript 编写的 **存储过程**、**触发器** 和 **用户定义函数**（**UDFs**）。
- en: Implementing user-defined functions
  id: totrans-312
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现用户定义函数
- en: UDFs can only be called from within a query, and they implement custom business
    logic like calculating tax.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: UDF 只能在查询内部调用，并实现自定义业务逻辑，如计算税。
- en: 'Let’s define a UDF to calculate the sales tax of products:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们定义一个 UDF 来计算产品的销售税：
- en: 'In the Azure Cosmos DB Emulator or Azure portal **Data Explorer**, create a
    new UDF, as shown in *Figure 4.9*:'
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Azure Cosmos DB 模拟器或 Azure 门户 **数据探索器** 中创建一个新的 UDF，如图 4.9 所示：
- en: '![](img/B19587_04_09.png)'
  id: totrans-316
  prefs: []
  type: TYPE_IMG
  zh: '![img/B19587_04_09.png]'
- en: 'Figure 4.9: Creating a new UDF'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.9：创建新的 UDF
- en: For the **User Defined Function Id**, enter `salesTax`.
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**用户定义函数 ID**，输入 `salesTax`。
- en: 'For the **User Defined Function Body**, enter JavaScript to define the `salesTax`
    function, as shown in the following code:'
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**用户定义函数体**，输入 JavaScript 来定义 `salesTax` 函数，如下面的代码所示：
- en: '[PRE31]'
  id: totrans-320
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: In the toolbar, click **Save**.
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在工具栏中，点击**保存**。
- en: 'Create a new SQL query and enter SQL text to return the unit price and sales
    tax for products that cost more than 100, as shown in the following query:'
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的 SQL 查询，并输入 SQL 文本来返回成本超过 100 的产品的单价和销售税，如下面的查询所示：
- en: '[PRE32]'
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Note that `AS` to alias an expression is optional. I prefer to specify `AS`
    for improved legibility.
  id: totrans-324
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，使用 `AS` 来别名一个表达式是可选的。我更喜欢指定 `AS` 以提高可读性。
- en: Click the **Save Query** button.
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**保存查询**按钮。
- en: If you are using cloud resources instead of the emulator, then for compliance
    reasons, Microsoft saves queries in a container in your Azure Cosmos account in
    a separate database called **___Cosmos**. The estimated additional cost is $0.77
    daily.
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您使用的是云资源而不是模拟器，那么出于合规性原因，Microsoft 将查询保存在您的 Azure Cosmos 账户中的单独数据库中，该数据库称为**___Cosmos**。预计每日额外费用为
    0.77 美元。
- en: 'Execute the query and note the results, as shown in the following output:'
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行查询并注意结果，如下面的输出所示：
- en: '[PRE33]'
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Implementing stored procedures
  id: totrans-329
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现存储过程
- en: Stored procedures are the only way to ensure **ACID** (**Atomic, Consistent,
    Isolated, Durable**) transactions that combine multiple discrete activities into
    a single action that can be committed or rolled back. You cannot use client-side
    code to implement transactions. Server-side programming also provides improved
    performance since the code executes where the data is stored.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 存储过程是确保**ACID**（**原子性、一致性、隔离性、持久性**）事务的唯一方式，这些事务将多个离散活动组合成一个单一的操作，该操作可以提交或回滚。您不能使用客户端代码来实现事务。服务器端编程也提供了改进的性能，因为代码在数据存储的地方执行。
- en: 'We have just seen that you can define a UDF using the Data Explorer. We could
    define a stored procedure in a similar way, but let’s see how we would do it using
    code:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚看到，您可以使用数据探索器定义一个用户定义函数（UDF）。我们可以以类似的方式定义存储过程，但让我们看看如何使用代码来实现：
- en: 'In `Program.Methods.cs`, import the namespace for working with server-side
    programming objects, as shown in the following code:'
  id: totrans-332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.Methods.cs` 中，导入用于处理服务器端编程对象的命名空间，如下面的代码所示：
- en: '[PRE34]'
  id: totrans-333
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'In `Program.Methods.cs`, add statements to define a method to create a stored
    procedure that can insert multiple products by chaining callback functions until
    all items in an array are inserted, as shown in the following code:'
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.Methods.cs` 中，添加语句来定义一个方法，创建一个存储过程，可以通过链式回调函数插入多个产品，直到数组中的所有项目都插入，如下面的代码所示：
- en: '[PRE35]'
  id: totrans-335
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'In `Program.cs`, comment out all the existing statements, and add a statement
    to run the new method, as shown in the following code:'
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 中，注释掉所有现有的语句，并添加一个运行新方法的语句，如下面的代码所示：
- en: '[PRE36]'
  id: totrans-337
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Run the console app and note the results, which should be the successful creation
    of the stored procedure, as shown in the following output:'
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行控制台应用程序并注意结果，结果应该是存储过程的成功创建，如下面的输出所示：
- en: '[PRE37]'
  id: totrans-339
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'In `Program.Methods.cs`, add statements to define a method to execute the stored
    procedure, as shown in the following code:'
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.Methods.cs` 中，添加语句来定义一个执行存储过程的方法，如下面的代码所示：
- en: '[PRE38]'
  id: totrans-341
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'In `Program.cs`, comment out the statement to create the stored procedure,
    add a statement to execute the stored procedure, and then list products with a
    `productId` of `78`, as shown in the following code:'
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 中，注释掉创建存储过程的语句，添加一个执行存储过程的语句，然后列出具有 `productId` 为 `78` 的产品，如下面的代码所示：
- en: '[PRE39]'
  id: totrans-343
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Run the console app and note the results, which should be the successful execution
    of the stored procedure, as shown in the following output:'
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行控制台应用程序并注意结果，结果应该是存储过程的成功执行，如下面的输出所示：
- en: '[PRE40]'
  id: totrans-345
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Cleaning up Azure resources
  id: totrans-346
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 清理 Azure 资源
- en: 'When you are done with an Azure Cosmos DB account, you must clean up the resources
    used, or you will incur costs for as long as those resources exist. You can delete
    resources individually or delete the resource group to delete the entire set of
    resources. If you delete an Azure Cosmos DB account, then all the databases and
    containers within it are also deleted:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 当你完成一个Azure Cosmos DB账户后，你必须清理使用的资源，否则你将承担这些资源存在的费用。你可以单独删除资源或删除资源组以删除整个资源集。如果你删除了Azure
    Cosmos DB账户，那么它内部的所有数据库和容器也将被删除：
- en: In the Azure portal, navigate to **All Resources**.
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Azure门户中，导航到**所有资源**。
- en: In your `apps-services-book` resource group, click your Azure Cosmos DB account.
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的`apps-services-book`资源组中，点击你的Azure Cosmos DB账户。
- en: Click **Overview**, and then in the toolbar, click **Delete Account**.
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**概述**，然后在工具栏中点击**删除账户**。
- en: In the **Confirm the Account Name** box, enter your account name.
  id: totrans-351
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**确认账户名称**框中，输入你的账户名称。
- en: Click the **Delete** button.
  id: totrans-352
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**删除**按钮。
- en: Practicing and exploring
  id: totrans-353
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习和探索
- en: Test your knowledge and understanding by answering some questions, getting some
    hands-on practice, and exploring this chapter’s topics with deeper research.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 通过回答一些问题、进行一些实际操作练习，并深入研究本章的主题来测试你的知识和理解。
- en: Exercise 4.1 – Test your knowledge
  id: totrans-355
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习4.1 – 测试你的知识
- en: 'Answer the following questions:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 回答以下问题：
- en: What are the five APIs supported by Azure Cosmos DB?
  id: totrans-357
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Azure Cosmos DB支持哪五个API？
- en: 'At what level do you select the API: account, database, container, or partition?'
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你在哪个级别选择API：账户、数据库、容器还是分区？
- en: What does *embed* mean regarding data modeling with Cosmos DB?
  id: totrans-359
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Cosmos DB数据建模方面，*嵌入*意味着什么？
- en: What is the unit of measurement for throughput for Cosmos DB and what does 1
    unit represent?
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Cosmos DB的吞吐量测量单位是什么？1个单位代表什么？
- en: What package should you reference to programmatically work with Cosmos DB resources?
  id: totrans-361
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应该引用哪个包来以编程方式与Cosmos DB资源一起工作？
- en: What language do you use to write Cosmos DB Core (SQL) API user-defined functions
    and stored procedures?
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你使用什么语言编写Cosmos DB Core (SQL) API的用户定义函数和存储过程？
- en: Exercise 4.2 – Practice data modeling and partitioning
  id: totrans-363
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习4.2 – 练习数据建模和分区
- en: 'Microsoft documentation has an extensive example of modeling and partitioning
    Azure Cosmos DB:'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft文档中有一个广泛的示例，用于建模和分区Azure Cosmos DB：
- en: '[https://learn.microsoft.com/en-us/azure/cosmos-db/sql/how-to-model-partition-example](https://learn.microsoft.com/en-us/azure/cosmos-db/sql/how-to-model-partition-example)'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://learn.microsoft.com/en-us/azure/cosmos-db/sql/how-to-model-partition-example](https://learn.microsoft.com/en-us/azure/cosmos-db/sql/how-to-model-partition-example)'
- en: Exercise 4.3 – Explore topics
  id: totrans-366
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习4.3 – 探索主题
- en: 'Use the links on the following page to learn more details about the topics
    covered in this chapter:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下页面上的链接了解本章涵盖主题的更多详细信息：
- en: '[https://github.com/markjprice/apps-services-net8/blob/main/docs/book-links.md#chapter-4---managing-nosql-data-using-azure-cosmos-db](https://github.com/markjprice/apps-services-net8/blob/main/docs/book-links.md#chapter-4---managing-nosql-data-using-azure-cosmos-db)'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/markjprice/apps-services-net8/blob/main/docs/book-links.md#chapter-4---managing-nosql-data-using-azure-cosmos-db](https://github.com/markjprice/apps-services-net8/blob/main/docs/book-links.md#chapter-4---managing-nosql-data-using-azure-cosmos-db)'
- en: Exercise 4.4 – Download cheat sheets
  id: totrans-369
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习4.4 – 下载速查表
- en: 'Download query cheat sheets for the Azure Cosmos DB APIs and review them:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 下载Azure Cosmos DB API的查询速查表并查看它们：
- en: '[https://learn.microsoft.com/en-us/azure/cosmos-db/sql/query-cheat-sheet](https://learn.microsoft.com/en-us/azure/cosmos-db/sql/query-cheat-sheet)'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://learn.microsoft.com/en-us/azure/cosmos-db/sql/query-cheat-sheet](https://learn.microsoft.com/en-us/azure/cosmos-db/sql/query-cheat-sheet)'
- en: Exercise 4.5 – Explore the Gremlin API for Cosmos DB
  id: totrans-372
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习4.5 – 探索Cosmos DB的Gremlin API
- en: 'If you are interested, then I have written an optional online-only section
    where you explore the Azure Cosmos DB graph API that uses the Gremlin API, found
    at the following link:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对这个感兴趣，那么我写了一个可选的仅在网络上提供的部分，你可以在这里探索使用Gremlin API的Azure Cosmos DB图API，具体链接如下：
- en: '[https://github.com/markjprice/apps-services-net8/blob/main/docs/ch04-gremlin.md](https://github.com/markjprice/apps-services-net8/blob/main/docs/ch04-gremlin.md)'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/markjprice/apps-services-net8/blob/main/docs/ch04-gremlin.md](https://github.com/markjprice/apps-services-net8/blob/main/docs/ch04-gremlin.md)'
- en: 'To gain more experience with the Gremlin graph API, you could read the following
    online book:'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获得更多关于Gremlin图API的经验，你可以阅读以下在线书籍：
- en: '[https://kelvinlawrence.net/book/Gremlin-Graph-Guide.html](https://kelvinlawrence.net/book/Gremlin-Graph-Guide.html)'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://kelvinlawrence.net/book/Gremlin-Graph-Guide.html](https://kelvinlawrence.net/book/Gremlin-Graph-Guide.html)'
- en: Exercise 4.6 – Explore NoSQL databases
  id: totrans-377
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 4.6 – 探索 NoSQL 数据库
- en: 'This chapter focused on Azure Cosmos DB. If you wish to learn more about NoSQL
    databases, such as MongoDB, and how to use them with EF Core, then I recommend
    the following links:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 本章重点介绍了 Azure Cosmos DB。如果你希望了解更多关于 NoSQL 数据库（如 MongoDB）以及如何与 EF Core 一起使用它们的信息，那么我推荐以下链接：
- en: '**Use NoSQL databases as a persistence infrastructure**: [https://learn.microsoft.com/en-us/dotnet/standard/microservices-architecture/microservice-ddd-cqrs-patterns/nosql-database-persistence-infrastructure](https://learn.microsoft.com/en-us/dotnet/standard/microservices-architecture/microservice-ddd-cqrs-patterns/nosql-database-persistence-infrastructure)'
  id: totrans-379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**将 NoSQL 数据库用作持久化基础设施**：[https://learn.microsoft.com/en-us/dotnet/standard/microservices-architecture/microservice-ddd-cqrs-patterns/nosql-database-persistence-infrastructure](https://learn.microsoft.com/en-us/dotnet/standard/microservices-architecture/microservice-ddd-cqrs-patterns/nosql-database-persistence-infrastructure)'
- en: '**Document Database Providers for Entity Framework Core**: [https://github.com/BlueshiftSoftware/EntityFrameworkCore](https://github.com/BlueshiftSoftware/EntityFrameworkCore)'
  id: totrans-380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Entity Framework Core 的文档数据库提供程序**：[https://github.com/BlueshiftSoftware/EntityFrameworkCore](https://github.com/BlueshiftSoftware/EntityFrameworkCore)'
- en: Summary
  id: totrans-381
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, you learned:'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了：
- en: How to store flexibly structured data in Azure Cosmos DB.
  id: totrans-383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在 Azure Cosmos DB 中灵活存储结构化数据。
- en: How to create Cosmos DB resources in the emulator and in the Azure cloud.
  id: totrans-384
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在模拟器和 Azure 云中创建 Cosmos DB 资源。
- en: How to manipulate data using the Cosmos SQL API.
  id: totrans-385
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用 Cosmos SQL API 操作数据。
- en: How to implement server-side programming in Cosmos DB using JavaScript.
  id: totrans-386
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用 JavaScript 在 Cosmos DB 中实现服务器端编程。
- en: In the next chapter, you will use the `Task` type to improve the performance
    of your applications.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将使用 `Task` 类型来提高应用程序的性能。
