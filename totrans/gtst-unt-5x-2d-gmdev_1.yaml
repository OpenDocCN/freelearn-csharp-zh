- en: Chapter 1. A Flat World in Unity
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章. Unity中的平面世界
- en: This is the beginning of our journey in to the world of 2D game development
    with Unity. This book is structured to guide you through the creation of an entire
    2D game from scratch, in particular a tower defense game.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们进入Unity 2D游戏开发世界的旅程的开始。本书的结构旨在引导你从头开始创建一个完整的2D游戏，特别是塔防游戏。
- en: Despite the fact that we will focus on 2D game development, our final goal is
    to learn how to use Unity, and therefore this means that we will also have a glance
    at how Unity handles 3D. So, if later on you want to dedicate some time to 3D
    games, by the end of this book you will have the necessary background for doing
    so. In fact, the book is structured to contain as much detail as possible for
    each topic, and this includes historical overviews and references to further readings.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们将专注于2D游戏开发，但我们的最终目标是学习如何使用Unity，因此这也意味着我们将简要了解Unity如何处理3D。所以，如果你以后想花时间做3D游戏，到这本书结束时，你将具备这样做所需的背景知识。事实上，本书的结构旨在包含每个主题尽可能多的细节，这包括历史概述和进一步阅读的参考。
- en: In every chapter, we will face different challenges that will improve our skills.
    Furthermore, this book doesn't stop by telling you just what needs to be done
    (like many others), but it also explains the different tools that we will encounter
    and how to use them. In this way, we will learn how to use and apply them in different
    contexts as well. Thus, you can use this book as a reference manual, in order
    to speed up your workflow. To help you out, I recommend that you use the index,
    to quickly locate each one of the specific topics we will face.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在每一章中，我们都会面临不同的挑战，这将提高我们的技能。此外，本书不仅仅告诉你需要做什么（像许多其他书籍一样），它还解释了我们将遇到的不同工具以及如何使用它们。这样，我们将学会如何在不同的环境中使用和应用它们。因此，你可以将这本书作为参考手册，以加快你的工作流程。为了帮助你，我建议你使用索引，以便快速定位我们将面临的具体主题。
- en: At the end of each chapter, there is a *Homework* section, which leaves you
    with some exercises that are related to the topics that we have dealt in that
    chapter. Of course, you are free to skip this section, but I recommend that you
    do the exercises if you feel that you need to improve your skills even more.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 每章结束时，都有一个*作业*部分，其中包含一些与本章所讨论的主题相关的练习。当然，你可以自由地跳过这一部分，但我建议如果你觉得需要进一步提高技能，就做这些练习。
- en: 'For now, this chapter is an introduction to the 2D world inside Unity, and
    what needs to be done in order to create our game. In particular, we will look
    at the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，本章是Unity中2D世界的介绍，以及为了创建我们的游戏需要做什么。特别是，我们将探讨以下主题：
- en: What are 2D games?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2D游戏是什么？
- en: What does designing and developing 2D games mean?
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计和开发2D游戏意味着什么？
- en: Where to get Unity and its different versions
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 哪里可以获取Unity及其不同版本
- en: Downloading a graphical package from an external source
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从外部来源下载图形包
- en: How to organize a project in Unity
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在Unity中组织项目
- en: Understanding Unity when it is set in 2D
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在2D中理解Unity
- en: What are Sprites?
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sprite是什么？
- en: The Sprite Renderer component
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sprite渲染器组件
- en: Import settings for Sprites
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sprite的导入设置
- en: How to use the Sprite Editor with all its different modes
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用具有所有不同模式的Sprite编辑器
- en: Preparing the assets for our game
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为我们的游戏准备资源
- en: Setting up scenes and proportions
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置场景和比例
- en: One last thing. Sometimes I'll refer to the player and to characters in order
    to make examples or explain concepts. As such, sometimes I'll refer to them as
    if they were males, and at other times as if they were females (and sometimes
    both). The reason derives from my personal point of view so as to not to discriminate
    between the two genders.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一点。有时我会提到玩家和角色，以便举例或解释概念。因此，有时我会将他们称为男性，有时会称为女性（有时两者都是）。这种做法源于我的个人观点，以便不歧视两种性别。
- en: And with this said, let's get started!
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 说了这么多，让我们开始吧！
- en: Learning game development
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 学习游戏开发
- en: Game development and design are some of the most extensive works of art around.
    This is due to the large amount of expertise that is required to bring a game
    to life. You can get an idea of this by just looking at any credits in a game.
    They are extensive and contain a lot of names of people who have dedicated a lot
    of their time to the game in various roles.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏开发和设计是围绕的一些最广泛的艺术作品。这是由于将游戏带入生命所需的巨大专业知识。你可以通过查看任何游戏的信用列表来了解这一点。它们非常广泛，包含了许多人名字，他们在各种角色上为游戏投入了大量时间。
- en: Like most things in life, game development can be learned not only through practice,
    but iteration as well. And even when you master one of the many branches in game
    development, there is still something new to learn.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 就像生活中的大多数事情一样，游戏开发不仅可以通过实践学习，还可以通过迭代学习。即使你掌握了游戏开发中的许多分支之一，仍然有新东西可以学习。
- en: Regardless of your level of knowledge of Unity, I strongly suggest that you
    follow each step in this book, even if you think you know the topic. You just
    never know, there is always something new to learn!
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你对 Unity 的了解程度如何，我强烈建议你遵循这本书中的每个步骤，即使你认为你已经掌握了这个主题。你永远不知道，总有新东西可以学习！
- en: Tower defense games
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 塔防游戏
- en: 'Tower defense games come in many different styles. For example, in the following
    screenshot of *Defense Grid: The Awakening* and *Unstoppable Gorg*, both are top-down
    isometric style games. However, they are set in different worlds, with different
    objectives. So, given this, what makes a tower defense game? For one, they are
    centered on the idea of defending something, whether it is buildings, resources,
    weapons, and so forth. This is the main mechanism that defines the genre and drives
    the gameplay. Secondly, most tower defense games require economic and resource
    management. For example, after each wave of enemies, you may obtain a certain
    amount of virtual currency that you must then allocate to either the purchase
    of new defenses (weapons, towers, and so on) or upgrades. Each has their benefits
    depending on a range of factors such as weak points in your defense as well as
    the anticipated amount and strength of enemies that will be in the next wave.
    The number and difficulty of enemies increases after each wave, therefore challenging
    the player to manage resources and build defenses strategically. The idea is to
    build up enough resources to upgrade your defenses and to outlast the incoming
    wave. Sometimes, the player must stop the enemies (or an opponent) from destroying
    their own base.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '塔防游戏有多种不同的风格。例如，在以下 *Defense Grid: The Awakening* 和 *Unstoppable Gorg* 的截图上，两者都是俯视等距风格的游戏。然而，它们设定在不同的世界中，有不同的目标。所以，鉴于这一点，什么是塔防游戏呢？首先，它们围绕着保护某个东西的想法，无论是建筑、资源、武器等等。这是定义该流派并推动游戏玩法的主要机制。其次，大多数塔防游戏需要经济和资源管理。例如，在每一波敌人之后，你可能会获得一定数量的虚拟货币，然后你必须将其分配给购买新的防御（武器、塔楼等）或升级。每种都有其优点，这取决于一系列因素，如你防御的弱点以及预计下一波将出现的敌人数量和强度。每一波敌人的数量和难度都会增加，因此挑战玩家战略性地管理和构建防御。目标是积累足够的资源来升级你的防御，并比下一波敌人存活更久。有时，玩家必须阻止敌人（或对手）摧毁他们的基地。'
- en: In other cases, the player must prevent the enemies from reaching the end, as
    each enemy that manages to get through cause damage to the player's health bar.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在其他情况下，玩家必须阻止敌人到达终点，因为每个成功通过的敌人都会对玩家的生命条造成伤害。
- en: '![Tower defense games](img/image00316.jpeg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![塔防游戏](img/image00316.jpeg)'
- en: '(Top) *Defense Grid: The Awakening* and (bottom) *Unstoppable Gorg*'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '（顶部）*Defense Grid: The Awakening* 和 （底部）*Unstoppable Gorg*'
- en: There are many places on the Internet where you can find tower defense games.
    For example, Kongregate ([http://www.kongregate.com/](http://www.kongregate.com/))
    and Newgrounds ([http://www.newgrounds.com/](http://www.newgrounds.com/)) are
    examples of sites where a varied array of free tower defense games exist (such
    as *Kingdom Rush* or *Bloons Tower Defense 5*). However, many exist for iOS (App
    Store) and Android (Play Store), operating systems such as Linux, OSX, and PC
    (for example, Steam), and consoles (Playstation, Xbox), and so on.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在互联网上有许多地方可以找到塔防游戏。例如，Kongregate ([http://www.kongregate.com/](http://www.kongregate.com/))
    和 Newgrounds ([http://www.newgrounds.com/](http://www.newgrounds.com/)) 是提供各种免费塔防游戏的网站（例如
    *Kingdom Rush* 或 *Bloons Tower Defense 5*）。然而，许多游戏适用于 iOS (App Store) 和 Android
    (Play Store)，操作系统如 Linux、OSX 和 PC（例如 Steam），以及游戏机（Playstation、Xbox）等等。
- en: Designing our game
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计我们的游戏
- en: Before you even think about turning your computer on, you need to design your
    game. It's not enough to have a rough idea in mind. You need to write down all
    your ideas before hand to start working. The first phase of game design is **brainstorming**.
    There are different techniques and methodologies of brainstorming that, unfortunately,
    we don't have the time, in this small section, to describe. However, the final
    outcome should be tons of paper with thousands of ideas written down. It's not
    meant to be a work of art, but the foundations upon which your game will be built.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在您甚至考虑打开电脑之前，您需要设计您的游戏。仅仅有一个大致的想法是不够的。您需要事先写下所有想法才能开始工作。游戏设计的第一个阶段是**头脑风暴**。不幸的是，我们在这个小节中没有时间描述不同的头脑风暴技术和方法。然而，最终的结果应该是堆满纸张，上面写满了成千上万的想法。这并不是要成为一件艺术品，而是您游戏将建立的基础。
- en: Note
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Some information about brainstorming can be found also in a practical book, *Gamification
    with Unity*, by *Packt publishing*. You can find it here: [https://www.packtpub.com/game-development/gamification-unity-5x](https://www.packtpub.com/game-development/gamification-unity-5x).'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 关于头脑风暴的一些信息也可以在《Unity游戏化》这本书中找到，作者是Packt publishing。您可以在以下链接找到它：[https://www.packtpub.com/game-development/gamification-unity-5x](https://www.packtpub.com/game-development/gamification-unity-5x)。
- en: The next step is to refine your ideas, discard (or keep for other projects)
    the ones that you don't need, and organize them in a coherent form.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是细化您的想法，丢弃（或保留用于其他项目）您不需要的，并以一种连贯的形式组织它们。
- en: The final result should be something like the following.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 最终结果应该类似于以下内容。
- en: '*Panda Invasion is a 2D tower defense game. In fact, hungry pandas are invading
    to steal all the sugar from the player. He or she has to push back the pandas
    by using cupcake towers. There are different kinds of cupcake towers that the
    player can decide to place in the map. In every level, there will be a path that
    pandas will follow. Furthermore, they are spawned at the beginning of this path.
    At the end, there is the ambitious sugar castle that the player has to defend.
    If the pandas steal too much, bringing the sugar-meter to zero, the player has
    failed his or her important mission. On the contrary, if he or she is able to
    push all of them back, the player will gain victory. However, cupcake towers are
    not free. In fact, the player has to buy them by using candy. Every time that
    a panda is pushed back, then the player will earn a certain amount of candy. Furthermore,
    the player can use candy to upgrade the cupcake towers and make them even stronger!*'
  id: totrans-36
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*《熊猫入侵》是一款2D塔防游戏。实际上，饥饿的熊猫正在入侵以偷走玩家所有的糖。玩家必须使用纸杯塔来击退熊猫。玩家可以在地图上放置不同类型的纸杯塔。在每一级中，熊猫将遵循一条路径。此外，它们将在这条路径的开始处生成。最后，有一个玩家必须防守的野心勃勃的糖城堡。如果熊猫偷走太多糖，将糖量计降到零，玩家将失败他的重要任务。相反，如果玩家能够击退所有熊猫，玩家将获得胜利。然而，纸杯塔不是免费的。实际上，玩家必须使用糖果来购买它们。每次击退熊猫，玩家都将获得一定数量的糖果。此外，玩家可以使用糖果升级纸杯塔，使它们变得更强大！*'
- en: From this excerpt, you are now able to understand what we are going to do in
    this book. You also have a basic idea of how to write down your ideas. I strongly
    suggest that you always do this step, even when you are the only developer, and
    especially when you have a team.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 从这段摘录中，你现在应该能够理解我们将在本书中做什么。你也有了一个如何写下你想法的基本概念。我强烈建议你始终进行这一步，即使你只是唯一的开发者，尤其是在你有团队的时候。
- en: Getting ready
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备中
- en: 'Now that we have our idea, the next thing to do is to get Unity. It comes in
    different versions: Personal (which is free), Plus, Professional, and Enterprise.
    The last three contain more features than the Personal one. However, all the topics
    covered in this book can be done with the free version. In any case, you can get
    or buy Unity on the official website: [www.unity3d.com](http://www.unity3d.com).'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了我们的想法，下一步就是获取Unity。它有不同的版本：个人版（免费）、专业版、企业版。后三个版本比个人版包含更多功能。然而，这本书中涵盖的所有主题都可以使用免费版本完成。无论如何，您可以在官方网站上获取或购买Unity：[www.unity3d.com](http://www.unity3d.com)。
- en: 'This is the comparison screen between the different versions of Unity on the
    Unity Technologies website (if you scroll down, you will find which feature is
    included in which version):'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Unity Technologies网站上不同版本Unity的比较屏幕（如果您向下滚动，您将找到哪个版本包含哪些功能）：
- en: '![Getting ready](img/image00317.jpeg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![准备中](img/image00317.jpeg)'
- en: Note
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'This is a very short summary of how model pricing for Unity has varied in recent
    years. In fact, to become a developer also means to be aware of the world around
    you, and having basic marketing knowledge could also help. At the beginning, the
    model price of Unity didn''t allow developers to publish commercial games with
    the free version. In addition, the game engine didn''t have all the features,
    such as the Profiler or the Movie Textures. Epic Games, the company that owns
    Unreal Engine, changed its model prices by making its game engine free in March
    2015, also for commercial use (although it will take in return the 5% of the game''s
    gross revenue). After a period of time, Unity Technologies also allowed developers
    to publish commercial games even with the free version, but it was still watermarked.
    From Unity 5.x, features that were only in the Pro version became available in
    the free version as well. During the beginning of 2016, Unity used to come in
    two different versions: Free (or Personal) and Professional. The latter contains
    more features than the Personal one, and here is the comparison screen of the
    two:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这是对Unity近年来模型定价变化的非常简短的总结。实际上，成为一名开发者也意味着要了解你周围的世界，并且拥有基本的营销知识也可能有所帮助。最初，Unity的模型价格不允许开发者使用免费版本发布商业游戏。此外，游戏引擎没有所有功能，例如Profiler或Movie
    Textures。拥有Unreal Engine的Epic Games公司在2015年3月通过使其游戏引擎免费（尽管它将收取游戏总收入的5%）来改变其模型价格，也适用于商业用途（尽管它将收取游戏总收入的5%）。一段时间后，Unity
    Technologies也允许开发者使用免费版本发布商业游戏，但仍然带有水印。从Unity 5.x版本开始，之前仅在Pro版本中存在的功能也出现在免费版本中。在2016年初，Unity通常有两种不同的版本：免费（或个人）和专业。后者比个人版包含更多功能，以下是两个版本的比较屏幕：
- en: '![Getting ready](img/image00318.jpeg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/image00318.jpeg)'
- en: In June 2016, Unity changed its price model in the one described earlier.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 2016年6月，Unity对其之前描述的价格模式进行了更改。
- en: 'Once we have installed Unity, we can begin creating new projects. If we click
    on the **New project** button in the top-right corner of the window, Unity will
    ask us to insert the details for our project. We can name it `Panda Invasion`
    and choose the destination path, which is where the files of the project will
    be stored. There is another an important thing to note. Unity gives us the possibility
    to choose between a 3D and a 2D project. This is not important decision, since
    it can be changed at any time. However, it is useful to already have in mind whether
    or not the game will be 2D or 3D. By selecting the 2D mode, Unity adapts the default
    settings to the game that we have in mind. We will see these settings in the following
    sections. For now, you should have a screen that looks like the following:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们安装了Unity，我们就可以开始创建新的项目。如果我们点击窗口右上角的**新建项目**按钮，Unity会要求我们输入项目的详细信息。我们可以将其命名为`Panda
    Invasion`并选择目标路径，即项目文件将存储的位置。还有另一个需要注意的重要事项。Unity给我们提供了选择3D和2D项目之间的可能性。这并不是一个重要的决定，因为任何时候都可以更改。然而，提前考虑游戏是2D还是3D是有用的。通过选择2D模式，Unity会根据我们心中的游戏调整默认设置。我们将在下一节中看到这些设置。现在，你应该有一个看起来像以下的屏幕：
- en: '![Getting ready](img/image00319.jpeg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/image00319.jpeg)'
- en: Now, we can press the **Create project** button, and we have successfully created
    our project and are ready to build it.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以按下**创建项目**按钮，我们就成功创建了项目，并准备好构建它。
- en: This book assumes that you are fairly familiar with the Unity interface and
    with C# code. If you are not, don't worry. There are different ways that you can
    learn before continuing on with this book. For example, I wrote a small free e-guide
    that briefly goes through the main interfaces and concepts of Unity. Don't expect
    to learn all you need from there, but it is a good start. You can find it at [https://www.packtpub.com/packt/free-ebook/what-you-need-know-about-unity-5](https://www.packtpub.com/packt/free-ebook/what-you-need-know-about-unity-5).
    If you are a complete newcomer to Unity, please read that small e-guide. I'll
    still be here once you have finished and we can resume our awesome journey. Furthermore,
    the official manual of Unity and its documentation are great companions in the
    Unity game development world. You can find them both on the official website,
    at [https://docs.unity3d.com/Manual/index.html](https://docs.unity3d.com/Manual/index.html).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 本书假设您对Unity界面和C#代码相当熟悉。如果您不熟悉，不要担心。在继续阅读本书之前，您有多种学习方式。例如，我编写了一个小型的免费电子指南，简要介绍了Unity的主要界面和概念。不要期望在那里学到所有需要的东西，但这是一个良好的开始。您可以在[https://www.packtpub.com/packt/free-ebook/what-you-need-know-about-unity-5](https://www.packtpub.com/packt/free-ebook/what-you-need-know-about-unity-5)找到它。如果您是Unity的完全新手，请阅读这个小电子指南。完成阅读后，我还会在这里，我们可以继续我们的精彩旅程。此外，Unity的官方手册及其文档在Unity游戏开发世界中是极好的伴侣。您可以在官方网站上找到它们，在[https://docs.unity3d.com/Manual/index.html](https://docs.unity3d.com/Manual/index.html)。
- en: Since we don't have the time to create our own graphics for the game that we
    are going to develop, we need to download a custom package. Of course, you are
    free to choose the one you like most. For this book, we are going to use the `Tower
    Defence Pack 2` package, which can be downloaded from [http://player26.com/](http://player26.com/).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们没有时间为我们即将开发的游戏创建自己的图形，我们需要下载一个自定义包。当然，您可以选择您最喜欢的。对于本书，我们将使用`Tower Defence
    Pack 2`包，可以从[http://player26.com/](http://player26.com/)下载。
- en: Note
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '`Tower Defence Pack 2` features a delicious assortment of cupcakes ranging
    from infamous fluffy white frosting and colorful sprinkles, to decadent chocolate
    chip, not to mention an all-time favorite, lemon meringue with silver dragees.
    It also features the Sugar Castle, a home away from home for candy lovers! In
    addition to all this sugary goodness are trees, mountains, rainbows, and various
    other assets to populate your sugary environment. Just be beware, there are some
    hidden dangers among it all with the pandas, so be careful to keep your stash
    well protected from thieving sweet-toothed animals!'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`Tower Defence Pack 2`提供了一系列美味的蛋糕，从臭名昭著的蓬松白色糖霜和彩色糖珠，到奢华的巧克力豆，更不用说一直以来的最爱，柠檬蛋白霜配银色果仁。它还提供了Sugar
    Castle，这是糖果爱好者的家外之家！除了所有这些甜蜜的东西，还有树木、山脉、彩虹以及各种其他资产来填充您的甜蜜环境。只是要注意，其中有一些隐藏的危险，包括熊猫，所以请小心保护您的宝藏，防止被偷吃的甜食动物盗走！'
- en: 'The package includes all the basic assets that we need to create our tower
    defense game. It is free, even for commercial use, and even if credits are required.
    There is also a premium version that contains more assets and some of the decorations
    in different Sprites to increase customizability. In particular, in the free version
    we can find:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 该包包含我们创建塔防游戏所需的所有基本资产。它是免费的，即使是商业用途，即使需要署名。还有一个包含更多资产和一些不同精灵中的装饰以提高可定制性的高级版本。特别是，在免费版本中我们可以找到：
- en: Maps designed for tower defense games
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为塔防游戏设计的地图
- en: Evil pandas (with animation)
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 恶搞熊猫（带有动画）
- en: Three different upgrading levels for cupcakes towers
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 三个不同的升级等级用于蛋糕塔
- en: Multiple icons for each object in the package
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含每个对象的多个图标
- en: And many more assets to populate the level with!
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以及更多资产来填充关卡！
- en: 'The following image can give you an idea of the kind of graphics this package
    contains:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图片可以给您一个关于本包包含的图形类型的概念：
- en: '![Getting ready](img/image00320.jpeg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/image00320.jpeg)'
- en: So, download this package before moving on to the next section.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在进入下一节之前，请先下载此包。
- en: Remembering the past to build the future
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 记住过去，构建未来
- en: If you are new to Unity, or you have only used Unity 5.x, you can skip this
    section or read it just for curiosity.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是Unity的新手，或者您只使用过Unity 5.x，您可以跳过这一节，或者只是出于好奇阅读它。
- en: In Unity 4.x (before version 4.6) and other previous versions, building 2D games
    was a bit harder. In fact, you needed to use a range of different methods and
    tricks to achieve the illusion on 2D. All the 2D objects were actually 3D objects
    viewed in a particular perspective or with a particular camera, which gave the
    illusion of a 2D object.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity 4.x版本（在4.6版本之前）和其他早期版本中，构建2D游戏有点困难。实际上，您需要使用一系列不同的方法和技巧来实现2D的错觉。实际上，所有的2D对象都是特定视角或特定摄像机下查看的3D对象，这产生了2D对象的错觉。
- en: From Unity 4.6 on, and especially since Unity 5.x, this is not needed any more.
    There is built-in support for 2D games. So now, there are special components to
    deal with 2D objects, and the following sections will explore some of them.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 从Unity 4.6版本开始，尤其是自Unity 5.x版本以来，这不再需要。现在，Unity内置了对2D游戏的支持。因此，现在有专门处理2D对象的组件，接下来的几节将探讨其中的一些。
- en: Organizing the project
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组织项目
- en: There are different ways to organize a project within Unity, therefore giving
    a bit more freedom. In this section, we propose one method, which we will use
    during the development of the project in this book.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity中组织项目有多种方式，因此提供了一定的自由度。在本节中，我们提出了一种方法，我们将在本书的项目开发中使用这种方法。
- en: The key idea is to organize the different assets by type (and not, as in other
    methods, by their position within the level).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 关键思想是按类型组织不同的资产（而不是像其他方法那样，按它们在关卡中的位置组织）。
- en: 'First of all, let''s understand how Unity organizes assets. All of them are
    placed inside a folder named `Assets`, which can be found also inside the `Project`
    folder. Therefore, all our assets should be contained in this folder or subfolder.
    In order to create a new folder, right-click on the **Project** panel and then
    **Create** | **Folder**. As a result, a new folder is created within the folder
    you clicked. Since we don''t have any folders, it will be a subfolder of the **Assets**
    one. We have the option to rename it as we want. If you miss this, you can just
    select it and then click on it again (but not too fast, otherwise Unity will consider
    this as a double-click and it will open the folder), as shown in the following
    screenshot:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们了解Unity如何组织资产。所有资产都放置在一个名为`Assets`的文件夹中，该文件夹也位于`Project`文件夹内。因此，我们所有的资产都应该包含在这个文件夹或子文件夹中。为了创建一个新的文件夹，右键单击**项目**面板，然后选择**创建**
    | **文件夹**。结果，在您点击的文件夹内创建了一个新的文件夹。由于我们没有任何文件夹，它将是**Assets**文件夹的子文件夹。我们可以将其重命名为我们想要的任何名称。如果您错过了这个步骤，只需选择它并再次单击它（但不要太快，否则Unity会将其视为双击并打开文件夹），如下面的截图所示：
- en: '![Organizing the project](img/image00321.jpeg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![组织项目](img/image00321.jpeg)'
- en: Note
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 备注
- en: 'It is important to note that Unity will ignore the following categories, in
    order to avoid importing system files:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，Unity将忽略以下类别，以避免导入系统文件：
- en: Hidden folders and files
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 隐藏的文件夹和文件
- en: Folder and files that starts with `~` and with `.`
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以`~`开头并以`.`结尾的文件夹和文件
- en: Folders and files named `cvs`
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命名为`cvs`的文件夹和文件
- en: Files which have a `.tmp` extension
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展名为`.tmp`的文件
- en: 'We need to create the following folders (you should only create the ones in
    bold, since we will not use the other ones):'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要创建以下文件夹（您只需创建加粗的文件夹，因为我们不会使用其他文件夹）：
- en: Fonts
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字体
- en: '**Graphics**'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**图形**'
- en: Materials
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 材质
- en: '**Animations** (we will see them in more detail in [Chapter 4](part0056.xhtml#aid-1LCVG1
    "Chapter 4. No Longer Alone – Sweet-Toothed Pandas Strike"), *No Longer Alone
    - Sweet-Toothed Pandas Strike*)'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**动画**（我们将在[第4章](part0056.xhtml#aid-1LCVG1 "第4章。不再孤单——甜牙熊猫出击")中更详细地了解它们），*不再孤单——甜牙熊猫出击*'
- en: Music and sounds
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 音乐和声音
- en: Other assets (to store, for instance, `.txt` assets)
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他资产（例如，用于存储的`.txt`资产）
- en: Physical materials
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 物理材质
- en: '**Prefabs** (we will see what they are in the next chapter)'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**预制体**（我们将在下一章中了解它们是什么）'
- en: '**Scenes**'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**场景**'
- en: '**Scripts**'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**脚本**'
- en: Note
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 备注
- en: If you are planning to create a 3D game, the folders will be different and they
    will include other kind of assets, such as 3D models and textures.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您计划创建3D游戏，文件夹将不同，并将包含其他类型的资产，例如3D模型和纹理。
- en: 'At the end, we should see the following in our **Project** panel (I''ll add
    the `Animation` folder in [Chapter 4](part0056.xhtml#aid-1LCVG1 "Chapter 4. No
    Longer Alone – Sweet-Toothed Pandas Strike"), *No Longer Alone - Sweet-Toothed
    Pandas Strike*, when we will see animations, but feel free to add it immediately
    if you like):'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们应该在我们的**项目**面板中看到以下内容（我将在[第4章](part0056.xhtml#aid-1LCVG1 "第4章。不再孤单——甜牙熊猫出击")中添加`Animation`文件夹，*不再孤单——甜牙熊猫出击*，当我们看到动画时，但如果您喜欢，可以立即添加）：
- en: '![Organizing the project](img/image00322.jpeg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![组织项目](img/image00322.jpeg)'
- en: 'There is something else to know about the folders in your projects. If you
    create folders with some specific names, Unity will treat them in a special way.
    We are not going to use them; however, it''s worth giving them a quick look:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 关于您项目中的文件夹，还有其他一些事情需要了解。如果您创建具有某些特定名称的文件夹，Unity将以特殊方式处理它们。我们不会使用它们；然而，快速查看它们是值得的：
- en: '`Editor` (or a subfolder within it): This contains editor scripts rather than
    runtime scripts. These are designed to implement new functionality in Unity during
    the development of your games, and will not be included in the published game.
    As a result, you cannot use any of the scripts inside this folder within your
    `Scene`. Furthermore, it''s possible to use more than one `Editor` folder in your
    project (even if this affects the execution order).'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`编辑器`（或其子文件夹）：这包含编辑器脚本而不是运行时脚本。这些脚本旨在在您的游戏开发期间在Unity中实现新功能，并且不会包含在发布的游戏中。因此，您不能在您的`场景`中使用此文件夹中的任何脚本。此外，您的项目中可以包含多个`编辑器`文件夹（即使这会影响执行顺序）。'
- en: '`Editor Default Resources`: This contains resources that can be loaded on-demand
    by editor scripts by using the `EditorGUIUtility.Load()` function.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`编辑器默认资源`：这包含可以通过使用`EditorGUIUtility.Load()`函数按需由编辑器脚本加载的资源。'
- en: '`Resources` (or a subfolder within it): This contains all the assets that can
    be loaded on demand from a script by using the `Resources.Load()` function. In
    fact, you may need to load an asset that is not present in the scene yet. As with
    the `Editor` folder, you can have as many as you want in your project.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`资源`（或其子文件夹）：这包含所有可以通过使用`Resources.Load()`函数按需从脚本中加载的资产。实际上，您可能需要加载场景中尚未存在的资产。与`编辑器`文件夹一样，您可以在项目中拥有尽可能多的这些文件夹。'
- en: '`Plugins`: This contains native DLLs, written in C/C++, which can access third-party
    libraries, system calls, and other functions that Unity doesn''t provide directly.
    As the name suggests, it is used to implement or import plugins.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`插件`：这包含用C/C++编写的本地DLL，可以访问第三方库、系统调用和其他Unity不直接提供的功能。正如其名所示，它用于实现或导入插件。'
- en: '`StreamingAssets`: This contains assets that will not be included in your main
    game file, but that can be streamed from a script.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`StreamingAssets`：这包含不会包含在您的游戏主文件中，但可以从脚本中流式传输的资产。'
- en: '`WebPlayerTemplates`: This contains custom host pages to use when the target
    platform is the `WebPlayer`. Scripts in this folder will not be compiled.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WebPlayerTemplates`：这包含用于目标平台为`WebPlayer`时的自定义宿主页面。此文件夹中的脚本将不会编译。'
- en: Coming back to our folder, we need to import the package that we have downloaded.
    This can be done in a number of different ways, but the easiest way is to drag
    and drop the folder of the package within our `Graphics` folder.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 回到我们的文件夹，我们需要导入我们下载的包。这可以通过多种不同的方式完成，但最简单的方式是将包的文件夹拖放到我们的`Graphics`文件夹中。
- en: 'If you need to select an asset to use, in the bottom-left corner of the **Project**
    panel, there is a slider that allows you to increase the size of the icons in
    the **Project** panel. This function is useful when there are a lot of assets
    and we need to find the right one without knowing the name, or when exploring
    new packages we don''t know yet. The slider is highlighted in the following screenshot
    for your convenience:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要选择要使用的资产，在**项目**面板的左下角有一个滑块，允许您增加**项目**面板中图标的大小。当有大量资产且我们需要在不了解名称的情况下找到正确的资产，或者探索我们还不了解的新包时，此功能非常有用。以下截图中的滑块已突出显示，以方便您查看：
- en: '![Organizing the project](img/image00323.jpeg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![组织项目](img/image00323.jpeg)'
- en: A 2D world
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 二维世界
- en: There are few things to notice in our project when it is set to 2D mode, which
    we are going to explore in this section.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们的项目设置为二维模式时，有几个需要注意的事项，我们将在本节中探讨。
- en: 'First of all, if you ever need to switch between 2D and 3D mode, you can do
    so by navigating to **Edit** | **Project Settings** | **Editor**. If you go in
    to the **Default Behavior Mode** settings, you can change the **Mode**, as shown
    in the following screenshot:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，如果您需要在不同二维和三维模式之间切换，您可以通过导航到**编辑** | **项目设置** | **编辑器**来完成。如果您进入**默认行为模式**设置，您可以更改**模式**，如下面的截图所示：
- en: '![A 2D world](img/image00324.jpeg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![二维世界](img/image00324.jpeg)'
- en: 'Coming back to our main interface, let''s see the main differences between
    2D and 3D mode. The **Scene** view is set by default to **2D**, as you can see
    in the following screenshot:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 回到我们的主界面，让我们看看2D模式和3D模式之间的主要区别。默认情况下，**场景**视图设置为**2D**，如以下截图所示：
- en: '![A 2D world](img/image00325.jpeg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![2D世界](img/image00325.jpeg)'
- en: This allows us to have the **Scene** view locked on to the *xy* plane.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许我们将**场景**视图锁定在*xy*平面上。
- en: Note
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The *z* axis is used to determine which object should be rendered first. This
    decides which objects are in the foreground and which ones are in the background.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '*z*轴用于确定哪个对象应该首先渲染。这决定了哪些对象在前景，哪些在背景。'
- en: 'Then, every time we create a new scene, the default camera that comes with
    it is always set in **Orthographic** mode. Furthermore, its position is set to
    (`0`, `0`, `-10`), whereas in 3D mode, it is set to (`0`, `1`, `-10`). You can
    also check this by selecting the **Main Camera** in the **Hierarchy** panel and
    seeing its properties in the **Inspector**, as shown in the following screenshot:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，每次我们创建一个新的场景时，随场景提供的默认摄像机总是设置为**正交**模式。此外，其位置设置为(`0`, `0`, `-10`)，而在3D模式中，它设置为(`0`,
    `1`, `-10`)。你也可以通过在**层次**面板中选择**主摄像机**并查看**检查器**中的属性来检查这一点，如下面的截图所示：
- en: '![A 2D world](img/image00326.jpeg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![2D世界](img/image00326.jpeg)'
- en: Other differences are the options to use the **Sprite Packer** or the default
    objects that don't have real-time directional lights. There are also changes in
    the **Lighting** settings (you can access them from **Window/Lighting**). In particular,
    the **Skybox** is disabled for new scenes and **Precomputed Realtime GI**, **Baked
    GI**, and **Auto-Building** are set to off. In addition, the **Ambient Source**
    comes with a dark grey color.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 其他区别包括使用**精灵打包器**的选项或默认没有实时方向光的对象。还有**光照**设置的变化（你可以从**窗口/光照**访问它们）。特别是，**天空盒**在新场景中是禁用的，**预计算实时全局光照**、**烘焙全局光照**和**自动构建**都设置为关闭。此外，**环境光源**带有深灰色。
- en: 'In the following screenshot, you can see the default **Lighting** settings:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下截图中，你可以看到默认的**光照**设置：
- en: '![A 2D world](img/image00327.jpeg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![2D世界](img/image00327.jpeg)'
- en: Note
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The RGB code of the color of the **Ambient Source** that is set by default in
    the 2D mode is (`54`, `58`, `66`).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在2D模式下默认设置的**环境光源**颜色的RGB代码是(`54`, `58`, `66`)。
- en: However, the most important difference is how Unity imports new 2D assets, but
    we are going to see this in detail in the following sections.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，最重要的区别是Unity导入新2D资产的方式，但我们将详细讨论这一点在接下来的章节中。
- en: Sprites
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 精灵
- en: 'The fundamental bricks of a 2D game in Unity are the Sprites. You can think
    of them as pictures, but actually as we are going to see, they are something more.
    In fact, one image can contain more than one Sprite. Usually, this kind of image
    takes the name of a Sprite Sheet. Here is an example of a Sprite Sheet within
    our package:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity中，2D游戏的基石是精灵。你可以把它们想象成图片，但实际上，正如我们即将看到的，它们是更多的事物。实际上，一张图片可以包含多个精灵。通常，这类图片被称为精灵表。以下是我们包内一个精灵表的示例：
- en: '![Sprites](img/image00328.jpeg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![精灵](img/image00328.jpeg)'
- en: There are different reasons why we want to have all the Sprites on a single
    image, rather than display them separately. The most important one is efficiency.
    Every time you want to render something on the screen, this has to be rendered
    by the graphics card in your computer. If all the Sprites are in separate images,
    the graphics card will have to process a lot of images. As a result, your game
    will run slowly.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望所有精灵都在单个图像上，而不是单独显示，原因有很多。其中最重要的原因是效率。每次你想在屏幕上渲染某些内容时，这都必须由你的电脑中的显卡来渲染。如果所有精灵都在单独的图像中，显卡将不得不处理大量的图像。结果，你的游戏会运行得较慢。
- en: Another reason for having Sprite Sheets is for animations. While 3D animations
    are made of data that describes how a 3D model has to be moved, 2D animations
    are made of frames. Like a movie or a cartoon, an animation is made of different
    images, or in this case, Sprites. Each of them describes a moment, and if you
    change them quickly enough, such as 25 per second, you can give the illusion of
    movement. Having all of the frames in a unique image is both efficient and well
    organized.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个使用精灵表的原因是动画。虽然3D动画是由描述3D模型如何移动的数据组成的，但2D动画是由帧组成的。就像电影或卡通一样，动画是由不同的图像组成的，或者在这种情况下，是精灵。每个都描述了一个瞬间，如果你足够快地改变它们，比如每秒25帧，你就可以产生运动的错觉。将所有帧放在一个独特的图像中既高效又井然有序。
- en: 'Naturally, there are other reasons for Sprite Sheets, but the two preceding
    reasons should be enough to convince you that Sprite Sheets are the best practice.
    On the other hand, there is a tradeoff to pay: the game engine needs to be able
    to distinguish between them on the image. We will see how Unity handles this in
    the following sections. But before we move on, there are other important concepts
    to learn about Sprites in Unity.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 自然地，精灵表单还有其他原因，但前两个原因应该足以让你相信精灵表单是最好的实践。另一方面，需要付出的代价是：游戏引擎需要能够在图像中区分它们。我们将在接下来的章节中看到Unity是如何处理这个问题的。但在我们继续之前，还有其他关于Unity中精灵的重要概念需要了解。
- en: Like a 3D object, a Sprite also has a pivot point. Usually, this is located
    in the middle, but it can be changed in the Sprite Editor. The pivot point is
    where Unity starts to do all the calculations from. For instance, when you give
    a position for the Sprite to be within the Scene, Unity places the pivot point
    in that specific location, and then draws the Sprite around it. The pivot point
    is also important for rotations. Every time we rotate the Sprite, the rotation
    will be around the pivot point. In other words, during a rotation, the pivot point
    is the only point that does not change position.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 就像三维对象一样，精灵也有一个中心点。通常，这个中心点位于中间，但可以在精灵编辑器中更改。中心点是Unity开始所有计算的地方。例如，当你为精灵指定一个在场景中的位置时，Unity将中心点放置在那个特定位置，然后围绕它绘制精灵。中心点对于旋转也很重要。每次我们旋转精灵时，旋转都会围绕中心点进行。换句话说，在旋转过程中，中心点是唯一不改变位置的点。
- en: 'This can be better explained with a screenshot, where the arrow is indicating
    the location of the pivot point:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过截图更好地解释，其中箭头指示中心点的位置：
- en: '![Sprites](img/image00329.jpeg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![精灵](img/image00329.jpeg)'
- en: As you can see, there is the same Sprite rotated by 90 degrees clockwise. The
    one on the left has the pivot point in the middle, whereas the one on the right
    has it toward the left-hand side (the pivot point can be identified by the blue
    circle). Of course, you can make them coincide with a translation, but it is important
    to keep where it is in mind, especially when we code, in order to easily achieve
    what we want.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，有一个以顺时针方向旋转90度的相同精灵。左边的一个中心点位于中间，而右边的一个中心点位于左侧（中心点可以通过蓝色圆圈识别）。当然，你可以通过平移使它们重合，但记住它在哪里很重要，尤其是在我们编码时，这样我们才能轻松实现我们想要的效果。
- en: Now, there is another aspect to take into account about Sprites. In a 2D game,
    both the background and the character who is moving around the world are considered
    Sprites. However, we would like to render the background behind the character,
    and not vice versa. Therefore, the Sprites are rendered in a certain order that
    determines which one should render on top of the others.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，关于精灵还有另一个需要考虑的方面。在二维游戏中，背景和在世界中移动的角色都被认为是精灵。然而，我们希望渲染在角色后面的背景，而不是相反。因此，精灵以一定的顺序渲染，这决定了哪个精灵应该渲染在其他精灵之上。
- en: 'In Unity there are two main ways to decide this order:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity中，有两种主要方式来决定这个顺序：
- en: '**Sorting Layers**: Each **Sprite Render**, which is a component attached to
    a game object that renders the Sprite selected, has a variable called **Sorting
    Layer**. There, we can chose on which layer the Sprite will be rendered. The order
    of the different sorting layers can be determined in the Tags and Layers Settings
    (we will see how to access this menu later on in the chapter). Furthermore, Sorting
    Layers can offer an internal order for Sprites within the same layer by using
    the **Order In Layer** variable, which is always in the **Sprite Render** component.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**排序层**: 每个**精灵渲染器**，这是一个附加到游戏对象上的组件，用于渲染所选的精灵，都有一个名为**排序层**的变量。在那里，我们可以选择精灵将在哪个层上渲染。不同排序层的顺序可以在标签和层设置中确定（我们将在本章后面看到如何访问此菜单）。此外，排序层可以通过使用**层内顺序**变量为同一层内的精灵提供内部顺序，该变量始终位于**精灵渲染器**组件中。'
- en: '**Z-Buffering**: Since a 2D object only needs two coordinates to describe its
    position (the *x* and *y* axes), we have the *z* axis to describe depth. Unity
    uses depth to determine which Sprite should be rendered first. Since you need
    to imagine this as a depth, it''s good practice to use only negative values. The
    greater the negative value, the closer the character or object is to the camera.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Z缓冲区**: 由于二维对象只需要两个坐标来描述其位置（*x*轴和*y*轴），我们有一个*z*轴来描述深度。Unity使用深度来确定哪个精灵应该首先渲染。由于你需要想象这是一个深度，因此只使用负值是一个好习惯。负值越大，角色或对象就越接近相机。'
- en: There aren't any great differences between these methods in terms of computational
    efficiency. Therefore, both can be used. Actually, they can also be used together.
    A general approach is to use the *z* axis for visually structuring characters.
    Imagine a character who is carrying a weapon. Depending on which hand the weapon
    is held in and in which direction the character is facing, the weapon should be
    rendered behind the character or in front of it. Sorting Layers, instead, are
    used for organizing the Sprites at a higher level, such as background, foreground,
    player, enemies, and so on.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算效率方面，这些方法之间没有太大的差异。因此，两者都可以使用。实际上，它们也可以一起使用。一种通用方法是使用*z*轴来在视觉上组织角色。想象一个携带武器的角色。根据武器握在哪个手上以及角色面向哪个方向，武器应该渲染在角色后面还是前面。相反，排序层用于在更高层次上组织精灵，例如背景、前景、玩家、敌人等等。
- en: However, for the sake of learning, in this book we will not use Sorting Layers,
    but only Z-Buffering, since it can be easily changed within the code.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，为了学习的目的，在这本书中，我们将不会使用排序层，而只使用Z缓冲区，因为它可以在代码中轻松更改。
- en: Sprite Renderer
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Sprite 渲染器
- en: Before we mention this component, it might be worth discussing it a bit more.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们提到这个组件之前，可能值得多讨论一下。
- en: 'This component will be automatically attached every time we add a Sprite to
    the scene. It should look like the following screenshot:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 每次我们向场景添加精灵时，这个组件都会自动附加。它应该看起来像以下截图：
- en: '![Sprite Renderer](img/image00330.jpeg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![Sprite 渲染器](img/image00330.jpeg)'
- en: 'Let''s break down the different parameters:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解一下不同的参数：
- en: '**Sprite**: This holds the Sprite that it has to render.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**精灵**：这包含需要渲染的精灵。'
- en: '**Color**: This is a color that is multiplied to the Sprite image. If you know
    bit about shaders and renderers, this is actual the vertex color of the rendered
    mesh.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**颜色**：这是一个乘以精灵图像的颜色。如果您对着色器和渲染器有些了解，这实际上是渲染网格的顶点颜色。'
- en: '**Flip**: This defines on which axis the Sprite needs to be flipped. This is
    a new function from Unity 5.3.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**翻转**：这定义了精灵需要在哪个轴上翻转。这是Unity 5.3中的一个新功能。'
- en: '**Material**: This is the material Unity should use to render the Sprite. The
    default one is more than enough for our needs. If you are an expert in shaders,
    there are two kinds of built-in shader. Both are simple alpha-blended shaders,
    but the Diffuse one interacts with light, generating a (`0`, `0`, `-1`) front-facing
    normal vector.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**材质**：这是Unity应该用来渲染精灵的材质。默认的材质对我们的需求来说已经足够了。如果您是着色器专家，有两种内置的着色器。两者都是简单的alpha混合着色器，但漫反射着色器与光线交互，生成一个(`0`,
    `0`, `-1`)的前向法线向量。'
- en: '**Sorting Layer**: This is in which Sorting Layer the Sprite should be rendered
    (as discussed previously).'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**排序层**：精灵应该渲染在哪个排序层（如前所述）。'
- en: '**Order in Layer**: This is the order within that particular Sorting Layer
    (as we discussed previously).'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**层中顺序**：这是特定排序层内的顺序（如前所述）。'
- en: Importing new friends
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导入新朋友
- en: 'If you have downloaded and imported the package from the *Getting ready* section,
    we should now have all the files inside our `Project` folder. If you go to the
    `Graphics/towers` folder and select `cupcake_tower_sheet-01`, we should see the
    following in the **Inspector**:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经从“准备就绪”部分下载并导入了这个包，我们现在应该在我们的“项目”文件夹中拥有所有文件。如果您转到“图形/塔”文件夹并选择“cupcake_tower_sheet-01”，我们应该在**检查器**中看到以下内容：
- en: '![Importing new friends](img/image00331.jpeg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![导入新朋友](img/image00331.jpeg)'
- en: These are the **Import Settings**, where different options can be set. After
    we have changed something, we need to press the **Apply** button at the bottom
    to confirm the changes. Likewise, if we are not happy, we can press the **Revert**
    button to discard our changes.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是**导入设置**，可以设置不同的选项。在我们更改了某些内容之后，我们需要按下底部的**应用**按钮来确认更改。同样，如果我们不满意，我们可以按下**还原**按钮来放弃我们的更改。
- en: It is important to note that the **Texture Type** is **Sprite (2D and UI)**.
    In 2D mode, Unity always imports image files as Sprites and not as Textures.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意**纹理类型**是**精灵（2D和UI）**。在2D模式下，Unity始终将图像文件导入为精灵而不是纹理。
- en: The other important parameter that we need to take into consideration is the
    **Sprite Mode**. By default, it is set to **Single**, but it can be changed to
    **Multiple** or **Polygonal** (only from Unity 5.3). As the names suggests, the
    first is used when the image contains a single Sprite, and the second mode is
    used when we have a Sprite Sheet with more than one Sprite. The last one is used
    to identify a polygonal Sprite with a custom number of edges.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要考虑的另一个重要参数是**精灵模式**。默认情况下，它设置为**单个**，但它可以被更改为**多个**或**多边形**（仅从Unity 5.3开始）。正如名称所暗示的，第一个用于图像包含单个精灵时，第二个模式用于我们有一个包含多个精灵的精灵图集时。最后一个用于识别具有自定义边数的多边形精灵。
- en: Furthermore, the **Pixel Per Unit** parameter determines how big the Sprite
    will be in the Scene. It represents how many pixels are needed to have a unitary
    length in the **Scene View**. By default, it is set to **100**, but you should
    modify this value when you need to adapt your assets and change them to the right
    dimensions. However, if you already have a scale in mind, creating the graphics
    accordingly could be a useful time saver for the later stages of development.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，**每单位像素**参数决定了精灵在场景中的大小。它表示在**场景视图**中需要多少像素来表示一个单位长度。默认情况下，它设置为**100**，但当你需要调整你的资产并更改它们到正确的尺寸时，你应该修改这个值。然而，如果你已经有了缩放的想法，相应地创建图形可以在开发的后期阶段节省一些时间。
- en: With regard to the other settings (**Packing Tag**, **Generate Mip Maps**, **Filter
    Mode**, **Max Size**, and **Format**), we will see them in detail in the last
    chapter of this book, when we will talk about optimization.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 关于其他设置（**打包标签**、**生成Mip贴图**、**过滤模式**、**最大尺寸**和**格式**），我们将在本书的最后一章中详细讨论，届时我们将讨论优化。
- en: Since the file that we have selected contains more than one Sprite, let's set
    the **Sprite Mode** to **Multiple** before we move on to the next section.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们选择的文件包含多个精灵，在我们进入下一节之前，让我们将**精灵模式**设置为**多个**。
- en: The Sprite Editor
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 精灵编辑器
- en: 'In **Import Settings**, there is also a button named **Sprite Editor**. If
    we press this button, a new window appears. This is the **Sprite Editor**, as
    we can see in the following screenshot:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在**导入设置**中，还有一个名为**精灵编辑器**的按钮。如果我们按下这个按钮，会出现一个新的窗口。这就是**精灵编辑器**，正如我们可以在以下屏幕截图中看到的：
- en: '![The Sprite Editor](img/image00332.jpeg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![精灵编辑器](img/image00332.jpeg)'
- en: If we mess things up, we can always revert them back by clicking on the **Revert**
    button in the top-right corner of the **Sprite Editor**. Next to it, you can also
    find an **Apply** button, which you use to confirm your choices, so be careful
    which one you press!
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们搞砸了，我们总是可以通过点击**精灵编辑器**右上角的**还原**按钮来恢复它们。旁边，你还可以找到一个**应用**按钮，你使用它来确认你的选择，所以请小心你按的是哪一个！
- en: 'For your own reference, they are highlighted in the next screenshot:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 为了你的参考，它们在下一张屏幕截图中被突出显示：
- en: '![The Sprite Editor](img/image00333.jpeg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![精灵编辑器](img/image00333.jpeg)'
- en: 'Near these two buttons, you can find some features that might help you when
    working in the **Sprite Editor**. The first is a button that is easy to miss,
    but that allows you to switch from the colored asset (RGB channels) to B/W (alpha
    channel). This is particularly useful when you need to define contours and the
    image has transparency, as we will see later. So that you avoid missing it, you
    can find it highlighted in the following screenshot:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两个按钮附近，你可以找到一些可能在你在**精灵编辑器**中工作时有所帮助的功能。第一个按钮很容易错过，但它允许你从彩色资产（RGB通道）切换到B/W（alpha通道）。这在需要定义轮廓且图像具有透明度时特别有用，正如我们稍后将会看到的。为了避免错过它，你可以在以下屏幕截图中找到它被突出显示：
- en: '![The Sprite Editor](img/image00334.jpeg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![精灵编辑器](img/image00334.jpeg)'
- en: 'To the right of it, there are two sliders, which allow you to either zoom in/out
    or increase/decrease the resolution (number of pixels). These features are shown
    in the following screenshot:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在它的右边，有两个滑块，允许你放大/缩小或增加/减少分辨率（像素数）。这些功能在以下屏幕截图中显示：
- en: '![The Sprite Editor](img/image00335.jpeg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![精灵编辑器](img/image00335.jpeg)'
- en: The **Sprite Editor** allows you to do different things. For single sprites,
    it gives the possibility to change the pivot point. For Sprite Sheets, such as
    in this case, it is the way for Unity to understand how many Sprites there are
    and where they are located on the image.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '**精灵编辑器**允许你进行不同的操作。对于单个精灵，它提供了改变支点的可能性。对于精灵图集，例如在这个案例中，这是Unity理解有多少精灵以及它们在图像中位置的方式。'
- en: Now, there are different ways to do this, so let's have a look at them in more
    detail.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，有几种不同的方法来做这件事，所以让我们更详细地看看它们。
- en: Manual mode
  id: totrans-167
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 手动模式
- en: In manual mode, it's you that selects each Sprite in the image, and tells Unity
    where it is and how big it is.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在手动模式下，是你选择图像中的每个精灵，并告诉Unity它的位置和大小。
- en: To create a new selection, you need to click in a corner of your Sprite and
    drag the mouse until you have selected the whole Sprite. A green rectangle appears,
    showing you the selected area, and you can see how the Sprite changes in real
    time while dragging the mouse. If you release the mouse button, the green rectangle
    becomes blue and Unity will interpret everything that is inside it as a Sprite.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个新的选择，你需要点击精灵的一个角，并拖动鼠标直到你选择了整个精灵。一个绿色矩形出现，显示你选择的部分，并且你可以看到在拖动鼠标时精灵如何实时变化。如果你释放鼠标按钮，绿色矩形变成蓝色，Unity将解释它内部的所有内容作为精灵。
- en: 'You can create as many selections (rectangles) as you want. Also, by clicking
    on them, you can move them around the image and change their dimensions. Here
    is an example of our Sprite Sheet with some manual selections:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以创建尽可能多的选择（矩形）。此外，通过点击它们，你可以将它们移动到图像的周围并改变它们的尺寸。以下是我们带有一些手动选择的精灵图集的示例：
- en: '![Manual mode](img/image00336.jpeg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![手动模式](img/image00336.jpeg)'
- en: 'If you have made a rectangle that is bigger than the Sprite, Unity can try
    to trim it. In the top-left corner of the Sprite Editor, there is the Trim button,
    as shown in the following screenshot:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你画了一个比精灵大的矩形，Unity可以尝试裁剪它。在精灵编辑器的左上角，有裁剪按钮，如图所示：
- en: '![Manual mode](img/image00337.jpeg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![手动模式](img/image00337.jpeg)'
- en: It is active only when a selection is highlighted. If you don't like the final
    result, you can always modify the selection.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 它仅在突出显示选择时才处于活动状态。如果你不喜欢最终结果，你总是可以修改选择。
- en: Furthermore, in the middle of each selection, there is a small blue circle.
    This is the Pivot Point of that selection. We are free to drag it to another position.
    However, other than very specific cases, having the pivot point in the middle
    is common and useful. So at the moment, don't worry much about it, and just leave
    it in the middle.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在每个选择的中间有一个小蓝色圆圈。这是该选择的中心点。我们可以自由地将其拖动到另一个位置。然而，除了非常特定的情况外，将中心点放在中间是常见且有用的。所以目前，不必太担心它，只需将其留在中间即可。
- en: Another thing you may notice is four small green squares in the middle of each
    edge of the rectangle. We will need them to do 9-slice scaling in a few sections.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还会注意到，在矩形的每一边中间都有四个小绿色方块。在几个部分中，我们需要它们来进行9切片缩放。
- en: 'Once we have highlighted a selection, it is possible to modify it in more detail
    by using the menu that appears in the bottom-right corner of the Sprite Editor.
    Here is what it looks like:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们突出显示了选择，就可以通过使用出现在精灵编辑器右下角菜单中的选项来更详细地修改它。这里看起来是这样的：
- en: '![Manual mode](img/image00338.jpeg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![手动模式](img/image00338.jpeg)'
- en: From this menu, you can modify the name of the selection, which will be reflected
    in the name of the Sprite when we use it. By typing numeric values, you can precisely
    set the dimension, the position, and the Pivot Point of the selection.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个菜单中，你可以修改选择的名称，这将反映在我们使用精灵时的名称上。通过输入数值，你可以精确设置选择的尺寸、位置和中心点。
- en: To conclude, manual mode is particularly useful when the shape and the dimensions
    of the Sprite in the Sprite Sheet are different. Even if the designer of the picture
    is careful and avoids placing single Sprites close to each other, the objects
    can still have very different dimensions.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，手动模式在精灵图集中的精灵形状和尺寸不同时特别有用。即使图片的设计者很小心，避免将单个精灵放置得很近，物体仍然可以有非常不同的尺寸。
- en: Automatic mode
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自动模式
- en: In automatic mode, Unity tries to slice the Sprites, which means it creates
    the different selections for you. However, to get a better result, you need to
    give some information about the image. In any case, once Unity has offered its
    selections for the image, you can still modify them as you would in manual mode.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在自动模式下，Unity会尝试切割精灵，这意味着它会为你创建不同的选择。然而，为了获得更好的结果，你需要提供一些关于图像的信息。无论如何，一旦Unity为图像提供了选择，你仍然可以像在手动模式下一样修改它们。
- en: 'In the top-left corner of the **Sprite Editor**, next to the **Trim** button,
    we can see the **Slice** button, as shown here:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在**精灵编辑器**的左上角，紧挨着**裁剪**按钮，我们可以看到**切片**按钮，如图所示：
- en: '![Automatic mode](img/image00339.jpeg)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![自动模式](img/image00339.jpeg)'
- en: 'By clicking on it, a menu appears that looks like this:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 点击它，会出现一个看起来像这样的菜单：
- en: '![Automatic mode](img/image00340.jpeg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![自动模式](img/image00340.jpeg)'
- en: As you can see, we can select different types. Let's go through them.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们可以选择不同的类型。让我们逐一了解它们。
- en: 'The **Automatic** type is the best guess of Unity about the selections. Besides
    the method that we will see in a bit, and where to place the pivot points of the
    selections, there is nothing else to set. Unity will do everything automatically,
    and if we don''t need our Sprites to be the same size, this way works pretty well.
    Here is the final result applied to our image:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '**自动**类型是Unity对选择的最佳猜测。除了我们稍后将看到的放置选择中心点的方法外，没有其他设置。Unity将自动完成所有操作，如果我们不需要我们的精灵具有相同的大小，这种方法效果相当不错。以下是应用于我们图像的最终结果：'
- en: '![Automatic mode](img/image00341.jpeg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![自动模式](img/image00341.jpeg)'
- en: 'The **Automatic** type comes with three different methods:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '**自动**类型包含三种不同的方法：'
- en: The **Delete Existing** method erases all the previous selections before slicing
    the image
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**删除现有**方法在切片图像之前删除所有之前的选区'
- en: The **Smart** method tries to create selections for the Sprites that are not
    yet in a selection
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**智能**方法试图为尚未选择的精灵创建选择'
- en: The **Safe** method creates new selections without erasing the previous ones
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全**方法在创建新选区时不会删除之前的选区'
- en: The **Grid By Cell Size** type, instead, divides the image into a grid of selections.
    From the menu, you can select the dimension of each cell. As a result, the number
    of cells will depend on how big they are.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，**按单元格大小划分网格**类型将图像划分为选区的网格。从菜单中，你可以选择每个单元格的尺寸。因此，单元格的数量将取决于它们的大小。
- en: 'The **Grid By Cell Count** type, again, divides the image into a grid of selections.
    However, this time, you can set from the menu how many cells will be in the image,
    and their dimensions will depend on this. Here is our image sliced using a 4 x
    4 grid:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '**按单元格数量划分网格**类型再次将图像划分为选区的网格。然而，这次，你可以从菜单中设置图像中的单元格数量，它们的尺寸将取决于此。以下是使用4 x
    4网格切片的我们的图像：'
- en: '![Automatic mode](img/image00342.jpeg)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![自动模式](img/image00342.jpeg)'
- en: Polygonal mode
  id: totrans-197
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 多边形模式
- en: From Unity 5.3, you can have access to this new feature of the Sprite Editor.
    In order to use it, you need to set the Sprite Mode to Polygonal in the import
    setting of the asset.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 从Unity 5.3开始，你可以访问精灵编辑器的新功能。为了使用它，你需要将资产的导入设置中的精灵模式设置为多边形。
- en: 'In this mode, Unity automatically slices the Sprite as a polygon. Once we open
    the Sprite Editor, we will immediately be able to set the number of sides or edges
    of the polygon. If we miss this, we can always press the **Change Shape** button
    in the top-left corner of the Sprite Editor, as shown here:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在此模式下，Unity自动将精灵作为多边形切片。一旦我们打开精灵编辑器，我们就可以立即设置多边形的边数或边。如果我们错过了这个设置，我们总是可以按下精灵编辑器左上角所示的**更改形状**按钮：
- en: '![Polygonal mode](img/image00343.jpeg)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![多边形模式](img/image00343.jpeg)'
- en: 'If we select an octagon (eight-sided polygon), this is the final result we
    would get in our image:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们选择一个八边形（八边形多边形），这是我们图像中的最终结果：
- en: '![Polygonal mode](img/image00344.jpeg)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![多边形模式](img/image00344.jpeg)'
- en: Sprite Editor for UI-9-slice scaling
  id: totrans-203
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: UI精灵编辑器-9切片缩放
- en: There is another important feature of the Sprite Editor, called 9-slice. It
    is used when a UI element needs different scaling in different parts of it. This
    feature is in the Sprite Editor because UI elements are treated as Sprites by
    Unity.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重要的精灵编辑器功能是9切片。当用户界面元素需要在不同部分进行不同缩放时使用。这个功能在精灵编辑器中，因为Unity将用户界面元素视为精灵。
- en: We will see the UI in another chapter, but let's start understanding why some
    UI elements need to be scaled differently. As you know, the game can run on different
    screens that usually have different resolutions and aspect ratios. As a result,
    the UI needs to be scaled properly depending on the screen. However, if you create
    a button with beautiful rounded corners, once it's scaled they will look completely
    different to how we had originally designed them, and not for the better.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在另一章中看到用户界面，但让我们先了解为什么某些用户界面元素需要以不同的方式缩放。正如你所知，游戏可以在不同屏幕上运行，这些屏幕通常具有不同的分辨率和宽高比。因此，用户界面需要根据屏幕进行适当的缩放。然而，如果你创建了一个具有美丽圆角的按钮，一旦缩放，它们的外观将与我们最初设计的完全不同，而且并不更好。
- en: 'The 9-slice technique avoids this problem by defining nine sections on the
    Sprite that will be scaled differently. In particular, corners will not be scaled
    at all: only edges along their axis and the central section will scale in all
    the directions. The following image should help in understanding these nine sections
    and how they scale:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 9切片技术通过在精灵上定义九个不同缩放的区域来避免这个问题。特别是，角落将完全不缩放：只有沿着其轴的边缘和中央区域将向所有方向缩放。以下图像将帮助理解这九个区域以及它们的缩放方式：
- en: '![Sprite Editor for UI-9-slice scaling](img/image00345.jpeg)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![精灵编辑器用于UI-9切片缩放](img/image00345.jpeg)'
- en: Let's take a UI image to learn how to do a 9-slice with the Sprite Editor of
    Unity. Select `ui_blank_square_icon_pink` in the `Graphics/UI` folder, and open
    it in the Sprite Editor. Since we didn't set its **Sprite Mode** to **Multiple**,
    we have only one selection around the entire image.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用一个UI图像来学习如何使用Unity的精灵编辑器进行9切片。在`Graphics/UI`文件夹中选择`ui_blank_square_icon_pink`，并在精灵编辑器中打开它。由于我们没有将其**精灵模式**设置为**多个**，所以我们只有一个围绕整个图像的选择。
- en: 'As we have already noticed, there are some green squares at the edges of our
    selection. If we drag them, we can divide the image into nine sections, and we
    are performing a 9-slice on that Sprite. Here is how the 9-slice should be done
    with a button:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们已经注意到的，在我们的选择边缘有一些绿色方块。如果我们拖动它们，我们可以将图像分成九个部分，我们正在对这个精灵执行9切片。以下是如何使用按钮进行9切片的示例：
- en: '![Sprite Editor for UI-9-slice scaling](img/image00346.jpeg)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![精灵编辑器用于UI-9切片缩放](img/image00346.jpeg)'
- en: You need to leave the central section as big as possible, and keep the others
    the right size to include corners and edges.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要将中央区域留得尽可能大，并保持其他区域适当的大小，以包括角落和边缘。
- en: Now, we should know a lot about the Sprite Editor. I suggest that you practice
    with the Sprite Editor for a bit before moving to the next section of this book.
    In fact, you will need to practice the methods that we have covered so far to
    prepare all our assets for the game we are going to build.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们应该对精灵编辑器有了很多了解。我建议你在进入本书的下一部分之前，先使用精灵编辑器练习一下。实际上，你需要练习我们迄今为止所介绍的方法，为我们将要构建的游戏准备所有资源。
- en: Preparing the assets
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备资源
- en: In this section, you will have the chance to practice what we have learned so
    far. In fact, we need to prepare the assets for our game.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将有机会练习我们迄今为止所学到的。实际上，我们需要为我们的游戏准备资源。
- en: Let's start by selecting `Graphics/towers/cupcake_tower_sheet-01` (the same
    file we used before) and slice it with a 3 x 3 grid. Then, we should rename each
    Sprite.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先选择`Graphics/towers/cupcake_tower_sheet-01`（我们之前使用的同一个文件）并使用3 x 3网格进行切片。然后，我们应该为每个精灵重命名。
- en: 'In the first row, we can give them these names (from left to right):'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一行，我们可以给他们这些名称（从左到右）：
- en: '`Sprinkles_Cupcake_Tower_0`'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Sprinkles_Cupcake_Tower_0`'
- en: '`Sprinkles_Cupcake_Tower_1`'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Sprinkles_Cupcake_Tower_1`'
- en: '`Sprinkles_Cupcake_Tower_2`'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Sprinkles_Cupcake_Tower_2`'
- en: 'In the second row, we can give them these names:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二行，我们可以给他们这些名称：
- en: '`ChocolateChip_Cupcake_Tower_0`'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ChocolateChip_Cupcake_Tower_0`'
- en: '`ChocolateChip_Cupcake_Tower_1`'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ChocolateChip_Cupcake_Tower_1`'
- en: '`ChocolateChip_Cupcake_Tower_2`'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ChocolateChip_Cupcake_Tower_2`'
- en: 'Finally, the third row:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，第三行：
- en: '`Lemon_Cupcake_Tower_0`'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Lemon_Cupcake_Tower_0`'
- en: '`Lemon_Cupcake_Tower_1`'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Lemon_Cupcake_Tower_1`'
- en: '`Lemon_Cupcake_Tower_2`'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Lemon_Cupcake_Tower_2`'
- en: 'At the end, we should have the following in the **Project** panel:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在**项目**面板中，我们应该有以下内容：
- en: '![Preparing the assets](img/image00347.jpeg)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![准备资源](img/image00347.jpeg)'
- en: Repeat the same process with the `Graphics/enemies` and `Graphics/UI` folders
    by dividing the different Sprite Sheets. Don't forget to assign meaningful names.
    For the rest of the book, when we refer to an asset, its name will be self-explanatory.
    For your convenience, the original file where the Sprite has been taken will be
    specified.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 使用相同的过程处理`Graphics/enemies`和`Graphics/UI`文件夹，通过分割不同的精灵图集。别忘了分配有意义的名称。在本书的其余部分，当我们提到一个资源时，其名称将不言自明。为了您的方便，我们将指定精灵被取出的原始文件。
- en: Scenes as levels
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 作为关卡的场景
- en: A Unity game is made of different scenes that you can think of as levels. It's
    good practice to create a folder in our **Project** panel to store all the scenes.
    So, if we haven't done so already, right-click on the **Project** panel, then
    navigate to **Create | Folder**, and finally rename it `Scenes`.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 一个Unity游戏由不同的场景组成，你可以把它们想象成关卡。在**项目**面板中创建一个文件夹来存储所有场景是个好习惯。所以，如果我们还没有这样做，请右键点击**项目**面板，然后导航到**创建
    | 文件夹**，并将其重命名为`Scenes`。
- en: 'In the toolbar menu, under **File**, there are options to create, save, and
    load scenes. Let''s save the current one, even if it''s empty, by navigating to
    **File** | **Save Scene**, as shown here:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在工具栏菜单中，在**文件**下，有创建、保存和加载场景的选项。让我们保存当前的场景，即使它是空的，也可以通过导航到**文件** | **保存场景**，如图所示：
- en: '![Scenes as levels](img/image00348.jpeg)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![场景作为关卡](img/image00348.jpeg)'
- en: Tip
  id: totrans-235
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: You can also use the keyboard shortcut *Ctrl* + *s* (*Cmd* + *S* on Mac OS)
    to save the scene.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以使用键盘快捷键*Ctrl* + *s* (*Cmd* + *S*在Mac OS上)来保存场景。
- en: Unity will ask where to save the scene. Select the `Scenes` folder that we have
    just created and name the file `Level_01`. As a result, every time we save our
    scene, Unity will save it in this file.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: Unity会询问保存场景的位置。选择我们刚刚创建的`Scenes`文件夹，并将文件命名为`Level_01`。因此，每次我们保存场景时，Unity都会将其保存在这个文件中。
- en: Setting proportions
  id: totrans-238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置比例
- en: When building our game, we need to think about the target platform that we are
    intending to develop for. Of course, we would like to adapt the game to as many
    devices and platforms as possible. For this reason, it's an important step in
    the game development process to do this adaptation.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建我们的游戏时，我们需要考虑我们打算为哪个目标平台进行开发。当然，我们希望将游戏适配到尽可能多的设备和平台。因此，在游戏开发过程中，进行这种适配是一个重要的步骤。
- en: Without going into too much detail, since it is out of the scope of this book,
    it is important to have the screen proportion of your target platform, and develop
    the game accordingly. For this book, we will stick to 16:9 since it is a common
    proportion, and it is easy to adapt to other proportions later, and also because
    the package that we have downloaded has been created for 16:9 proportions.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这超出了本书的范围，我们不会过多地详细介绍，但重要的是要了解目标平台的屏幕比例，并据此开发游戏。对于本书，我们将坚持使用16:9，因为它是一个常见的比例，也容易适应其他比例，而且我们下载的包是为16:9比例创建的。
- en: 'To change the proportion in Unity, you need to select the **Game** tab. In
    the top-left corner, there are two drop-down menus. The first is for the displays
    (available from Unity 5.3) and the other one is the proportion. They are highlighted
    in the following screenshot:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Unity中更改比例，您需要选择**游戏**选项卡。在左上角，有两个下拉菜单。第一个是用于显示（从Unity 5.3可用）的，另一个是比例。它们在以下屏幕截图中突出显示：
- en: '![Setting proportions](img/image00349.jpeg)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
  zh: '![设置比例](img/image00349.jpeg)'
- en: Note
  id: totrans-243
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: From Unity 5.5, next to these settings, there is also a slider that allows you
    to zoom in and out in the scene, by changing its scale.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 从Unity 5.5开始，在这些设置旁边还有一个滑块，允许您通过更改其比例在场景中放大或缩小。
- en: 'If you need a custom proportion, you can select the + button at the end of
    the list, and a screen like the following will appear:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要一个自定义比例，您可以在列表末尾选择加号按钮，然后会出现如下屏幕：
- en: '![Setting proportions](img/image00350.jpeg)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
  zh: '![设置比例](img/image00350.jpeg)'
- en: From here, it is possible to assign a label to this resolution and its dimensions.
    Once you have added a resolution, it will be shared among all of your projects.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里，您可以为此分辨率及其维度分配一个标签。一旦添加了分辨率，它将在所有项目中共享。
- en: Before we move on to the next section, remember to select **16:9** as the project's
    resolution.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们进入下一部分之前，请记住将项目的分辨率设置为**16:9**。
- en: There is more about the Unity interface
  id: totrans-249
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于Unity界面的更多信息
- en: From the e-guide that I suggested to you at the beginning of the chapter, you
    should have learned more about the Unity interface. But, I want to share a little
    trick with you.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 从我在本章开头向您推荐的e-guide中，您应该已经对Unity界面有了更多的了解。但是，我想与您分享一个小技巧。
- en: 'Navigate from the top-bar menu and select **Edit | Preferences...**, as shown
    in the following screenshot:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 从顶部菜单栏导航并选择**编辑 | 预设...**，如图所示：
- en: '![There is more about the Unity interface](img/image00351.jpeg)'
  id: totrans-252
  prefs: []
  type: TYPE_IMG
  zh: '![关于Unity界面的更多信息](img/image00351.jpeg)'
- en: Then, from the menu that appeared, select the third tab, **Colors**, and in
    this screen you will have the possibility to change the color of the the main
    graphical elements (or Gizmos; see in the next chapter) of the scene view, such
    as the axis or the grid as shown in the following screenshot:.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，从出现的菜单中选择第三个选项卡，**颜色**，在这个屏幕上您将有机会更改场景视图中主要图形元素（或Gizmos；见下一章）的颜色，例如轴或网格，如图所示：
- en: '![There is more about the Unity interface](img/image00352.jpeg)'
  id: totrans-254
  prefs: []
  type: TYPE_IMG
  zh: '![关于Unity界面的更多信息](img/image00352.jpeg)'
- en: 'However, the trick lies in the **Playmode tint** setting. It allows you to
    change the overall tint of the interface when the game is running. You may not
    see the usefulness now, but it will be of great help when you want to modify parameters,
    and often you may forget to be in play mode. Personally, this little trick has
    helped me in many situations. Here is an example of how the Unity interface appears
    when it is in play mode with a blue tint:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，技巧在于 **Playmode 淡色** 设置。它允许你在游戏运行时更改界面的整体色调。你可能现在看不到它的实用性，但当你想要修改参数时，它会非常有帮助。而且，你可能会忘记自己是在游戏模式中。我个人认为，这个小技巧在很多情况下都帮了我大忙。以下是一个示例，展示了
    Unity 界面在以蓝色色调的游戏模式下的外观：
- en: '![There is more about the Unity interface](img/image00353.jpeg)'
  id: totrans-256
  prefs: []
  type: TYPE_IMG
  zh: '![关于 Unity 界面还有更多内容](img/image00353.jpeg)'
- en: Homework
  id: totrans-257
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 作业
- en: In this chapter, you have already spent some time working with the Sprite Editor,
    so there is no need to do more exercises about it. However, if for some reason
    you want to keep practicing, you can download the standard assets from the Asset
    Store of Unity (**Window | Asset Store**), since it is free. Then, import the
    `Standard Assets/2D/Sprites` folder, and try to slice them from scratch using
    different modes to achieve the same result.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你已经花了一些时间与 Sprite 编辑器一起工作，因此没有必要再进行更多关于它的练习。然而，如果你出于某种原因想要继续练习，你可以从 Unity
    资产商店（**窗口 | 资产商店**）下载标准资产，因为它是免费的。然后，导入 `Standard Assets/2D/Sprites` 文件夹，并尝试使用不同的模式从头开始切片，以实现相同的结果。
- en: Summary
  id: totrans-259
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have seen the entire pipeline for importing Sprites and
    preparing them to use in our game. During this process we have understood what
    Sprites are, how to import them, and use the Sprite Editor in different ways.
    Furthermore, we have explored Unity when it is set in 2D and seen an introduction
    to 2D game development. Finally, we have learned how to set up scenes with the
    right screen resolution for our target platform.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经看到了导入 Sprites 并为在游戏中使用它们做准备的全过程。在这个过程中，我们了解了 Sprites 是什么，如何导入它们，以及如何以不同的方式使用
    Sprite 编辑器。此外，我们还探讨了在设置为 2D 模式下的 Unity，并了解了 2D 游戏开发的简介。最后，我们学习了如何设置场景，以适应目标平台的正确屏幕分辨率。
- en: I think that we have covered a lot in this chapter and now it's time to take
    a break. Go grab a coffee or even a cupcake before moving on to the next chapter,
    where we will learn about 2D game scripting.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为本章我们已经涵盖了大量的内容，现在是时候休息一下了。在继续到下一章学习 2D 游戏脚本之前，去拿一杯咖啡或者甚至一块纸杯蛋糕吧。
