["```cs\npublic enum PageNames \n    { \n        #region Properties \n\n        MainPage, \n\n        CameraPage, \n\n        #endregion \n    } \n\n```", "```cs\npublic enum Orientation \n    { \n        Portrait, \n\n        LandscapeLeft, \n\n        LandscapeRight, \n\n        None \n    } \n\n```", "```cs\npublic class AlertArgs : EventArgs \n    { \n        #region Public Properties \n\n        public string Message { get; set; } \n\n        public TaskCompletionSource<bool> Tcs { get; set; } \n\n        #endregion \n    }  \n\n```", "```cs\npublic class ViewModelBase : INotifyPropertyChanged \n    { \n        #region Public Events \n\n        public event PropertyChangedEventHandler PropertyChanged; \n\n        public event EventHandler<AlertArgs> Alert; \n\n        #endregion \n\n        #region Public Properties \n\n        public INavigationService Navigation; \n\n        #endregion \n\n```", "```cs\n       #region Constructor \n\n        public ViewModelBase(INavigationService navigation, IMethods methods) \n        { \n            Navigation = navigation; \n\n            _methods = methods; \n        } \n\n        #endregion \n\n```", "```cs\nprivate string _descriptionMessage = \"Take a Picture\";  \n\npublic string DescriptionMessage \n        { \n            get \n            { \n                return _descriptionMessage; \n            } \n\n            set \n            { \n                if (value.Equals(_descriptionMessage)) \n                { \n                    return; \n                } \n\n                _descriptionMessage = value; \n                OnPropertyChanged(\"DescriptionMessage\"); \n            } \n        } \n\n```", "```cs\n        protected void SetProperty<T>(string propertyName,\n        ref T referenceProperty, T newProperty) \n        { \n            if (!newProperty.Equals(referenceProperty)) \n            { \n                referenceProperty = newProperty; \n            } \n\n            OnPropertyChanged(propertyName); \n        } \n\n```", "```cs\npublic string DescriptionMessage \n        { \n            get { return _descriptionMessage; } \n            set { SetProperty(nameof(DescriptionMessage),\n                  ref _descriptionMessage, value); } \n        } \n\n```", "```cs\n        protected virtual void OnPropertyChanged([CallerMemberName]\n        string propertyName = null) \n        { \n            PropertyChangedEventHandler handler = PropertyChanged; \n\n            if (handler != null) \n            { \n                handler(this, new PropertyChangedEventArgs(propertyName)); \n            } \n        } \n\n        protected virtual async Task LoadAsync(IDictionary<string, object> parameters) \n        { \n        } \n\n        #endregion \n\n        #region Public Methods \n\n        public Task<bool> NotifyAlert(string message) \n        { \n            var tcs = new TaskCompletionSource<bool>(); \n\n            Alert?.Invoke(this, new AlertArgs() \n            { \n                Message = message, \n                Tcs = tcs \n            }); \n\n            return tcs.Task; \n        } \n\n        public void OnShow(IDictionary<string, object> parameters) \n        { \n            LoadAsync(parameters).ToObservable().Subscribe( \n                result => \n                { \n                    // we can add things to do after we load the view model \n                },  \n                ex => \n                { \n                    // we can handle any areas from the load async function \n                }); \n        } \n\n        #endregion \n    } \n\n```", "```cs\nIf (Alert != null) \n{ \nAlert(this, new AlertArgs() \n            { \n                Message = message, \n                Tcs = tcs \n            }); \n} \n\n```", "```cs\nAlert?.Invoke(this, new AlertArgs() \n            { \n                Message = message, \n                Tcs = tcs \n            }); \n\n```", "```cs\npublic class MainPageViewModel : ViewModelBase \n    { \n        #region Private Properties \n\n        private readonly IMethods _methods; \n\n        private string _descriptionMessage = \"Take a Picture\"; \n\n        private string _cameraTitle = \"Camera\"; \n\n        private string _exitTitle = \"Exit\"; \n\n        private ICommand _cameraCommand; \n\n        private ICommand _exitCommand; \n\n        #endregion \n} \n\n```", "```cs\n        #region Public Properties \n\n        public string DescriptionMessage \n        { \n            get { return _descriptionMessage; } \n            set { SetProperty(nameof(DescriptionMessage), \n                  ref _descriptionMessage, value); } \n        } \n\n        public string CameraTitle \n        { \n            get { return _cameraTitle; } \n            set { SetProperty(nameof(CameraTitle), ref _cameraTitle, value); } \n        } \n\n        public string ExitTitle \n        { \n            get { return _exitTitle; } \n            set { SetProperty(nameof(ExitTitle), ref _exitTitle, value); } \n        } \n\n        public ICommand CameraCommand \n        { \n            get { return _cameraCommand; } \n            set { SetProperty(nameof(CameraCommand), ref _cameraCommand, value); } \n        } \n\n        public ICommand ExitCommand \n        { \n            get { return _exitCommand; } \n            set { SetProperty(nameof(ExitCommand), ref _exitCommand, value); } \n        } \n\n        #endregion \n\n```", "```cs\n        #region Constructors \n\n        public MainPageViewModel (INavigationService navigation, Func<Action, ICommand> commandFactory): base (navigation, methods) \n        { \n            _methods = methods; \n\n            _exitCommand = commandFactory (async () => \n            { \n                await NotifyAlert(\"GoodBye!!\"); \n\n                _methods.Exit(); \n            }); \n\n            _cameraCommand = commandFactory (async () => await Navigation.Navigate(PageNames.CameraPage, null)); \n        } \n\n        #endregion \n\n```", "```cs\npublic sealed class CameraPageViewModel : ViewModelBase \n    { \n        #region Private Properties \n\n        private Orientation _pageOrientation; \n\n        private byte[] _photoData; \n\n        private string _loadingMessage = \"Loading Camera...\" \n\n        private bool _canCapture; \n\n        private bool _cameraLoading; \n\n        private bool _isFlashOn; \n\n        private bool _photoEditOn; \n\n        #endregion \n\n} \n\n```", "```cs\n#region Public Properties \n\n        public bool CanCapture \n        { \n            get { return _canCapture; } \n            set { SetProperty(nameof(CanCapture), ref _canCapture, value); } \n        } \n\n        public string LoadingMessage \n        { \n            get { return _loadingMessage; } \n            set { SetProperty(nameof(LoadingMessage), ref _loadingMessage, value); } \n        } \n\n#endregion \n\n```", "```cs\n        #region Constructors and Destructors \n\n        public CameraPageViewModel(INavigationService navigation, Func<Action, ICommand> commandFactory) : base (navigation, methods) \n        { \n        } \n\n        #endregion \n\n```", "```cs\n        public void AddPhoto(byte[] data) \n        { \n            PhotoData = data; \n            PhotoEditOn = true; \n        } \n\n```", "```cs\n        public void ResetEditPhoto() \n        { \n            PhotoData = new byte[] { }; \n            PhotoEditOn = false; \n        } \n\n```", "```cs\n        public void OnAppear() \n        { \n            CameraLoading = false; \n        } \n\n        public void OnDisappear() \n        { \n            CameraLoading = true; \n            ResetEditPhoto(); \n        } \n\n```", "```cs\npublic class PortableModule : IModule \n    { \n        #region Public Methods \n\n        public void Register(ContainerBuilder builder) \n        { \n            builder.RegisterType<MainPageViewModel> ().SingleInstance(); \n            builder.RegisterType<CameraPageViewModel> ().SingleInstance(); \n        } \n\n        #endregion \n    }  \n\n```", "```cs\npublic class OrientationPage : ContentPage \n    { \n        #region Static Properties \n\n        public static Orientation PageOrientation; \n\n        public static event EventHandler<Orientation> OrientationHandler; \n\n        public static event EventHandler<Point> TouchHandler; \n\n        #endregion \n\n        #region Static Methods \n\n        public static void NotifyOrientationChange(Orientation orientation) \n        { \n            if (OrientationHandler != null) \n            { \n                OrientationHandler (null, orientation); \n            } \n        } \n\n        public static void NotifyTouch(Point touchPoint) \n        { \n            if (TouchHandler != null) \n            { \n                TouchHandler(null, touchPoint); \n            } \n        } \n\n        #endregion \n    } \n\n```", "```cs\npublic class CustomImage : View \n    { \n        public static readonly BindableProperty TintColorStringProperty = BindableProperty.Create ((CustomImage o) => o.TintColorString, string.Empty, \n            propertyChanged: (bindable, oldvalue, newValue) =>  \n            { \n                var eh = ((CustomImage)bindable).CustomPropertyChanged; \n\n                if (eh != null) \n                { \n                    eh (bindable, TintColorStringProperty.PropertyName); \n                } \n            }); \n\n        public string TintColorString \n        { \n            get \n            { \n                return (string)GetValue(TintColorStringProperty); \n            } \n            set \n            { \n                this.SetValue(TintColorStringProperty, value); \n            } \n        } \n\n        public static readonly BindableProperty TintOnProperty = BindableProperty.Create ((CustomImage o) => o.TintOn, default(bool), \n            propertyChanged: (bindable, oldvalue, newValue) =>  \n            { \n                var eh = ((CustomImage)bindable).CustomPropertyChanged; \n\n                if (eh != null) \n                { \n                    eh (bindable, TintOnProperty.PropertyName); \n                } \n            }); \n\n        public bool TintOn  \n        { \n            get  \n            { \n                return (bool)GetValue (TintOnProperty); \n            } \n            set  \n            {                  \n                SetValue (TintOnProperty, value); \n            } \n        } \n} \n\n```", "```cs\n        public static readonly BindableProperty PathProperty = BindableProperty.Create((CustomImage o) => o.Path, default(string), \n            propertyChanged: (bindable, oldvalue, newValue) => \n            { \n                var eh = ((CustomImage)bindable).CustomPropertyChanged; \n\n                if (eh != null) \n                { \n                    eh (bindable, PathProperty.PropertyName); \n                } \n            }); \n\n        public string Path \n        { \n            get \n            { \n                return (string)GetValue(PathProperty); \n            } \n            set \n            { \n                SetValue(PathProperty, value); \n            } \n        } \n\n        public static readonly BindableProperty AspectProperty = BindableProperty.Create((CustomImage o) => o.Aspect, default(Aspect), \n            propertyChanged: (bindable, oldvalue, newValue) => \n            { \n                var eh = ((CustomImage)bindable).CustomPropertyChanged; \n\n                if (eh != null) \n                { \n                    eh(bindable, AspectProperty.PropertyName); \n                } \n            }); \n\n        public Aspect Aspect \n        { \n            get \n            { \n                return (Aspect)GetValue(AspectProperty); \n            } \n            set \n            { \n                SetValue(AspectProperty, value); \n            } \n        } \n\n```", "```cs\n        public event EventHandler<string> CustomPropertyChanged; \n\n        protected override void OnPropertyChanged (string propertyName) \n        { \n            base.OnPropertyChanged (propertyName); \n\n            if (propertyName == \n                CustomImage.TintColorStringProperty.PropertyName || \n                propertyName == CustomImage.TintOnProperty.PropertyName ||  \n                propertyName == CustomImage.AspectProperty.PropertyName) \n            { \n                if (CustomPropertyChanged != null)  \n                { \n                    this.CustomPropertyChanged (this, propertyName); \n                } \n            } \n        } \n    } \n\n```", "```cs\npublic sealed class FocusView : RelativeLayout \n    { \n        #region Constant Properties \n\n        const int IMG_TARGET_BOUND = 100; \n\n        #endregion \n\n        #region Private Properties \n\n        private bool _isAnimating; \n\n        private bool _startingPointsAssigned; \n\n        private readonly CustomImage _focalTarget; \n\n        private Point _pStartingOrientation; \n\n        private Point _pFlippedOrientation; \n\n        #endregion \n\n        #region Public Events \n\n        public event EventHandler<Point> TouchFocus; \n\n        #endregion \n\n} \n\n```", "```cs\n        #region Public Properties \n\n        public Orientation Orientation; \n\n        #endregion \n\n```", "```cs\n#region Private Methods \n\n        private async Task AnimateFocalTarget(Point touchPoint) \n        { \n            _focalTarget.TintColorString = \"#007F00\"; \n\n            await _focalTarget.TranslateTo(touchPoint.X - (IMG_TARGET_BOUND / 2),  \n                                     touchPoint.Y - (IMG_TARGET_BOUND / 2), 0).ConfigureAwait(false); \n\n            await _focalTarget.ScaleTo(1, 0); \n\n            // fade in \n            await _focalTarget.FadeTo(0.7f, 25); \n\n            await _focalTarget.ScaleTo(0.5, 250); \n\n            _focalTarget.TintOn = true; \n\n            await Task.Delay(1000); \n\n            _focalTarget.TintColorString = \"#FFFFFF\"; \n\n            _isAnimating = false; \n        }  \n\n        #endregion \n\n```", "```cs\nprivate async Task AnimateFocalTarget(Point touchPoint) \n        { \n            _focalTarget.TintColorString = \"#007F00\"; \n\n            var storyboard = new Animation(); \n\n            var translationX = new Animation(callback: x\n             => _focalTarget.TranslationX = x, \n                                          start: touchPoint.X, \n                                          end: touchPoint.X - (IMG_TARGET_BOUND / 2), \n                                          easing: Easing.Linear); \n\n            var translationY = new Animation(callback: y\n             => _focalTarget.TranslationY = y, \n                                          start: touchPoint.Y, \n                                          end: touchPoint.Y - (IMG_TARGET_BOUND / 2), \n                                          easing: Easing.Linear); \n\n            var scaleFirst = new Animation(callback: o => _focalTarget.Scale = o, \n                                          start: 0.5, \n                                          end: 1, \n                                          easing: Easing.Linear); \n\n            var fade = new Animation(callback: o => _focalTarget.Opacity = o, \n                                          start: 1, \n                                          end: 0.7f, \n                                          easing: Easing.Linear); \n\n            var scaleSecond = new Animation(callback: o => _focalTarget.Scale = o, \n                                          start: 1, \n                                          end: 0.5f, \n                                          easing: Easing.Linear); \n\n            storyboard.Add(0, 0.01, translationX); \n            storyboard.Add(0, 0.01, translationY); \n            storyboard.Add(0, 0.01, scaleFirst); \n            storyboard.Add(0, 0.5, fade); \n            storyboard.Add(0.5, 1, scaleSecond); \n\n            var tcs = new TaskCompletionSource<bool>(); \n\n            storyboard.Commit(_focalTarget, \"_focalTarget\", length: 300, finished: async (arg1, arg2) => \n            { \n                _focalTarget.TintOn = true; \n\n                await Task.Delay(500); \n\n                _focalTarget.TintColorString = \"#FFFFFF\"; \n\n                _isAnimating = false; \n\n                tcs.TrySetResult(true); \n            }); \n\n            await tcs.Task; \n        } \n\n```", "```cs\n        #region Public Methods \n\n        public void Reset() \n        { \n            switch (Orientation) \n            { \n                case Orientation.Portrait: \n                    NotifyFocus(_pStartingOrientation); \n                    break; \n                case Orientation.LandscapeLeft: \n                case Orientation.LandscapeRight: \n                    NotifyFocus(_pFlippedOrientation); \n                    break; \n            } \n        } \n\n```", "```cs\n        public void NotifyFocus(Point touchPoint) \n        { \n            if (_isAnimating)  \n            { \n                return; \n            } \n\n            _focalTarget.Opacity = 0.0f; \n            _focalTarget.TintOn = false; \n            _isAnimating = true; \n\n            Device.BeginInvokeOnMainThread(async () => await AnimateFocalTarget(touchPoint)); \n\n            TouchFocus?.Invoke (this, touchPoint); \n        } \n\n```", "```cs\n        public void SetFocusPoints(Point pStart, Point pFlipped) \n        { \n            _pStartingOrientation = pStart; \n            _pFlippedOrientation = pFlipped; \n        } \n\n        #endregion  \n\n```", "```cs\npublic sealed class CameraView : ContentView \n    { \n        #region Events \n\n        public event EventHandler<Orientation> OrientationChange; \n\n        public event EventHandler<Point> Focus; \n\n        public event EventHandler<bool> AvailabilityChange; \n\n        public event EventHandler<bool> OpenCamera; \n\n        public event EventHandler<bool> Busy; \n\n        public event EventHandler<bool> Flash; \n\n        public event EventHandler<bool> Torch; \n\n        public event EventHandler<bool> Loading; \n\n        public event EventHandler<byte[]> Photo; \n\n        public event EventHandler<float> Widths; \n\n        public event EventHandler Shutter; \n\n        #endregion \n} \n\n```", "```cs\n        #region Public Properties \n\n        public bool CameraAvailable; \n\n        public Orientation Orientation; \n\n        public float CameraButtonContainerWidth = 0f; \n\n        #endregion \n\n```", "```cs\n        #region Public Methods \n\n        public void NotifyShutter() \n        { \n            Shutter?.Invoke(this, EventArgs.Empty); \n        } \n\n        public void NotifyOpenCamera(bool open) \n        { \n            OpenCamera?.Invoke(this, open); \n        } \n\n        public void NotifyFocus(Point touchPoint) \n        { \n            Focus?.Invoke(this, touchPoint); \n        } \n\n        public void NotifyBusy(object sender, bool busy) \n        { \n            Busy?.Invoke(this, busy); \n        } \n\n        public void NotifyOrientationChange(Orientation orientation) \n        { \n            Orientation = orientation; \n\n            OrientationChange?.Invoke(this, orientation); \n        } \n\n        public void NotifyAvailability(object sender, bool isAvailable) \n        { \n            CameraAvailable = isAvailable; \n\n            AvailabilityChange?.Invoke(this, isAvailable); \n        } \n\n        public void NotifyPhoto(object sender, byte[] imageData) \n        { \n            Photo?.Invoke(this, imageData); \n        } \n\n        public void NotifyFlash(bool flashOn) \n        { \n            Flash?.Invoke(this, flashOn); \n        } \n\n  public void NotifyTorch(bool torchOn) \n        { \n            Torch?.Invoke(this, torchOn); \n        } \n\n        public void NotifyLoading(object sender, bool loading) \n        { \n            Loading?.Invoke(this, loading); \n        } \n\n        public void NotifyWidths(float cameraButtonContainerWidth) \n        { \n            CameraButtonContainerWidth = cameraButtonContainerWidth; \n\n            Widths?.Invoke (this, cameraButtonContainerWidth); \n        } \n\n        #endregion \n\n```", "```cs\n        #region Constructors \n\n        public CameraView() \n        { \n            BackgroundColor = Color.Black; \n        } \n\n        #endregion \n\n```", "```cs\n<?xml version=\"1.0\" encoding=\"utf-8\" ?> \n<ContentView  \n\n    x:Class=\"Camera.Controls.LoadingView\" \n\n    BackgroundColor=\"White\"> \n\n    <Grid x:Name=\"MainLayout\" BackgroundColor=\"Black\"> \n        <Grid.RowDefinitions> \n            <RowDefinition Height=\"*\" /> \n        </Grid.RowDefinitions> \n\n        <Grid.ColumnDefinitions> \n            <ColumnDefinition Width=\"*\"/> \n        </Grid.ColumnDefinitions> \n\n        <StackLayout Orientation=\"Vertical\" HorizontalOptions=\"Center\" VerticalOptions=\"Center\"  \n                Grid.Row=\"0\" Grid.Column=\"0\"> \n            <ActivityIndicator x:Name=\"ProgressActivity\" Color=\"White\" IsRunning=\"true\"  /> \n            <Label x:Name=\"LoadingLabel\" Text=\"{Binding LoadingMessage}\" TextColor=\"White\"/> \n        </StackLayout> \n    </Grid> \n</ContentView> \n\n```", "```cs\n   public partial class LoadingView : ContentView \n    { \n        public LoadingView() \n        { \n            InitializeComponent(); \n        } \n    } \n\n```", "```cs\npublic sealed class CameraIOS : UIView \n    { \n        #region Private Properties \n\n        private readonly string _tag; \n\n        private readonly ILogger _log; \n\n        private readonly AVCaptureVideoPreviewLayer _previewLayer; \n\n        private readonly AVCaptureSession _captureSession; \n\n        private UIView _mainView; \n\n        private AVCaptureDeviceInput _input; \n\n        private AVCaptureStillImageOutput _output; \n\n        private AVCaptureConnection _captureConnection; \n\n        private AVCaptureDevice _device; \n\n        private bool _cameraBusy; \n\n        private bool _cameraAvailable; \n\n        private float _cameraButtonContainerWidth; \n\n        private float _imgScale = 1.25f; \n\n        private double _systemVersion; \n\n        private nint _width; \n\n        private nint _height; \n\n #endregion \n} \n\n```", "```cs\n   #region Events \n\n  public event EventHandler<bool> Busy; \n\n        public event EventHandler<bool> Available; \n\n        public event EventHandler<byte[]> Photo; \n\n        #endregion \n\n```", "```cs\n        #region Constructors \n\n        public CameraIOS() \n        { \n            _log = IoC.Resolve<ILogger>(); \n            _tag = $\"{GetType()} \"; \n\n            // retrieve system version  \n            var versionParts = UIDevice.CurrentDevice.SystemVersion.Split ('.'); \n            var versionString = versionParts [0] + \".\" + versionParts [1]; \n            _systemVersion = Convert.ToDouble (versionString, CultureInfo.InvariantCulture); \n\n            _mainView = new UIView () { TranslatesAutoresizingMaskIntoConstraints = false }; \n            AutoresizingMask = UIViewAutoresizing.FlexibleMargins; \n\n            _captureSession = new AVCaptureSession(); \n\n            _previewLayer = new AVCaptureVideoPreviewLayer(_captureSession) \n            { \n                VideoGravity = AVLayerVideoGravity.Resize \n            }; \n\n            _mainView.Layer.AddSublayer (_previewLayer); \n\n            // retrieve camera device if available \n            _cameraAvailable = RetrieveCameraDevice (); \n\n            Add (_mainView); \n\n            // set layout constraints for main view \n            AddConstraints (NSLayoutConstraint.FromVisualFormat(\"V:|[mainView]|\", NSLayoutFormatOptions.DirectionLeftToRight, null, new NSDictionary(\"mainView\", _mainView))); \n            AddConstraints (NSLayoutConstraint.FromVisualFormat(\"H:|[mainView]|\", NSLayoutFormatOptions.AlignAllTop, null, new NSDictionary (\"mainView\", _mainView))); \n        } \n\n        #endregion \n\n```", "```cs\npublic bool RetrieveCameraDevice() \n        { \n            _device = AVCaptureDevice.DefaultDeviceWithMediaType(AVMediaType.Video); \n\n            if (_device == null)  \n            { \n                _log.WriteLineTime(_tag + \"\\n\" + \"RetrieveCameraDevice() No device detected \\n \"); \n\n                return false; \n            } \n\n            return true; \n        } \n\n```", "```cs\n_device = AVCaptureDevice.DefaultDeviceWithMediaType(AVMediaType.Video); \n\n```", "```cs\n        #region Private Methods \n\n        /// <param name=\"orientation\">Orientation.</param> \n        private void AdjustPreviewLayer(Orientation orientation) \n        { \n            CGRect previewLayerFrame = _previewLayer.Frame; \n\n            switch (orientation) \n            { \n                case Orientation.Portrait: \n                    previewLayerFrame.Height = UIScreen.MainScreen.Bounds.Height - _cameraButtonContainerWidth; \n                    previewLayerFrame.Width = UIScreen.MainScreen.Bounds.Width; \n                    break; \n\n                case Orientation.LandscapeLeft: \n                case Orientation.LandscapeRight: \n                    if (_systemVersion >= 8) \n                    { \n                        previewLayerFrame.Width = UIScreen.MainScreen.Bounds.Width - _cameraButtonContainerWidth; \n                        previewLayerFrame.Height = UIScreen.MainScreen.Bounds.Height; \n                    } \n                    else \n                    { \n                        previewLayerFrame.Width = UIScreen.MainScreen.Bounds.Height - _cameraButtonContainerWidth; \n                        previewLayerFrame.Height = UIScreen.MainScreen.Bounds.Width; \n                    } \n                    break; \n            } \n\n            try \n            { \n                _previewLayer.Frame = previewLayerFrame; \n            } \n            catch (Exception error) \n            { \n                _log.WriteLineTime(_tag + \"\\n\" + \n                    \"AdjustPreviewLayer() Failed to adjust frame \\n \" + \n                    \"ErrorMessage: \\n\" + \n                    error.Message + \"\\n\" + \n                    \"Stacktrace: \\n \" + \n                    error.StackTrace); \n            } \n        } \n\n```", "```cs\n        private void SetStartOrientation() \n        { \n            Orientation sOrientation = Orientation.None; \n\n            switch (UIApplication.SharedApplication.StatusBarOrientation) \n            { \n                case UIInterfaceOrientation.Portrait: \n                case UIInterfaceOrientation.PortraitUpsideDown: \n                    sOrientation = Orientation.Portrait; \n                    break; \n                case UIInterfaceOrientation.LandscapeLeft: \n                    sOrientation = Orientation.LandscapeLeft; \n                    break; \n                case UIInterfaceOrientation.LandscapeRight: \n                    sOrientation = Orientation.LandscapeRight; \n                    break; \n            } \n\n            HandleOrientationChange(sOrientation); \n        } \n\n```", "```cs\n        private void SetBusy(bool busy) \n        { \n            _cameraBusy = busy; \n\n            // set camera busy  \n            Busy?.Invoke(this, _cameraBusy); \n        } \n\n```", "```cs\n        private async Task CaptureImageWithMetadata(AVCaptureStillImageOutput captureStillImageOutput, AVCaptureConnection connection) \n        { \n            var sampleBuffer = await captureStillImageOutput.CaptureStillImageTaskAsync(connection); \n            var imageData = AVCaptureStillImageOutput.JpegStillToNSData(sampleBuffer); \n            var image = UIImage.LoadFromData(imageData); \n\n            RotateImage(ref image); \n\n            try \n            { \n                byte[] imgData = image.AsJPEG().ToArray(); \n\n                if (Photo != null) \n                { \n                    Photo(this, imgData); \n                } \n            } \n            catch (Exception error) \n            { \n                _log.WriteLineTime(_tag + \"\\n\" + \n                    \"CaptureImageWithMetadata() Failed to take photo \\n \" + \n                    \"ErrorMessage: \\n\" + \n                    error.Message + \"\\n\" + \n                    \"Stacktrace: \\n \" + \n                    error.StackTrace); \n            } \n        } \n\n        #endregion\n```", "```cs\n\nprivate void RotateImage(ref UIImage image) \n        { \n            CGImage imgRef = image.CGImage; \n            CGAffineTransform transform = CGAffineTransform.MakeIdentity(); \n\n            var imgHeight = imgRef.Height * _imgScale; \n            var imgWidth = imgRef.Width * _imgScale; \n\n            CGRect bounds = new CGRect(0, 0, imgWidth, imgHeight); \n            CGSize imageSize = new CGSize(imgWidth, imgHeight); \n            UIImageOrientation orient = image.Orientation; \n\n            switch (orient) \n            { \n                case UIImageOrientation.Up: \n                    transform = CGAffineTransform.MakeIdentity(); \n                    break; \n                case UIImageOrientation.Down: \n                    transform = CGAffineTransform.MakeTranslation (imageSize.Width, imageSize.Height); \n                    transform = CGAffineTransform.Rotate(transform, (float)Math.PI); \n                    break; \n                case UIImageOrientation.Right: \n                    bounds.Size = new CGSize( bounds.Size.Height, bounds.Size.Width); \n                    transform = CGAffineTransform.MakeTranslation(imageSize.Height, 0); \n                    transform = CGAffineTransform.Rotate(transform, (float)Math.PI / 2.0f); \n                    break; \n                default: \n                    throw new Exception(\"Invalid image orientation\");                         \n            } \n\n            UIGraphics.BeginImageContext(bounds.Size); \n            CGContext context = UIGraphics.GetCurrentContext(); \n\n            if (orient == UIImageOrientation.Right) \n            { \n                context.ScaleCTM(-1, 1); \n                context.TranslateCTM(-imgHeight, 0); \n            } \n            else \n            { \n                context.ScaleCTM(1, -1); \n                context.TranslateCTM(0, -imgHeight); \n            } \n\n            context.ConcatCTM(transform); \n\n            context.DrawImage(new CGRect(0, 0, imgWidth, imgHeight), imgRef); \n            image = UIGraphics.GetImageFromCurrentImageContext(); \n            UIGraphics.EndImageContext(); \n        } \n\n```", "```cs\n        public override void Draw(CGRect rect) \n        { \n            _previewLayer.Frame = rect; \n\n            base.Draw(rect); \n        } \n\n```", "```cs\n        public async Task TakePhoto() \n        { \n            if (!_cameraBusy)  \n            { \n                SetBusy(true); \n\n                try  \n                { \n                    // set output orientation \n                    _output.Connections [0].VideoOrientation = _previewLayer.Orientation; \n\n                    var connection = _output.Connections[0]; \n\n                    await CaptureImageWithMetadata(_output, connection); \n\n                    SetBusy(false); \n                } \n                catch (Exception error) \n                { \n                    _log.WriteLineTime(_tag + \"\\n\" + \n                        \"TakePhoto() Error with camera output capture \\n \" + \n                        \"ErrorMessage: \\n\" + \n                        error.Message + \"\\n\" + \n                        \"Stacktrace: \\n \" + \n                        error.StackTrace); \n\n                    IoC.Resolve<ILogger>().WriteLineTime  (\"CameraIOS: Error with camera output capture - \" + e); \n                } \n            } \n        } \n\n```", "```cs\n        public void SwitchFlash(bool flashOn) \n        { \n            NSError err; \n\n            if (_cameraAvailable && _device != null)  \n            { \n                try  \n                { \n                    _device.LockForConfiguration(out err); \n                    _device.TorchMode = flashOn ? AVCaptureTorchMode.On : AVCaptureTorchMode.Off; \n                    _device.UnlockForConfiguration(); \n                }  \n                catch (Exception error)  \n                { \n                    _log.WriteLineTime(_tag + \"\\n\" + \n                        \"SwitchFlash() Failed to switch flash on/off \\n \" + \n                        \"ErrorMessage: \\n\" + \n                        error.Message + \"\\n\" + \n                        \"Stacktrace: \\n \" + \n                        error.StackTrace); \n                } \n            } \n        } \n\n```", "```cs\n        public void SetBounds(nint width, nint height) \n        { \n            _height = height; \n            _width = width; \n        } \n\n```", "```cs\n        public void ChangeFocusPoint(Point fPoint) \n        { \n            NSError err; \n\n            if (_cameraAvailable && _device != null)  \n            { \n                try  \n                { \n                    _device.LockForConfiguration(out err); \n\n                    var focus_x = fPoint.X / Bounds.Width; \n                    var focus_y = fPoint.Y / Bounds.Height; \n\n                    // set focus point \n                    if (_device.FocusPointOfInterestSupported) \n                        _device.FocusPointOfInterest =\n                        new CGPoint(focus_x, focus_y); \n                    if (_device.ExposurePointOfInterestSupported) \n                        _device.ExposurePointOfInterest =\n                        new CGPoint(focus_x, focus_y); \n\n                    _device.UnlockForConfiguration(); \n                }  \n                catch (Exception error)  \n                { \n                    _log.WriteLineTime(_tag + \"\\n\" + \n                        \"SwitchFlash() Failed to adjust focus \\n \" + \n                        \"ErrorMessage: \\n\" + \n                        error.Message + \"\\n\" + \n                        \"Stacktrace: \\n \" + \n                        error.StackTrace); \n                } \n            } \n        } \n\n```", "```cs\n        public void InitializeCamera() \n        { \n            try  \n            { \n                NSError error; \n                NSError err; \n\n                _device.LockForConfiguration(out err); \n                _device.FocusMode = AVCaptureFocusMode.ContinuousAutoFocus; \n                _device.UnlockForConfiguration(); \n\n                _input = new AVCaptureDeviceInput(_device, out error); \n                _captureSession.AddInput(_input); \n\n                _output = new AVCaptureStillImageOutput(); \n\n                var dict = new NSMutableDictionary(); \n                dict[AVVideo.CodecKey] = new NSNumber((int) AVVideoCodec.JPEG); \n                _captureSession.AddOutput (_output); \n\n                InvokeOnMainThread(delegate  \n                    { \n                        // capture connection used for rotating camera \n                        _captureConnection = _previewLayer.Connection; \n                        SetStartOrientation(); \n                        // set orientation before loading camera \n                        _captureSession.StartRunning (); \n                    }); \n            } \n            catch (Exception error)  \n            { \n                _log.WriteLineTime(_tag + \"\\n\" + \n                    \"InitializeCamera() Camera failed to initialise \\n \" + \n                    \"ErrorMessage: \\n\" + \n                    error.Message + \"\\n\" + \n                    \"Stacktrace: \\n \" + \n                    error.StackTrace);     \n            } \n\n            Available?.Invoke(this, _cameraAvailable); \n\n            _log.WriteLineTime(_tag + \"\\n\" + \"RetrieveCameraDevice() Camera initalised \\n \"); \n        } \n\n```", "```cs\n        public void SetWidths(float cameraButtonContainerWidth) \n        { \n            _cameraButtonContainerWidth = cameraButtonContainerWidth; \n        } \n\n```", "```cs\npublic void HandleOrientationChange(Orientation orientation)\n {\n if (_captureConnection != null)\n {\n switch (orientation)\n {\n case Orientation.Portrait: _captureConnection.VideoOrientation = AVCaptureVideoOrientation.Portrait;\n break;\n case Orientation.LandscapeLeft: _captureConnection.VideoOrientation = AVCaptureVideoOrientation.LandscapeLeft;\n break;\n case Orientation.LandscapeRight: _captureConnection.VideoOrientation = AVCaptureVideoOrientation.LandscapeRight;\n break;\n }\n }\n AdjustPreviewLayer(orientation);\n }\n```", "```cs\npublic void StopAndDispose()\n {\n if (_device != null)\n {\n // if flash is on turn off if (_device.TorchMode == AVCaptureTorchMode.On)\n {\n SwitchFlash(false);\n }\n }\n _captureSession.StopRunning();\n // dispose output elements _input.Dispose();\n _output.Dispose();\n }\n #endregion\n }\n```", "```cs\npublic class CameraViewRenderer : ViewRenderer<CameraView, CameraIOS> \n    { \n        #region Private Properties \n\n        private CameraIOS bodyshopCameraIOS; \n\n        #endregion \n\n        #region Protected Methods \n\n        protected override void OnElementChanged(ElementChangedEventArgs<CameraView> e) \n        { \n            base.OnElementChanged(e); \n\n            if (Control == null) \n            { \n                bodyshopCameraIOS = new CameraIOS(); \n\n                bodyshopCameraIOS.Busy += Element.NotifyBusy; \n                bodyshopCameraIOS.Available += Element.NotifyAvailability; \n                bodyshopCameraIOS.Photo += Element.NotifyPhoto; \n\n                SetNativeControl(bodyshopCameraIOS); \n            } \n\n            if (e.OldElement != null) \n            { \n                e.NewElement.Flash -= HandleFlash; \n                e.NewElement.OpenCamera -= HandleCameraInitialisation; \n                e.NewElement.Focus -= HandleFocus; \n                e.NewElement.Shutter -= HandleShutter; \n                e.NewElement.Widths -= HandleWidths; \n\n                bodyshopCameraIOS.Busy -= Element.NotifyBusy; \n                bodyshopCameraIOS.Available -= Element.NotifyAvailability; \n                bodyshopCameraIOS.Photo -= Element.NotifyPhoto; \n            } \n\n            if (e.NewElement != null) \n            { \n                e.NewElement.Flash += HandleFlash; \n                e.NewElement.OpenCamera += HandleCameraInitialisation; \n                e.NewElement.Focus += HandleFocus; \n                e.NewElement.Shutter += HandleShutter; \n                e.NewElement.Widths += HandleWidths; \n            } \n        } \n\n        #endregion \n\n} \n\n```", "```cs\nprotected override void OnElementChanged (ElementChangedEventArgs<NativeListView> e) \n{ \nbase.OnElementChanged (e); \n\nif (Control == null) { \n// Instantiate the native control \n} \n\nif (e.OldElement != null) { \n// Unsubscribe from event handlers and cleanup any resources \n} \n\nif (e.NewElement != null) { \n        // Configure the control and subscribe to event handlers \n    } \n} \n\n```", "```cs\n        protected override void OnElementPropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e) \n        { \n            base.OnElementPropertyChanged(sender, e); \n\n            if (Element != null && bodyshopCameraIOS != null) \n            { \n                if (e.PropertyName == VisualElement.HeightProperty.PropertyName || \n                    e.PropertyName == VisualElement.WidthProperty.PropertyName) \n                { \n                    bodyshopCameraIOS.SetBounds((nint)Element.Width, (nint)Element.Height); \n                } \n            } \n        } \n\n```", "```cs\n        #region Private Methods \n\n        private void HandleWidths (object sender, float e) \n        { \n            bodyshopCameraIOS.SetWidths (e); \n        } \n\n        private async void HandleShutter (object sender, EventArgs e) \n        { \n            await bodyshopCameraIOS.TakePhoto (); \n        } \n\n        private void HandleOrientationChange (object sender, Orientation e) \n        { \n            bodyshopCameraIOS.HandleOrientationChange (e); \n        } \n\n        private void HandleFocus (object sender, Point e) \n        { \n            bodyshopCameraIOS.ChangeFocusPoint (e); \n        } \n\n        private void HandleCameraInitialisation (object sender, bool args) \n        { \n            bodyshopCameraIOS.InitializeCamera(); \n\n            Element.OrientationChange += HandleOrientationChange; \n        } \n\n        private void HandleFlash (object sender, bool args) \n        { \n            bodyshopCameraIOS.SwitchFlash (args); \n        } \n\n        private void HandleFocusChange (object sender, Point args) \n        { \n            bodyshopCameraIOS.ChangeFocusPoint (args); \n        } \n\n        #endregion \n    } \n\n```", "```cs\npublic class CameraCaptureListener : CameraCaptureSession.CaptureCallback \n    { \n        public event EventHandler PhotoComplete; \n\n        public override void OnCaptureCompleted(CameraCaptureSession session, CaptureRequest request,  \n                    TotalCaptureResult result) \n        { \n            PhotoComplete?.Invoke(this, EventArgs.Empty); \n        } \n    } \n\n```", "```cs\npublic class CameraCaptureStateListener : CameraCaptureSession.StateCallback \n    { \n        public Action<CameraCaptureSession> OnConfigureFailedAction; \n\n        public Action<CameraCaptureSession> OnConfiguredAction; \n\n        public override void OnConfigureFailed(CameraCaptureSession session) \n        { \n            if (OnConfigureFailedAction != null) \n            { \n                OnConfigureFailedAction(session); \n            } \n        } \n\n        public override void OnConfigured(CameraCaptureSession session) \n        { \n            if (OnConfiguredAction != null) \n            { \n                OnConfiguredAction(session); \n            } \n        } \n    } \n\n```", "```cs\npublic class CameraStateListener : CameraDevice.StateCallback \n    { \n        public CameraDroid Camera; \n\n        public override void OnOpened(CameraDevice camera) \n        { \n            if (Camera != null) \n            { \n                Camera.cameraDevice = camera; \n                Camera.StartPreview(); \n                Camera.OpeningCamera = false; \n\n                Camera?.NotifyAvailable(true); \n            } \n        } \n\n        public override void OnDisconnected(CameraDevice camera) \n        { \n            if (Camera != null) \n            { \n                camera.Close(); \n                Camera.cameraDevice = null; \n                Camera.OpeningCamera = false; \n\n                Camera?.NotifyAvailable(false); \n            } \n        } \n\n        public override void OnError(CameraDevice camera, CameraError error) \n        { \n            camera.Close(); \n\n            if (Camera != null) \n            { \n                Camera.cameraDevice = null; \n                Camera.OpeningCamera = false; \n\n                Camera?.NotifyAvailable(false); \n            } \n        } \n    } \n\n```", "```cs\npublic class ImageAvailableListener : Java.Lang.Object, ImageReader.IOnImageAvailableListener \n    { \n        public event EventHandler<byte[]> Photo; \n\n        public void OnImageAvailable(ImageReader reader) \n        { \n            Image image = null; \n\n            try \n            { \n                image = reader.AcquireLatestImage(); \n                ByteBuffer buffer = image.GetPlanes()[0].Buffer; \n                byte[] imageData = new byte[buffer.Capacity()]; \n                buffer.Get(imageData); \n\n                Photo?.Invoke(this, imageData); \n            } \n            catch (Exception ex) \n            { \n            } \n            finally \n            { \n                if (image != null) \n                { \n                    image.Close(); \n                } \n            } \n        } \n    } \n\n```", "```cs\npublic class CameraDroid : FrameLayout, TextureView.ISurfaceTextureListener \n    { \n        #region Static Properties \n\n        private static readonly SparseIntArray ORIENTATIONS = new SparseIntArray(); \n\n        #endregion \n\n        #region Public Events \n\n        public event EventHandler<bool> Busy; \n\n        public event EventHandler<bool> Available; \n\n        public event EventHandler<byte[]> Photo; \n\n        #endregion \n\n} \n\n```", "```cs\n#region Private Properties \n\n        private readonly string _tag; \n\n        private readonly ILogger _log; \n\n        private CameraStateListener mStateListener; \n\n        private CaptureRequest.Builder _previewBuilder; \n\n        private CameraCaptureSession _previewSession; \n\n        private SurfaceTexture _viewSurface; \n\n        private TextureView _cameraTexture; \n\n        private MediaActionSound mediaSound; \n\n        private Android.Util.Size _previewSize; \n\n        private Context _context; \n\n        private CameraManager _manager; \n\n        private bool _mediaSoundLoaded; \n\n        private bool _openingCamera; \n\n        #endregion \n\n```", "```cs\n        #region Public Properties \n\n        public bool OpeningCamera \n        { \n            get \n            { \n                return _openingCamera; \n            } \n            set \n            { \n                if (_openingCamera != value) \n                { \n                    _openingCamera = value; \n                    Busy?.Invoke(this, value); \n                } \n            } \n        } \n\n        public CameraDevice cameraDevice; \n\n        #endregion \n\n```", "```cs\n        #region Constructors \n\n        public CameraDroid (Context context) : base (context) \n        { \n            _context = context; \n            _mediaSoundLoaded = LoadShutterSound (); \n\n            _log = IoC.Resolve<ILogger>(); \n            _tag = $\"{GetType()} \"; \n\n            var inflater = LayoutInflater.FromContext (context); \n\n            if (inflater != null) \n            { \n                var view = inflater.Inflate(Resource.Layout.CameraLayout, this); \n\n                _cameraTexture = view.FindViewById<TextureView>(Resource.Id.CameraTexture); \n                _cameraTexture.SurfaceTextureListener = this; \n\n                mStateListener = new CameraStateListener() { Camera = this }; \n\n                ORIENTATIONS.Append((int)SurfaceOrientation.Rotation0, 90); \n                ORIENTATIONS.Append((int)SurfaceOrientation.Rotation90, 0); \n                ORIENTATIONS.Append((int)SurfaceOrientation.Rotation180, 270); \n                ORIENTATIONS.Append((int)SurfaceOrientation.Rotation270, 180); \n            } \n        } \n\n        #endregion \n\n```", "```cs\n        #region Private Methods \n\n        private void UpdatePreview() \n        { \n            if (cameraDevice != null && _previewSession != null) \n            { \n                try \n                { \n                    // The camera preview can be run in a background thread. This is a Handler for the camere preview \n                    _previewBuilder.Set(CaptureRequest.ControlMode, new Java.Lang.Integer((int)ControlMode.Auto)); \n                    HandlerThread thread = new HandlerThread(\"CameraPreview\"); \n                    thread.Start(); \n                    Handler backgroundHandler = new Handler(thread.Looper); \n\n                    // Finally, we start displaying the camera preview \n                    _previewSession.SetRepeatingRequest(_previewBuilder.Build(), null, backgroundHandler); \n                } \n                catch (CameraAccessException error) \n                { \n                    _log.WriteLineTime(_tag + \"\\n\" + \n                        \"UpdatePreview() Camera access exception.  \\n \" + \n                        \"ErrorMessage: \\n\" + \n                        error.Message + \"\\n\" + \n                        \"Stacktrace: \\n \" + \n                        error.StackTrace); \n                } \n                catch (IllegalStateException error) \n                { \n                    _log.WriteLineTime(_tag + \"\\n\" + \n                        \"UpdatePreview() Illegal exception.  \\n \" + \n                        \"ErrorMessage: \\n\" + \n                        error.Message + \"\\n\" + \n                        \"Stacktrace: \\n \" + \n                        error.StackTrace); \n                } \n            } \n        } \n\n```", "```cs\n        private bool LoadShutterSound() \n        { \n            try  \n            { \n                mediaSound = new MediaActionSound (); \n                mediaSound.LoadAsync (MediaActionSoundType.ShutterClick); \n\n                return true; \n            } \n            catch (Java.Lang.Exception error)  \n            { \n                _log.WriteLineTime(_tag + \"\\n\" + \n                    \"LoadShutterSound() Error loading shutter sound  \\n \" + \n                    \"ErrorMessage: \\n\" + \n                    error.Message + \"\\n\" + \n                    \"Stacktrace: \\n \" + \n                    error.StackTrace); \n            } \n\n            return false; \n        } \n\n        #endregion \n\n```", "```cs\n        #region Public Methods \n\n        public void OpenCamera() \n        { \n            if (_context== null || OpeningCamera) \n            { \n                return; \n            } \n\n            OpeningCamera = true; \n\n            _manager = (CameraManager)_context.GetSystemService(Context.CameraService); \n\n            try \n            { \n                string cameraId = _manager.GetCameraIdList()[0]; \n\n                // To get a list of available sizes of camera preview, we retrieve an instance of \n                // StreamConfigurationMap from CameraCharacteristics \n                CameraCharacteristics characteristics = _manager.GetCameraCharacteristics(cameraId); \n                StreamConfigurationMap map = (StreamConfigurationMap)characteristics.Get(CameraCharacteristics.ScalerStreamConfigurationMap); \n                _previewSize = map.GetOutputSizes(Java.Lang.Class.FromType(typeof(SurfaceTexture)))[0]; \n                Android.Content.Res.Orientation orientation = Resources.Configuration.Orientation; \n                if (orientation == Android.Content.Res.Orientation.Landscape) \n                { \n                    _cameraTexture.SetAspectRatio(_previewSize.Width, _previewSize.Height); \n                } \n                else \n                { \n                    _cameraTexture.SetAspectRatio(_previewSize.Height, _previewSize.Width); \n                } \n\n                // We are opening the camera with a listener. When it is ready, OnOpened of mStateListener is called. \n                _manager.OpenCamera(cameraId, mStateListener, null); \n            } \n            catch (Java.Lang.Exception error) \n            { \n                _log.WriteLineTime(_tag + \"\\n\" + \n                    \"OpenCamera() Failed to open camera  \\n \" + \n                    \"ErrorMessage: \\n\" + \n                    error.Message + \"\\n\" + \n                    \"Stacktrace: \\n \" + \n                    error.StackTrace); \n\n                Available?.Invoke(this, false); \n            } \n        } \n\n```", "```cs\n        public void TakePhoto () \n        { \n            if (_context != null && _cameraDevice != null) \n            { \n                try \n                { \n                    Busy?.Invoke(this, true); \n\n                    if (_mediaSoundLoaded) \n                    { \n                        _mediaSound.Play(MediaActionSoundType.ShutterClick); \n                    } \n\n                    // Pick the best JPEG size that can be captures with this CameraDevice \n                    var characteristics = _manager.GetCameraCharacteristics(_cameraDevice.Id); \n                    Android.Util.Size[] jpegSizes = null; \n                    if (characteristics != null) \n                    { \n                        jpegSizes = ((StreamConfigurationMap)characteristics.Get(CameraCharacteristics.ScalerStreamConfigurationMap)).GetOutputSizes((int)ImageFormatType.Jpeg); \n                    } \n                    int width = 640; \n                    int height = 480; \n\n                    if (jpegSizes != null && jpegSizes.Length > 0) \n                    { \n                        width = jpegSizes[0].Width; \n                        height = jpegSizes[0].Height; \n                    } \n\n                    // We use an ImageReader to get a JPEG from CameraDevice \n                    // Here, we create a new ImageReader and prepare its Surface as an output from the camera \n                    var reader = ImageReader.NewInstance(width, height, ImageFormatType.Jpeg, 1); \n                    var outputSurfaces = new List<Surface>(2); \n                    outputSurfaces.Add(reader.Surface); \n                    outputSurfaces.Add(new Surface(_viewSurface)); \n\n                    CaptureRequest.Builder captureBuilder = _cameraDevice.CreateCaptureRequest(CameraTemplate.StillCapture); \n                    captureBuilder.AddTarget(reader.Surface); \n                    captureBuilder.Set(CaptureRequest.ControlMode, new Integer((int)ControlMode.Auto)); \n\n                    // Orientation \n                    var windowManager = _context.GetSystemService(Context.WindowService).JavaCast<IWindowManager>(); \n                    SurfaceOrientation rotation = windowManager.DefaultDisplay.Rotation; \n\n                    captureBuilder.Set(CaptureRequest.JpegOrientation, new Integer(ORIENTATIONS.Get((int)rotation))); \n\n                    // This listener is called when an image is ready in ImageReader  \n                    ImageAvailableListener readerListener = new ImageAvailableListener(); \n\n                    readerListener.Photo += (sender, e) => \n                    { \n                        Photo?.Invoke(this, e); \n                    }; \n\n                    // We create a Handler since we want to handle the resulting JPEG in a background thread \n                    HandlerThread thread = new HandlerThread(\"CameraPicture\"); \n                    thread.Start(); \n                    Handler backgroundHandler = new Handler(thread.Looper); \n                    reader.SetOnImageAvailableListener(readerListener, backgroundHandler); \n\n                    var captureListener = new CameraCaptureListener(); \n\n                    captureListener.PhotoComplete += (sender, e) => \n                    { \n                        Busy?.Invoke(this, false); \n                        StartPreview(); \n                    }; \n\n                    _cameraDevice.CreateCaptureSession(outputSurfaces, new CameraCaptureStateListener() \n                    { \n                        OnConfiguredAction = (CameraCaptureSession session) => \n                        { \n                            try \n                            { \n                                _previewSession = session; \n                                session.Capture(captureBuilder.Build(), captureListener, backgroundHandler); \n                            } \n                            catch (CameraAccessException ex) \n                            { \n                                Log.WriteLine(LogPriority.Info, \"Capture Session error: \", ex.ToString()); \n                            } \n                        } \n                    }, backgroundHandler); \n                } \n                catch (CameraAccessException error) \n                { \n                    _log.WriteLineTime(_tag + \"\\n\" + \n                        \"TakePhoto() Failed to take photo  \\n \" + \n                        \"ErrorMessage: \\n\" + \n                        error.Message + \"\\n\" + \n                        \"Stacktrace: \\n \" + \n                        error.StackTrace);                     \n                } \n                catch (Java.Lang.Exception error) \n                { \n                    _log.WriteLineTime(_tag + \"\\n\" + \n                        \"TakePhoto() Failed to take photo  \\n \" + \n                        \"ErrorMessage: \\n\" + \n                        error.Message + \"\\n\" + \n                        \"Stacktrace: \\n \" + \n                        error.StackTrace); \n                } \n            } \n        } \n\n```", "```cs\n        public void ChangeFocusPoint(Xamarin.Forms.Point e) \n        { \n            string cameraId = _manager.GetCameraIdList()[0]; \n\n            // To get a list of available sizes of camera preview, we retrieve an instance of \n            // StreamConfigurationMap from CameraCharacteristics \n            CameraCharacteristics characteristics = _manager.GetCameraCharacteristics(cameraId); \n\n            var rect = characteristics.Get(CameraCharacteristics.SensorInfoActiveArraySize) as Rect; \n            var size = characteristics.Get(CameraCharacteristics.SensorInfoPixelArraySize) as Size; \n\n            int areaSize = 200; \n            int right = rect.Right; \n            int bottom = rect.Bottom; \n            int viewWidth = _cameraTexture.Width; \n            int viewHeight = _cameraTexture.Height; \n            int ll, rr; \n\n            Rect newRect; \n            int centerX = (int)e.X; \n            int centerY = (int)e.Y; \n\n            ll = ((centerX * right) - areaSize) / viewWidth; \n            rr = ((centerY * bottom) - areaSize) / viewHeight; \n\n            int focusLeft = Clamp(ll, 0, right); \n            int focusBottom = Clamp(rr, 0, bottom); \n\n            newRect = new Rect(focusLeft, focusBottom, focusLeft + areaSize, focusBottom + areaSize); \n            MeteringRectangle meteringRectangle = new MeteringRectangle(newRect, 500); \n            MeteringRectangle[] meteringRectangleArr = { meteringRectangle }; \n            _previewBuilder.Set(CaptureRequest.ControlAfTrigger, (int)ControlAFTrigger.Cancel); \n            _previewBuilder.Set(CaptureRequest.ControlAeRegions, meteringRectangleArr); \n            _previewBuilder.Set(CaptureRequest.ControlAfTrigger, (int)ControlAFTrigger.Start); \n\n            UpdatePreview(); \n        } \n\n```", "```cs\n_previewBuilder.Set(CaptureRequest.ControlAfTrigger, (int)ControlAFTrigger.Cancel); \n\n```", "```cs\n_previewBuilder.Set(CaptureRequest.ControlAeRegions, meteringRectangleArr); \n\n```", "```cs\n_previewBuilder.Set(CaptureRequest.ControlAfTrigger, (int)ControlAFTrigger.Start); \n\n```", "```cs\n        private int Clamp(int value, int min, int max) \n        { \n            return (value < min) ? min : (value > max) ? max : value; \n        } \n\n```", "```cs\n        public void StartPreview() \n        { \n            if (cameraDevice != null && _cameraTexture.IsAvailable && _previewSize != null) \n            { \n                try \n                { \n                    var texture = _cameraTexture.SurfaceTexture; \n\n                    texture.SetDefaultBufferSize(_previewSize.Width, _previewSize.Height); \n                    Surface surface = new Surface(texture); \n\n                                        _previewBuilder = cameraDevice.CreateCaptureRequest(CameraTemplate.Preview); \n                    _previewBuilder.AddTarget(surface); \n\n                    // Here, we create a CameraCaptureSession for camera preview. \n                    cameraDevice.CreateCaptureSession(new List<Surface>() { surface }, \n                        new CameraCaptureStateListener() \n                        { \n                            OnConfigureFailedAction = (CameraCaptureSession session) => \n                            { \n                            }, \n                            OnConfiguredAction = (CameraCaptureSession session) => \n                            { \n                                _previewSession = session; \n                                UpdatePreview(); \n                            } \n                        }, \n                        null); \n\n                } \n                catch (Java.Lang.Exception error) \n                { \n                    _log.WriteLineTime(_tag + \"\\n\" + \n                        \"TakePhoto() Failed to start preview \\n \" + \n                        \"ErrorMessage: \\n\" + \n                        error.Message + \"\\n\" + \n                        \"Stacktrace: \\n \" + \n                        error.StackTrace);     \n                } \n            } \n        } \n\n```", "```cs\n        public void SwitchFlash(bool flashOn) \n        { \n            try \n            { \n                _previewBuilder.Set(CaptureRequest.FlashMode, new Integer(flashOn ? (int)FlashMode.Torch : (int)FlashMode.Off)); \n                UpdatePreview(); \n            } \n            catch (System.Exception error) \n            { \n                _log.WriteLineTime(_tag + \"\\n\" + \n                    \"TakePhoto() Failed to switch flash on/off \\n \" + \n                    \"ErrorMessage: \\n\" + \n                    error.Message + \"\\n\" + \n                    \"Stacktrace: \\n \" + \n                    error.StackTrace); \n\n            } \n        } \n\n```", "```cs\n        public void NotifyAvailable(bool isAvailable) \n        { \n            Available?.Invoke(this, isAvailable); \n        } \n\n```", "```cs\n        public void ConfigureTransform(int viewWidth, int viewHeight) \n        { \n            if (_viewSurface != null && _previewSize != null && _context != null) \n            { \n                var windowManager = _context.GetSystemService(Context.WindowService).JavaCast<IWindowManager>(); \n\n                var rotation = windowManager.DefaultDisplay.Rotation; \n                var matrix = new Matrix(); \n                var viewRect = new RectF(0, 0, viewWidth, viewHeight); \n                var bufferRect = new RectF(0, 0, _previewSize.Width, _previewSize.Height); \n\n                var centerX = viewRect.CenterX(); \n                var centerY = viewRect.CenterY(); \n\n                if (rotation == SurfaceOrientation.Rotation90 || rotation == SurfaceOrientation.Rotation270) \n                { \n                    bufferRect.Offset(centerX - bufferRect.CenterX() , centerY - bufferRect.CenterY()); \n                    matrix.SetRectToRect(viewRect, bufferRect, Matrix.ScaleToFit.Fill); \n\n                    matrix.PostRotate(90 * ((int)rotation - 2), centerX, centerY); \n                } \n\n                _cameraTexture.SetTransform(matrix); \n            } \n        } \n\n```", "```cs\n        public void OnSurfaceTextureAvailable (SurfaceTexture surface, int w, int h) \n        { \n            _viewSurface = surface; \n\n            ConfigureTransform(w, h); \n            StartPreview(); \n        } \n\n```", "```cs\n        public bool OnSurfaceTextureDestroyed (SurfaceTexture surface) \n        { \n            return true; \n        } \n\n        public void OnSurfaceTextureSizeChanged (SurfaceTexture surface, int width, int height) \n        { \n            ConfigureTransform(width, height); \n            StartPreview(); \n        } \n\n```", "```cs\n        public void OnSurfaceTextureUpdated (SurfaceTexture surface) \n        { \n        } \n\n```", "```cs\npublic class CameraViewRenderer : ViewRenderer<CameraView, CameraDroid> \n    { \n        #region Private Properties \n\n        private CameraDroid Camera; \n\n        #endregion \n} \n\n```", "```cs\n        #region Protected Methods \n\n        protected override void OnElementChanged(ElementChangedEventArgs<CameraView> e) \n        { \n            base.OnElementChanged(e); \n\n            if (Control == null) \n            { \n                Camera = new CameraDroid(Context); \n\n                SetNativeControl(Camera); \n            } \n\n            if (e.NewElement != null) \n            { \n\n                Camera.Available += e.NewElement.NotifyAvailability; \n                Camera.Photo += e.NewElement.NotifyPhoto; \n                Camera.Busy += e.NewElement.NotifyBusy; \n\n                e.NewElement.Flash += HandleFlashChange; \n                e.NewElement.OpenCamera += HandleCameraInitialisation; \n                e.NewElement.Focus += HandleFocus; \n                e.NewElement.Shutter += HandleShutter; \n            } \n        } \n\n```", "```cs\nprotected override void Dispose(bool disposing) \n        { \n            Element.Flash -= HandleFlashChange; \n            Element.OpenCamera -= HandleCameraInitialisation; \n            Element.Focus -= HandleFocus; \n            Element.Shutter -= HandleShutter; \n\n            Camera.Available -= Element.NotifyAvailability; \n            Camera.Photo -= Element.NotifyPhoto; \n            Camera.Busy -= Element.NotifyBusy; \n\n            base.Dispose(disposing); \n        } \n\n```", "```cs\n        #region Private Methods \n\n        private void HandleCameraInitialisation (object sender, bool args) \n        { \n            Camera.OpenCamera(); \n        } \n        private void HandleFlashChange (object sender, bool args) \n        { \n            Camera.SwitchFlash (args); \n        } \n\n        private void HandleShutter (object sender, EventArgs e) \n        { \n            Camera.TakePhoto(); \n        } \n\n        private void HandleFocus (object sender, Point e) \n        { \n            Camera.ChangeFocusPoint(e); \n        } \n\n        #endregion \n    }  \n\n```", "```cs\npublic class FocusViewGestureDetector : GestureDetector.SimpleOnGestureListener \n    { \n        #region Events \n\n        public event EventHandler<MotionEvent> Touch; \n\n        #endregion \n\n        #region Public Methods \n\n        public override void OnLongPress(MotionEvent e) \n        { \n            base.OnLongPress(e); \n        } \n\n        public override bool OnDoubleTap(MotionEvent e) \n        { \n            return base.OnDoubleTap(e); \n        } \n\n        public override bool OnDoubleTapEvent(MotionEvent e) \n        { \n            return base.OnDoubleTapEvent(e); \n        } \n\n        public override bool OnSingleTapUp(MotionEvent e) \n        { \n            return base.OnSingleTapUp(e); \n        } \n\n        public override bool OnDown(MotionEvent e) \n        { \n            if (Touch != null) \n            { \n                Touch(this, e); \n            } \n\n            return base.OnDown(e); \n        } \n\n        public override bool OnFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) \n        { \n            return base.OnFling(e1, e2, velocityX, velocityY); \n        } \n\n        public override bool OnScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) \n        { \n            return base.OnScroll(e1, e2, distanceX, distanceY); \n        } \n\n        public override void OnShowPress(MotionEvent e) \n        { \n            base.OnShowPress(e); \n        } \n\n        public override bool OnSingleTapConfirmed(MotionEvent e) \n        { \n            return base.OnSingleTapConfirmed(e); \n        } \n\n        #endregion \n    } \n\n```", "```cs\npublic class FocusViewRenderer : ViewRenderer<FocusView, LinearLayout> \n    { \n        #region Private Methods \n\n        private FocusViewGestureDetector _gestureDetector; \n\n        private GestureDetector _detector; \n\n        private LinearLayout _layout; \n\n        #endregion \n} \n\n```", "```cs\n        #region Protected Methods \n\n        protected override void OnElementChanged(ElementChangedEventArgs<FocusView> e) \n        { \n            base.OnElementChanged(e); \n\n            if (Control == null) \n            { \n                SetGestureDetectorListener(); \n                _layout = new LinearLayout(Context); \n\n                SetNativeControl (_layout); \n            } \n\n            if (e.NewElement != null) \n            { \n                _layout.Touch += HandleTouch; \n            } \n        } \n\n        #endregion \n\n```", "```cs\nprotected override void Dispose(bool disposing) \n        { \n            _layout.Touch -= HandleTouch; \n\n            base.Dispose(disposing); \n        }  \n\n```", "```cs\n        #region Private Methods \n\n        private int ConvertPixelsToDp(float pixelValue) \n        { \n            return (int) ((pixelValue)/Resources.DisplayMetrics.Density); \n        } \n\n        private void SetGestureDetectorListener() \n        { \n            _gestureDetector = new FocusViewGestureDetector (); \n            _detector = new GestureDetector (_gestureDetector); \n\n            Observable.FromEventPattern<MotionEvent> (_gestureDetector, \"Touch\") \n                .Window (() => Observable.Interval (TimeSpan.FromSeconds (0.7))) \n                .SelectMany (x => x.Take (1)) \n                .Subscribe (e => Element.NotifyFocus (new Point (ConvertPixelsToDp (e.EventArgs.GetX ()), ConvertPixelsToDp (e.EventArgs.GetY ())))); \n        } \n\n        private void HandleTouch (object sender, TouchEventArgs e) \n        { \n            _detector.OnTouchEvent (e.Event); \n        } \n\n        #endregion \n    }  \n\n```", "```cs\npublic class FocusViewRendererTouchAttribute : VisualElementRenderer<FocusView> \n    { \n        public override void TouchesBegan (NSSet touches, UIEvent evt) \n        { \n            base.TouchesBegan (touches, evt); \n\n            FocusView focusView = ((FocusView)this.Element); \n\n            UITouch touch = touches.AnyObject as UITouch; \n\n            if (touch != null)  \n            { \n                var posc = touch.LocationInView (touch.View); \n                focusView.NotifyFocus (new Xamarin.Forms.Point(posc.X, posc.Y)); \n            } \n        } \n    } \n\n```", "```cs\n[assembly: Xamarin.Forms.ExportRendererAttribute (typeof(Camera.Controls.FocusView),  \n                                                  typeof(Camera.iOS.Renderers.FocusView.FocusViewRendererTouchAttribute))] \n\n```", "```cs\npublic class CustomImageRenderer : ViewRenderer<CustomImage, UIView> \n    { \n        #region Private Propertie \n\n        private readonly string _tag; \n\n        private ILogger _log; \n\n        private UIImageView _imageView; \n\n        private int _systemVersion = Convert.ToInt16 (UIDevice.CurrentDevice.SystemVersion.Split ('.') [0]); \n\n        #endregion \n\n        #region Constructors \n\n        public CustomImageRenderer() \n        { \n            _log = IoC.Resolve<ILogger>(); \n            _tag = string.Format(\"{0} \", GetType()); \n        } \n\n        #endregion \n} \n\n```", "```cs\n        protected override void OnElementChanged (ElementChangedEventArgs<CustomImage> e) \n        { \n            base.OnElementChanged (e); \n\n            if (Control == null) \n            { \n                _imageView = new UIImageView(); \n\n                SetNativeControl(_imageView); \n            } \n\n            if (e.OldElement != null) \n            { \n                e.OldElement.CustomPropertyChanged -= HandleCustomPropertyChanged; \n            } \n\n            if (e.NewElement != null) \n            { \n                LoadImage(); \n\n                e.NewElement.CustomPropertyChanged += HandleCustomPropertyChanged; \n            } \n        } \n\n```", "```cs\n        private void HandleCustomPropertyChanged (object sender, string propertyName) \n        { \n            switch (propertyName) \n            { \n                case \"TintColorString\": \n                case \"TintOn\": \n                    UpdateControlColor(); \n                    break; \n                case \"Path\": \n                    InvokeOnMainThread(() => LoadImage()); \n                    break; \n            } \n        } \n\n```", "```cs\nprivate UIViewContentMode SetAspect() \n        { \n            if (Element != null) \n            { \n                switch (Element.Aspect)  \n                { \n                    case Aspect.AspectFill: \n                        return UIViewContentMode.ScaleAspectFill; \n                    case Aspect.AspectFit: \n                        return UIViewContentMode.ScaleAspectFit; \n                    case Aspect.Fill: \n                        return UIViewContentMode.ScaleToFill; \n                    default: \n                        return UIViewContentMode.ScaleAspectFit; \n                } \n            } \n\n            return UIViewContentMode.ScaleAspectFit; \n        } \n\n```", "```cs\n        private void LoadImage() \n        { \n            try  \n            { \n                if (Element != null) \n                { \n                    if (!string.IsNullOrEmpty(Element.Path)) \n                    { \n                        _imageView.Image = ReadBitmapImageFromStorage (Element.Path); \n\n                        if (_imageView.Image != null) \n                        { \n                            if (_systemVersion >= 7 && Element.TintOn) \n                            { \n                                _imageView.Image = _imageView.Image.ImageWithRenderingMode (UIImageRenderingMode.AlwaysTemplate); \n                            } \n\n                            UpdateControlColor(); \n\n                            _imageView.ContentMode = SetAspect(); \n                        } \n                    } \n                } \n            } \n            catch (Exception error) \n            { \n                _log.WriteLineTime(_tag + \"\\n\" + \n                    \"LoadAsync() Failed to load view model.  \\n \" + \n                    \"ErrorMessage: \\n\" + \n                    error.Message + \"\\n\" + \n                    \"Stacktrace: \\n \" + \n                    error.StackTrace); \n            } \n        } \n\n```", "```cs\n_imageView.Image = _imageView.Image.ImageWithRenderingMode (UIImageRenderingMode.AlwaysTemplate); \n\n```", "```cs\nprivate UIImage ReadBitmapImageFromStorage(string fn) \n        { \n            var docsPath = Environment.GetFolderPath (Environment.SpecialFolder.MyDocuments); \n            string filePath = Path.Combine(Environment.CurrentDirectory, fn); \n\n            try  \n            { \n                using (Stream stream = File.OpenRead(filePath)) \n                { \n                    NSData data = NSData.FromStream (stream); \n                    return UIImage.LoadFromData (data); \n                } \n            } \n            catch (Exception error) \n            { \n                _log.WriteLineTime(_tag + \"\\n\" + \n                    \"LoadAsync() Failed to load view model.  \\n \" + \n                    \"ErrorMessage: \\n\" + \n                    error.Message + \"\\n\" + \n                    \"Stacktrace: \\n \" + \n                    error.StackTrace); \n            } \n\n            return UIImage.FromFile (Path.Combine (Environment.CurrentDirectory, \"loading.png\")); \n        } \n\n```", "```cs\nprivate void UpdateControlColor() \n        { \n            if (Element.TintOn && !string.IsNullOrEmpty(Element.TintColorString))  \n            { \n                var color = UIColor.Clear.FromHex (Element.TintColorString, 1.0f); \n\n                _imageView.Image = UIImageEffects.GetColoredImage(_imageView.Image, color); \n            } \n        } \n\n```", "```cs\npublic static class UIImageEffects \n    { \n        public static UIImage GetColoredImage(UIImage image, UIColor color) \n        { \n            UIImage coloredImage = null; \n\n            UIGraphics.BeginImageContext(image.Size); \n\n            using (CGContext context = UIGraphics.GetCurrentContext()) \n            { \n                context.TranslateCTM(0, image.Size.Height); \n                context.ScaleCTM(1.0f, -1.0f); \n\n                var rect = new CGRect(0, 0, image.Size.Width, image.Size.Height); \n\n                // draw image, (to get transparancy mask) \n                context.SetBlendMode(CGBlendMode.Normal); \n                context.DrawImage(rect, image.CGImage); \n\n                // draw the color using the sourcein blend mode so its only draw on the non-transparent pixels \n                context.SetBlendMode(CGBlendMode.SourceIn); \n                context.SetFillColor(color.CGColor); \n                context.FillRect(rect); \n\n                coloredImage = UIGraphics.GetImageFromCurrentImageContext(); \n                UIGraphics.EndImageContext(); \n            } \n\n            return coloredImage; \n        } \n    } \n\n```", "```cs\npublic class CustomImageRenderer : ViewRenderer<CustomImage, ImageView>  \n    { \n        #region Private Properties \n\n        private readonly string _tag; \n\n        private ImageView _imageView; \n\n        private CustomImage _customImage; \n\n        private ILogger _log; \n\n        private Bitmap _bitmap; \n\n        #endregion \n\n        #region Constructors \n\n        public CustomImageRenderer() \n        { \n            _log = IoC.Resolve<ILogger> (); \n            _tag = string.Format (\"{0} \", GetType ()); \n        } \n\n        #endregion \n\n```", "```cs\n        #region Protected Methods \n\n        protected override void OnElementChanged (ElementChangedEventArgs<CustomImage> e) \n        { \n            base.OnElementChanged (e); \n\n            if (Control == null) \n            { \n                _imageView = new ImageView(Context); \n\n                SetNativeControl(_imageView); \n            } \n\n            if (e.NewElement != null) \n            { \n                _customImage = e.NewElement; \n\n                SetAspect(); \n\n                Android.App.Application.SynchronizationContext.Post(state => \n                { \n                    UpdateControlColor(); \n                }, null); \n\n                LoadImage().ConfigureAwait(false); \n\n                e.NewElement.CustomPropertyChanged += HandleCustomPropertyChanged; \n            } \n        } \n\n        #endregion \n\n```", "```cs\nprotected override void Dispose(bool disposing) \n        { \n            if (_bitmap != null) \n            { \n                _bitmap.Recycle(); \n                _bitmap.Dispose(); \n            } \n\n            Element.CustomPropertyChanged -= HandleCustomPropertyChanged; \n\n            base.Dispose(disposing); \n        }  \n\n```", "```cs\n        private void SetAspect() \n        { \n            if (Element != null) \n            { \n                switch (Element.Aspect)  \n                { \n                case Aspect.AspectFill: \n                    _imageView.SetScaleType (ImageView.ScaleType.FitXy); \n                    break; \n                case Aspect.AspectFit: \n                    _imageView.SetScaleType (ImageView.ScaleType.FitCenter); \n                    break; \n                case Aspect.Fill: \n                    _imageView.SetScaleType (ImageView.ScaleType.FitXy); \n                    break; \n                default: \n                    _imageView.SetScaleType (ImageView.ScaleType.FitCenter); \n                    break; \n                } \n            } \n        } \n\n```", "```cs\n        private void HandleCustomPropertyChanged (object sender, string propertyName) \n        { \n            switch (propertyName) \n            { \n                case \"TintColorString\": \n                case \"TintOn\": \n                    Android.App.Application.SynchronizationContext.Post(state => \n                    { \n                        UpdateControlColor(); \n                    }, null); \n                    break; \n                case \"Path\": \n                    LoadImage().ConfigureAwait(false); \n                    break; \n            } \n        } \n\n```", "```cs\n        private async Task LoadImage() \n        { \n            try \n            { \n                _bitmap = await ReadBitmapImageFromStorage(Element.Path); \n\n                if (_imageView != null && _bitmap != null) \n                { \n                    Android.App.Application.SynchronizationContext.Post(state => _imageView.SetImageBitmap(_bitmap), null); \n                } \n            } \n            catch (Exception error) \n            { \n                _log.WriteLineTime(_tag + \"\\n\" + \n                    \"LoadAsync() Failed to load view model.  \\n \" + \n                    \"ErrorMessage: \\n\" + \n                    error.Message + \"\\n\" + \n                    \"Stacktrace: \\n \" + \n                    error.StackTrace); \n            } \n        } \n\n```", "```cs\n        private void UpdateControlColor() \n        { \n            try  \n            { \n                if (_customImage.TintOn && !string.IsNullOrEmpty(_customImage.TintColorString)) \n                { \n                    var color = Android.Graphics.Color.ParseColor(_customImage.TintColorString); \n                    _imageView.SetColorFilter (color, PorterDuff.Mode.SrcAtop); \n                } \n            } \n            catch (Exception e)  \n            { \n                _log.WriteLineTime (\"CustomImageRenderer: \" + e); \n            } \n        } \n\n```", "```cs\n        private async Task<Bitmap> ReadBitmapImageFromStorage(string fn) \n        { \n            try \n            { \n                if (!string.IsNullOrEmpty(fn)) \n                { \n                    var file = fn.Split('.').FirstOrDefault(); \n\n                    var id = Resources.GetIdentifier(file, \"drawable\", Context.PackageName); \n\n                    using (Stream stream = Resources.OpenRawResource(id)) \n                    { \n                        if (stream != null) \n                        { \n                            return await BitmapFactory.DecodeStreamAsync(stream); \n                        } \n                    } \n                } \n            } \n            catch (Exception error) \n            { \n                _log.WriteLineTime( \n                    \"MyCareManager.Droid.Renderers.CustomImageRenderer; \\n\" + \n                    \"ErrorMessage: Failed to load image \" + fn + \"\\n \" + \n                    \"Stacktrace: Login Error  \\n \" + \n                    error); \n            } \n\n            return null; \n        } \n\n        #endregion \n    } \n\n```", "```cs\n    public class ButtonClickedTrigger : TriggerAction<Button> \n    { \n        #region Protected Methods \n\n        protected override void Invoke(Button sender) \n        { \n            sender.TextColor = Color.Blue; \n            sender.BackgroundColor = Color.Aqua; \n        } \n\n        #endregion \n    } \n\n```", "```cs\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?> \n<ui:ExtendedContentPage   \n\n    x:Class=\"Camera.Pages.MainPage\" \n    BackgroundColor=\"White\" \n    Title=\"Welcome\"> \n\n    <ui:ExtendedContentPage.Content> \n        <Grid x:Name=\"Grid\" RowSpacing=\"10\" Padding=\"10, 10, 10, 10\" VerticalOptions=\"Center\"> \n            <Grid.RowDefinitions> \n                <RowDefinition Height=\"*\"/> \n                <RowDefinition Height=\"Auto\"/> \n                <RowDefinition Height=\"Auto\"/> \n                <RowDefinition Height=\"Auto\"/> \n            </Grid.RowDefinitions> \n\n            <Grid.ColumnDefinitions> \n                <ColumnDefinition Width=\"*\"/> \n            </Grid.ColumnDefinitions> \n\n            <Image x:Name=\"Image\" Source=\"camera.png\" HeightRequest=\"120\" WidthRequest=\"120\"  \n                    Grid.Row=\"0\" Grid.Column=\"0\"/> \n\n            <Button x:Name=\"CameraButton\" Text=\"{Binding CameraTitle}\"  \n                Command=\"{Binding CameraCommand}\" Style=\"{StaticResource BaseButtonStyle}\" Grid.Row=\"2\" Grid.Column=\"0\"> \n                <Button.Triggers> \n                    <EventTrigger Event=\"Clicked\"> \n                        <t:ButtonClickedTrigger/> \n                    </EventTrigger> \n                </Button.Triggers> \n            </Button> \n\n            <Button x:Name=\"ExitButton\" Text=\"{Binding ExitTitle}\"  \n                Command=\"{Binding ExitCommand}\" Style=\"{StaticResource ButtonStyleWithTrigger}\"  \n                Grid.Row=\"3\" Grid.Column=\"0\"/> \n        </Grid> \n    </ui:ExtendedContentPage.Content> \n</ui:ExtendedContentPage>  \n\n```", "```cs\npublic class VisualElementPopTriggerAction : TriggerAction<VisualElement> \n    { \n        #region Public Properties \n\n        public Point Anchor { set; get; } \n\n        public double Scale { set; get; } \n\n        public uint Length { set; get; } \n\n        #endregion \n\n        #region Constructors \n\n        public VisualElementPopTriggerAction() \n        { \n            Anchor = new Point(0.5, 0.5); \n            Scale = 2; \n            Length = 500; \n        } \n\n        #endregion \n\n        #region Protected Methods \n\n        protected override async void Invoke(VisualElement visual) \n        { \n            visual.AnchorX = Anchor.X; \n            visual.AnchorY = Anchor.Y; \n            await visual.ScaleTo(Scale, Length / 2, Easing.SinOut); \n            await visual.ScaleTo(1, Length / 2, Easing.SinIn); \n        } \n\n        #endregion \n    } \n\n```", "```cs\n            <Style x:Key=\"BaseButtonStyle\" TargetType=\"Button\"> \n                <Setter Property=\"TextColor\"> \n                    <Setter.Value> \n                        <OnPlatform x:TypeArguments=\"Color\" \n                            Android=\"Navy\" \n                            WinPhone=\"Black\" \n                            iOS=\"Black\"> \n                        </OnPlatform> \n                    </Setter.Value> \n                </Setter> \n                <Setter Property=\"FontSize\" Value=\"20\" /> \n                <Setter Property=\"FontFamily\" Value=\"Arial\" /> \n                <Setter Property=\"BackgroundColor\" Value=\"Silver\" /> \n            </Style> \n\n            <Style x:Key=\"ButtonStyleWithTrigger\" TargetType=\"Button\" \n                    BasedOn=\"{StaticResource BaseButtonStyle}\"> \n                <Style.Triggers> \n                    <EventTrigger Event=\"Clicked\"> \n                        <t:VisualElementPopTriggerAction/> \n                    </EventTrigger> \n                </Style.Triggers> \n            </Style> \n\n```", "```cs\npublic class LabelShadowEffect : RoutingEffect \n    { \n        #region Public Properties \n\n        public float Radius { get; set; } \n\n        public Color Color { get; set; } \n\n        public float DistanceX { get; set; } \n\n        public float DistanceY { get; set; } \n\n        #endregion \n\n        #region Constructors \n\n        public LabelShadowEffect() : base(\"Camera.LabelShadowEffect\") \n        { \n        } \n\n        #endregion \n    } \n\n```", "```cs\npublic class LabelShadowEffectiOS : PlatformEffect \n    { \n        #region Protected Methods \n\n        protected override void OnAttached() \n        { \n            try \n            { \n                var effect = (LabelShadowEffect)Element.Effects.FirstOrDefault(e => e is LabelShadowEffect); \n\n                if (effect != null) \n                { \n                    Control.Layer.CornerRadius = effect.Radius; \n                    Control.Layer.ShadowColor = effect.Color.ToCGColor(); \n                    Control.Layer.ShadowOffset = new CGSize(effect.DistanceX, effect.DistanceY); \n                    Control.Layer.ShadowOpacity = 1.0f; \n                } \n            } \n            catch (Exception ex) \n            { \n                Console.WriteLine(\"Cannot set property on attached control. Error: \", ex.Message); \n            } \n        } \n\n        protected override void OnDetached() \n        { \n        } \n\n        #endregion \n    } \n\n```", "```cs\n[assembly: Xamarin.Forms.ResolutionGroupName(\"Camera\")] \n[assembly: Xamarin.Forms.ExportEffect(typeof(Camera.Droid.Effects.LabelShadowEffectiOS), \"LabelShadowEffect\")] \n\n```", "```cs\npublic class LabelShadowEffectDroid : PlatformEffect \n    { \n        #region Protected Methods \n\n        protected override void OnAttached() \n        { \n            try \n            { \n                var control = Control as Android.Widget.TextView; \n\n                var effect = (LabelShadowEffect)Element.Effects.FirstOrDefault(e => e is LabelShadowEffect); \n\n                if (effect != null) \n                { \n                    control.SetShadowLayer(effect.Radius, effect.DistanceX, effect.DistanceY, effect.Color.ToAndroid()); \n                } \n            } \n            catch (Exception ex) \n            { \n                Console.WriteLine(\"Cannot set property on attached control. Error: \", ex.Message); \n            } \n        } \n\n        protected override void OnDetached() \n        { \n        } \n\n        #endregion \n    }  \n\n```", "```cs\n<Label x:Name=\"DesciptionLabel\" Text=\"{Binding DescriptionMessage}\" TextColor=\"Black\"  \n                    HorizontalOptions=\"Center\" Font=\"Arial, 20\" Grid.Row=\"1\" Grid.Column=\"0\"> \n                <Label.Effects> \n                    <e:LabelShadowEffect Radius=\"5\" DistanceX=\"5\" DistanceY=\"5\"> \n                        <e:LabelShadowEffect.Color> \n                            <OnPlatform x:TypeArguments=\"Color\" iOS=\"Black\" Android=\"Blue\" WinPhone=\"Red\" /> \n                        </e:LabelShadowEffect.Color> \n                    </e:LabelShadowEffect> \n                </Label.Effects> \n            </Label> \n\n```", "```cs\npublic class NotConverter : IValueConverter \n    { \n        #region Public Methods \n\n        public object Convert(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture) \n        { \n            var b = value as bool?; \n\n            if (b != null) \n            { \n                return !b; \n            } \n\n            return value; \n        } \n\n        public object ConvertBack(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture) \n        { \n            throw new NotImplementedException(); \n        } \n\n        #endregion \n    }  \n\n```", "```cs\npublic class OrientationToBoolConverter:IValueConverter \n    { \n        #region Public Methods \n\n        public object Convert (object value, Type targetType, object parameter, System.Globalization.CultureInfo culture) \n        { \n            try \n            { \n                var str = parameter as string; \n\n                if (str != null)  \n                { \n                    // split string by ',', convert to int and store in case list \n                    var cases = str.Split(',').Select(x => bool.Parse(x)).ToList(); \n\n                    if (value is Orientation) \n                    { \n                        switch ((Orientation)value) \n                        { \n                            case Orientation.LandscapeRight: \n                            case Orientation.LandscapeLeft: \n                                return cases[0]; \n                            case Orientation.Portrait: \n                                return cases[1]; \n                            case Orientation.None: \n                                return 0; \n                        } \n                    } \n                } \n            } \n            catch (Exception error) \n            { \n                IoC.Resolve<ILogger>().WriteLineTime(\"OrientationToBoolConverter \\n\" + \n                    \"Convert() Failed to switch flash on/off \\n \" + \n                    \"ErrorMessage: \\n\" + \n                    error.Message + \"\\n\" + \n                    \"Stacktrace: \\n \" + \n                    error.StackTrace); \n            } \n\n            return 0; \n        }  \n\n        public object ConvertBack (object value, Type targetType, object parameter, System.Globalization.CultureInfo culture) \n        { \n            throw new NotImplementedException (); \n        } \n\n        #endregion \n    }  \n\n```", "```cs\n'false, true' \n\n```", "```cs\npublic class BoolToStringConverter:IValueConverter \n    { \n        #region Public Methods \n\n        public object Convert (object value, Type targetType, object parameter, System.Globalization.CultureInfo culture) \n        { \n            try \n            { \n                var str = parameter as string; \n\n                if (str != null)  \n                { \n                    // split string by ',', convert to int and store in case list \n                    var cases = str.Split(',').Select(x => x).ToList(); \n\n                    if (value is bool) \n                    { \n                        return (bool)value ? cases[0] : cases[1]; \n                    } \n                } \n            } \n            catch (Exception error)  \n            { \n                IoC.Resolve<ILogger>().WriteLineTime(\"BoolToStringConverter \\n\" + \n                    \"Convert() Failed to switch flash on/off \\n \" + \n                    \"ErrorMessage: \\n\" + \n                    error.Message + \"\\n\" + \n                    \"Stacktrace: \\n \" + \n                    error.StackTrace); \n            } \n\n            return string.Empty; \n        } \n\n        public object ConvertBack (object value, Type targetType, object parameter, System.Globalization.CultureInfo culture) \n        { \n            throw new NotImplementedException (); \n        } \n\n        #endregion \n    } \n\n```", "```cs\npublic class BoolToPartialConverter:IValueConverter \n    { \n        #region Public Methods \n\n        public object Convert (object value, Type targetType, object parameter, System.Globalization.CultureInfo culture) \n        { \n            try \n            { \n                var str = parameter as string; \n\n                if (str != null)  \n                { \n                    // split string by ',', convert to int and store in case list \n                    var cases = str.Split(',').Select(x => Double.Parse(x)).ToList(); \n\n                    if (value is bool) \n                    { \n                        return (bool)value ? cases[0] : cases[1]; \n                    } \n                } \n            } \n            catch (Exception error)  \n            { \n                IoC.Resolve<ILogger>().WriteLineTime(\"BoolToPartialConverter \\n\" + \n                    \"Convert() Failed to switch flash on/off \\n \" + \n                    \"ErrorMessage: \\n\" + \n                    error.Message + \"\\n\" + \n                    \"Stacktrace: \\n \" + \n                    error.StackTrace); \n            } \n\n            return 0; \n        } \n\n        public object ConvertBack (object value, Type targetType, object parameter, System.Globalization.CultureInfo culture) \n        { \n            throw new NotImplementedException (); \n        } \n\n        #endregion \n    } \n\n```", "```cs\npublic class OrientationToIntConverter:IValueConverter \n    { \n        #region Public Methods \n\n        public object Convert (object value, Type targetType, object parameter, System.Globalization.CultureInfo culture) \n        { \n            try \n            { \n                var str = parameter as string; \n\n                if (str != null)  \n                { \n                    // split string by ',', convert to int and store in case list \n                    var cases = str.Split(',').Select(x => Int32.Parse(x)).ToList(); \n\n                    if (value is Orientation) \n                    { \n                        switch ((Orientation)value) \n                        { \n                            case Orientation.LandscapeRight: \n                            case Orientation.LandscapeLeft: \n                                return cases[0]; \n                            case Orientation.Portrait: \n                                return cases[1]; \n                            case Orientation.None: \n                                return cases[0]; \n                        } \n                    } \n                } \n            } \n            catch (Exception error) \n            { \n                IoC.Resolve<ILogger>().WriteLineTime(\"OrientationToIntConverter \\n\" + \n                    \"Convert() Failed to switch flash on/off \\n \" + \n                    \"ErrorMessage: \\n\" + \n                    error.Message + \"\\n\" + \n                    \"Stacktrace: \\n \" + \n                    error.StackTrace); \n            } \n\n            return 0; \n        } \n\n        public object ConvertBack (object value, Type targetType, object parameter, System.Globalization.CultureInfo culture) \n        { \n            throw new NotImplementedException (); \n        } \n\n        #endregion \n    } \n\n```", "```cs\npublic class ByteArrayToImageSourceConverter : IValueConverter \n    { \n        #region Public Methods \n\n        public object Convert(object value, Type targetType, object parameter, CultureInfo culture) \n        { \n            byte[] bytes = value as byte[]; \n            var defaultFile = parameter as string; \n\n            if (bytes != null && bytes.Length > 1) \n            { \n                return ImageSource.FromStream(() => new MemoryStream(bytes)); \n            } \n\n            if (defaultFile != null) \n            { \n                return ImageSource.FromFile(defaultFile); \n            } \n\n            return ImageSource.FromFile (\"loading.png\"); \n        } \n\n        public object ConvertBack(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture) \n        { \n            throw new NotImplementedException(); \n        } \n\n        #endregion \n    } \n\n```", "```cs\n<converters:NotConverter x:Key=\"notConverter\"/> \n            <converters:OrientationToBoolConverter x:Key=\"orientationToBoolConverter\"/> \n            <converters:BoolToStringConverter x:Key=\"boolToStringConverter\"/> \n            <converters:BoolToPartialConverter x:Key=\"boolToPartialConverter\"/> \n            <converters:OrientationToIntConverter x:Key=\"orientationToIntConverter\"/> \n            <converters:ByteArrayToImageSourceConverter x:Key=\"byteArrayToImageSourceConverter\"/>  \n\n```", "```cs\n<?xml version=\"1.0\" encoding=\"utf-8\" ?> \n<ui:ExtendedContentPage  \n\n    x:Class=\"Camera.Pages.CameraPage\" \n    BackgroundColor=\"#F2F2F2\"> \n\n    <Grid x:Name=\"MainLayout\" BackgroundColor=\"Black\"  \n            RowSpacing=\"0\" ColumnSpacing=\"0\"> \n        <Grid.RowDefinitions> \n            <RowDefinition Height=\"*\" /> \n            <RowDefinition Height=\"40\" /> \n            <RowDefinition Height=\"*\" /> \n            <RowDefinition Height=\"*\" /> \n            <RowDefinition Height=\"*\" /> \n            <RowDefinition Height=\"*\" /> \n            <RowDefinition Height=\"60\" /> \n        </Grid.RowDefinitions> \n\n        <Grid.ColumnDefinitions> \n            <ColumnDefinition Width=\"*\"/> \n            <ColumnDefinition Width=\"60\"/> \n            <ColumnDefinition Width=\"*\"/> \n            <ColumnDefinition Width=\"*\"/> \n            <ColumnDefinition Width=\"*\"/> \n            <ColumnDefinition Width=\"100\"/> \n        </Grid.ColumnDefinitions> \n\n   </Grid> \n</ui:ExtendedContentPage>  \n\n```", "```cs\n<controls:CameraView x:Name=\"CameraView\" BackgroundColor=\"Black\" Grid.Row=\"0\"  \n            Grid.RowSpan=\"{Binding PageOrientation, Converter={StaticResource orientationToIntConverter}, ConverterParameter='7, 6'}\"  \n            Grid.Column=\"0\" Grid.ColumnSpan=\"{Binding PageOrientation, Converter={StaticResource orientationToIntConverter}, ConverterParameter='5, 6'}\"/> \n\n```", "```cs\n<controls:FocusView x:Name=\"FocusView\"  \n        Grid.Row=\"0\"  \n        Grid.RowSpan=\"{Binding PageOrientation, Converter={StaticResource orientationToIntConverter}, ConverterParameter='7, 6'}\"  \n            Grid.Column=\"0\" Grid.ColumnSpan=\"{Binding PageOrientation, Converter={StaticResource orientationToIntConverter}, ConverterParameter='5, 6'}\"/> \n\n```", "```cs\n        <Grid x:Name=\"CameraButtonContainerPortrait\" ColumnSpacing=\"5\"  \n            IsEnabled=\"{Binding PageOrientation, Converter={StaticResource orientationToBoolConverter}, ConverterParameter='false, true'}}\"  \n            Opacity=\"0\" Grid.Row=\"6\" Grid.Column=\"0\" Grid.ColumnSpan=\"6\"> \n            <Grid.RowDefinitions> \n                <RowDefinition Height=\"*\"/> \n            </Grid.RowDefinitions> \n\n            <Grid.ColumnDefinitions> \n                <ColumnDefinition Width=\"35\"/> \n                <ColumnDefinition Width=\"45\"/> \n                <ColumnDefinition Width=\"*\"/> \n                <ColumnDefinition Width=\"45\"/> \n                <ColumnDefinition Width=\"35\"/> \n            </Grid.ColumnDefinitions> \n\n            <ContentView BackgroundColor=\"Black\"  \n                Grid.Row=\"0\" Grid.Column=\"0\" Grid.ColumnSpan=\"5\"/> \n\n            <controls:CustomImage x:Name=\"CameraButtonPortrait\" Path=\"photo_camera_button.png\"  \n                    TintOn=\"false\" WidthRequest=\"50\" HeightRequest=\"50\"  \n                    HorizontalOptions=\"Center\" VerticalOptions=\"Center\" Grid.Row=\"0\" Grid.Column=\"2\"> \n                <controls:CustomImage.GestureRecognizers> \n                    <TapGestureRecognizer Tapped=\"HandleShutter\"/> \n                </controls:CustomImage.GestureRecognizers> \n            </controls:CustomImage> \n\n            <Label x:Name=\"FlashLabelPortrait\" \n                Text=\"{Binding IsFlashOn, Converter={StaticResource boolToStringConverter}, ConverterParameter='On, Off'}\" \n                TextColor=\"#0ca6df\" XAlign=\"Start\" YAlign=\"Center\"  \n                Grid.Row=\"0\" Grid.Column=\"1\"> \n                <Label.GestureRecognizers> \n                    <TapGestureRecognizer Tapped=\"HandleFlash\"/> \n                </Label.GestureRecognizers> \n            </Label> \n\n            <controls:CustomImage x:Name=\"FlashImagePortrait\" Path=\"photo_light.png\"  \n                    Margin=\"10, 0, 0, 0\"  \n                    VerticalOptions=\"Center\" \n                    TintOn=\"false\" WidthRequest=\"20\"  \n                    HeightRequest=\"35\" \n                    Grid.Row=\"0\" Grid.Column=\"0\"> \n                <controls:CustomImage.GestureRecognizers> \n                    <TapGestureRecognizer Tapped=\"HandleFlash\"/> \n                </controls:CustomImage.GestureRecognizers> \n            </controls:CustomImage> \n        </Grid> \n\n```", "```cs\n        <controls:LoadingView x:Name=\"LoadingView\"  \n            Grid.Row=\"0\" Grid.RowSpan=\"7\" Grid.Column=\"0\" Grid.ColumnSpan=\"6\"/> \n\n```", "```cs\n        <Grid x:Name=\"CameraButtonContainerLandscape\" RowSpacing=\"5\"  \n                IsEnabled=\"{Binding PageOrientation, Converter={StaticResource orientationToBoolConverter}, ConverterParameter='true, false'}}\"  \n                Opacity=\"0\" Grid.Row=\"0\" Grid.RowSpan=\"7\"  \n                Grid.Column=\"{Binding PageOrientation, Converter={StaticResource orientationToIntConverter}, ConverterParameter='5, 4'}\"> \n            <Grid.RowDefinitions> \n                <RowDefinition Height=\"45\"/> \n                <RowDefinition Height=\"40\"/> \n                <RowDefinition Height=\"*\"/> \n                <RowDefinition Height=\"40\"/> \n                <RowDefinition Height=\"45\"/> \n            </Grid.RowDefinitions> \n\n            <Grid.ColumnDefinitions> \n                <ColumnDefinition Width=\"*\"/> \n            </Grid.ColumnDefinitions> \n\n            <ContentView BackgroundColor=\"Black\" \n                Grid.Row=\"0\" Grid.RowSpan=\"5\" Grid.Column=\"0\"/> \n\n            <controls:CustomImage x:Name=\"CameraButtonLandscape\" Path=\"photo_camera_button.png\"  \n                    TintOn=\"false\" WidthRequest=\"50\"  \n                    HeightRequest=\"50\"  \n                    HorizontalOptions=\"Center\" VerticalOptions=\"Center\"  \n                    Grid.Row=\"2\" Grid.Column=\"0\"> \n                <controls:CustomImage.GestureRecognizers> \n                    <TapGestureRecognizer Tapped=\"HandleShutter\"/> \n                </controls:CustomImage.GestureRecognizers> \n            </controls:CustomImage> \n\n            <Label x:Name=\"FlashLabelLandscape\"  \n                    Text=\"{Binding IsFlashOn, Converter={StaticResource boolToStringConverter}, ConverterParameter='On, Off'}\"  \n                    TextColor=\"#0ca6df\" \n                    XAlign=\"Center\" YAlign=\"Start\" Grid.Row=\"1\" Grid.Column=\"0\"> \n                <Label.GestureRecognizers> \n                    <TapGestureRecognizer Tapped=\"HandleFlash\"/> \n                </Label.GestureRecognizers> \n            </Label> \n\n            <controls:CustomImage x:Name=\"FlashImageLandscape\" Path=\"photo_light.png\" \n                    Margin=\"0, 10, 0, 0\" HorizontalOptions=\"Center\"  \n                    TintOn=\"false\" WidthRequest=\"30\"  \n                    HeightRequest=\"30\" \n                    Grid.Row=\"0\" Grid.Column=\"0\"> \n                <controls:CustomImage.GestureRecognizers> \n                    <TapGestureRecognizer Tapped=\"HandleFlash\"/> \n                </controls:CustomImage.GestureRecognizers> \n            </controls:CustomImage> \n        </Grid> \n\n```", "```cs\n        <Grid x:Name=\"PhotoEditLayout\" IsEnabled=\"{Binding PhotoEditOn}\" BackgroundColor=\"White\"  \n                Opacity=\"{Binding PhotoEditOn, Converter={StaticResource boolToPartialConverter}, ConverterParameter='1, 0'}\"  \n                RowSpacing=\"0\" Grid.Row=\"0\" Grid.RowSpan=\"7\" Grid.Column=\"0\" Grid.ColumnSpan=\"6\"> \n            <Grid.RowDefinitions> \n                <RowDefinition Height=\"*\"/> \n                <RowDefinition Height=\"60\"/> \n            </Grid.RowDefinitions> \n\n            <Grid.ColumnDefinitions> \n                <ColumnDefinition Width=\"10\"/> \n                <ColumnDefinition Width=\"*\"/> \n                <ColumnDefinition Width=\"*\"/> \n                <ColumnDefinition Width=\"*\"/> \n                <ColumnDefinition Width=\"10\"/> \n            </Grid.ColumnDefinitions> \n\n            <Image x:Name=\"PhotoToEdit\"  \n                Source=\"{Binding PhotoData, Converter={StaticResource byteArrayToImageSourceConverter}}\"  \n                Aspect=\"AspectFit\"  \n                BackgroundColor=\"White\"  \n                IsOpaque=\"true\" \n                Grid.Row=\"0\" Grid.RowSpan=\"2\" Grid.Column=\"0\" Grid.ColumnSpan=\"5\" /> \n\n            <BoxView BackgroundColor=\"Black\" Grid.Row=\"1\" Grid.Column=\"0\" Grid.ColumnSpan=\"5\"/> \n\n            <controls:CustomImage x:Name=\"TrashImage\" Path=\"photo_trash.png\"  \n                    TintColorString=\"#FFFFFF\" TintOn=\"true\" HorizontalOptions=\"Center\"  \n                    WidthRequest=\"40\" HeightRequest=\"40\" \n                    Grid.Row=\"1\" Grid.Column=\"1\"> \n                <controls:CustomImage.GestureRecognizers> \n                    <TapGestureRecognizer Tapped=\"HandleDelete\"/> \n                </controls:CustomImage.GestureRecognizers> \n            </controls:CustomImage> \n        </Grid> \n\n```", "```cs\n        public override void DidChangeStatusBarOrientation(UIApplication application, UIInterfaceOrientation oldStatusBarOrientation) \n        { \n            // change listview opacity based upon orientation \n            switch (UIApplication.SharedApplication.StatusBarOrientation) \n            { \n                case UIInterfaceOrientation.Portrait: \n                case UIInterfaceOrientation.PortraitUpsideDown: \n                    OrientationPage.NotifyOrientationChange(Orientation.Portrait); \n                    break; \n                case UIInterfaceOrientation.LandscapeLeft: \n                    OrientationPage.NotifyOrientationChange(Orientation.LandscapeLeft); \n                    break; \n                case UIInterfaceOrientation.LandscapeRight: \n                    OrientationPage.NotifyOrientationChange(Orientation.LandscapeRight); \n                    break; \n            } \n        }  \n\n```", "```cs\npublic override void OnConfigurationChanged(Android.Content.Res.Configuration newConfig) \n        { \n            base.OnConfigurationChanged(newConfig); \n\n            switch (newConfig.Orientation) \n            { \n                case Android.Content.Res.Orientation.Portrait: \n                    OrientationPage.NotifyOrientationChange(Portable.Enums.Orientation.Portrait); \n                    break; \n                case Android.Content.Res.Orientation.Landscape: \n                    OrientationPage.NotifyOrientationChange(Portable.Enums.Orientation.LandscapeLeft); \n                    break; \n            } \n        }  \n\n```", "```cs\npublic partial class CameraPage : ExtendedContentPage, INavigableXamarinFormsPage \n    { \n        #region Private Properties \n\n        private float CAMERA_BUTTON_CONTAINER_WIDTH = 70f; \n\n        private CameraPageViewModel _model; \n\n        #endregion \n} \n\n```", "```cs\n        #region Constructors \n\n        public CameraPage(CameraPageViewModel model) : base(model) \n        { \n            BindingContext = model; \n            _model = model; \n\n            InitializeComponent(); \n\n            Appearing += HandleAppearing; \n            Disappearing += HandleDisappearing; \n\n            CameraView.Photo += HandlePictureTaken; \n            CameraView.AvailabilityChange += HandleCameraAvailability; \n            CameraView.Loading += HandleLoading; \n            CameraView.Busy += HandleBusy; \n\n            FocusView.TouchFocus += HandleFocusChange; \n        } \n\n        #endregion \n\n```", "```cs\n        private void HandleDisappearing(object sender, EventArgs e) \n        { \n            OrientationHandler -= HandleOrientationChange; \n\n            _model.OnDisappear(); \n        } \n\n        private void HandleAppearing(object sender, EventArgs e) \n        { \n            OrientationHandler += HandleOrientationChange; \n\n            _model.OnAppear(); \n        } \n\n```", "```cs\npublic void HandleOrientationChange(object sender, Orientation arg) \n        { \n            FocusView.Orientation = CameraView.Orientation = OrientationPage.PageOrientation = _model.PageOrientation = arg; \n\n            switch (PageOrientation) \n            { \n                case Orientation.LandscapeLeft: \n                case Orientation.LandscapeRight: \n                    MainLayout.ColumnDefinitions[5].Width = new GridLength(CAMERA_BUTTON_CONTAINER_WIDTH,  \n                                                                           GridUnitType.Absolute); \n                    break; \n                case Orientation.Portrait: \n                    MainLayout.ColumnDefinitions[4].Width = new GridLength(CAMERA_BUTTON_CONTAINER_WIDTH,  \n                                                                           GridUnitType.Absolute); \n                    break; \n            } \n\n            if (_model.CanCapture) \n            { \n                FocusView.Reset(); \n            } \n\n            CameraView.NotifyOrientationChange(arg); \n        } \n\n```", "```cs\n        private void HandleBusy(object sender, bool e) \n        { \n            _model.CameraLoading = e; \n        } \n\n        private void HandleLoading(object sender, bool e) \n        { \n            _model.CameraLoading = e; \n        } \n\n```", "```cs\npublic void HandleShutter(object sender, EventArgs args) \n        { \n            CameraView.NotifyShutter(); \n        } \n\n```", "```cs\n        public void HandleFlash(object sender, EventArgs args) \n        { \n            _model.IsFlashOn = !_model.IsFlashOn; \n            CameraView.NotifyFlash(_model.IsFlashOn); \n        } \n\n```", "```cs\n        public void HandlePictureTaken(object sender, byte[] data) \n        { \n            if (_model.CanCapture) \n            { \n                _model.AddPhoto(data); \n            } \n\n        } \n\n```", "```cs\n        public void HandleCameraAvailability(object sender, bool available) \n        { \n            _model.CanCapture = available; \n\n            if (available) \n            { \n                _model.CameraLoading = false; \n\n                // wait until camera is available before animating focus target, we have to invoke on UI thread as this is run asynchronously \n                Device.BeginInvokeOnMainThread(() => \n                    { \n                    // set starting list opacity based on orientation \n                    var orientation = (Height > Width) ? Orientation.Portrait : Orientation.LandscapeLeft; \n                    // set starting orientation \n                    HandleOrientationChange(null, orientation); \n\n                    // these bindings are created after page intitalizes \n                    PhotoEditLayout.SetBinding(VisualElement.IsVisibleProperty, new Binding(\"PhotoEditOn\")); \n\n                    // camera button layouts \n                    CameraButtonContainerLandscape.SetBinding(VisualElement.OpacityProperty, new Binding(\"PageOrientation\", converter: new OrientationToDoubleConverter(), converterParameter: \"1, 1\")); \n                        CameraButtonContainerLandscape.SetBinding(VisualElement.IsVisibleProperty, new Binding(\"PageOrientation\", converter: new OrientationToBoolConverter(), converterParameter: \"true, false\")); \n                        CameraButtonContainerPortrait.SetBinding(VisualElement.OpacityProperty, new Binding(\"PageOrientation\", converter: new OrientationToDoubleConverter(), converterParameter: \"0, 1\")); \n                        CameraButtonContainerPortrait.SetBinding(VisualElement.IsVisibleProperty, new Binding(\"PageOrientation\", converter: new OrientationToBoolConverter(), converterParameter: \"false, true\")); \n\n                        FocusView.Reset(); \n                }); \n            }  \n\n        }  \n\n```", "```cs\n        public void OnNavigatedTo(IDictionary<string, object> navigationParameters) \n        { \n            _model.CameraLoading = false; \n\n            LoadingView.SetBinding(VisualElement.IsVisibleProperty, new Binding(\"CameraLoading\")); \n\n            _model.CanCapture = CameraView.CameraAvailable; \n\n            switch (PageOrientation) \n            { \n                case Orientation.Portrait: \n                    FocusView.SetFocusPoints(new Point(Width / 2, Height / 2),  \n                                             new Point(Height / 2, Width / 2)); \n                    break; \n                case Orientation.LandscapeLeft: \n                case Orientation.LandscapeRight: \n                    FocusView.SetFocusPoints(new Point(Height / 2, Width / 2),  \n                                             new Point(Width / 2, Height / 2)); \n                    break; \n            } \n\n            CameraView.NotifyOpenCamera(true); \n\n#if __IOS__ \n                CameraView.NotifyWidths (CAMERA_BUTTON_CONTAINER_WIDTH); \n#endif \n\n            this.Show(navigationParameters); \n        } \n\n```", "```cs\n        public void HandleDelete(object sender, EventArgs args) \n        { \n            _model.ResetEditPhoto(); \n        } \n\n        #endregion \n    }  \n\n```"]