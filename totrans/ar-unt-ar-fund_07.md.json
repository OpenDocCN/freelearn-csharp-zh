["```cs\n    using System.Collections;\n    using System.Collections.Generic;\n    using UnityEngine;\n    using UnityEngine.InputSystem;\n    using UnityEngine.XR.ARFoundation;\n    using UnityEngine.XR.ARSubsystems;\n    public class PlaceObjectMode : MonoBehaviour\n    {\n       [SerializeField] ARRaycastManager raycaster;\n        GameObject placedPrefab;\n        List<ARRaycastHit> hits = new List<ARRaycastHit>();\n    ```", "```cs\n        void OnEnable()\n        {\n            UIController.ShowUI(\"PlaceObject\");\n        }\n    ```", "```cs\n        public void SetPlacedPrefab(GameObject prefab)\n        {\n            placedPrefab = prefab;\n        }\n    ```", "```cs\n    using UnityEngine;\n    using UnityEngine.XR.ARFoundation;\n    public class ShowTrackablesOnEnable : MonoBehaviour\n    {\n        [SerializeField] ARSessionOrigin sessionOrigin;\n        ARPlaneManager planeManager;\n        ARPointCloudManager cloudManager;\n        bool isStarted;\n        void Awake()\n        {\n            planeManager =             sessionOrigin.GetComponent<ARPlaneManager>();\n            cloudManager = sessionOrigin.GetComponent             <ARPointCloudManager>();\n        }\n        private void Start()\n        {\n            isStarted = true;\n        }\n    ```", "```cs\n        void OnEnable()\n        {\n            ShowTrackables(true);\n        }\n        void OnDisable()\n        {\n            if (isStarted)\n            {\n                ShowTrackables(false);\n            }\n        }\n    ```", "```cs\n        void ShowTrackables(bool show)\n        {\n            if (cloudManager)\n            {\n                cloudManager.SetTrackablesActive(show);\n                cloudManager.enabled = show;\n            }\n            if (planeManager)\n            {\n                planeManager.SetTrackablesActive(show);\n                planeManager.enabled = show;\n            }\n        }\n    }\n    ```", "```cs\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.XR.ARSubsystems;\npublic class CheckPlaneDetectionSupport : MonoBehaviour\n{\n    void Start()\n    {\n        var planeDescriptors =             new List<XRPlaneSubsystemDescriptor>();\n        SubsystemManager.            GetSubsystemDescriptors(planeDescriptors);\n        Debug.Log(\"Plane descriptors count: \" +            planeDescriptors.Count);\n        if (planeDescriptors.Count > 0)\n        {\n            foreach (var planeDescriptor in planeDescriptors)\n            {\n                Debug.Log(\"Support horizontal: \" +                    planeDescriptor.                        supportsHorizontalPlaneDetection);\n                Debug.Log(\"Support vertical: \" +                    planeDescriptor.                        supportsVerticalPlaneDetection);\n                Debug.Log(\"Support arbitrary: \" +                    planeDescriptor.                        supportsArbitraryPlaneDetection);\n                Debug.Log(\"Support classification: \" +                    planeDescriptor.supportsClassification);\n            }\n        }\n    }\n}\n```", "```cs\nstring localizedInit = reasonsTable.GetEntry(\"INIT\").GetLocalizedString();\n```"]