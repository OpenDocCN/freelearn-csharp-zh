["```cs\n    using System;\n    using System.Net.Mail;\n    ```", "```cs\n    public static void SendEmail(\n    string from, string to, string title, string message\n    )\n    {\n        try\n        {\n        MailMessage mailMessage = new MailMessage();\n        mailMessage.From = new MailAddress(from);\n        mailMessage.To.Add(to);\n        mailMessage.Subject = title;\n        mailMessage.Body = message;\n        SmtpClient smtpServer = new SmtpClient();\n        smtpServer.DeliveryMethod = \n            SmtpDeliveryMethod.Network;\n        smtpServer.Host = “smtp-mail.outlook.com”;\n        smtpServer.Port = 587;\n        smtpServer.UseDefaultCredentials = false;\n        smtpServer.Credentials = new \n            System.Net.NetworkCredential(“EMAIL_ADDRESS”, \n                “PASSWORD”);\n        smtpServer.EnableSsl = true;\n        smtpServer.Send(mailMessage);\n    }\n    catch (Exception ex)\n    {\n                throw ex.GetBaseException();\n    }\n    }\n    ```", "```cs\n    using CH09_OsiReferenceModel;\n    Console.WriteLine(“Hello World!”);\n    SendMail();\n    Console.WriteLine(“Email has been sent.”);\n    ```", "```cs\n    static void SendMail()\n    {\n    EmailServer.SendEmail(\n        “FROM_EMAIL”\n        , “TO_EMAIL”\n        , “Test Message”\n        , “Test Body. You can delete!”\n    );\n    }\n    ```", "```cs\nsyntax = “proto3”;\noption csharp_namespace = “CH09_GrpcService”;\npackage greet;\n// The greeting service definition.\nservice Greeter {\n  // Sends a greeting\n  rpc SayHello (HelloRequest) returns (HelloReply);\n}\n// The request message containing the user’s name.\nmessage HelloRequest {\n  string name = 1;\n}\n// The response message containing the greetings.\nmessage HelloReply {\n  string message = 1;\n}\n```", "```cs\n    <Project Sdk=”Microsoft.NET.Sdk”>\n    <PropertyGroup>\n        <OutputType>Exe</OutputType>\n        <TargetFramework>net6.0</TargetFramework>\n    </PropertyGroup>\n    <ItemGroup>\n        <PackageReference Include=”Google.Protobuf” \n            Version=”3.13.0” />\n        <PackageReference Include=”Grpc.Net.ClientFactory” \n            Version=”2.32.0” />\n        <PackageReference Include=”Grpc.Tools” \n            Version=”2.32.0”>\n            <PrivateAssets>all</PrivateAssets>\n            <IncludeAssets>runtime; build; native; \n                contentfiles; analyzers; \n                buildtransitive</IncludeAssets>\n        </PackageReference>\n    </ItemGroup>\n    <ItemGroup>\n        <Protobuf \n            Include=”..\\CH09_GrpcService\\Protos\\greet.proto”\n            GrpcServices=”Client”>\n            <Link>Protos\\greet.proto</Link>\n        </Protobuf>\n    </ItemGroup>\n    </Project>\n    ```", "```cs\n    static async void Main(string[] args)\n    {\n        await ExecuteGrpcClient();}\n    ```", "```cs\ntatic async Task ExecuteGrpcClient()\n{\nGrpcChannel grpcChannel = \n    GrpcChannel.ForAddress(“https://localhost:5001”);\nGreeter.GreeterClient greeterClient = \n    new Greeter.GreeterClient(grpcChannel);\nHelloReply helloReply = \n    await greeterClient.SayHelloAsync(new HelloRequest\n    {\n        Name = “gRPC Demonstration!”\n    });\nConsole.WriteLine(\n    $”Message From gRPC Server: {helloReply.Message}”);\n}\n```", "```cs\nMessage From gRPC Server: Hello gRPC Demonstration!\n```", "```cs\n    // The greeting service definition.\n    service Greeter {\n    // Sends a greeting\n    rpc SayHello (HelloRequest) returns (HelloReply);\n    rpc SayHelloStream(HelloRequest)\n        returns (stream HelloReply);\n    }\n    ```", "```cs\n    public override async Task SayHelloStream(HelloRequest \n        request, IServerStreamWriter<HelloReply> \n            responseStream, ServerCallContext context)\n    {\n        for (int i = 0; i < 10; i++)\n        {\n        await responseStream.WriteAsync(new HelloReply\n        {\n            Message = $”Response Stream Message: {i}”\n        });\n        await Task.Delay(TimeSpan.FromSeconds(1));\n    }\n    }\n    ```", "```cs\n    await SingleGrpcMessageResponse();\n    await GrpcMessageResponseStream();\n    ```", "```cs\n    static async Task GrpcMessageResponseStream()\n    {\n        GrpcChannel grpcChannel = \n            GrpcChannel.ForAddress(“https://localhost:5001”);\n        Greeter.GreeterClient greeterClient = \n            new Greeter.GreeterClient(grpcChannel);\n        AsyncServerStreamingCall<HelloReply> helloReply =   \n            greeterClient.SayHelloStream(new HelloRequest\n            {\n                Name = “gRPC Streaming Demonstration!”\n            });            \n        await foreach (HelloReply item in \n            helloReply.ResponseStream.ReadAllAsync())\n            {\n                Console.WriteLine(item.Message);\n            }        \n    }\n    ```", "```cs\n    Message From gRPC Server: Hello gRPC Demonstration!\n    Response Stream Message: 0\n    Response Stream Message: 1\n    Response Stream Message: 2\n    Response Stream Message: 3\n    Response Stream Message: 4\n    Response Stream Message: 5\n    Response Stream Message: 6\n    Response Stream Message: 7\n    Response Stream Message: 8\n    Response Stream Message: 9\n    ```", "```cs\n    syntax = “proto3”;\n    option csharp_namespace = “CH09_BlazorGrpc.Client”;\n    package grpcpeople;\n    service Person {\n      rpc GetPeople (PeopleRequest) returns (PeopleResponse);\n    }\n    message PeopleRequest {\n    }\n    message PeopleResponse{\n            repeated PersonResponse people = 1;\n    }\n    message PersonResponse {\n         string name = 1;\n    }\n    ```", "```cs\n    @using CH09_BlazorGrpc.Client\n    @using CH09_BlazorGrpc.Client.Shared\n    @using Grpc.Net.Client;\n    @using Grpc.Net.Client.Web;\n    ```", "```cs\n    @page “/”\n    @using CH09_BlazorGrpc.Client\n    <PageTitle>Index</PageTitle>\n    <h1>People from Grpc Service</h1>\n    @foreach(var person in model.People)\n    {\n        <p>Name : @person.Name</p>\n    }    \n    @code{\n        private PeopleResponse model = new PeopleResponse();\n        protected override async Task OnInitializedAsync()\n        {\n                using var channel = GrpcChannel.ForAddress\n                   (“https://localhost:7272/”, new \n                       GrpcChannelOptions\n        {\n            HttpHandler = new GrpcWebHandler(new \n                HttpClientHandler())\n        });\n                var client = new Person.PersonClient\n                    (channel);\n                model = await client.GetPeopleAsync(\n                                  new PeopleRequest { });\n        }\n    }\n    ```", "```cs\n    namespace CH09_BlazorGrpc.Server;\n    using Grpc.Core;\n    using CH09_BlazorGrpc.Client;\n    public class PeopleService : Person.PersonBase\n    {\n        public override async Task<PeopleResponse> \n            GetPeople(PeopleRequest request, \n                ServerCallContext context)\n        {\n            PeopleResponse response = new PeopleResponse();\n            response.People.Add(new PersonResponse { Name = \n                “Person One” });\n            response.People.Add(new PersonResponse { Name = \n                “Person Two” });\n            response.People.Add(new PersonResponse { Name = \n                “Person Three” });\n            return response;\n        }\n    }\n    ```", "```cs\n    using CH09_BlazorGrpc.Server;\n    var builder = WebApplication.CreateBuilder(args);\n    builder.Services.AddGrpc(options =>\n    {\n        options.EnableDetailedErrors = true;\n        options.MaxReceiveMessageSize = 2 * 1024 * 1024; \n        // 2 MB\n        options.MaxSendMessageSize = 5 * 1024 * 1024; // 5 MB\n    });\n    builder.Services.AddCors(setupAction =>\n    {\n        setupAction.AddDefaultPolicy(policy =>\n        {\n            policy.AllowAnyHeader().AllowAnyOrigin()\n                .AllowAnyMethod()\n              .WithExposedHeaders(“Grpc-Status”, \n                   “Grpc-Message”, “Grpc-Encoding”, \n                       “Grpc-Accept-Encoding”);\n        });\n    });\n    var app = builder.Build();\n    app.UseCors();\n    app.UseRouting();\n    app.UseGrpcWeb(new GrpcWebOptions { DefaultEnabled = \n        true });\n    app.UseEndpoints(endpoints =>\n    {\n        endpoints.MapGrpcService<PeopleService>();\n    });\n    app.Run();\n    ```", "```cs\n    using System;\n    using System.Net.Sockets;\n    using System.Runtime.InteropServices;\n    using System.Text;\n    using System.Threading.Tasks;\n    internal static class SocketExtensions\n    {\n    }\n    ```", "```cs\n    public static Task<int> ReceiveAsync(this Socket socket, \n        Memory<byte> memory, SocketFlags socketFlags)\n    {\n        ArraySegment<byte> arraySegment = GetArray(memory);\n    return SocketTaskExtensions.ReceiveAsync(socket, \n        arraySegment, socketFlags);\n    }\n    ```", "```cs\n    public static string GetString(this Encoding encoding, \n        ReadOnlyMemory<byte> memory)\n    {\n        ArraySegment<byte> arraySegment = GetArray(memory);\n         return encoding.GetString(arraySegment.Array, \n             arraySegment.Offset, arraySegment.Count);\n    }\n    ```", "```cs\n    private static ArraySegment<byte> GetArray(Memory<byte> \n        memory)\n    {\n    return GetArray((ReadOnlyMemory<byte>)memory);\n    }\n    ```", "```cs\n    private static ArraySegment<byte> GetArray\n        (ReadOnlyMemory<byte> memory)\n    {\n    if (!MemoryMarshal.TryGetArray(memory, out var result))\n    {\n        throw new InvalidOperationException(“Buffer backed by \n            array was expected”);\n    }\n    return result;\n    }\n    ```", "```cs\n    using CH09_TcpServer;\n    using System;\n    using System.Buffers;\n    using System.IO.Pipelines;\n    using System.Net;\n    using System.Net.Sockets;\n    using System.Text;\n    using System.Threading.tasks;\n    Socket listenSocket = new Socket(SocketType.Stream, \n        ProtocolType.Tcp);\n    listenSocket.Bind(new IPEndPoint(IPAddress.Loopback, \n        7000));\n    Console.WriteLine(“Listening on port 7000”);\n    listenSocket.Listen(120);\n    while (true)\n    {\n        Socket socket = await listenSocket.AcceptAsync();\n        _ = ProcessLinesAsync(socket);\n    }\n    ```", "```cs\n    tatic async Task ProcessLinesAsync(Socket socket)\n    {\n    Console.WriteLine($”[{socket.RemoteEndPoint}]: \n        connected”);\n    NetworkStream stream = new NetworkStream(socket);\n    PipeReader reader = PipeReader.Create(stream);\n    while (true)\n    {\n        ReadResult result = await reader.ReadAsync();\n        ReadOnlySequence<byte> buffer = result.Buffer;\n        while (TryReadLine(ref buffer, out \n            ReadOnlySequence<byte> line))\n            ProcessLine(line);    reader.AdvanceTo\n                (buffer.Start, buffer.End);\n        if (result.IsCompleted)\n            break;\n    }\n        await reader.CompleteAsync();\n            Console.WriteLine($”[{socket.RemoteEndPoint}]:\n                disconnected”);\n    }\n    ```", "```cs\n    static bool TryReadLine(ref ReadOnlySequence<byte> \n        buffer, out ReadOnlySequence<byte> line)\n    {\n    SequencePosition? position = buffer.PositionOf\n        ((byte)’\\n’);\n    if (position == null)\n    {\n        line = default;\n        return false;\n    }\n                line = buffer.Slice(0, position.Value);\n                buffer = buffer.Slice(buffer.GetPosition\n                    (1, position.Value));\n                return true;\n            }\n    ```", "```cs\n    static void ProcessLine(in ReadOnlySequence<byte> buffer)\n    {\n    foreach (ReadOnlyMemory<byte> segment in buffer)\n    {         \n        Console.Write(Encoding.UTF8.GetString(segment.Span));\n    }\n    Console.WriteLine();\n    }\n    ```", "```cs\n    using System;\n    using System.IO;\n    using System.IO.Pipelines;\n    using System.Net;\n    using System.Net.Sockets;\n    using System.Threading.Tasks;\n    ```", "```cs\n    Socket clientSocket = new Socket(SocketType.Stream, \n        ProtocolType.Tcp);\n    Console.WriteLine(“Connecting to port 7000”);\n    clientSocket.Connect(new IPEndPoint(IPAddress.Loopback, \n        7000));\n    NetworkStream networkStream = new NetworkStream\n        (clientSocket);\n    await Console.OpenStandardInput().CopyToAsync\n        (networkStream);\n    ```", "```cs\n    private IMemoryCache _memoryCache;\n    public HomeController(ILogger<HomeController> logger, \n        IMemoryCache memoryCache)\n    {\n        _logger = logger;\n        _memoryCache = memoryCache;\n    }\n    ```", "```cs\n    private void SetCache(string key, object value)\n    {\n        var cachedEntryOptions = \n         new MemoryCacheEntryOptions()\n             .SetSlidingExpiration(TimeSpan.FromSeconds(20));\n         _memoryCache.Set(key, value, cachedEntryOptions);\n    }\n    ```", "```cs\n    public IActionResult Index()\n    {\n         DateTime whenCached;\n        bool exists = _memoryCache.TryGetValue(“WhenCached”, \n            out whenCached);\n        if (!exists)\n        {\n            Debug.WriteLine(“Creating cached entry...”);\n            whenCached = DateTime.Now;\n            SetCache(“WhenCached”, whenCached);\n        }\n        else\n        {\n             DateTime now = DateTime.Now;\n            double differenceInSeconds = \n                now.Subtract(whenCached).TotalSeconds;\n            if (differenceInSeconds < 20)\n            {\n                Debug.WriteLine($”Now: {now}, When Cached: \n                    {whenCached}, Time Difference (Seconds): \n                        {differenceInSeconds}”);\n                return View(whenCached);\n            }\n            else\n            {\n                Debug.WriteLine(“Resetting cache...”);\n                whenCached = DateTime.Now;\n                SetCache(“WhenCached”, whenCached);\n            }\n        }\n        return View(whenCached);\n    }\n    ```", "```cs\n    @model DateTime?\n    @{\n        ViewData[“Title”] = “Index”;\n    }\n    <h1>Index</h1>\n    <div class=”row”>\n        <span>\n            When Cached: @Model.Value.ToString();\n        </span>\n        <span>\n            Current Time: @DateTime.Now.ToString();\n        </span>\n    </div>\n    ```", "```cs\n    builder.Services.AddControllersWithViews();\n    builder.Services.AddMemoryCache();\n    ```"]