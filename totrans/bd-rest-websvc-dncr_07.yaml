- en: Continuous Integration and Continuous Deployment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most projects are a team effort. The team could be located in different places
    or in the same place, and members from different locations have to work in sync
    mode so their changes won't conflict with other team members. A system won't mature
    until it is used in various scenarios; these scenarios could be based on the experience
    of domain experts or come from the production environment. There is a chance that
    a system could crash in the production environment even if the system is regarded
    as a perfect system. In terms of web applications, the conditions are more critical
    due to performance glitches, bad user experiences, and so on. A system should
    go through a process where, if a team member makes changes, the code is integrated
    after unit tests and the build is then deployed in the related environment.
  prefs: []
  type: TYPE_NORMAL
- en: When we say deployment, Xcopy deployment immediately comes into our minds. In
    this type of deployment, you simply build and copy the related files and deploy/paste
    to a relevant environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will discuss the fundamentals of deployment and the influence
    of emerging practices, such as **continuous integration** (**CI**) and **continuous
    deployment** (**CD**).  We will focus on the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The Azure environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publishing/hosting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CI and CD using TFS online
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The difference between CI and CD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction – deployment terminology
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before proceeding further, we should first discuss why we are talking about
    deployment. The deployment cycle is one that has a specific flow and we should
    understand the deployment terminology. Deployment terminology simply includes
    the steps that start with code changes up to release. In this section, we will
    discuss all these deployment steps.
  prefs: []
  type: TYPE_NORMAL
- en: The build stage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the build stage, the service source gets compiled without any errors along
    with the passing of all corresponding unit tests. This stage produces build artifacts.
  prefs: []
  type: TYPE_NORMAL
- en: Continuous integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CI forces the entire application to be built again every time a developer commits
    any change—the application code gets compiled and a comprehensive set of automated
    tests is run against it. This practice emerged from the problems of the frequent
    integration of code in large teams. The basic idea is to keep the delta, or change
    to the software, small. This provides confidence that the software is in a workable
    state. Even if a check-in made by a developer breaks the system, it is easy to
    fix it using this process.
  prefs: []
  type: TYPE_NORMAL
- en: Deployment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hardware provisioning, installing the base OS and the correct version of the
    .NET framework are prerequisites for deployment. The next part of it is to advance
    these build artifacts into production through various stages. The combination
    of these two parts is referred to as the deployment stage. There is no distinction
    between the deployment and release stages in most of the applications.
  prefs: []
  type: TYPE_NORMAL
- en: Continuous deployment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In CD, each successful build gets deployed to a preferred environment, for example,
    production. Environments vary from organization to organization. So, CD is not
    meant for a production environment but you can use it for other environments too
    like dev, staging, and so on. CD is more important from a technical team's perspective.
    Under CD, there are several other practices, such as automated unit testing, labeling,
    versioning of build numbers, and traceability of changes. With continuous delivery,
    the technical team ensures that the changes pushed to production through various
    lower environments work as expected in production. Usually, these are small and
    deployed very quickly.
  prefs: []
  type: TYPE_NORMAL
- en: Continuous delivery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Continuous delivery is different from CD. CD comes from a technical team's perspective,
    whereas continuous delivery is more focused on providing the deployed code as
    early as possible to the customer. To make sure that customers get the right defect-free
    product, in continuous delivery, every build must pass through all the quality
    assurance checks. Once the product passes the satisfactory quality verification,
    it is the business stakeholders' decision when to release it.
  prefs: []
  type: TYPE_NORMAL
- en: Build and deployment pipeline
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The build and deployment pipeline is part of implementing continuous delivery
    through automation. It is a workflow of steps through which the code is committed
    in the source repository. At the other end of the deployment pipeline, the artifacts
    for release are produced. Some of the steps that may make up the build and deployment
    pipeline are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Unit tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integration tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code coverage and static analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Regression tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deployments to staging environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Load/stress tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deployment to release repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Release
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A business feature made available to the end user is referred to as the release
    of a feature. To release a feature or service, the relevant build artifacts should
    be deployed beforehand. Usually, the feature toggle manages the release of a feature.
    If the feature flag (also called the feature toggle) is not switched on in production,
    it is called a dark release of the specified feature.
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites for successful RESTful services deployments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The success of any system deployment depends upon the architectural style and
    practices the team is following. Our RESTful services have more chances of being
    successful with the adoption of the following practices:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Self-sufficient teams**: Amazon, which is a pioneer of SOA and microservice
    architectures, follows the Two Pizza Teams paradigm. This means usually a microservice
    team will have no more than 7 – 10 team members. These team members will have
    all the necessary skills and roles; for example, development, operations, and
    business analyst. Such a service team handles the development, operations, and
    management of a microservice.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CI and CD**: CI and CD are prerequisites for implementing RESTful services
    that are a part of a system based on a microservices architectural style. Smaller
    self-sufficient teams, that can integrate their work frequently, are precursors
    to the success of microservices. This architecture is not as simple as a monolith.
    However, automation and the ability to push code upgrades regularly enables teams
    to handle complexity. Tools, such as **Team Foundation Online Services** (**TFS**),
    TeamCity, and Jenkins, are quite popular toolchains in this space.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Infrastructure as code**: The idea of representing hardware and infrastructure
    components, such as networks with code, is new. It helps you make deployment environments,
    such as integration, testing, and production, look exactly identical. This means
    developers and test engineers will be able to reproduce production defects easily in
    lower environments. With tools such as CFEngine, Chef, Puppet, Ansible, and Powershell
    DSC, you can write your entire infrastructure as code. With this paradigm shift,
    you can also put your infrastructure under a version control system and ship it
    as an artifact in deployment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Utilization of cloud-computing**: Cloud computing is a big catalyst for adopting
    microservices. It is not mandatory, as such, for microservice deployment though.
    Cloud computing comes with a near-infinite scale, elasticity, and rapid provisioning
    capability. It is a no-brainer that the cloud is a natural ally of microservices.
    So, knowledge and experience with the Azure cloud will help you adopt microservices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Azure environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure is a Microsoft service that offers various cloud-computing services. Azure
    is a cloud platform that helps you to build, deploy, and manage applications globally.
  prefs: []
  type: TYPE_NORMAL
- en: Before we discuss the Azure environment, we should understand cloud-computing.
  prefs: []
  type: TYPE_NORMAL
- en: Cloud computing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In simple words, cloud-computing is a store/place that provides various computer-based
    services namely storage, databases, servers, and software, over the internet (here,
    the internet is termed as the cloud).
  prefs: []
  type: TYPE_NORMAL
- en: 'There are various terms in existence related to cloud-computing, you can refer
    to this link for these terms: [https://azure.microsoft.com/en-in/overview/cloud-computing-dictionary/](https://azure.microsoft.com/en-in/overview/cloud-computing-dictionary/).'
  prefs: []
  type: TYPE_NORMAL
- en: These services can be sold by anyone and the vendors/companies that provide
    these cloud-computing services are called cloud providers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Cloud-computing is not a new term, it has been around for a while, it''s just
    that now it has become popular.  If you are using any online services that help
    you to send or receive your emails to or from other persons, then this is cloud-computing.
    With the help of the cloud, you can do almost anything you want. These services
    include:'
  prefs: []
  type: TYPE_NORMAL
- en: Creation of new applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Storing data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hosting, deploying applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And there are many more activities, depending upon the services offered by your
    cloud provider or what kind of subscription you have.
  prefs: []
  type: TYPE_NORMAL
- en: The benefits of the cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These days, cloud-computing plays an important role in the growth of businesses
    related to IT resources. Nowadays, everyone is thinking differently from a legacy
    system; the cloud has benefits for all with its advantages, as discussed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Pick and start**: If you have any type of subscription with cloud-computing
    you won’t need to think, just pick your service and start from anywhere. You just
    require an internet to start with.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cost**: When you go with the cloud, there is no need to think about spending
    money on buying costly hardware or related infrastructure. You can get the kinds
    of hardware you require and these are cost-effective.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Speed**: You can commission new resources quickly; these services are very
    performant.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Availability**: The most important benefit of cloud-computing is that you
    need not think about the availability of services as these are globally available.
    For example, if you commissioned a virtual machine from India then you need not
    worry about using this machine even though you may be in another part of the world.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To decide what cloud provider suits you, refer to [https://azure.microsoft.com/en-in/overview/choosing-a-cloud-service-provider/](https://azure.microsoft.com/en-in/overview/choosing-a-cloud-service-provider/).
  prefs: []
  type: TYPE_NORMAL
- en: Cloud-computing service models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There is a huge list of cloud-computing services, but the best types of cloud-computing
    services are defined as the following (other types are based on these service
    types only):'
  prefs: []
  type: TYPE_NORMAL
- en: '**Infrastructure as a Service** (**IaaS**): This provides infrastructure, namely
    storage, virtual machines, and so on. For more info, go to [https://azure.microsoft.com/en-in/overview/what-is-iaas/](https://azure.microsoft.com/en-in/overview/what-is-iaas/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Platform as a Service** (**PaaS**): This provides an on-demand environment
    for activities such as development or testing, or managing applications. For more
    info, go to [https://azure.microsoft.com/en-in/overview/what-is-paas/](https://azure.microsoft.com/en-in/overview/what-is-paas/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Software as a Service** (**SaaS**): This provides software applications on
    demand. There might be various subscription models from the cloud-computing provider
    under which you can subscribe to specific software applications. For more information,
    go to [https://azure.microsoft.com/en-in/overview/what-is-saas/](https://azure.microsoft.com/en-in/overview/what-is-saas/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discussing the Azure environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Azure environment provides a way of getting its various services using
    the internet. The following screenshot represents a typical overview of all cloud-computing
    service models:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2378a57b-cbdd-4a88-a71a-b6757aa35708.png)'
  prefs: []
  type: TYPE_IMG
- en: It shows IaaS as a very basic model that provides servers and storage, and SaaS
    as the advanced model that provides almost all cloud-computing services.
  prefs: []
  type: TYPE_NORMAL
- en: Starting with Azure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To start with Azure, you need access to the Azure portal. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to the Azure portal using this link: [https://portal.azure.com](https://portal.azure.com).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you don’t have an account with Azure, create one for free here: [https://azure.microsoft.com/en-in/free/](https://azure.microsoft.com/en-in/free/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'After login, you will see the dashboard as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d434c0d1-726c-4875-bb67-6b5fc0acc9ac.png)'
  prefs: []
  type: TYPE_IMG
- en: Azure portal dashboard
  prefs: []
  type: TYPE_NORMAL
- en: The portal dashboard may differ from what you saw in the preceding screenshot.
    If you logged in for the first time then you might need to create resources (as
    per your requirements). This is a place where you can commission your virtual
    machines (refer to IaaS), select a specific environment such as Windows machines
    or Linux (refer to PaaS), or you can deploy your applications (refer to SaaS).
  prefs: []
  type: TYPE_NORMAL
- en: Now you can do whatever you want to do as per your subscription.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Publishing/hosting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Publishing/hosting is a service that makes your application publicly available.
    Applications can be stored on servers provided by your hosting provider. In this
    section, we will use TFS (now VSTS): refer to[ https://www.visualstudio.com/tfs/](https://www.visualstudio.com/tfs/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'You need to migrate your existing project if it is hosted on TFS. Refer to
    the link for more details: [https://www.visualstudio.com/team-services/migrate-tfs-vsts/](https://www.visualstudio.com/team-services/migrate-tfs-vsts/).'
  prefs: []
  type: TYPE_NORMAL
- en: Project hosting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You need to have access to Visual Studio Online/TFS Online (now VSTS) to host
    a project. For this you need to follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://www.visualstudio.com/vso/](https://www.visualstudio.com/vso/)
    using your preferred browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on Sign in, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f722e6b6-a869-4faf-90ae-b857f6ff73cf.png)'
  prefs: []
  type: TYPE_IMG
- en: VSTS home screen
  prefs: []
  type: TYPE_NORMAL
- en: Enter your Microsoft account; you can create one if you don’t have one.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Follow the steps and create your account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will be redirected to your Visual Studio Team Services Accounts page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/94846371-303b-491f-bbd3-fe45e9c57f54.png)'
  prefs: []
  type: TYPE_IMG
- en: VSTS my profile page
  prefs: []
  type: TYPE_NORMAL
- en: Click on Create new project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will be redirected to a new page where you will be asked for some information
    related to your project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add your project information, as in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/71289ed9-c287-4770-8592-aab1c772b905.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a new project
  prefs: []
  type: TYPE_NORMAL
- en: Select your version control – you will be given the choice of Git or Team Foundation
    Version Control (TFVC).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you are confused with the options, refer to this link for a comparison between
    Git and TFVC: [https://docs.microsoft.com/en-us/vsts/tfvc/comparison-git-tfvc?view=vsts](https://docs.microsoft.com/en-us/vsts/tfvc/comparison-git-tfvc?view=vsts).'
  prefs: []
  type: TYPE_NORMAL
- en: 'In our case, select Team Foundation Version Control:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4cefeeaf-ef05-4b2d-be5f-51c15d4a57f4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, select Work Item Process, refer to  [https://docs.microsoft.com/en-us/vsts/work/work-items/guidance/choose-process?view=vsts](https://docs.microsoft.com/en-us/vsts/work/work-items/guidance/choose-process?view=vsts)
    to know more about the various options available. In our case, select Scrum:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ad3723c6-bb5f-40eb-aafe-ffa61016c796.png)'
  prefs: []
  type: TYPE_IMG
- en: Now click on Create.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will be redirected to a newly created project page that looks like the
    following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/879ea8b9-c37d-4c9b-989a-e753eb8a77a8.png)'
  prefs: []
  type: TYPE_IMG
- en: FlixOneProductServices project main screen
  prefs: []
  type: TYPE_NORMAL
- en: The project main screen is a quick display page, where you can see all the activities
    quickly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your project is created and now you are ready to start with your project.
  prefs: []
  type: TYPE_NORMAL
- en: The dashboard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The dashboard is a screen containing a snapshot of your project activities.
    It tells you what task is assigned to you, displays a sprint burndown chart, project
    progress, or whatever you’ve configured for your dashboard:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fb5d2973-15aa-42ed-a65d-e7ffd7d9cf73.png)'
  prefs: []
  type: TYPE_IMG
- en: Dashboard of FlixOneProductServices project
  prefs: []
  type: TYPE_NORMAL
- en: From the project dashboard, you can edit your widget by adding new or removing
    existing widgets. The preceding screenshot shows the default view of our project.
  prefs: []
  type: TYPE_NORMAL
- en: Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following is the screen where you can manage your actual code for the current
    project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d8dbdafd-ac7d-4828-aec7-bf95ecc33865.png)'
  prefs: []
  type: TYPE_IMG
- en: Code screen of FlixOneProductServices project
  prefs: []
  type: TYPE_NORMAL
- en: 'You can view the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Files**: All the files in the repository.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changeset**: Code changes with a changeset number, you can also get the information
    on what changeset pushed against what tasks/bugs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Shelvesets**: Any shelve changes that are available for review or any other
    purpose related to the current project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pull Requests**: This is a way to work in a collaborative manner. You can
    initiate a Pull Request anytime, click on Code and select New Pull Request, and
    the owner or maintainers of the project will be notified about this pull request.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Work
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By default, it displays the Work Items screen, showing you the items assigned
    to you or the tasks/bugs you’re working on or have worked on. We have created
    a new project so you will get a blank page; to start with work items, you need
    to create a few backlog items and then assign them within the team.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on Backlog and then add a title for your Product backlog from the new
    template that appears on the screen. See the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/30f71f7f-c4fc-403e-a523-b2a6c4bb1233.png)'
  prefs: []
  type: TYPE_IMG
- en: New product backlog
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see in the preceding screenshot that, by default, you are given six
    sprints. Now, open a newly created product backlog item and provide a complete
    description – details such as efforts for this work, who will work on this item,
    or who will be the owner of this work item. See the following screenshot, which
    shows everything:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4f9b1533-aec2-49af-99dd-4afafbf88eac.png)'
  prefs: []
  type: TYPE_IMG
- en: Product backlog item
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, go to Sprint 1 and set the dates – you should set the dates to start your
    current iteration as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e1e7cd5c-4a85-42cc-a822-35a538822f63.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Similarly, you can add more product backlog items. Do not move items to Sprint
    1\. The board view of the Backlog items screen would look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/154fe8d0-6116-412c-b955-1f787c9fcc65.png)'
  prefs: []
  type: TYPE_IMG
- en: Board backlog items
  prefs: []
  type: TYPE_NORMAL
- en: Adding code to the repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We did not add any code to our repository; now, it''s time to do that. To add
    code, you can either click on Code and upload the files directly from the web
    interface or go to Source Control from your Visual Studio IDE and check in the
    code after adding the repository. In this section, we will add our code using
    Visual Studio. To do so follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open Visual Studio
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create or open your existing project
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open Team Explorer
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Connect TFS server
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a TFS server if you can't find a server, and then provide a valid address
    for it
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click Connect
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows a connection with FlixOneProductServices:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9be7a3c6-9016-47b1-9ad9-67d4460c366f.png)'
  prefs: []
  type: TYPE_IMG
- en: Connecting TFS server
  prefs: []
  type: TYPE_NORMAL
- en: 'You will need to map the TFS repository to your local drive. Map the source
    and get the code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/360ec4c1-3aab-4296-9933-1f8f53e21165.png)'
  prefs: []
  type: TYPE_IMG
- en: Mapping and getting source code
  prefs: []
  type: TYPE_NORMAL
- en: 'Now click on Source Control Explorer and the Source Control Explorer tab will
    be opened. You will see empty project nodes, as in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d6068543-eea0-442b-b0ed-a5908f022bbe.png)'
  prefs: []
  type: TYPE_IMG
- en: Source Control Explorer
  prefs: []
  type: TYPE_NORMAL
- en: 'From Solution Control Explorer, right-click on Solution and click on Add Solution
    to Source Control. Refer to the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f5acfbaa-bc55-4a42-80c2-ca8c4eb74369.png)'
  prefs: []
  type: TYPE_IMG
- en: Add solution to Source Control
  prefs: []
  type: TYPE_NORMAL
- en: 'Make your choice and select it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/29e0a94a-8f71-4cde-80f0-59302e2365f2.png)'
  prefs: []
  type: TYPE_IMG
- en: Add solution to FlixOneProductServices
  prefs: []
  type: TYPE_NORMAL
- en: 'Now you can see a new folder and files have been added into the Source Control
    – see the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9b033bc7-9193-40f0-a4c1-a2e1fb586e96.png)'
  prefs: []
  type: TYPE_IMG
- en: Newly added project
  prefs: []
  type: TYPE_NORMAL
- en: Go to Team Explorer and click on Pending Changes. You will find various files
    that are checked out.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a work item and add a comment and click on Check In:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f56df264-a964-47a9-8f66-65e221255e07.png)'
  prefs: []
  type: TYPE_IMG
- en: Check In pending changes
  prefs: []
  type: TYPE_NORMAL
- en: You have successfully added your solution to Source Control.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now go back to your TFS Online and click on Code. You will find all the code
    files/folders recently added to Source Control. Refer to the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/da173422-fa16-49df-8195-650df8ae41cc.png)'
  prefs: []
  type: TYPE_IMG
- en: Viewing Code
  prefs: []
  type: TYPE_NORMAL
- en: You have successfully hosted your project to VSTS. In the following sections,
    we will discuss build and deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Test
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This screen of VSTS helps you to create various test plans so you can track
    manual testing for a sprint. It helps to monitor when manual testing is completed
    for the current sprint. We discussed various terms of testing in [Chapter 6](17c8ef83-d95b-41af-9b61-54f69981bc3a.xhtml),
    *Testing RESTful Web Services*.
  prefs: []
  type: TYPE_NORMAL
- en: In the following sections, we will see how this helps us to test our sprint
    by creating a test plan and test cases.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a test plan
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'From the Test Plans tab, click on + and then click on Test plan, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cbc45c0a-054d-4596-b4ce-9e51d3226a44.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a test plan
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next screen, name your Test plan, make sure you have selected a correct
    sprint for the test plan. Refer to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/88819268-face-4495-9d2b-6c727dab05e6.png)'
  prefs: []
  type: TYPE_IMG
- en: Naming your test plan
  prefs: []
  type: TYPE_NORMAL
- en: As the test plan is for a manual test, we now have to add the backlog items
    that need to be tested. In your case, we are just adding Sprint 1 backlog items.
    In doing this, we have added test suites for all backlog items of Sprint 1.
  prefs: []
  type: TYPE_NORMAL
- en: Creating test cases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous section, we have created the Iteration 1 Test plan and added
    a test suite to it. Now, we need to create a test case, click on New and select
    New test case:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2d94932c-e31a-4666-910e-050cfbed3575.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a new test case
  prefs: []
  type: TYPE_NORMAL
- en: 'Complete your test case by adding a valid name, and the steps with expected
    output to the test case. Refer to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4295b961-0166-441e-bd0d-5edb6b6f7dee.png)'
  prefs: []
  type: TYPE_IMG
- en: Writing a test case
  prefs: []
  type: TYPE_NORMAL
- en: You can now assign the testers to these test cases or test suites so that testers
    can run these tests.
  prefs: []
  type: TYPE_NORMAL
- en: Running manual tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In previous sections, we have created test cases that run manually. Click on
    the test suites and click on Run to run the available tests. Refer to the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0f1c0743-22a2-4ea8-831c-aaa1a4600e4d.png)'
  prefs: []
  type: TYPE_IMG
- en: Running manual tests
  prefs: []
  type: TYPE_NORMAL
- en: 'These tests will run in the browser window so please make sure your browser
    doesn''t block popups, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/586b376f-ca5a-447a-821e-6f70c0fc24a6.png)'
  prefs: []
  type: TYPE_IMG
- en: Verifying manual test results
  prefs: []
  type: TYPE_NORMAL
- en: As these tests are manual, you need to test these manually. After execution
    of these tests, you have to verify the expected output and mark the test as a
    pass or fail, accordingly. The overall results of test cases will be shown in
    the test suite window.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you have created a test plan, a test suite for the current
    iteration, and manual test cases to test a specific iteration, code changes, a
    build, or release.
  prefs: []
  type: TYPE_NORMAL
- en: Wiki
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Wiki pages help team members to work together. These pages can consist of project
    documentation or instructions to work on a project such as coding guidelines,
    and so on. Initially, you will get a blank template by clicking the Create Wiki
    button, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cc5c8f02-6ea2-4551-a08b-0e6375b4d92e.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating Wiki
  prefs: []
  type: TYPE_NORMAL
- en: From the Create Wiki page template you can add as many pages as you want. Wiki
    pages support for markdown: [https://docs.microsoft.com/en-us/vsts/collaborate/markdown-guidance?view=vsts](https://docs.microsoft.com/en-us/vsts/collaborate/markdown-guidance?view=vsts).
  prefs: []
  type: TYPE_NORMAL
- en: Build and Release tab
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Build and Release tab provides the facility to create a build and release
    for the project. In this section, we will discuss CI and CD using VSTS. Initially,
    there would not be any build definition.
  prefs: []
  type: TYPE_NORMAL
- en: CI versus CD
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have already discussed these two methods in previous sections. In this section,
    we will briefly discuss the difference between CI and CD.
  prefs: []
  type: TYPE_NORMAL
- en: CI is a practice where by all team members (developers) integrate their code.
    This happens on every check-in, whenever a developer pushes changes, or as the
    code is configured, CI triggers.  The most important advantage of this is that
    it saves time during your development cycle as it identifies conflicts, if there
    are any. This starts with the initial steps to set up automotive tests. As soon
    as someone pushes changes to the repository, it triggers the build and tests.
  prefs: []
  type: TYPE_NORMAL
- en: Continuous deployment solves the deployment problems of the code while deploying
    to the production environment.
  prefs: []
  type: TYPE_NORMAL
- en: CI and CD using TFS online
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will discuss the continuous integration of our project.
    Go to the Builds tab and then Build Definitions and click on + New:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b864d14f-956a-47af-b828-9ae3f500c24f.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a new definition
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next step, the system will ask you to choose your repository. Select
    Repository Source Control and map the branches, then click on Continue:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/98fee334-c51b-44ee-b86e-966e18fe91d0.png)'
  prefs: []
  type: TYPE_IMG
- en: Selecting a repository source
  prefs: []
  type: TYPE_NORMAL
- en: 'From the next screen, choose your template; in our case, choose ASP.NET Core:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b5d9a2c0-c4e1-4e3c-a9b8-63c4e0a53b56.png)'
  prefs: []
  type: TYPE_IMG
- en: Selecting ASP.NET Core template
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow the template instructions and provide the required values, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/51800ea5-a561-4996-903f-aa4ddda2b3d2.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating build tasks
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the basic but important concepts related to VSTS; these are
    also important to understand so that you can configure build steps successfully:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Tasks**: These are the build steps that instruct VSTS to perform specific
    tasks'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Variables**: These are the build configuration values that tell the build
    agent about system or custom values'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Triggers**: These enable various tasks based on whether you have enabled
    CI or not'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Options**: These are the build properties, for which you can provide build
    description, build job time out, and so on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Retention**: Retention policies can be built as required; typical policies
    are how long you want to keep good or bad builds with you'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To make our example simple, I selected Changeset #5 to save the build definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/13c8ad40-af71-42f5-90fa-0112b6faca50.png)'
  prefs: []
  type: TYPE_IMG
- en: Saving build definition and queue
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you can see the build results under the Build and Release tab – your build
    might not be run (please revisit all the steps); the following screenshot shows
    the verified steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/90c3add2-6ea0-45c5-80ba-ccc5041641a9.png)'
  prefs: []
  type: TYPE_IMG
- en: Build steps
  prefs: []
  type: TYPE_NORMAL
- en: Initiating the CD release process
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You have already set up the CI process and now it''s time to go with CD. Go
    to the Release tab and click on the New definition button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/03ef9076-cfe3-4e4d-96d5-ea839fdc771f.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding release definition
  prefs: []
  type: TYPE_NORMAL
- en: 'Select a template as per your application. Refer to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8c5ab7bd-6577-4e86-b2a6-4edf0d971451.png)'
  prefs: []
  type: TYPE_IMG
- en: Selecting Azure App Service Deployment
  prefs: []
  type: TYPE_NORMAL
- en: 'Add an artifact to the release definition by selecting your repository or build,
    refer to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/02c28bd3-7ab1-403b-86b8-9f06880fe272.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding an artifact
  prefs: []
  type: TYPE_NORMAL
- en: 'Set values for your deployment environment, what Azure service, or app type
    you are going to use, and so on. Refer to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/272a86d1-ccc5-4347-b6db-dcefc5fe6956.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding task values
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to Release and you can see the status of your releases; we have added only
    one release definition so you will see something like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f0cc4426-2425-46b0-9611-de37ef40666a.png)'
  prefs: []
  type: TYPE_IMG
- en: Release deployment status
  prefs: []
  type: TYPE_NORMAL
- en: We have not deployed our release yet so its status is NOT DEPLOYED. You can
    manually trigger the deployment. This release is meant for a development environment
    – you can set as many environments as you want. In this section, we have seen
    how to initiate CI and CD using VSTS.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Deployment terminology makes a team become aligned with its work, even if teams
    are working in different geographical zones. With the help of CI, CD teams are
    in sync as they receive recent changes immediately after check-ins by any of the
    teams working on the project.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will cover a testing paradigm in the day-to-day activities
    of development. We will discuss important terms associated with the test paradigm,
    including the theory around these terms, and then we will discuss code examples
    with a knowledge of Stubs, Mocks, and understanding integration and security,
    and performance testing.
  prefs: []
  type: TYPE_NORMAL
