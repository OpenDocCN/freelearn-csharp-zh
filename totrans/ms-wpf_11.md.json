["```cs\nusing System.Windows.Media;\n\n...\n\nint renderingTier = RenderCapability.Tier >> 16; \n```", "```cs\nnamespace CompanyName.ApplicationName.DataModels.Enums \n{ \n  public enum RenderingTier \n  { \n    Zero = 0, \n    One = 1, \n    Two = 2 \n  } \n} \n```", "```cs\npublic RenderingTier RenderingTier { get; set; } \n```", "```cs\npublic App() \n{ \n  StateManager.Instance.RenderingTier =  \n    (RenderingTier)(RenderCapability.Tier >> 16); \n} \n```", "```cs\n<ListBox ItemsSource=\"{Binding Products}\"> \n  <ListBox.Style> \n    <Style TargetType=\"{x:Type ListBox}\"> \n      <Setter Property=\"ItemTemplate\"  \n        Value=\"{StaticResource SimpleDataTemplate}\" /> \n      <Style.Triggers> \n        <DataTrigger Binding=\"{Binding  \n          StateManager.Instance.RenderingTier}\" Value=\"One\"> \n          <Setter Property=\"ItemTemplate\"  \n            Value=\"{StaticResource MoreComplexDataTemplate}\" /> \n        </DataTrigger> \n        <DataTrigger Binding=\"{Binding  \n          StateManager.Instance.RenderingTier}\" Value=\"Two\"> \n          <Setter Property=\"ItemTemplate\"  \n            Value=\"{StaticResource MostComplexDataTemplate}\" /> \n        </DataTrigger> \n      </Style.Triggers> \n    </Style> \n  </ListBox.Style> \n</ListBox> \n```", "```cs\nxmlns:PresentationOptions=\n  \"http://schemas.microsoft.com/winfx/2006/xaml/presentation/options \n\" \nmc:Ignorable=\"PresentationOptions\" \n```", "```cs\n<DropShadowEffect x:Key=\"Shadow\" BlurRadius=\"10\" Direction=\"270\"  \n  ShadowDepth=\"7\" Opacity=\"0.5\" PresentationOptions:Freeze=\"True\" /> \n```", "```cs\nEllipseGeometry ellipseGeometry =  \n  new EllipseGeometry(new Rect(0, 0, 500, 250)); \nif (ellipseGeometry.CanFreeze) ellipseGeometry.Freeze(); \nPath.Data = ellipseGeometry; \n```", "```cs\nif (ellipseGeometry.IsFrozen) \n{ \n  EllipseGeometry ellipseGeometryClone = ellipseGeometry.Clone(); \n  ellipseGeometryClone.RadiusX = 400; \n  ellipseGeometryClone.Freeze();\n  Path.Data = ellipseGeometryClone; \n} \nelse ellipseGeometry.RadiusX = 400; \n```", "```cs\n<UserControl x:Class=\"CompanyName.ApplicationName.Views.DrawingView\" \n\n  xmlns:Controls=\n    \"clr-namespace:CompanyName.ApplicationName.Views.Controls\" \n  xmlns:PresentationOptions=\n    \"http://schemas.microsoft.com/winfx/2006/xaml/presentation/options\" \n  Width=\"450\" Height=\"150\"> \n  <Grid> \n    <Grid.Resources> \n      <RadialGradientBrush x:Key=\"RadialBrush\" RadiusX=\"0.8\" RadiusY=\"0.8\"\n        PresentationOptions:Freeze=\"True\"> \n        <GradientStop Color=\"Orange\" Offset=\"1.0\" /> \n        <GradientStop Color=\"Yellow\" /> \n      </RadialGradientBrush> \n    </Grid.Resources> \n    <Grid.ColumnDefinitions> \n      <ColumnDefinition /> \n      <ColumnDefinition /> \n      <ColumnDefinition /> \n    </Grid.ColumnDefinitions> \n    <Grid> \n      <Grid.RowDefinitions> \n        <RowDefinition Height=\"3*\" /> \n        <RowDefinition Height=\"2*\" /> \n        <RowDefinition Height=\"2*\" /> \n        <RowDefinition Height=\"2*\" /> \n        <RowDefinition Height=\"3*\" /> \n      </Grid.RowDefinitions> \n      <Grid.ColumnDefinitions> \n        <ColumnDefinition /> \n        <ColumnDefinition /> \n        <ColumnDefinition /> \n        <ColumnDefinition /> \n        <ColumnDefinition /> \n      </Grid.ColumnDefinitions> \n      <Ellipse Grid.RowSpan=\"5\" Grid.ColumnSpan=\"5\"  \n        Fill=\"{StaticResource RadialBrush}\" Stroke=\"Black\"  \n        StrokeThickness=\"5\" /> \n      <Ellipse Grid.Row=\"1\" Grid.Column=\"1\" Fill=\"Black\" Width=\"20\"  \n        HorizontalAlignment=\"Center\" /> \n      <Ellipse Grid.Row=\"1\" Grid.Column=\"3\" Fill=\"Black\" Width=\"20\"  \n        HorizontalAlignment=\"Center\" /> \n      <Path Grid.Row=\"3\" Grid.Column=\"1\" Grid.ColumnSpan=\"3\" Stroke=\"Black\"\n        StrokeThickness=\"10\" StrokeStartLineCap=\"Round\"\n        StrokeEndLineCap=\"Round\" Data=\"M0,10 A10,25 0 0 0 12.5,10\" \n        Stretch=\"Fill\" HorizontalAlignment=\"Stretch\" /> \n    </Grid> \n    <Canvas Grid.Column=\"1\"> \n      <Canvas.Background> \n        <DrawingBrush PresentationOptions:Freeze=\"True\"> \n          <DrawingBrush.Drawing> \n            <DrawingGroup> \n              <GeometryDrawing Brush=\"{StaticResource RadialBrush}\"> \n                <GeometryDrawing.Geometry> \n                  <EllipseGeometry Center=\"50,50\" RadiusX=\"50\"  \n                    RadiusY=\"50\" /> \n                </GeometryDrawing.Geometry> \n                <GeometryDrawing.Pen> \n                  <Pen Thickness=\"3.5\" Brush=\"Black\" /> \n                </GeometryDrawing.Pen> \n              </GeometryDrawing> \n              <GeometryDrawing Brush=\"Black\"> \n                <GeometryDrawing.Geometry> \n                  <EllipseGeometry Center=\"29.5,33\" RadiusX=\"6.75\"  \n                    RadiusY=\"8.5\" /> \n                </GeometryDrawing.Geometry> \n              </GeometryDrawing> \n              <GeometryDrawing Brush=\"Black\"> \n                <GeometryDrawing.Geometry> \n                  <EllipseGeometry Center=\"70.5,33\" RadiusX=\"6.75\"  \n                    RadiusY=\"8.5\" /> \n                </GeometryDrawing.Geometry> \n              </GeometryDrawing> \n              <GeometryDrawing> \n                <GeometryDrawing.Geometry> \n                  <PathGeometry> \n                    <PathGeometry.Figures> \n                      <PathFigure StartPoint=\"23,62.5\"> \n                        <ArcSegment Point=\"77,62.5\" Size=\"41 41\" /> \n                      </PathFigure> \n                    </PathGeometry.Figures> \n                  </PathGeometry> \n                </GeometryDrawing.Geometry> \n                <GeometryDrawing.Pen> \n                  <Pen Thickness=\"7\" Brush=\"Black\" StartLineCap=\"Round\"\n                    EndLineCap=\"Round\" /> \n                </GeometryDrawing.Pen> \n              </GeometryDrawing> \n            </DrawingGroup> \n          </DrawingBrush.Drawing> \n        </DrawingBrush> \n      </Canvas.Background> \n    </Canvas> \n    <Canvas Grid.Column=\"2\"> \n      <Canvas.Background> \n        <VisualBrush> \n          <VisualBrush.Visual> \n            <Controls:SmileyFace /> \n          </VisualBrush.Visual> \n        </VisualBrush> \n      </Canvas.Background> \n    </Canvas> \n  </Grid> \n</UserControl> \n```", "```cs\nM0,10 A10,25 0 0 0 12.5,10 \n```", "```cs\nM0,10 A10,25 0 0 1 12.5,10 \n```", "```cs\nusing System; \nusing System.Collections.Generic; \nusing System.Windows; \nusing System.Windows.Media; \n\nnamespace CompanyName.ApplicationName.Views.Controls \n{ \n  public class SmileyFace : Visual \n  { \n    private VisualCollection visuals; \n\n    public SmileyFace() \n    { \n      visuals = new VisualCollection(this); \n      visuals.Add(GetFaceDrawingVisual()); \n    } \n\n    private DrawingVisual GetFaceDrawingVisual() \n    { \n      RadialGradientBrush radialGradientBrush =  \n        new RadialGradientBrush(Colors.Yellow, Colors.Orange); \n      radialGradientBrush.RadiusX = 0.8; \n      radialGradientBrush.RadiusY = 0.8; \n      radialGradientBrush.Freeze(); \n      Pen outerPen = new Pen(Brushes.Black, 5.25); \n      outerPen.Freeze(); \n      DrawingVisual drawingVisual = new DrawingVisual(); \n      DrawingContext drawingContext = drawingVisual.RenderOpen(); \n      drawingContext.DrawEllipse(radialGradientBrush, outerPen,  \n        new Point(75, 75), 72.375, 72.375);  \n      drawingContext.DrawEllipse(Brushes.Black, null,  \n        new Point(44.25, 49.5), 10.125, 12.75); \n      drawingContext.DrawEllipse(Brushes.Black, null,  \n        new Point(105.75, 49.5), 10.125, 12.75); \n      ArcSegment arcSegment = \n        new ArcSegment(new Point(115.5, 93.75), new Size(61.5, 61.5), 0,\n        false, SweepDirection.Counterclockwise, true); \n      PathFigure pathFigure = new PathFigure(new Point(34.5, 93.75),  \n        new List<PathSegment>() { arcSegment }, false); \n      PathGeometry pathGeometry =  \n        new PathGeometry(new List<PathFigure>() { pathFigure }); \n      pathGeometry.Freeze(); \n      Pen smilePen = new Pen(Brushes.Black, 10.5); \n      smilePen.StartLineCap = PenLineCap.Round; \n      smilePen.EndLineCap = PenLineCap.Round; \n      smilePen.Freeze(); \n      drawingContext.DrawGeometry(null, smilePen, pathGeometry); \n      drawingContext.Close(); \n      return drawingVisual; \n    } \n\n    protected override int VisualChildrenCount \n    { \n      get { return visuals.Count; } \n    } \n\n    protected override Visual GetVisualChild(int index) \n    { \n      if (index < 0 || index >= visuals.Count)  \n        throw new ArgumentOutOfRangeException(); \n      return visuals[index]; \n    } \n  } \n} \n```", "```cs\n  Width=\"225\" Height=\"150\" ClipToBounds=\"True\"> \n```", "```cs\npublic class SmileyFace : UIElement \n```", "```cs\n<Controls:SmileyFace Grid.Column=\"2\" /> \n```", "```cs\npublic class SmileyFace : FrameworkElement \n{ \n  ...\n\n  public SmileyFace() \n  { \n    visuals = new VisualCollection(this); \n    Loaded += SmileyFace_Loaded; \n  } \n\n  private void SmileyFace_Loaded(object sender, RoutedEventArgs e) \n  { \n    visuals.Add(GetFaceDrawingVisual()); \n  } \n\n  private DrawingVisual GetFaceDrawingVisual() \n  { \n    ... \n    DrawingVisual drawingVisual = new DrawingVisual(); \n    DrawingContext drawingContext = drawingVisual.RenderOpen(); \n    drawingContext.DrawEllipse(radialGradientBrush, outerPen,  \n      new Point(ActualWidth / 2, ActualHeight / 2), (ActualWidth -  \n      outerPen.Thickness) / 2, (ActualHeight - outerPen.Thickness) / 2); \n    drawingContext.DrawEllipse(Brushes.Black, null, new Point(\n      ActualWidth / 3.3898305084745761, ActualHeight / 3.0303030303030303),\n      ActualWidth / 14.814814814814815, ActualHeight / 11.764705882352942); \n    drawingContext.DrawEllipse(Brushes.Black, null, new Point(\n      ActualWidth / 1.4184397163120568, ActualHeight / 3.0303030303030303),\n      ActualWidth / 14.814814814814815, ActualHeight / 11.764705882352942); \n    ArcSegment arcSegment = new ArcSegment(new Point(ActualWidth /  \n      1.2987012987012987, ActualHeight / 1.6), new Size(ActualWidth /\n      2.4390243902439024, ActualHeight /  2.4390243902439024), 0, false,\n      SweepDirection.Counterclockwise, true); \n    PathFigure pathFigure = new PathFigure(new Point(ActualWidth /  \n      4.3478260869565215, ActualHeight / 1.6), new List<PathSegment>() {\n      arcSegment }, false); \n    PathGeometry pathGeometry =\n      new PathGeometry(new List<PathFigure>() { pathFigure }); \n    ... \n    return drawingVisual; \n  } \n\n  ...\n} \n```", "```cs\nusing System.IO; \nusing System.Windows.Media; \nusing System.Windows.Media.Imaging;\n\n...\n\nRenderTargetBitmap renderTargetBitmap = new RenderTargetBitmap( \n  (int)ActualWidth, (int)ActualHeight, 96, 96, PixelFormats.Pbgra32); \nrenderTargetBitmap.Render(drawingVisual); \nrenderTargetBitmap.Freeze();  \nPngBitmapEncoder image = new PngBitmapEncoder(); \nimage.Frames.Add(BitmapFrame.Create(renderTargetBitmap)); \nusing (Stream stream = File.Create(filePath)) \n{ \n  image.Save(stream); \n} \n```", "```cs\n<Image Width=\"64\"> \n  <Image.Source> \n    <BitmapImage DecodePixelWidth=\"64\" UriSource=\"pack://application:,,,/\n      CompanyName.ApplicationName;component/Images/Image1.png\" /> \n  </Image.Source> \n</Image> \n```", "```cs\nprivate Image CreateImageEfficiently(string filePath) \n{ \n  Image image = new Image(); \n  BitmapImage bitmapImage = new BitmapImage(); \n  bitmapImage.BeginInit(); \n  bitmapImage.CacheOption = BitmapCacheOption.OnDemand; \n  bitmapImage.CreateOptions = BitmapCreateOptions.DelayCreation; \n  bitmapImage.UriSource = new Uri(filePath, UriKind.Absolute);\n  bitmapImage.Freeze();\n  bitmapImage.EndInit();\n  image.Source = bitmapImage; \n  return image; \n}\n```", "```cs\nbitmapImage.UriSource = new Uri(filePath, UriKind.Relative); \n```", "```cs\n<UserControl x:Class=\"CompanyName.ApplicationName.Views.TextView\" \n\n  xmlns:Controls=\n    \"clr-namespace:CompanyName.ApplicationName.Views.Controls\" \n  Height=\"250\" Width=\"325\"> \n  <Grid ShowGridLines=\"True\"> \n    <Grid.RowDefinitions> \n      <RowDefinition /> \n      <RowDefinition /> \n      <RowDefinition /> \n      <RowDefinition /> \n    </Grid.RowDefinitions> \n    <Label Content=\"Quite Efficient\" FontFamily=\"Times New Roman\"  \n      FontSize=\"50\" FontWeight=\"Bold\" FontStyle=\"Italic\"  \n      Foreground=\"Red\" Margin=\"10,0,0,0\" Padding=\"0\" /> \n    <TextBlock Grid.Row=\"1\" Text=\"More Efficient\" \n      FontFamily=\"Times New Roman\" FontSize=\"50\" FontWeight=\"Bold\"\n      FontStyle=\"Italic\" Foreground=\"Black\" Margin=\"10,0,0,0\" /> \n    <Controls:FormattedTextOutput Grid.Row=\"2\" Text=\"More Efficient\" /> \n    <Glyphs Grid.Row=\"3\" UnicodeString=\"Most Efficient\"  \n      FontUri=\"C:\\WINDOWS\\Fonts\\timesbi.TTF\" FontRenderingEmSize=\"50\"  \n      Fill=\"Black\" OriginX=\"10\" OriginY=\"45\" /> \n  </Grid> \n</UserControl> \n```", "```cs\nusing System.Globalization; \nusing System.Windows; \nusing System.Windows.Media; \n\nnamespace CompanyName.ApplicationName.Views.Controls \n{ \n  public class FormattedTextOutput : FrameworkElement \n  { \n    public static readonly DependencyProperty TextProperty =  \n      DependencyProperty.Register(nameof(Text), typeof(string),\n      typeof(FormattedTextOutput), new FrameworkPropertyMetadata( \n      string.Empty, FrameworkPropertyMetadataOptions.AffectsRender)); \n\n    public string Text \n    { \n      get { return (string)GetValue(TextProperty); } \n      set { SetValue(TextProperty, value); } \n    } \n\n    protected override void OnRender(DrawingContext drawingContext) \n    { \n      DpiScale dpiScale = VisualTreeHelper.GetDpi(this); \n      FormattedText formattedText = new FormattedText(Text, \n        CultureInfo.GetCultureInfo(\"en-us\"), FlowDirection.LeftToRight, \n        new Typeface(\"Times New Roman\"), 50, Brushes.Red, \n        dpiScale.PixelsPerDip);\n      formattedText.SetFontStyle(FontStyles.Italic); \n      formattedText.SetFontWeight(FontWeights.Bold); \n      drawingContext.DrawText(formattedText, new Point(10, 0)); \n    } \n  } \n} \n```", "```cs\n...\n<Label Content=\"{Binding Text}\" FontFamily=\"Times New Roman\"  \n  FontSize=\"50\" FontWeight=\"Bold\" FontStyle=\"Italic\" Foreground=\"Red\"\n  Margin=\"10,0,0,0\" Padding=\"0\" /> \n<TextBlock Grid.Row=\"1\" Text=\"{Binding Text}\" \n  FontFamily=\"Times New Roman\" FontSize=\"50\" FontWeight=\"Bold\"\n  FontStyle=\"Italic\" Foreground=\"Red\" Margin=\"10,0,0,0\" /> \n<Controls:FormattedTextOutput Grid.Row=\"2\" Text=\"{Binding Text}\" /> \n<Glyphs Grid.Row=\"3\" UnicodeString=\"{Binding Text}\" FontUri=\n  \"C:\\WINDOWS\\Fonts\\timesbi.TTF\" FontRenderingEmSize=\"50\"  \n  Fill=\"Black\" OriginX=\"10\" OriginY=\"45\" /> \n...\n```", "```cs\nnamespace CompanyName.ApplicationName.ViewModels \n{ \n  public class TextViewModel : BaseViewModel \n  { \n    public string Text { get; set; } = \"Efficient\"; \n  } \n} \n```", "```cs\nGlyphs Indices and UnicodeString properties cannot both be empty.\n```", "```cs\n<Glyphs Grid.Row=\"3\" UnicodeString=\"{Binding Text, FallbackValue='Data\n  Binding Not Working'}\" FontUri=\"C:\\WINDOWS\\Fonts\\timesbi.TTF\"\n  FontRenderingEmSize=\"50\" Fill=\"Black\" OriginX=\"10\" OriginY=\"45\" /> \n```", "```cs\n<ListBox ItemsSource=\"{Binding Products}\" FontSize=\"14\"  \n  HorizontalContentAlignment=\"Stretch\"> \n  <ListBox.ItemTemplate> \n    <DataTemplate DataType=\"{x:Type DataModels:Product}\"> \n      <Grid> \n        <Grid.ColumnDefinitions> \n          <ColumnDefinition /> \n          <ColumnDefinition Width=\"Auto\" /> \n          <ColumnDefinition Width=\"Auto\" /> \n        </Grid.ColumnDefinitions> \n        <TextBlock Text=\"{Binding Name}\" /> \n        <TextBlock Grid.Column=\"1\" \n          Text=\"{Binding Price, StringFormat=C}\" Margin=\"10,0\" /> \n        <StackPanel Grid.Column=\"2\" TextElement.FontSize=\"14\"  \n          Orientation=\"Horizontal\"> \n          <TextBlock> \n            <Hyperlink Command=\"{Binding ViewCommand,  \n              RelativeSource={RelativeSource  \n              AncestorType={x:Type Views:TextView}}}\"  \n              CommandParameter=\"{Binding}\">View</Hyperlink> \n          </TextBlock> \n          <TextBlock Text=\" | \" /> \n          <TextBlock> \n            <Hyperlink Command=\"{Binding EditCommand,  \n              RelativeSource={RelativeSource  \n              AncestorType={x:Type Views:TextView}}}\"  \n              CommandParameter=\"{Binding}\">Edit</Hyperlink> \n          </TextBlock> \n          <TextBlock Text=\" | \" /> \n          <TextBlock> \n            <Hyperlink Command=\"{Binding DeleteCommand,  \n              RelativeSource={RelativeSource  \n              AncestorType={x:Type Views:TextView}}}\"  \n              CommandParameter=\"{Binding}\">Delete</Hyperlink> \n          </TextBlock> \n        </StackPanel> \n      </Grid> \n    </DataTemplate> \n  </ListBox.ItemTemplate> \n</ListBox> \n```", "```cs\n<TextBlock Grid.Column=\"2\" TextElement.FontSize=\"14\" Foreground=\"White\"> \n  <Hyperlink Command=\"{Binding ViewCommand, RelativeSource={ \n    RelativeSource AncestorType={x:Type Views:TextView}}}\"  \n    CommandParameter=\"{Binding}\">View</Hyperlink> \n  <Run Text=\" | \" /> \n  <Hyperlink Command=\"{Binding EditCommand, RelativeSource={ \n    RelativeSource AncestorType={x:Type Views:TextView}}}\"  \n    CommandParameter=\"{Binding}\">Edit</Hyperlink> \n  <Run Text=\" | \" /> \n  <Hyperlink Command=\"{Binding DeleteCommand, RelativeSource={ \n    RelativeSource AncestorType={x:Type Views:TextView}}}\"  \n    CommandParameter=\"{Binding}\">Delete</Hyperlink> \n</TextBlock> \n```", "```cs\n<Hyperlink ... TextDecorations=\"None\">View</Hyperlink> \n```", "```cs\n<Style TargetType=\"{x:Type Hyperlink}\">\n  <Setter Property=\"TextDecorations\" Value=\"None\" />\n  <Style.Triggers>\n    <Trigger Property=\"IsMouseOver\" Value=\"True\">\n      <Setter Property=\"TextDecorations\" Value=\"Underline\" />\n    </Trigger>\n  </Style.Triggers>\n</Style>\n```", "```cs\nusing System; \n\nnamespace CompanyName.ApplicationName.DataModels \n{ \n  public class ThinProduct : BaseDataModel \n  { \n    private Guid id = Guid.Empty; \n    private string name = string.Empty; \n\n    public ThinProduct(Product product) \n    { \n      Id = product.Id; \n      Name = product.Name; \n    } \n\n    public Guid Id \n    { \n      get { return id; } \n      set { if (id != value) { id = value;\n        NotifyPropertyChanged(); } } \n    } \n\n    public string Name \n    { \n      get { return name; } \n      set { if (name != value) { name = value;\n        NotifyPropertyChanged(); } } \n    } \n\n    public override string ToString() \n    { \n      return Name; \n    } \n  } \n} \n```", "```cs\npublic Product(ThinProduct thinProduct) : this() \n{ \n  Id = thinProduct.Id; \n  Name = thinProduct.Name; \n} \n```", "```cs\n<ListBox ItemsSource=\"{Binding Products}\" \n  SelectedItem=\"{Binding Products.CurrentItem}\" ... /> \n```", "```cs\nprivate void Products_CurrentItemChanged(ThinProduct oldProduct,  \n  ThinProduct newProduct) \n{ \n  GetDataOperationResult<Product> result =  \n    await Model.GetProductAsync(newProduct.Id); \n  if (result.IsSuccess) Product = result.ReturnValue; \n  else FeedbackManager.Add(result, false); \n} \n```", "```cs\n<TreeView ItemsSource=\"{Binding Items}\" \n  VirtualizingStackPanel.IsVirtualizing=\"True\" /> \n```", "```cs\n<ComboBox ItemsSource=\"{Binding Items}\"> \n  <ComboBox.ItemsPanel> \n    <ItemsPanelTemplate> \n      <VirtualizingStackPanel IsVirtualizing=\"True\" /> \n    </ItemsPanelTemplate> \n  </ComboBox.ItemsPanel> \n</ComboBox> \n```", "```cs\n<TreeView ItemsSource=\"{Binding Items}\" \n  VirtualizingStackPanel.IsVirtualizing=\"True\" /> \n  VirtualizingStackPanel.VirtualizationMode=\"Recycling\" /> \n```", "```cs\n<ListBox ItemsSource=\"{Binding Items}\"\n  ScrollViewer.IsDeferredScrollingEnabled=\"True\" /> \n```", "```cs\nusing System; \nusing System.Collections.Generic; \nusing System.Windows.Input; \n\nnamespace CompanyName.ApplicationName.ViewModels.Commands \n{ \n  public class WeakReferenceActionCommand : ICommand \n  { \n    private readonly Action<object> action; \n    private readonly Predicate<object> canExecute; \n    private List<WeakReference> eventHandlers = new List<WeakReference>(); \n\n    public WeakReferenceActionCommand(Action<object> action) : \n      this(action, null) { } \n\n    public WeakReferenceActionCommand(Action<object> action,  \n      Predicate<object> canExecute) \n    { \n      if (action == null) throw new ArgumentNullException(\"The action \n        input parameter of the WeakReferenceActionCommand constructor \n        cannot be null.\"); \n      this.action = action; \n      this.canExecute = canExecute; \n    } \n\n    public event EventHandler CanExecuteChanged \n    { \n      add \n      { \n        eventHandlers.Add(new WeakReference(value)); \n        CommandManager.RequerySuggested += value; \n      } \n      remove \n      { \n        if (eventHandlers == null) return; \n        for (int i = eventHandlers.Count - 1; i >= 0; i--) \n        { \n          WeakReference weakReference = eventHandlers[i]; \n          EventHandler handler = weakReference.Target as EventHandler; \n          if (handler == null || handler == value) \n          { \n            eventHandlers.RemoveAt(i); \n          } \n        } \n        CommandManager.RequerySuggested -= value; \n      } \n    } \n\n    public void RaiseCanExecuteChanged() \n    { \n      eventHandlers.ForEach(\n        r => (r.Target as EventHandler)?.Invoke(this, new EventArgs())); \n    } \n\n    public bool CanExecute(object parameter) \n    { \n      return canExecute == null ? true : canExecute(parameter); \n    } \n\n    public void Execute(object parameter) \n    { \n      action(parameter); \n    } \n  } \n} \n```"]