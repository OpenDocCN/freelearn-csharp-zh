["```cs\nusing System;\n\nnamespace Marketplace.Domain.UserProfile\n{\n    public static class Events\n    {\n        public class UserRegistered\n        {\n            public Guid UserId { get; set; }\n            public string FullName { get; set; }\n            public string DisplayName { get; set; }\n        }\n\n        public class ProfilePhotoUploaded\n        {\n            public Guid UserId { get; set; }\n            public string PhotoUrl { get; set; }\n        }\n\n        public class UserFullNameUpdated\n        {\n            public Guid UserId { get; set; }\n            public string FullName { get; set; }\n        }\n\n        public class UserDisplayNameUpdated\n        {\n            public Guid UserId { get; set; }\n            public string DisplayName { get; set; }\n        }\n    }\n}\n```", "```cs\nusing System;\nusing Marketplace.Framework;\n\nnamespace Marketplace.Domain.UserProfile\n{\n    public class FullName : Value<FullName>\n    {\n        public string Value { get; }\n\n        internal FullName(string fullName) => Value = fullName;\n\n        public static FullName FromString(string fullName)\n        {\n            if (fullName.IsEmpty())\n                throw new ArgumentNullException(nameof(fullName));\n\n            return new FullName(fullName);\n        }\n\n        public static implicit operator string(FullName fullName)\n            => fullName.Value;\n\n        // Satisfy the serialization requirements\n        protected FullName() { }\n    }\n}\n```", "```cs\nnamespace Marketplace.Domain.Shared\n{\n    public delegate bool CheckTextForProfanity(string text);\n}\n```", "```cs\nusing System;\nusing Marketplace.Domain.Shared;\nusing Marketplace.Framework;\n\nnamespace Marketplace.Domain.UserProfile\n{\n    public class DisplayName : Value<DisplayName>\n    {\n        public string Value { get; }\n\n        internal DisplayName(string displayName) => Value = \n        displayName;\n\n        public static DisplayName FromString(\n            string displayName,\n            CheckTextForProfanity hasProfanity)\n        {\n            if (displayName.IsEmpty())\n                throw new ArgumentNullException(nameof(FullName));\n\n            if (hasProfanity(displayName))\n                throw new DomainExceptions.ProfanityFound(displayName);\n\n            return new DisplayName(displayName);\n        }\n\n        public static implicit operator string(DisplayName displayName)\n            => displayName.Value;\n\n        // Satisfy the serialization requirements\n        protected DisplayName() { }\n    }\n}\n```", "```cs\nusing System;\n\nnamespace Marketplace.Domain.Shared\n{\n    public static class DomainExceptions\n    {\n        public class InvalidEntityState : Exception\n        {\n            public InvalidEntityState(object entity, string message)\n                : base($\"Entity {entity.GetType().Name} state change \n                rejected, {message}\")\n            { }\n        }\n\n        public class ProfanityFound : Exception\n        {\n            public ProfanityFound(string text)\n                : base($\"Profanity found in text: {text}\")\n            { }\n        }\n    }\n}\n```", "```cs\nusing System;\nusing Marketplace.Framework;\n\nnamespace Marketplace.Domain.UserProfile\n{\n    public class UserProfile : AggregateRoot<UserId>\n    {\n        // Properties to handle the persistence\n        private string DbId\n        {\n            get => $\"UserProfile/{Id.Value}\";\n            set {}\n        }\n\n        // Aggregate state properties\n        public FullName FullName { get; private set; }\n        public DisplayName DisplayName { get; private set; }\n        public string PhotoUrl { get; private set; }\n\n        public UserProfile(UserId id, FullName fullName, DisplayName \n        displayName)\n            => Apply(new Events.UserRegistered\n            {\n                UserId = id,\n                FullName = fullName,\n                DisplayName = displayName\n            });\n\n        public void UpdateFullName(FullName fullName)\n            => Apply(new Events.UserFullNameUpdated\n            {\n                UserId = Id,\n                FullName = fullName\n            });\n\n        public void UpdateDisplayName(DisplayName displayName)\n            => Apply(new Events.UserDisplayNameUpdated\n            {\n                UserId = Id,\n                DisplayName = displayName\n            });\n\n        public void UpdateProfilePhoto(Uri photoUrl)\n            => Apply(new Events.ProfilePhotoUploaded\n            {\n                UserId = Id,\n                PhotoUrl = photoUrl.ToString()\n            });\n\n        protected override void When(object @event)\n        {\n            switch (@event)\n            {\n                case Events.UserRegistered e:\n                    Id = new UserId(e.UserId);\n                    FullName = new FullName(e.FullName);\n                    DisplayName = new DisplayName(e.DisplayName);\n                    break;\n                case Events.UserFullNameUpdated e:\n                    FullName = new FullName(e.FullName);\n                    break;\n                case Events.UserDisplayNameUpdated e:\n                    DisplayName = new DisplayName(e.DisplayName);\n                    break;\n                case Events.ProfilePhotoUploaded e:\n                    PhotoUrl = e.PhotoUrl;\n                    break;\n            }\n        }\n\n        protected override void EnsureValidState()\n        {\n        }\n    }\n}\n```", "```cs\nusing System.Threading.Tasks;\nusing Marketplace.Domain.Shared;\n\nnamespace Marketplace.Domain.UserProfile\n{\n    public interface IUserProfileRepository\n    {\n        Task<UserProfile> Load(UserId id);\n\n        Task Add(UserProfile entity);\n\n        Task<bool> Exists(UserProfile id);\n    }\n}\n```", "```cs\nusing System;\n\nnamespace Marketplace.UserProfile\n{\n    public class Contracts\n    {\n        public static class V1\n        {\n            public class RegisterUser\n            {\n                public Guid UserId { get; set; }\n                public string FullName { get; set; }\n                public string DisplayName { get; set; }\n            }\n\n            public class UpdateUserFullName\n            {\n                public Guid UserId { get; set; }\n                public string FullName { get; set; }\n            }\n\n            public class UpdateUserDisplayName\n            {\n                public Guid UserId { get; set; }\n                public string DisplayName { get; set; }\n\n            }\n\n            public class UpdateUserProfilePhoto\n            {\n                public Guid UserId { get; set; }\n                public string PhotoUrl { get; set; }\n            }\n        }\n    }\n}\n```", "```cs\nusing System;\nusing System.Threading.Tasks;\nusing Marketplace.Domain.Shared;\nusing Marketplace.Domain.UserProfile;\nusing Marketplace.Framework;\n\nnamespace Marketplace.UserProfile\n{\n    public class UserProfileApplicationService : IApplicationService\n    {\n        private readonly IUserProfileRepository _repository;\n        private readonly IUnitOfWork _unitOfWork;\n        private readonly CheckTextForProfanity _checkText;\n\n        public UserProfileApplicationService(\n            IUserProfileRepository repository, IUnitOfWork unitOfWork,\n            CheckTextForProfanity checkText)\n        {\n            _repository = repository;\n            _unitOfWork = unitOfWork;\n            _checkText = checkText;\n        }\n\n        public async Task Handle(object command)\n        {\n            switch (command)\n            {\n                case Contracts.V1.RegisterUser cmd:\n                    if (await \n                    _repository.Exists(cmd.UserId.ToString()))\n                        throw new InvalidOperationException($\"Entity \n                        with id {cmd.UserId} already exists\");\n\n                    var userProfile = new \n                    Domain.UserProfile.UserProfile(\n                        new UserId(cmd.UserId),\n                        FullName.FromString(cmd.FullName), \n                        DisplayName.FromString(cmd.DisplayName, \n                        _checkText));\n\n                    await _repository.Add(userProfile);\n                    await _unitOfWork.Commit();\n                    break;\n\n                case Contracts.V1.UpdateUserFullName cmd:\n                    await HandleUpdate(cmd.UserId,\n                        profile => \n            profile.UpdateFullName(FullName.FromString(cmd.FullName)));\n                    break;\n\n                case Contracts.V1.UpdateUserDisplayName cmd:\n                    await HandleUpdate(cmd.UserId,\n                        profile => profile.UpdateDisplayName(\n                            DisplayName.FromString(cmd.DisplayName, \n                            _checkText)));\n                    break;\n\n                case Contracts.V1.UpdateUserProfilePhoto cmd:\n                    await HandleUpdate(cmd.UserId,\n                        profile => profile.UpdateProfilePhoto(new \n                        Uri(cmd.PhotoUrl)));\n                    break;\n\n                default:\n                    throw new InvalidOperationException(\n                        $\"Command type {command.GetType().FullName} is \n                        unknown\");\n            }\n        }\n\n        private async Task HandleUpdate(Guid userProfileId, \n        Action<Domain.UserProfile.UserProfile> operation)\n        {\n            var classifiedAd = await \n            _repository.Load(userProfileId.ToString());\n            if (classifiedAd == null)\n                throw new InvalidOperationException($\"Entity with id \n                {userProfileId} cannot be found\");\n\n            operation(classifiedAd);\n\n            await _unitOfWork.Commit();\n        }\n    }\n}\n```", "```cs\nusing System;\nusing System.Threading.Tasks;\nusing Marketplace.Framework;\nusing Raven.Client.Documents.Session;\n\nnamespace Marketplace.Infrastructure\n{\n    public class RavenDbRepository<T, TId>\n        where T : AggregateRoot<TId>\n        where TId : Value<TId>\n    {\n        private readonly IAsyncDocumentSession _session;\n        private readonly Func<TId, string> _entityId;\n\n        public RavenDbRepository(\n            IAsyncDocumentSession session,\n            Func<TId, string> entityId)\n        {\n            _session = session;\n            _entityId = entityId;\n        }\n\n        public Task Add(T entity)\n            => _session.StoreAsync(entity, _entityId(entity.Id));\n\n        public Task<bool> Exists(TId id)\n            => _session.Advanced.ExistsAsync(_entityId(id));\n\n        public Task<T> Load(TId id)\n            => _session.LoadAsync<T>(_entityId(id));\n    }\n}\n```", "```cs\nusing Marketplace.Domain.Shared;\nusing Marketplace.Domain.UserProfile;\nusing Marketplace.Infrastructure;\nusing Raven.Client.Documents.Session;\n\nnamespace Marketplace.UserProfile\n{\n    public class UserProfileRepository\n        : RavenDbRepository<Domain.UserProfile.UserProfile, UserId>, \n        IUserProfileRepository\n    {\n        public UserProfileRepository(IAsyncDocumentSession session) \n            : base(session, id => $\"UserProfile/{id.Value.ToString()}\") { }\n    }\n}\n```", "```cs\nusing System;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\nusing Serilog;\n\nnamespace Marketplace.Infrastructure\n{\n    public static class RequestHandler\n    {\n        public static async Task<IActionResult> HandleRequest<T>(\n            T request, Func<T, Task> handler, ILogger log)\n        {\n            try\n            {\n                log.Debug(\"Handling HTTP request of type {type}\", \n                typeof(T).Name);\n                await handler(request);\n                return new OkResult();\n            }\n            catch (Exception e)\n            {\n                log.Error(e, \"Error handling the request\");\n                return new BadRequestObjectResult(new {error = \n                e.Message, stackTrace = e.StackTrace});\n            }\n        }\n    }\n}\n```", "```cs\nusing System.Threading.Tasks;\nusing Marketplace.Infrastructure;\nusing Microsoft.AspNetCore.Mvc;\nusing Serilog;\n\nnamespace Marketplace.UserProfile\n{\n    [Route(\"/profile\")]\n    public class UserProfileCommandsApi : Controller\n    {\n        private readonly UserProfileApplicationService \n        _applicationService;\n        private static readonly ILogger Log = \n        Serilog.Log.ForContext<UserProfileCommandsApi>();\n\n        public UserProfileCommandsApi(UserProfileApplicationService \n        applicationService) \n            => _applicationService = applicationService;\n\n        [HttpPost]\n        public Task<IActionResult> Post(Contracts.V1.RegisterUser \n        request)\n            => RequestHandler.HandleRequest(request, \n            _applicationService.Handle, Log);\n\n        [Route(\"fullname\")]\n        [HttpPut]\n        public Task<IActionResult> Put(Contracts.V1.UpdateUserFullName \n        request)\n            => RequestHandler.HandleRequest(request, \n            _applicationService.Handle, Log);\n\n        [Route(\"displayname\")]\n        [HttpPut]\n        public Task<IActionResult> \n        Put(Contracts.V1.UpdateUserDisplayName request)\n            => RequestHandler.HandleRequest(request, \n            _applicationService.Handle, Log);\n\n        [Route(\"photo\")]\n        [HttpPut]\n        public Task<IActionResult> \n        Put(Contracts.V1.UpdateUserProfilePhoto request)\n            => RequestHandler.HandleRequest(request, \n            _applicationService.Handle, Log);\n    }\n}\n```", "```cs\nusing System.Net.Http;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.WebUtilities;\n\nnamespace Marketplace.Infrastructure\n{\n    /// <summary>\n    /// PurgoMalum is a simple, free, RESTful web service for filtering \n    // and removing content of profanity, obscenity and other unwanted \n    // text.\n    /// Check http://www.purgomalum.com\n    /// </summary>\n    public class PurgomalumClient\n    {\n        private readonly HttpClient _httpClient;\n\n        public PurgomalumClient() : this(new HttpClient()) { }\n\n        public PurgomalumClient(HttpClient httpClient) => _httpClient = \n        httpClient;\n\n        public async Task<bool> CheckForProfanity(string text)\n        {\n            var result = await _httpClient.GetAsync(\n                QueryHelpers.AddQueryString(\n                    \"https://www.purgomalum.com/service\n                     /containsprofanity\", \"text\", text));\n\n            var value = await result.Content.ReadAsStringAsync();\n            return bool.Parse(value);\n        }\n    }\n}\n```", "```cs\npublic void ConfigureServices(IServiceCollection services)\n{\n    var store = new DocumentStore\n        {\n            Urls = new[] {\"http://localhost:8080\"},\n            Database = \"Marketplace_Chapter9\",\n            Conventions =\n            {\n                FindIdentityProperty = x => x.Name == \"DbId\"\n            }\n        };\n    store.Initialize();\n\n    var purgomalumClient = new PurgomalumClient();\n\n    services.AddSingleton<ICurrencyLookup, FixedCurrencyLookup>();\n    services.AddScoped(c => store.OpenAsyncSession());\n    services.AddScoped<IUnitOfWork, RavenDbUnitOfWork>();\n    services.AddScoped<IClassifiedAdRepository, ClassifiedAdRepository>\n    ();\n    services.AddScoped<IUserProfileRepository, UserProfileRepository>\n    ();\n    services.AddScoped<ClassifiedAdsApplicationService>();\n    services.AddScoped(c => \n        new UserProfileApplicationService(\n            c.GetService<IUserProfileRepository>(),\n            c.GetService<IUnitOfWork>(),\n            text => purgomalumClient.CheckForProfanity(text).\n            GetAwaiter().GetResult()));\n\n    services.AddMvc();\n    services.AddSwaggerGen(c =>\n    {\n        c.SwaggerDoc(\"v1\",\n            new Info\n            {\n                Title = \"ClassifiedAds\",\n                Version = \"v1\"\n            });\n    });\n}\n```", "```cs\nusing System;\n\nnamespace Marketplace.ClassifiedAd\n{\n    public static class ReadModels\n    {\n        public class ClassifiedAdDetails\n        {\n            public Guid ClassifiedAdId { get; set; }\n            public string Title { get; set; }\n            public decimal Price { get; set; }\n            public string CurrencyCode { get; set; }\n            public string Description { get; set; }\n            public string SellersDisplayName { get; set; }\n            public string[] PhotoUrls { get; set; }\n        }\n\n        public class ClassifiedAdListItem\n        {\n            public Guid ClassifiedAdId { get; set; }\n            public string Title { get; set; }\n            public decimal Price { get; set; }\n            public string CurrencyCode { get; set; }\n            public string PhotoUrl { get; set; }\n        }\n    }\n}\n```", "```cs\npublic interface IClassifiedAdQueryService\n{\n    Task<IEnumerable<ClassifiedAdListItem>> GetPublishedAds(\n        int page, int pageSize);\n    Task<ClassifiedAdDetails> GetPublicClassifiedAd(\n        Guid classifiedAdId);\n    Task<IEnumerable<ClassifiedAdListItem>> \n    GetClassifiedAdsOwnedBy(Guid userId, int page, int pageSize);\n}\n```", "```cs\npublic interface IClassifiedAdQueryService\n{\n    Task<IEnumerable<ClassifiedAdListItem>> \n    Query(GetPublishedClassifiedAds query);\n    Task<ClassifiedAdDetails> Query(GetPublicClassifiedAd query);\n    Task<IEnumerable<ClassifiedAdListItem>> \n    Query(GetOwnersClassifiedAds query);\n}\n```", "```cs\nusing System;\n\nnamespace Marketplace.ClassifiedAd\n{\n    public static class QueryModels\n    {\n        public class GetPublishedClassifiedAds\n        {\n            public int Page { get; set; }\n            public int PageSize { get; set; }\n        }\n\n        public class GetOwnersClassifiedAd\n        {\n            public Guid OwnerId { get; set; }\n            public int Page { get; set; }\n            public int PageSize { get; set; }\n        }\n\n        public class GetPublicClassifiedAd\n        {\n            public Guid ClassifiedAdId { get; set; }\n        }\n    }\n}\n```", "```cs\nusing System.Collections.Generic;\nusing System.Net;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace Marketplace.ClassifiedAd\n{\n    [Route(\"/ad\")]\n    public class ClassifiedAdsQueryApi : Controller\n    {\n        [HttpGet]\n        [Route(\"list\")]\n        public Task<IActionResult> \n        Get(QueryModels.GetPublishedClassifiedAds request)\n        {\n        }\n\n        [HttpGet]\n        [Route(\"myads\")]\n        public Task<IActionResult> \n        Get(QueryModels.GetOwnersClassifiedAd request)\n        {\n        }\n\n        [HttpGet]\n        [ProducesResponseType((int) HttpStatusCode.OK)]\n        [ProducesResponseType((int) HttpStatusCode.NotFound)]\n        public Task<IActionResult> \n        Get(QueryModels.GetPublicClassifiedAd request)\n        {\n        }\n    }\n}\n```", "```cs\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Reflection.Metadata.Ecma335;\nusing System.Threading.Tasks;\nusing Raven.Client.Documents;\nusing Raven.Client.Documents.Linq;\nusing Raven.Client.Documents.Session;\nusing static Marketplace.ClassifiedAd.ReadModels;\nusing static Marketplace.Domain.ClassifiedAd.ClassifiedAd;\nnamespace Marketplace.ClassifiedAd\n{\n    public static class Queries\n    {\n        public static Task<List<PublicClassifiedAdListItem>> \n        Query(\n            this IAsyncDocumentSession session,\n            QueryModels.GetPublishedClassifiedAds query) =>\n            session.Query<Domain.ClassifiedAd.ClassifiedAd>()\n                .Where(x => x.State == ClassifiedAdState.Active)\n                .Select(x => new PublicClassifiedAdListItem\n                {\n                    ClassifiedAdId = x.Id.Value,\n                    Price = x.Price.Amount,\n                    Title = x.Title.Value,\n                    CurrencyCode = x.Price.Currency.CurrencyCode\n                })\n                .Skip(query.Page * query.PageSize)\n                .Take(query.PageSize)\n                .ToListAsync();\n    }\n}\n```", "```cs\nusing System;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\nusing Raven.Client.Documents.Session;\nusing Serilog;\n\nnamespace Marketplace.ClassifiedAd\n{\n    [Route(\"/ad\")]\n    public class ClassifiedAdsQueryApi : Controller\n    {\n        private readonly IAsyncDocumentSession _session;\n\n        public ClassifiedAdsQueryApi(IAsyncDocumentSession session)\n            => _session = session;\n\n        [HttpGet]\n        [Route(\"list\")]\n        public async Task<IActionResult> \n        Get(QueryModels.GetPublishedClassifiedAds request)\n        {\n            try\n            {\n                var ads = await _session.Query(request);\n                return Ok(ads);\n            }\n            catch (Exception e)\n            {\n                Log.Error(e, \"Error handling the query\");\n                throw;\n            }\n        }\n    }\n}\n```", "```cs\n[\n    {\n        classifiedAdId: \"d338696a-342e-45cf-a02e-178dcb8e95f8\",\n        title: \"Red sofa\",\n        price: 100,\n        currencyCode: \"EUR\",\n        photoUrl: null\n    }\n]\n```", "```cs\npublic static async Task<IActionResult> HandleQuery<TModel>(\n    Func<Task<TModel>> query, ILogger log)\n{\n    try\n    {\n        return new OkObjectResult(await query());\n    }\n    catch (Exception e)\n    {\n        log.Error(e, \"Error handling the query\");\n        return new BadRequestObjectResult(new\n        {\n            error = e.Message, stackTrace = e.StackTrace\n        });\n    }\n}\n```", "```cs\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing Raven.Client.Documents;\nusing Raven.Client.Documents.Linq;\nusing Raven.Client.Documents.Queries;\nusing Raven.Client.Documents.Session;\nusing static Marketplace.ClassifiedAd.ReadModels;\nusing static Marketplace.Domain.ClassifiedAd.ClassifiedAd;\n\nnamespace Marketplace.ClassifiedAd\n{\n    public static class Queries\n    {\n        public static Task<List<PublicClassifiedAdListItem>> Query(\n            this IAsyncDocumentSession session,\n            QueryModels.GetPublishedClassifiedAds query\n        ) =>\n            session.Query<Domain.ClassifiedAd.ClassifiedAd>()\n                .Where(x => x.State == ClassifiedAdState.Active)\n                .Select(\n                    x =>\n                        new PublicClassifiedAdListItem\n                        {\n                            ClassifiedAdId = x.Id.Value,\n                            Price = x.Price.Amount,\n                            Title = x.Title.Value,\n                            CurrencyCode = \n                            x.Price.Currency.CurrencyCode\n                        }\n                )\n                .PagedList(query.Page, query.PageSize);\n\n        public static Task<List<PublicClassifiedAdListItem>> Query(\n            this IAsyncDocumentSession session,\n            QueryModels.GetOwnersClassifiedAd query\n        )\n            =>\n                session.Query<Domain.ClassifiedAd.ClassifiedAd>()\n                    .Where(x => x.OwnerId.Value == query.OwnerId)\n                    .Select(\n                        x =>\n                            new PublicClassifiedAdListItem\n                            {\n                                ClassifiedAdId = x.Id.Value,\n                                Price = x.Price.Amount,\n                                Title = x.Title.Value,\n                                CurrencyCode = \n                                x.Price.Currency.CurrencyCode\n                            }\n                    )\n                    .PagedList(query.Page, query.PageSize);\n\n        public static Task<ClassifiedAdDetails> Query(\n            this IAsyncDocumentSession session,\n            QueryModels.GetPublicClassifiedAd query\n        )\n            => (from ad in session.Query<Domain.ClassifiedAd.\n            ClassifiedAd>()\n                where ad.Id.Value == query.ClassifiedAdId\n                let user = RavenQuery\n                    .Load<Domain.UserProfile.UserProfile>(\n                        \"UserProfile/\" + ad.OwnerId.Value\n                    )\n                select new ClassifiedAdDetails\n                {\n                    ClassifiedAdId = ad.Id.Value,\n                    Title = ad.Title.Value,\n                    Description = ad.Text.Value,\n                    Price = ad.Price.Amount,\n                    CurrencyCode = ad.Price.Currency.CurrencyCode,\n                    SellersDisplayName = user.DisplayName.Value\n                }).SingleAsync();\n\n        private static Task<List<T>> PagedList<T>(\n            this IRavenQueryable<T> query, int page, int pageSize\n        ) =>\n            query\n                .Skip(page * pageSize)\n                .Take(pageSize)\n                .ToListAsync();\n    }\n}\n```", "```cs\nusing System.Threading.Tasks;\nusing Marketplace.Infrastructure;\nusing Microsoft.AspNetCore.Mvc;\nusing Raven.Client.Documents.Session;\nusing Serilog;\n\nnamespace Marketplace.ClassifiedAd\n{\n    [Route(\"/ad\")]\n    public class ClassifiedAdsQueryApi : Controller\n    {\n        private static ILogger _log = \n        Log.ForContext<ClassifiedAdsQueryApi>();\n\n        private readonly IAsyncDocumentSession _session;\n\n        public ClassifiedAdsQueryApi(IAsyncDocumentSession session)\n            => _session = session;\n\n        [HttpGet]\n        [Route(\"list\")]\n        public Task<IActionResult> \n        Get(QueryModels.GetPublishedClassifiedAds request) \n            => RequestHandler.HandleQuery(() => \n                _session.Query(request), _log);\n\n        [HttpGet]\n        [Route(\"myads\")]\n        public Task<IActionResult> \n        Get(QueryModels.GetOwnersClassifiedAd request)\n            => RequestHandler.HandleQuery(() => \n                _session.Query(request), _log);\n    }\n}\n```", "```cs\npublic static Task<ReadModels.ClassifiedAdDetails> Query(\n    this IAsyncDocumentSession session,\n    QueryModels.GetPublicClassifiedAd query)\n    => (from ad in session.Query<Domain.ClassifiedAd.ClassifiedAd>()\n        where ad.Id.Value == query.ClassifiedAdId\n        let user = RavenQuery\n            .Load<Domain.UserProfile.UserProfile>(\"UserProfile/\" + \n            ad.OwnerId.Value)\n        select new ReadModels.ClassifiedAdDetails\n        {\n            ClassifiedAdId = ad.Id.Value,\n            Title = ad.Title.Value,\n            Description = ad.Text.Value,\n            Price = ad.Price.Amount,\n            CurrencyCode = ad.Price.Currency.CurrencyCode,\n            SellersDisplayName = user.DisplayName.Value\n        }).SingleAsync();\n```", "```cs\n[HttpGet]\npublic Task<IActionResult> Get(QueryModels.GetPublicClassifiedAd request)\n    => RequestHandler.HandleQuery(() => _session.Query(request), _log);\n```", "```cs\n{\n    classifiedAdId: \"d338696a-342e-45cf-a02e-178dcb8e95f8\",\n    title: \"Red sofa\",\n    price: 100,\n    currencyCode: \"EUR\",\n    description: \"Really good\",\n    sellersDisplayName: \"prejudice\",\n    photoUrls: null\n}\n```", "```cs\nusing System;\nusing System.Threading.Tasks;\nusing Marketplace.Domain.Shared;\nusing Marketplace.Domain.UserProfile;\nusing Marketplace.Infrastructure;\n\nnamespace Marketplace.UserProfile\n{\n    public class UserProfileRepository : IUserProfileRepository, \n    IDisposable\n    {\n        private readonly MarketplaceDbContext _dbContext;\n\n        public UserProfileRepository(MarketplaceDbContext dbContext) \n            => _dbContext = dbContext;\n\n        public Task Add(Domain.UserProfile.UserProfile entity) \n            => _dbContext.UserProfiles.AddAsync(entity);\n\n        public async Task<bool> Exists(UserId id) \n            => await _dbContext.UserProfiles.FindAsync(id.Value) \n                != null;\n\n        public Task<Domain.UserProfile.UserProfile> Load(UserId id)\n            => _dbContext.UserProfiles.FindAsync(id.Value);\n\n        public void Dispose() => _dbContext.Dispose();\n    }\n}\n```", "```cs\npublic class UserProfileEntityTypeConfiguration \n    : IEntityTypeConfiguration<Domain.UserProfile.UserProfile>\n{\n    public void Configure(EntityTypeBuilder<Domain.UserProfile.UserProfile> builder)\n    {\n        builder.HasKey(x => x.UserProfileId);\n        builder.OwnsOne(x => x.Id);\n        builder.OwnsOne(x => x.DisplayName);\n        builder.OwnsOne(x => x.FullName);\n    }\n}\n```", "```cs\npublic DbSet<Domain.UserProfile.UserProfile> UserProfiles { get; set; }\n```", "```cs\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.ApplyConfiguration(new \n    ClassifiedAdEntityTypeConfiguration());\n    modelBuilder.ApplyConfiguration(new \n    PictureEntityTypeConfiguration());\n    modelBuilder.ApplyConfiguration(new \n    UserProfileEntityTypeConfiguration());\n}\n```", "```cs\npublic void ConfigureServices(IServiceCollection services)\n{\n    const string connectionString = \n        \"Host=localhost;Database=Marketplace_Chapter9;\n        Username=ddd;Password=book\";\n    services.AddEntityFrameworkNpgsql();\n    services.AddPostgresDbContext<MarketPlaceDbContext>\n    (connectionString);\n\n    var purgomalumClient = new PurgomalumClient();\n\n    services.AddSingleton<ICurrencyLookup, FixedCurrencyLookup>();\n    services.AddScoped<IUnitOfWork, EfCoreUnitOfWork>();\n    services.AddScoped<IClassifiedAdRepository, ClassifiedAdRepository>\n    ();\n    services.AddScoped<IUserProfileRepository, UserProfileRepository>\n    ();\n    services.AddScoped<ClassifiedAdsApplicationService>();\n    services.AddScoped(c => \n        new UserProfileApplicationService(\n            c.GetService<IUserProfileRepository>(),\n            c.GetService<IUnitOfWork>(),\n            text => purgomalumClient.CheckForProfanity(text)\n                .GetAwaiter().GetResult()));\n\n    services.AddMvc();\n    services.AddSwaggerGen(c =>\n    {\n        c.SwaggerDoc(\"v1\",\n            new Info\n            {\n                Title = \"ClassifiedAds\",\n                Version = \"v1\"\n            });\n    });\n}\n```", "```cs\nusing System.Threading.Tasks;\nusing static Marketplace.ClassifiedAd.ReadModels;\nusing static Marketplace.Domain.ClassifiedAd.ClassifiedAd;\nusing static Marketplace.ClassifiedAd.QueryModels;\nusing Dapper;\n\nnamespace Marketplace.ClassifiedAd\n{\n    public static class Queries\n    {\n        public static Task<IEnumerable<PublicClassifiedAdListItem>> \n        Query(\n            this DbConnection connection,\n            GetPublishedClassifiedAds query)\n            => connection.QueryAsync<PublicClassifiedAdListItem>(\n                \"SELECT \\\"ClassifiedAdId\\\", \\\"Price_Amount\\\", \n                \\\"Title_Value\\\" \" +\n                \"FROM \\\"ClassifiedAds\\\" WHERE \\\"State\\\"=@State LIMIT \n                @PageSize OFFSET @Offset\",\n                new\n                {\n                    State = (int)ClassifiedAdState.Active,\n                    PageSize = query.PageSize,\n                    Offset = Offset(query.Page, query.PageSize)\n                });\n```", "```cs\npublic enum ClassifiedAdState\n{\n    PendingReview = 1,\n    Active = 2,\n    Inactive = 3,\n    MarkedAsSold = 4\n}\n```", "```cs\n[\n  {\n    \"classifiedAdId\": \"556bc798-bacc-4bb8-a55b-50144add4f17\",\n    \"title\": \"Green sofa\",\n    \"price\": 110,\n    \"currencyCode\": null,\n    \"photoUrl\": null\n  }\n]\n```", "```cs\npublic static Task<IEnumerable<PublicClassifiedAdListItem>> Query(\n    this DbConnection connection,\n    GetOwnersClassifiedAd query) =>\n    connection.QueryAsync<ReadModels.PublicClassifiedAdListItem>(\n        \"SELECT \\\"ClassifiedAdId\\\", \\\"Price_Amount\\\" price, \n        \\\"Title_Value\\\" title \" +\n        \"FROM \\\"ClassifiedAds\\\" WHERE \\\"OwnerId_Value\\\"=@OwnerId LIMIT \n        @PageSize OFFSET @Offset\",\n            new\n            {\n                OwnerId = query.OwnerId,\n                PageSize = query.PageSize,\n                Offset = Offset(query.Page, query.PageSize)\n            });\n```", "```cs\n[\n  {\n    \"classifiedAdId\": \"556bc798-bacc-4bb8-a55b-50144add4f17\",\n    \"title\": \"Green sofa\",\n    \"price\": 110,\n    \"currencyCode\": null,\n    \"photoUrl\": null\n  },\n  {\n    \"classifiedAdId\": \"21f750fa-5a24-405b-8aad-20935b5974ed\",\n    \"title\": \"Not ready yet\",\n    \"price\": -1,\n    \"currencyCode\": null,\n    \"photoUrl\": null\n  }\n]\n```", "```cs\npublic static Task<ClassifiedAdDetails> Query(\n    this DbConnection connection,\n    GetPublicClassifiedAd query) =>\n    connection.QuerySingleOrDefaultAsync<ClassifiedAdDetails>(\n        \"SELECT \\\"ClassifiedAdId\\\", \\\"Price_Amount\\\" price, \n        \\\"Title_Value\\\" title, \" +\n        \"\\\"Text_Value\\\" description, \\\"DisplayName_Value\\\" \n        sellersdisplayname \" +\n        \"FROM \\\"ClassifiedAds\\\", \\\"UserProfiles\\\" \" +\n        \"WHERE \\\"ClassifiedAdId\\\" = @Id AND \n        \\\"OwnerId_Value\\\"=\\\"UserProfileId\\\"\",\n            new { Id = query.ClassifiedAdId });\n```", "```cs\n{\n  \"classifiedAdId\": \"556bc798-bacc-4bb8-a55b-50144add4f17\",\n  \"title\": \"Green sofa\",\n  \"price\": 110,\n  \"currencyCode\": null,\n  \"description\": \"Very nice sofa, almost as new\",\n  \"sellersDisplayName\": \"prejudice\",\n  \"photoUrls\": null\n}\n```"]