["```cs\n    internal static string Name { get; set; }\n    internal static string IpAddress { get; set;}\n    internal static bool IsNetworkAvailable { get; set; }\n    internal static DateTime? NetworkConnectivity\n        LastUpdated { get; set; }\n    static WorkstationState()\n    {\n        Name = Dns.GetHostName();\n        IpAddress = GetLocalIPAddress(Name);\n        IsNetworkAvailable = NetworkInterface\n            .GetIsNetworkAvailable();\n        NetworkConnectivityLastUpdated = DateTime.UtcNow;\n        Thread.Sleep(2000);\n    }\n    private static string GetLocalIPAddress\n        (string hostName)\n    {\n        var hostEntry = Dns.GetHostEntry(hostName);\n        foreach (var address in hostEntry.AddressList\n                            .Where(a => a.AddressFamily == \n                             AddressFamily.InterNetwork))\n        {\n            return address.ToString();\n        }\n        return string.Empty;\n    }\n    ```", "```cs\n    internal async Task<bool> GetNetworkAvailability()\n    {\n        await Task.Delay(100);\n        WorkstationState.IsNetworkAvailable = \n            NetworkInterface.GetIsNetworkAvailable();\n        WorkstationState.NetworkConnectivityLastUpdated = \n            DateTime.UtcNow;\n        return WorkstationState.IsNetworkAvailable;\n    }\n    ```", "```cs\n    using ThreadingStaticDataExample;\n    Console.WriteLine(\"Hello, World!\");\n    Console.WriteLine($\"Current datetime: \n        {DateTime.UtcNow}\");\n    var helper = new WorkstationHelper();\n    await helper.GetNetworkAvailability();\n    Console.WriteLine($\"Network availability last updated \n      {WorkstationState.NetworkConnectivityLastUpdated} \n        for computer {WorkstationState.Name} at IP \n          {WorkstationState.IpAddress}\");\n    ```", "```cs\nHello, World!\nCurrent datetime: 2/12/2022 4:07:13 PM\nNetwork availability last updated 2/12/2022 4:07:15 PM for computer ALVINASHCRABC3A at IP 10.211.55.3\n```", "```cs\ninternal class WorkstationHelper\n```", "```cs\n{\n```", "```cs\n    private static object _workstationLock = new object();\n```", "```cs\n    internal async Task<bool> GetNetworkAvailability()\n```", "```cs\n    {\n```", "```cs\n        await Task.Delay(100);\n```", "```cs\nlock( _workstationLock)\n```", "```cs\n        {\n```", "```cs\n            WorkstationState.IsNetworkAvailable = \n```", "```cs\n                NetworkInterface.GetIsNetworkAvailable();\n```", "```cs\n            WorkstationState.NetworkConnectivityLastUpdated \n```", "```cs\n                = DateTime.UtcNow;\n```", "```cs\n        }\n```", "```cs\n        return WorkstationState.IsNetworkAvailable;\n```", "```cs\n    }\n```", "```cs\n}\n```", "```cs\n    [ThreadStatic]\n    internal static DateTime? \n        NetworkConnectivityLastUpdated;\n    ```", "```cs\n    using ThreadingStaticDataExample;\n    Console.WriteLine(\"Hello, World!\");\n    Console.WriteLine($\"Current datetime: \n        {DateTime.UtcNow}\");\n    var helper = new WorkstationHelper();\n    Parallel.For(1, 30, async (x) =>\n    {\n        await helper.GetNetworkAvailability();\n    });\n    Console.WriteLine($\"Network availability last updated \n        {WorkstationState.NetworkConnectivityLastUpdated} \n            for computer {WorkstationState.Name} at IP \n               {WorkstationState.IpAddress}\");\n    ```", "```cs\npublic class WorkstationStateSingleton\n{\n    private static WorkstationStateSingleton? \n        _singleton = null;\n    private static readonly object _lock = new();\n    WorkstationStateSingleton()\n    {\n        Name = Dns.GetHostName();\n        IpAddress = GetLocalIPAddress(Name);\n        IsNetworkAvailable = \n            NetworkInterface.GetIsNetworkAvailable();\n        NetworkConnectivityLastUpdated = \n            DateTime.UtcNow;\n    }\n    public static WorkstationStateSingleton Instance\n    {\n        get\n        {\n            lock (_lock)\n            {\n                if (_singleton == null)\n                {\n                    _singleton = new \n                       WorkstationStateSingleton();\n                }\n                return _singleton;\n            }\n        }\n    }\n...\n}\n```", "```cs\nprivate object _lock = new object();\n```", "```cs\nprivate List<string> _data;\n```", "```cs\npublic DeadlockSample()\n```", "```cs\n{\n```", "```cs\n    _data = new List<string> { \"First\", \"Second\",\n```", "```cs\n        \"Third\" };\n```", "```cs\n}\n```", "```cs\npublic async Task ProcessData()\n```", "```cs\n{\n```", "```cs\n    lock (_lock)\n```", "```cs\n    {\n```", "```cs\n        foreach(var item in _data)\n```", "```cs\n        {\n```", "```cs\n            Console.WriteLine(item);\n```", "```cs\n        }\n```", "```cs\n        await AddData();\n```", "```cs\n    }\n```", "```cs\n}\n```", "```cs\nprivate async Task AddData()\n```", "```cs\n{\n```", "```cs\n    lock (_lock)\n```", "```cs\n    {\n```", "```cs\n        _data.AddRange(GetMoreData());\n```", "```cs\n        await Task.Delay(100);\n```", "```cs\n    }\n```", "```cs\n}\n```", "```cs\nprivate void AddDataWithMonitor()\n```", "```cs\n{\n```", "```cs\n    if (Monitor.TryEnter(_lock, 1000))\n```", "```cs\n    {  \n```", "```cs\n        try\n```", "```cs\n        {  \n```", "```cs\n            _data.AddRange(GetMoreData());\n```", "```cs\n        }  \n```", "```cs\n        finally\n```", "```cs\n        {  \n```", "```cs\n            Monitor.Exit(_lock);  \n```", "```cs\n        }  \n```", "```cs\n    }  \n```", "```cs\n    else\n```", "```cs\n    {  \n```", "```cs\n        Console.WriteLine($\"AddData: Unable to acquire \n```", "```cs\n            lock. Stack trace: {Environment.StackTrace}\");\n```", "```cs\n    }\n```", "```cs\n}\n```", "```cs\nprivate int _runningTotal;\n```", "```cs\npublic void PerformCalculationsRace()\n```", "```cs\n{\n```", "```cs\n    _runningTotal = 3;\n```", "```cs\n    Parallel.Invoke(() => {\n```", "```cs\n        AddValue().Wait();\n```", "```cs\n    }, () => {\n```", "```cs\n        MultiplyValue().Wait();\n```", "```cs\n    });\n```", "```cs\n    Console.WriteLine($\"Running total is {_runningTotal}\");\n```", "```cs\n}\n```", "```cs\nprivate async Task AddValue()\n```", "```cs\n{\n```", "```cs\n    await Task.Delay(100);\n```", "```cs\n    _runningTotal += 15;\n```", "```cs\n}\n```", "```cs\nprivate async Task MultiplyValue()\n```", "```cs\n{\n```", "```cs\n    await Task.Delay(100);\n```", "```cs\n    _runningTotal = _runningTotal * 10;\n```", "```cs\n}\n```", "```cs\npublic async Task PerformCalculations()\n```", "```cs\n{\n```", "```cs\n    _runningTotal = 3;\n```", "```cs\n    await MultiplyValue().ContinueWith(async (Task) => {\n```", "```cs\n        await AddValue();\n```", "```cs\n        });\n```", "```cs\n    Console.WriteLine($\"Running total is {_runningTotal}\");\n```", "```cs\n}\n```", "```cs\npublic class InterlockedSample\n```", "```cs\n{\n```", "```cs\n    private long _runningTotal;\n```", "```cs\n    public void PerformCalculations()\n```", "```cs\n    {\n```", "```cs\n        _runningTotal = 3;\n```", "```cs\n        Parallel.Invoke(() => {\n```", "```cs\n            AddValue().Wait();\n```", "```cs\n        }, () => {\n```", "```cs\n            MultiplyValue().Wait();\n```", "```cs\n        });\n```", "```cs\n        Console.WriteLine($\"Running total is \n```", "```cs\n            {_runningTotal}\");\n```", "```cs\n    }\n```", "```cs\n    private async Task AddValue()\n```", "```cs\n    {\n```", "```cs\n        await Task.Delay(100);\n```", "```cs\n        Interlocked.Add(ref _runningTotal, 15);\n```", "```cs\n    }\n```", "```cs\n    private async Task MultiplyValue()\n```", "```cs\n    {\n```", "```cs\n        await Task.Delay(100);\n```", "```cs\n        var currentTotal = Interlocked.Read(ref \n```", "```cs\n            _runningTotal);\n```", "```cs\n        Interlocked.Exchange(ref _runningTotal, \n```", "```cs\n            currentTotal * 10);\n```", "```cs\n    }\n```", "```cs\n}\n```", "```cs\npublic void ProcessParallelForEachWithLimits\n```", "```cs\n    (List<string> items)\n```", "```cs\n{\n```", "```cs\n    int max = Environment.ProcessorCount > 1 ? \n```", "```cs\n                Environment.ProcessorCount / 2 : 1;\n```", "```cs\n    var options = new ParallelOptions\n```", "```cs\n    {\n```", "```cs\n        MaxDegreeOfParallelism = max\n```", "```cs\n    };\n```", "```cs\n    Parallel.ForEach(items, options, y => {\n```", "```cs\n        // Process items\n```", "```cs\n    });\n```", "```cs\n}\n```", "```cs\npublic bool ProcessPlinqWithLimits(List<string> items)\n```", "```cs\n{\n```", "```cs\n    int max = Environment.ProcessorCount > 1 ? \n```", "```cs\n        Environment.ProcessorCount / 2 : 1;\n```", "```cs\n    return items.AsParallel()\n```", "```cs\n        .WithDegreeOfParallelism(max)\n```", "```cs\n        .Any(i => CheckString(i));\n```", "```cs\n}\n```", "```cs\nprivate bool CheckString(string item)\n```", "```cs\n{\n```", "```cs\n    return !string.IsNullOrWhiteSpace(item);\n```", "```cs\n}\n```", "```cs\nprivate void UpdateThreadPoolMax()\n```", "```cs\n{\n```", "```cs\n    ThreadPool.GetMinThreads(out int workerMin, out int \n```", "```cs\n        completionMin);\n```", "```cs\n    int workerMax = GetProcessingMax(workerMin);\n```", "```cs\n    int completionMax = GetProcessingMax(completionMin);\n```", "```cs\n    ThreadPool.SetMaxThreads(workerMax, completionMax);\n```", "```cs\n}\n```", "```cs\nprivate int GetProcessingMax(int min)\n```", "```cs\n{\n```", "```cs\n    return min < Environment.ProcessorCount ?\n```", "```cs\n                    Environment.ProcessorCount * 2 :\n```", "```cs\n                    min * 2;\n```", "```cs\n}\n```"]