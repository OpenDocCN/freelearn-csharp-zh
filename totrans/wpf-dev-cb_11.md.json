["```cs\n<Grid.ColumnDefinitions> \n    <ColumnDefinition Width=\"*\"/> \n    <ColumnDefinition Width=\"Auto\"/> \n</Grid.ColumnDefinitions> \n```", "```cs\n<TextBlock x:Name=\"txtBlock\" \n           Grid.Column=\"0\" \n           Margin=\"8\" \n           Text=\"Hello World!\"/> \n```", "```cs\nxmlns:forms=\"clr-namespace:System.Windows.Forms; \n             assembly=System.Windows.Forms\" \n```", "```cs\n<Grid> \n    <Grid.ColumnDefinitions> \n        <ColumnDefinition Width=\"*\"/> \n        <ColumnDefinition Width=\"Auto\"/> \n    </Grid.ColumnDefinitions> \n    <TextBlock x:Name=\"txtBlock\" \n               Grid.Column=\"0\" \n               Margin=\"8\" \n               Text=\"Hello World!\"/> \n    <WindowsFormsHost Width=\"300\" \n                      Grid.Column=\"1\"> \n        <forms:PropertyGrid x:Name=\"propertyGrid\"/> \n    </WindowsFormsHost> \n</Grid>\n```", "```cs\npublic partial class MainWindow : Window \n{ \n    public MainWindow() \n    { \n        InitializeComponent(); \n\n        propertyGrid.SelectedObject = txtBlock; \n    } \n}\n```", "```cs\n<Grid.ColumnDefinitions> \n    <ColumnDefinition Width=\"*\"/> \n    <ColumnDefinition Width=\"Auto\"/> \n</Grid.ColumnDefinitions> \n```", "```cs\n<TextBox x:Name=\"searchBox\" \n         Grid.Column=\"0\" \n         MinWidth=\"100\" \n         Margin=\"4\"/>\n```", "```cs\n<Button x:Name=\"searchButton\" \n        Content=\"Search\" \n        Grid.Column=\"1\" \n        Padding=\"8 2\" \n        Margin=\"4\" \n        Click=\"OnSearchButtonClicked\"/> \n```", "```cs\n<Grid> \n    <Grid.ColumnDefinitions> \n        <ColumnDefinition Width=\"*\"/> \n        <ColumnDefinition Width=\"Auto\"/> \n    </Grid.ColumnDefinitions> \n\n    <TextBox x:Name=\"searchBox\" \n             Grid.Column=\"0\" \n             MinWidth=\"100\" \n             Margin=\"4\"/> \n    <Button x:Name=\"searchButton\" \n            Content=\"Search\" \n            Grid.Column=\"1\" \n            Padding=\"8 2\" \n            Margin=\"4\" \n            Click=\"OnSearchButtonClicked\"/> \n</Grid> \n```", "```cs\nprivate void OnSearchButtonClicked(object sender,  \n                                   RoutedEventArgs e) \n{ \n    MessageBox.Show(\"You searched for: {\" +  \n                     searchBox.Text + \"}\"); \n}\n```", "```cs\n<StackPanel Margin=\"10\"> \n    <TextBlock Text=\"Enter website URL:\" \n               Foreground=\"Gray\" \n               Margin=\"4 0\"/> \n\n    <StackPanel Orientation=\"Horizontal\"> \n        <TextBox x:Name=\"address\" \n                 Text=\"http://www.kunal-chowdhury.com\" \n                 Width=\"250\" \n                 Margin=\"4\"/> \n\n        <Button x:Name=\"goButton\" \n                Content=\"Go...\" \n                Padding=\"8 2\" \n                Margin=\"4\" \n                Click=\"OnGoClicked\"/> \n\n        <Button x:Name=\"bringToFrontButton\" \n                Content=\"BringToFront\" \n                Padding=\"8 2\" \n                Margin=\"4\" \n                Click=\"OnBringToFrontClicked\"/> \n\n        <Button x:Name=\"refreshButton\" \n                Content=\"Refresh\" \n                Padding=\"8 2\" \n                Margin=\"4\" \n                Click=\"OnRefreshClicked\"/> \n    </StackPanel> \n</StackPanel> \n```", "```cs\nusing System; \nusing System.Diagnostics; \nusing System.Runtime.InteropServices; \nusing System.Windows; \nusing System.Windows.Forms; \n```", "```cs\n[DllImport(\"User32.dll\")] \nstatic extern int SetForegroundWindow(IntPtr hWnd); \n\nprivate static Process process = new Process(); \n```", "```cs\nprivate void OnGoClicked(object sender,  \n RoutedEventArgs e) \n{ \n    goButton.IsEnabled = false; \n    process.StartInfo.FileName = \"iexplore.exe\"; \n    process.StartInfo.Arguments = address.Text; \n    process.Start(); \n}\n```", "```cs\nprivate void OnBringToFrontClicked(object sender,  \n RoutedEventArgs e) \n{ \n    if (process != null) \n    { \n        var ptr = process.MainWindowHandle; \n        SetForegroundWindow(ptr); \n    } \n} \n```", "```cs\nprivate void OnRefreshClicked(object sender,  \n RoutedEventArgs e) \n{ \n    if (process != null) \n    { \n        IntPtr ptr = process.MainWindowHandle; \n        SetForegroundWindow(ptr); \n        SendKeys.SendWait(\"{F5}\"); \n    } \n} \n```", "```cs\n  aximp c:WindowsSystem32mstscax.dll  \n```", "```cs\n\n11.  Replace the existing `Grid` panel with the following markup:\n\n```", "```cs\n\n12.  Go to the code behind the file by pressing the *F7* key. Alternatively, you can open `MainWindow.xaml.cs` from Solution Explorer.\n13.  Inside the constructor of the `MainWindow` class, add the following, just after the `InitializeComponent()` method call, and replace the IP with the one that you want to connect:\n\n```", "```cs\n\n14.  Now, run the application. You will see the terminal host launched in our WPF application embedded inside it, and pointing to the remote machine for which the IP address has been provided as the `terminal.Server` name. Here's how the application will look:\n\n![](img/ec435514-a923-4d63-bc81-b847b8288be8.png)\n\n15.  Within that application window, you can now log in to the system and access the desktop, files, and programs remotely.\n\nHow it works...\nThe ActiveX DLL for **Microsoft Terminal Services** (the `mstscax.dll` file) resides in the `%WINDIR%System32` directory. The **ActiveX Importer** (`AXIMP.EXE`), which is part of the **.NET Framework component** of the Windows SDK, generates two DLLs (`MSTSCLib.dll` and `AxMSTSCLib.dll`) from that ActiveX DLL.\nThe first DLL, `MSTSCLib.dll`, contains the managed definitions of the unmanaged interfaces, classes, structures, and enums, defined in the type library contained inside the ActiveX DLL (`mstscax.dll`). This is generally named with the library name from the original type library.\nThe second DLL, `AxMSTSCLib.dll`, is named the same but with an `Ax` prefix. This contains a Windows Forms control corresponding to each ActiveX class. The Windows Forms representation of the ActiveX control is added to `WindowsFormsHost`.\nIn our example, the `AxMsTscAxNotSafeForScripting` control is used in XAML, inside `WindowsFormsHost`, to perform the interaction. Its `Server` property, from the code behind the class, has been set to a simple string, pointing to the remote system's IP address or machine name, discoverable from the host.\nWhen you are ready, the `Connect()` call to the instance of the terminal control (`AxMsTscAxNotSafeForScripting`) connects to the remote system. You can additionally provide `Domainname` , `Username`, and other properties to the terminal instance, before calling the `Connect()` method.\n\n```"]