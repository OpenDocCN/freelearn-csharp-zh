- en: Assessments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section is for answers to questions from all chapters.
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 1*](B16617_01_Final_SB_Epub.xhtml#_idTextAnchor014), Introducing
    C# 10.0 and .NET 6'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Performance improvements in the garbage collector and JIT compiler, improved
    performance of text-based processing, faster regular expression processing, and
    performance of threading and asynchronous operations has been boosted. There have
    also been performance improvements to collections, LINQ, networking, and Blazor;
    plus, there are additional performance-based APIs and analyzers that are new to
    .NET 6.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can now write top-level programs and use `init`-only properties and records.
    There are new pattern matching features and new expressions with targeted types.
    You can use covariant returns and perform native compilation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`dotnet` and `ngen`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the Microsoft Store app performance assessment. Follow Microsoft’s advice
    based on the assessment to improve your app’s performance, and address each of
    the highlighted issues found with your app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Perform baseline measurements, begin optimizations by performing the refactoring
    with the largest overall impact, enable HTTP compression, reduce TCP/IP connection
    overheads, and use HTTP/2 over SSL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reading tasks to be completed by the reader at their discretion.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Coding tasks to be completed by the reader at their discretion.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Benchmarking tasks to be completed by the reader at their discretion.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Chapter 2*](B16617_02_Final_SB_Epub.xhtml#_idTextAnchor040), Implementing
    C# Interoperability'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Platform invocation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Explain what `P/Invoke` is.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It reminds the programmer that they are responsible for the safety of their
    code, since it is not managed by the .NET Framework.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'There are three generations of objects: zero, one, and two. Normally, objects
    are added to generation zero and garbage is collected. But if they survive generation
    zero, they are promoted to generation one. Objects that survive generation one
    are promoted to generation two. If generations zero, one, and two are completely
    full and new objects are added, then you end up with `OutOfMemoryException`, and
    your application will crash.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `fixed` keyword is used to ensure that objects referenced by pointers are
    not promoted by the garbage collector. Otherwise, the pointers would point to
    the wrong thing, causing bugs in the software.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: BSTR.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: IronPython, although other packages also exist.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Implement the disposable design pattern.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set large fields to `null` when the object is being disposed of. This makes
    them unreachable, and they are released faster than if they were reclaimed non-deterministically.
    You will do this outside of the `conditional` block. See [https://docs.microsoft.com/en-us/dotnet/standard/garbage-collection/implementing-dispose](https://docs.microsoft.com/en-us/dotnet/standard/garbage-collection/implementing-dispose).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Chapter 3*](B16617_03_Final_SB_Epub.xhtml#_idTextAnchor053), Predefined Data
    Types and Memory Allocations'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`bool`, `byte`, `char`, `DateTime`, `decimal`, `double`, `enum`, `float`, `int`,
    `long`, `sbyte`, `short`, `struct`, `value tuple`, `uint`, and `ulong`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`object`, `string`, `delegate`, and `dynamic`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create an instance of the `static` type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No. The same physical memory is used for both the stack and the heap.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Items are simply popped onto the stack when they are in use and immediately
    popped off the stack when they are no longer needed. Objects added to the heap
    need to be managed and object reference counters maintained. Items placed on the
    stack use both the stack and the heap, as items on the heap have pointer variables
    on the stack. So, there is more overhead to using the heap compared to the stack.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A string is placed on the heap. A variable is placed on the stack with the string’s
    memory address. When another variable is assigned the same string, it is given
    the address of the string. So, multiple items on the stack will be pointing to
    the same string. However, if you append anything to the string, a new string is
    then created on the heap with a new memory address. The variable that is assigned
    the new string will have the memory address that points to the new string on the
    heap, so the original string is never updated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Less than 80,000 bytes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 80,000 bytes or higher.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B16617_04_Final_SB_Epub.xhtml#_idTextAnchor072), Memory Management'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Three: generation 0, generation 1, and generation 2.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Objects less than 80,000 bytes are placed on the SOH.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Objects 80,000 bytes or more are placed on the LOH.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A strong reference is a reference that does not get garbage-collected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A weak reference is a reference that does get garbage-collected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Implement the `IDisposable` pattern.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unsubscribe event listeners when they are no longer used. Dispose of event publishers
    or set them to null when they are no longer used.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Marshal.ReleaseComObject(object)`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure that any allocated memory is deallocated. Use the `IDisposable` pattern
    to ensure that memory is cleaned up when the object is disposed of.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B16617_05_Final_SB_Epub.xhtml#_idTextAnchor085), Application
    Profiling and Tracing'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Applications, assemblies, namespaces, types, methods, and fields.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Maintainability index, cyclomatic complexity, depth of inheritance, class coupling,
    lines of source code, and lines of executable code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Dump location and time, the name of the process, processor architecture, exception
    information, OS and CLR version, and the names, versions, and physical paths of
    the loaded modules.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The name, path, optimized user code, symbol status, O (order), version, process,
    and AppDomain.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Microsoft Visual Studio 2022, and JetBrains dotTrace, dotMemory, and dotnet-counters.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We were able to list the .NET processes that can be monitored and counters that
    can be used to collect data. We obtained the .NET process identifiers and monitored
    them, and we collected, saved, and viewed data that we collected from the running
    .NET processes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B16617_06_Final_SB_Epub.xhtml#_idTextAnchor117), The .NET Collections'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`System.Collections`, `System.Collections.Generic`, `System.Collections.Concurrent`,
    and `System.Collections.Specialized`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Big O notation is used to determine algorithmic efficiency.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Algorithmic efficiency determines how time scales with respect to input.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Benchmarking showed that using `IList<T>` was faster than using `List<T>`, and
    so using `IList<T>` is preferred over using `List<T>`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can use either. What you choose depends upon your performance requirements
    and what you are trying to achieve. There are trade-offs between using collections
    and arrays. Understanding these trade-offs will help you choose which option you
    should apply to your code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Indexers enable objects in classes to be accessed in the same way as you access
    items in an array.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`IEnumerator<T>` is faster at iterating through in-memory collections than
    `IEnumerable<T>`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In terms of memory and speed performance, querying the database and obtaining
    the enumerator is the fastest way to query a database and iterate through the
    results according to the benchmarks.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `yield` keyword.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B16617_07_Final_SB_Epub.xhtml#_idTextAnchor139), LINQ Performance'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Use the index rather than the `Last()` call for direct access to the last element
    in a collection. Avoid using the `let` keyword in your LINQ queries. Convert a
    list to an array to perform group by, and then return an enumerator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The compiler generates more lines of code that take longer to run, and more
    memory is allocated at runtime than when the `let` keyword is not used.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Filter items starting with objects that have the least number of items, followed
    by the objects with an increasing number of items. Also, avoid using the `let`
    keyword.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Closures with parameters perform better than closures without parameters.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B16617_08_Final_SB_Epub.xhtml#_idTextAnchor152), File and Stream
    I/O'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Absolute, relative, UNC, and DOS device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the registry editor, set `HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\FileSystem\LongPathsEnabled`
    to `1`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The most efficient way to calculate the size of a directory is to get `DirectoryInfo`
    for the directory, followed by the call to `GetFileSystemInfos()`. You then iterate
    through the result, adding the length of each `FileInfo` object to get the directory’s
    size.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The most efficient method of moving files is to obtain `FileInfo` objects from
    the in-memory cache and then use the `FileInfo.MoveTo(string destination)` method
    to move the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you encounter a non-recoverable exception before you exit the application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`IOException`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Local, Local Cache, Roaming, Temporary, and C:\ProgramData.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Users may only install the software for themselves when prompted. This will
    result in each logged-on person using the software having their own copy of the
    data, with the data located in the Microsoft VirtualStore under their logged-on
    account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When multiple users log onto the same computer, and an application has been
    installed for just one user rather than all users, instead of the application
    data being stored under the centralized location of `C:\ProgramData`, it will
    be stored under Microsoft Virtual Store.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`C:\Users\%USERNAME%\AppData\Local\VirtualStore`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B16617_09_Final_SB_Epub.xhtml#_idTextAnchor168), Enhancing the
    Performance of Networked Applications'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Application layer, presentation layer, session layer, transport layer, network
    layer, data link layer, and physical layer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: HTTP, HTTPS, SSH, SSL, DHCP, DNS, FTP, TFTP, Telnet, SMTP, IMAP4, POP3, TCP,
    IP, UDP, Ethernet, and PPP.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: TCP enables the transmitting and receiving of data that is guaranteed to be
    received. UDP only allows the transmission of data that is not guaranteed to be
    received.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the developer tools that are built into your browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: gRPC is a cross-platform, cross-language, and cross-device framework for making
    remote procedure calls between applications. gRPC-Web is a proxy for browser-based
    RCP calls, as browser applications are unable to use gRPC directly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reduce the number of things the page is doing and the number of services the
    page calls. Reduce the size of images. Use file compression to reduce the size
    of files transmitted over a network. Cache network resources. Filter data on the
    server, divide it into pages, and return only the requested page of data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Chapter 10*](B16617_10_Final_SB_Epub.xhtml#_idTextAnchor189), Setting Up
    Our Database Project'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: N/A.
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 11*](B16617_11_Final_SB_Epub.xhtml#_idTextAnchor205), Benchmarking
    Relational Data Access Frameworks'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Executing a stored procedure with Dapper.NET.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Executing a raw SQL statement with Dapper.NET.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Executing a stored procedure with ADO.NET.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Executing a stored procedure with ADO.NET.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Executing a stored procedure with ADO.NET.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Not necessarily. A hybrid approach may be better because you can maximize your
    data access performance for the data operations in question by using the most
    performant method from the frameworks you have selected to work with.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Chapter 12*](B16617_12_Final_SB_Epub.xhtml#_idTextAnchor215), Responsive
    User Interfaces'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Configure the application for high-DPI awareness.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure the application to be long file path-aware.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a splash screen to the start of your application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the long-running task as a background task.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Memory caching and distributed caching.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use AJAX.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`WebSockets` and SignalR.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`SetSemanticFocus`, `Announce`, and `Font scaling`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the `BlazorWebView` component to a page and point it to the root of your
    Blazor application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`ProgressRing` and `ProgressBar`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Chapter 13*](B16617_13_Final_SB_Epub.xhtml#_idTextAnchor239), Distributed
    Systems'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Command query responsibility separation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We may want to use one model for commands and another model for queries.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Event-driven programming.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We use events to trigger the execution of a serverless function, such as an
    Azure Durable Function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A piece of software that is used to package an application and its dependencies
    that can be deployed to and executed in the cloud or on-premises.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To deploy third-party dependencies and legacy code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Microservices in the form of functions that only run when they are required
    and that usually run in response to an event trigger.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Serverless functions can scale rapidly, and you only pay for the time the functions
    run. This can save money when compared to containers that need to be running most
    of the time.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Extensions to Azure Functions that enable the writing of stateful functions
    in a serverless environment. We can also use them to define workflows.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Activity, Orchestrator, Entity, and Client.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Aggregator (stateful entities), fan-out/fan-in, function chaining, human interaction,
    and monitoring (actors).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An infrastructure-as-code platform for managing microservices.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can manage your microservices and their resources using C#, from creation
    to running, stopping, and deleting them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Chapter 14*](B16617_14_Final_SB_Epub.xhtml#_idTextAnchor254), Multi-Threaded
    Programming'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Running`, `suspended`, `wait`, `sleep`, `join`, and `stop`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You don’t – this API is now obsolete.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Foreground and background.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use `CancellationToken` to raise `TaskCanceledException` when a `CancellationTokenSource`
    operation times out.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Thread.Start()` or `Thread.Start(object)`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Chapter 15*](B16617_15_Final_SB_Epub.xhtml#_idTextAnchor266), Parallel Programming'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Task Parallel Library.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Parallel LINQ Library.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Performance Monitor aka `perfmon`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use `BenchmarkDotNet` to test the performance of various methods.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Chapter 16*](B16617_16_Final_SB_Epub.xhtml#_idTextAnchor280), Asynchronous
    Programming'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Task-based asynchronous pattern.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`CancellationToken`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`IProgress<T>`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An asynchronous method is declared, with the `async` keyword preceding the method
    name. The `await` keyword precedes an asynchronous operation and prevents the
    continuation of any further code until the asynchronous operation is complete.
    `Task` is what an asynchronous method returns. For `void` methods, the return
    type is `Task`, and for methods that return a value, the return type is `Task<T>`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new `CancelationTokenSource` and then set the method of cancelation,
    such as `CancelAfter(3000)`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pass an `IProgress<T>` type into an asynchronous method as a parameter and add
    event handlers for the `ProgressChanged` event. Alternatively, you can pass a
    single handler into the `Progress<T>` constructor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
