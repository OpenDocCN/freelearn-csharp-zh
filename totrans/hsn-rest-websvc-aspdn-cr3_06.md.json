["```cs\nusing System.Collections.Generic;\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace SampleAPI.Controllers\n{\n    [ApiController]\n    [Route(\"[controller]\")]\n    public class ValuesController : ControllerBase\n    {\n        public string Get()\n        {\n            return string.Empty;\n        }\n    }\n}\n```", "```cs\ndotnet run\n```", "```cs\nnamespace SampleAPI\n{\n    public interface IPaymentService\n    {\n        string GetMessage();\n    }\n\n    public class PaymentService : IPaymentService\n    {\n        public string GetMessage() => \"Pay me!\";\n    }\n\n    public class ExternalPaymentService : IPaymentService\n    {\n        public string GetMessage() => \"Pay me!, I'm an external service!\";\n    }\n}\n```", "```cs\n      public class Startup\n     {\n           // ...\n\n         public void ConfigureServices(IServiceCollection services)\n         {\n services\n                    .AddTransient<IPaymentService, PaymentService>() .AddControllers();       \n         }\n\n           // ...\n\n     }\n```", "```cs\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\n\nnamespace SampleAPI\n{\n    public class Startup\n    {\n\n        public Startup(IConfiguration configuration, \n IWebHostEnvironment env)\n        {\n            Configuration = configuration;\n            Environment = env;\n        }\n\n        public IConfiguration Configuration { get; }\n\n        public IWebHostEnvironment Environment { get; }\n\n        public void ConfigureServices(IServiceCollection services)\n        {\n            if (Environment.IsDevelopment())\n            {\n                services.AddTransient<IPaymentService, PaymentService>();\n            }\n            else\n            {\n                services.AddTransient<IPaymentService, \n ExternalPaymentService>();\n            }\n        }\n\n        // ...\n    }\n}\n```", "```cs\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace SampleAPI.Controllers\n{\n    [ApiController]\n    [Route(\"[controller]\")]\n    public class ValuesController : ControllerBase\n    {\n        private IPaymentService paymentService { get; set; }\n\n        public ValuesController(IPaymentService paymentService)\n        {\n            this.paymentService = paymentService;\n        }\n\n        public string Get()\n        {\n            return paymentService.GetMessage();\n        }\n    }\n}\n```", "```cs\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace SampleAPI.Controllers\n{\n    [ApiController]\n    [Route(\"[controller]\")]\n    public class ValuesController : ControllerBase\n    {\n        [HttpGet]\n        public ActionResult<string> Get(\n            [FromServices]IPaymentService paymentService)\n        {\n            return paymentService.GetMessage();\n        }\n    }\n}\n```", "```cs\n  namespace Middleware\n {\n     public class MyMiddleware\n     {\n         readonly RequestDelegate _next;\n\n         public MyMiddleware(RequestDelegate next)\n         {\n             _next = next;\n         }\n\n         public async Task InvokeAsync(HttpContext context, \n IPaymentService paymentService)\n         {\n             Console.WriteLine(paymentService.GetMessage());\n\n             await _next(context);\n         }\n     }\n } \n```"]