["```cs\nvoid Update () {\n     if (some input happened){\n          do something\n     }\n}\n```", "```cs\nvoid OnEnable() {\n     subscribe DoSomething() to the event\n}\nprivate DoSomething() {\n     do something\n}\nvoid OnDisable() {\n     unsubscribe DoSomething() from the event\n}\n```", "```cs\nusing UnityEngine.InputSystem;\n```", "```cs\n[SerializeField] private InputActionAsset actions;\n```", "```cs\nprivate InputAction playerAction;\n```", "```cs\nplayerMoveAction = actions.FindActionMap(\"Player\").FindAction(\"Move\");\n```", "```cs\nprivate void OnEnable()\n{\n    actions.FindActionMap(\"Player\").Enable();\n}\nprivate void OnDisable()\n{\n    actions.FindActionMap(\"Player\").Disable();\n}\n```", "```cs\nactions.FindActionMap(\"Player\").FindAction(\"Jump\").performed += OnJump;\n```", "```cs\nVector2 moveVector = playerMoveAction.ReadValue<Vector2>();\n```", "```cs\n    void Update()\n    {\n        movement = Input.GetAxis(\"Horizontal\");\n        catRigidbody.velocity = new Vector2(speed * movement, catRigidbody.velocity.y);\n        if (grounded && Input.GetButtonDown(\"Jump\"))\n        {\n            catRigidbody.AddForce(new Vector2(catRigidbody.velocity.x, jumpHeight));\n        }\n    }\n    ```", "```cs\n    InvalidOperationException: You are trying to read Input using the UnityEngine.Input class, but you have switched active Input handling to Input System package in Player Settings.\n    InputManagerBasicCharacterController.Update () (at Assets/Scripts/InputManagerBasicCharacterController.cs:20)\n    ```", "```cs\n    using UnityEngine.InputSystem;\n    ```", "```cs\n    public void OnJump(InputAction.CallbackContext context) {\n    }\n    ```", "```cs\n    if (grounded && Input.GetButtonDown(\"Jump\"))\n    {\n        catRigidbody.AddForce(new Vector2(catRigidbody.velocity.x, jumpHeight));\n    }\n    ```", "```cs\n    public void OnJump(InputAction.CallbackContext context) {\n            if (grounded) {\n                catRigidbody.AddForce(new Vector2(catRigidbody.velocity.x, jumpHeight));\n            }\n    }\n    ```", "```cs\n    public void OnMove(InputAction.CallbackContext context) {¶}\n    ```", "```cs\n    private Vector2 moveVector = new Vector2();\n    ```", "```cs\n    movement = Input.GetAxis(\"Horizontal\");\n    moveVector = context.ReadValue<Vector2>();\n    ```", "```cs\n    void Update()\n    {\n        movement = Input.GetAxis(\"Horizontal\");\n        catRigidbody.velocity = new Vector2(speed * movement, catRigidbody.velocity.y);\n    }\n    ```", "```cs\n    Movement = Input.GetAxis(\"Horizontal\");\n    ```", "```cs\n    catRigidbody.velocity = new Vector2(speed * moveVector.x, catRigidbody.velocity.y);\n    ```", "```cs\n    [SerializeField] private InputActionAsset actions;\n    ```", "```cs\n    private void OnEnable()\n    {\n        actions.FindActionMap(\"Player\").Enable();\n    }\n    private void OnDisable()\n    {\n        actions.FindActionMap(\"Player\").Disable();\n    }\n    ```", "```cs\n    actions.FindActionMap(\"Player\").FindAction(\"Jump\").performed += OnJump;\n    ```", "```cs\n    actions.FindActionMap(\"Player\").FindAction(\"Jump\").performed -= OnJump;\n    ```", "```cs\n    private InputAction playerMoveAction;\n    ```", "```cs\n    playerMoveAction = actions.FindActionMap(\"Player\").FindAction(\"Move\");\n    ```", "```cs\n    moveVector = context.ReadValue<Vector2>();\n    ```", "```cs\n    void Update()\n    {\n        moveVector = playerMoveAction.ReadValue<Vector2>();\n        catRigidbody.velocity = new Vector2(speed * moveVector.x, catRigidbody.velocity.y);\n    }\n    ```"]