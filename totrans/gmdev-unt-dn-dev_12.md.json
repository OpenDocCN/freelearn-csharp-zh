["```cs\nusing UnityEngine;\npublic class Monster : MonoBehaviour\n{\n    # region Data\n    private string _name;\n    private float _hp;\n    private Vector3 _position;\n    private bool _isDead;\n    #endregion\n    #region Behavior\n    public void Attack(Monster target){}\n    public void Move(float speed){}\n    public void Die(){}\n    #endregion\n}\n```", "```cs\npublic class Creature : MonoBehaviour\n{\n    #region Data\n\n    private string _name;\n    private float _hp;\n    private Vector3 _position;\n    private bool _isDead;\n\n    #endregion\n}\npublic class Monster : Creature\n{\n    # region Data\n    private bool _canFly;\n    #endregion\n    #region Behavior\n    public void Attack(Creature target){}\n    public void Move(float speed){}\n    public void Die(){}\n\n    #endregion\n}\n```", "```cs\n    public void Update()\n    {\n        for (var i = 0; i < _monsters.count; i++) \n        { \n            _monsters[i].Move(speed); \n        }\n}\n```", "```cs\n    void Start()\n    {\n        var url = \"https://jiadongchen.com\";\n        StartCoroutine(DownloadFile(url));\n    }\n    private static IEnumerator DownloadFile(string url)\n    {\n        var request = UnityWebRequest.Get(url);\n        request.timeout = 10;\n        yield return request.SendWebRequest();\n        if (request.error != null)\n        {\n            Debug.LogErrorFormat(\"error: {0}, url is: {1}\",\n              request.error, url);\n            request.Dispose();\n            yield break;\n        }\n        if (request.isDone)\n        {\n            Debug.Log(request.downloadHandler.text);\n            request.Dispose();\n            yield break;\n        }\n    }\n```", "```cs\nusing System.Threading.Tasks;\nusing UnityEngine;\npublic class AsyncExceptionTest : MonoBehaviour\n{\n    private async void Start()\n    {\n        await ScaleObjectAsync();\n    }\n    private async Task<Vector3> ScaleObjectAsync()\n    {\n        return await Task.Run(() => transform.localScale = new\n          Vector3(2, 2, 2));\n    }\n}\n```", "```cs\n    private async Task ScaleObjectAsync()\n    {\n        var newScale = Vector3.zero;\n        await Task.Run(() => newScale = CalculateSize());\n        transform.localScale = newScale;\n    }\n    private Vector3 CalculateSize()\n    {\n        Debug.Log(\"Threads\");\n        return new Vector3(2, 2, 2);\n    }\n```", "```cs\n    using System.Collections;\n    using System.Collections.Generic;\n    using UnityEngine;\n    public class CarSpawner : MonoBehaviour\n    {\n    [SerializeField] \n    private List<GameObject> _carPrefabs;\n    [SerializeField] \n    private float _rightSide, _leftSide, _frontSide,\n      _backSide;\n        private void Update()\n        {\n            if(Input.GetKeyDown(KeyCode.Space))\n            {\n                CreateCars(10000);\n            }\n        }\n        private void CreateCars(int count)\n        {\n            for(var i = 0; i < count; i++)\n            {\n                var posX = Random.Range(_rightSide,\n                  _leftSide);\n                var posZ = Random.Range(_frontSide,\n                  _backSide);\n                var pos = new Vector3(posX, 0f, posZ);\n                var rot = Quaternion.Euler(0f, 0f, 0f);\n                int index = Random.Range(0,\n                  _carPrefabs.Count);\n                var carPrefab = _carPrefabs[index];\n                var carInstance = Instantiate(carPrefab, pos,\n                  rot);\n            }\n        }\n    }\n    ```", "```cs\n    using UnityEngine;\n    public class Movement : MonoBehaviour\n    {\n    [SerializeField] \n    private float _speed;\n        private void Update()\n        {\n            transform.position += transform.forward *\n              _speed * Time.deltaTime;\n        }\n    }\n    ```", "```cs\nusing Unity.Jobs;\npublic struct SampleJob : IJobParallelFor\n{\n    public void Execute(int index)\n    {\n        throw new System.NotImplementedException();\n    }\n}\n```", "```cs\nSampleJob job = new SampleJob();\nJobHandle handle = job.Schedule();\nhandle.Complete();\n```", "```cs\n    using UnityEngine;\n    using UnityEngine.Jobs;\n    public struct MotionJob : IJobParallelForTransform\n    {\n        public float Speed, DeltaTime;\n        public Vector3 Direction;\n        public void Execute(int index, TransformAccess\n     transform)\n        {\n            transform.position += Direction * Speed *\n              DeltaTime;\n        }\n    }\n    ```", "```cs\n    using UnityEngine;\n    using UnityEngine.Jobs;\n    using Unity.Jobs;\n    using System.Collections.Generic;\n    public class JobsManager : MonoBehaviour\n    {\n    [SerializeField] \n    private List<GameObject> _carPrefabs;\n    [SerializeField] \n    private float _rightSide, _leftSide, _frontSide,\n      _backSide, _speed;\n        private TransformAccessArray _transArrays;\n        private JobHandle _jobHandle;\n        private MotionJob _motionJob;\n        private void Start()\n        {\n            _transArrays = new\n              TransformAccessArray(10000);\n            _jobHandle = new JobHandle();\n        }\n        private void Update()\n        {\n            _jobHandle.Complete();\n            if(Input.GetKeyDown(KeyCode.Space))\n            {\n                CreateCars(10000);\n            }\n            // Create the Job\n            _motionJob = new MotionJob()\n            {\n                DeltaTime = Time.deltaTime,\n                Speed = _speed,\n                Direction = Vector3.forward\n            };\n            // Provide the transform data and schedule the\n               Job.\n            _jobHandle = _motionJob.Schedule(_transArrays);\n        }\n    ```", "```cs\n        private void CreateCars(int count)\n        {\n            _jobHandle.Complete();\n            _transArrays.capacity = _transArrays.length +\n              count;\n            for (var i = 0; i < count; i++)\n            {\n                var posX = Random.Range(_rightSide,\n                  _leftSide);\n                var posZ = Random.Range(_frontSide,\n                  _backSide);\n                var pos = new Vector3(posX, 0f, posZ);\n                var rot = Quaternion.Euler(0f, 0f, 0f);\n                int index = Random.Range(0,\n                  _carPrefabs.Count);\n                var carPrefab = _carPrefabs[index];\n                var carInstance = Instantiate(carPrefab,\n                  pos, rot);\n                _transArrays.Add(carInstance.transform);\n            }\n    }\n    ```", "```cs\nvar entityManager =\n  World.DefaultGameObjectInjectionWorld.EntityManager;\n```", "```cs\nComponentType[] types;\nvar archetype = entityManager.CreateArchetype(types);\n```", "```cs\nvar entityArray = new NativeArray<Entity>(count,\n  Allocator.Temp);\nentityManager.CreateEntity(entityArchetype, entityArray);\n```", "```cs\nusing Unity.Entities;\npublic struct SampleComponent : IComponentData\n{\n    public int Value;\n}\n```", "```cs\nusing Unity.Entities;\n[GenerateAuthoringComponent]\npublic struct SampleComponent : IComponentData\n{\n    public int Value;\n}\n```", "```cs\nusing Unity.Entities;\npublic class SampleSystem : SystemBase\n{\n    protected override void OnUpdate()\n    {\n        Entities.ForEach((ref SampleComponent sample) =>\n        {\n            sample.Value = -1;\n        }).\n        ScheduleParallel();\n    }\n}\n```", "```cs\n    using Unity.Entities;\n    public struct CarSpeed : IComponentData\n    {\n        public float SpeedValue;\n    }\n    ```", "```cs\n    using UnityEngine;\n    using Unity.Collections;\n    using Unity.Mathematics;\n    using Unity.Entities;\n    using Unity.Rendering;\n    using Unity.Transforms;\n    using Random = UnityEngine.Random;\n    public class CarsManager : MonoBehaviour\n    {\n    [SerializeField] \n    private Mesh _mesh;\n    [SerializeField] \n    private Material _material;\n    [SerializeField] \n    private int _count = 10000;\n    [SerializeField] \n    private float _rightSide, _leftSide, _frontSide,\n      _backSide, _speed;\n        private void Start()\n        {\n            var entityManager =\n              World.DefaultGameObjectInjectionWorld\n              .EntityManager;\n            // Create entity achetype\n            var entityArchetype =\n              entityManager.CreateArchetype(\n                typeof(CarSpeed),\n                typeof(Translation),\n                typeof(LocalToWorld),\n                typeof(RenderMesh),\n                typeof(RenderBounds));\n            var entityArray = new\n              NativeArray<Entity>(_count, Allocator.Temp);\n\n            // Create entities\n            entityManager.CreateEntity(entityArchetype,\n              entityArray);\n            for (int i = 0; i < entityArray.Length; i++)\n            {\n              var entity = entityArray[i];\n              entityManager.SetComponentData(entity, new\n                CarSpeed { SpeedValue = 1f });\n              entityManager.SetComponentData(entity, new\n                Translation { Value = new\n                float3(Random.Range(_rightSide,\n                _leftSide),0,\n                Random.Range(_frontSide, _backSide)) });\n         entityManager.SetSharedComponentData(entity, new\n           RenderMesh\n                {\n                    mesh = _mesh,\n                    material = _material\n                });\n            }\n            entityArray.Dispose();\n            _information.CarCounts = _count;\n        }\n    }\n    ```", "```cs\n    using Unity.Entities;\n    using Unity.Transforms;\n    public class CarMotionSystem : SystemBase\n    {\n        protected override void OnUpdate()\n        {\n            var deltaTime = Time.DeltaTime;\n            Entities.ForEach((ref Translation translation,\n              ref CarSpeed carSpeed) =>\n            {\n                translation.Value.z += carSpeed.SpeedValue\n                  * deltaTime;\n            }).\n            ScheduleParallel();\n        }\n    }\n    ```", "```cs\nusing Unity.Jobs;\nusing Unity.Burst;\n[BurstCompile]\npublic struct SampleJobWithBurst : IJobParallelFor\n{\n    public void Execute(int index)\n    {\n        throw new System.NotImplementedException();\n    }\n}\n```"]