["```cs\nprivate async Task HandleUpdate(Guid classifiedAdId, Action<ClassifiedAd> operation)  \n{  \n    var classifiedAd = await _store.Load<ClassifiedAd>(\n        classifiedAdId.ToString());  \n    if (classifiedAd == null)  \n        throw new InvalidOperationException(  \n            $\"Entity with id {classifiedAdId} cannot be found\");  \n\n    operation(classifiedAd);  \n\n    await _store.Save(classifiedAd);  \n}\n```", "```cs\n[Route(\"/api/order/pay/credit/{orderId}\")]  \npublic async Task TakeOnCustomerCredit(int orderId)  \n{  \n    using (var context = new CommerceContext())  \n    using (context.Database.BeginTransaction())  \n    {  \n        var order = await context.Orders  \n            .Where(x => x.Id == orderId).FirstAsync();  \n\n        var amount = order.UnpaidAmount;  \n\n        var customer = order.Customer;  \n        if (customer.Credit < amount)  \n            throw new InvalidOperationException(\"Not enough credit\");  \n\n        customer.Credit -= amount;  \n        order.PaidAmount += amount;  \n        order.UnpaidAmount -= amount;  \n        customer.TotalSpent += amount;  \n\n        if (customer.TotalSpent > CommerceConstants.PreferredLimit)  \n            customer.Preferred = true;  \n\n        order.IsPaid = order.UnpaidAmount == 0;  \n\n        await context.SaveChangesAsync();  \n    }  \n}\n```", "```cs\npublic async Task ShipOrderLine(int orderLineId)  \n{  \n    using (var context = new CommerceContext())  \n    using (context.Database.BeginTransaction())  \n    {  \n        var orderLine = await context.OrderLines  \n            .Where(x => x.Id == orderLineId)\n            .FirstAsync();  \n\n        orderLine.IsShipped = true;  \n\n        orderLine.Order.DeliveryStatus =  \n            orderLine.Order.OrderLines.All(x => x.IsShipped)  \n                ? DeliveryStatus.Shipped  \n                : DeliveryStatus.PartiallyShipped;  \n\n        await context.SaveChangesAsync();  \n    }  \n}\n```", "```cs\npublic async Task ShipOrderLine(int orderId, int orderLineId)  \n{  \n    var order = await _orderRepository.Get(orderId);  \n    order.ShipOrderLine(orderLineId);  \n    await _orderRepository.Commit();  \n}\n```", "```cs\npublic void ShipOrderLine(int orderLineId)  \n{  \n    var orderLine = OrderLines.First(x => x.Id == orderLineId);  \n\n    orderLine.IsShipped = true;  \n\n    DeliveryStatus =  \n        OrderLines.All(x => x.IsShipped)  \n            ? DeliveryStatus.Shipped  \n            : DeliveryStatus.PartiallyShipped;  \n}\n```", "```cs\npublic interface ICustomerCreditService\n{\n    Task<bool> EnsureEnoughCredit(int customerId, decimal amount);\n}\n```", "```cs\npublic class OrderHandlingApplicationService\n{\n    private readonly IOrderRepository _orderRepository;\n    private readonly ICustomerCreditService _customerCreditService;\n\n    public OrderHandlingApplicationService(\n        IOrderRepository orderRepository, \n        ICustomerCreditService customerCreditService)\n    {\n        _orderRepository = orderRepository;\n        _customerCreditService = customerCreditService;\n    }\n\n    public async Task Handle(TakeOnCustomerCredit command)\n    {\n        var order = await _orderRepository.Get(command.OrderId);\n        var hasEnoughCredit = \n            await _customerCreditService.EnsureEnoughCredit(\n                command.CustomerId,\n                order.UnpaidAmount);\n        if (!hasEnoughCredit)\n            throw new DomainException(\n                $\"Not enough credit for order {command.OrderId}\");\n\n        order.TakeOnCredit();\n    }\n}\n```", "```cs\npublic class Order : Aggregate<OrderId>\n{\n    public async Task TakeOnCredit(ICustomerCreditService customerCreditService)\n    {\n        var hasEnoughCredit = \n            await _customerCreditService.EnsureEnoughCredit(\n                command.CustomerId,\n                order.UnpaidAmount);\n        if (!hasEnoughCredit)\n            throw new DomainException(\n                $\"Not enough credit for order {command.OrderId}\");\n\n        // actual domain logic here\n    }\n}\n```", "```cs\npublic async Task Handle(TakeOnCustomerCredit command)\n{\n    var order = await _orderRepository.Get(command.OrderId);\n    await order.TakeOnCredit(_customerCreditService);\n}\n```", "```cs\nnamespace Marketplace.Domain  \n{  \n    public class ClassifiedAd  \n    {  \n        public ClassifiedAdId Id { get; }  \n\n        public ClassifiedAd(ClassifiedAdId id, UserId ownerId)  \n        {  \n            Id = id;  \n            OwnerId = ownerId;  \n            State = ClassifiedAdState.Inactive;  \n        }  \n\n        public void SetTitle(ClassifiedAdTitle title) => Title = title;  \n\n        public void UpdateText(ClassifiedAdText text) => Text = text;  \n\n        public void UpdatePrice(Price price) => Price = price;  \n\n        public void RequestToPublish()  \n        {  \n            if (Title == null)  \n                throw new InvalidEntityStateException(this, \n                    \"title cannot be empty\");  \n\n            if (Text == null)  \n                throw new InvalidEntityStateException(this, \n                    \"text cannot be empty\");  \n\n            if (Price?.Amount == 0)  \n                throw new InvalidEntityStateException(this, \n                    \"price cannot be zero\");  \n\n            State = ClassifiedAdState.PendingReview;  \n        }  \n\n        public UserId OwnerId { get; }  \n        public ClassifiedAdTitle Title { get; private set; }  \n        public ClassifiedAdText Text { get; private set; }  \n        public Price Price { get; private set; }  \n        public ClassifiedAdState State { get; private set; }  \n        public UserId ApprovedBy { get; private set; }  \n\n        public enum ClassifiedAdState  \n        {  \n            PendingReview,  \n            Active,  \n            Inactive,  \n            MarkedAsSold  \n        }  \n    }  \n}\n```", "```cs\nusing System;  \n\nnamespace Marketplace.Domain  \n{  \n    public class InvalidEntityStateException : Exception  \n    {  \n        public InvalidEntityStateException(object entity, string \n        message)  \n            : base($\"Entity {entity.GetType().Name}\" +\n              $\"state change rejected, {message}\")  \n        {  \n        }  \n    }  \n}\n```", "```cs\nnamespace Marketplace.Domain  \n{  \n    public class ClassifiedAd  \n    {  \n        public ClassifiedAdId Id { get; }  \n\n        public ClassifiedAd(ClassifiedAdId id, UserId ownerId)  \n        {  \n            Id = id;  \n            OwnerId = ownerId;  \n            State = ClassifiedAdState.Inactive;  \n            EnsureValidState();  \n        }  \n\n        public void SetTitle(ClassifiedAdTitle title)  \n        {  \n            Title = title;  \n            EnsureValidState();  \n        }  \n\n        public void UpdateText(ClassifiedAdText text)  \n        {  \n            Text = text;  \n            EnsureValidState();  \n        }  \n\n        public void UpdatePrice(Price price)  \n        {  \n            Price = price;  \n            EnsureValidState();  \n        }  \n\n        public void RequestToPublish()  \n        {  \n            State = ClassifiedAdState.PendingReview;  \n            EnsureValidState();  \n        }  \n\n        private void EnsureValidState()\n        {\n            var valid =\n                Id != null &&\n                OwnerId != null &&\n                (State switch\n                {\n                    ClassifiedAdState.PendingReview =>\n                        Title != null\n                        && Text != null\n                        && Price?.Amount > 0,\n                    ClassifiedAdState.Active =>\n                        Title != null\n                        && Text != null\n                        && Price?.Amount > 0\n                        && ApprovedBy != null,\n                    _ => true\n                });\n\n            if (!valid)\n                throw new InvalidEntityStateException(\n                    this, $\"Post-checks failed in state {State}\");\n        }\n\n        public UserId OwnerId { get; }  \n        public ClassifiedAdTitle Title { get; private set; }  \n        public ClassifiedAdText Text { get; private set; }  \n        public Price Price1 { get; private set; }  \n        public ClassifiedAdState State { get; private set; }  \n        public UserId ApprovedBy { get; private set; }  \n\n        public enum ClassifiedAdState  \n        {  \n            PendingReview,  \n            Active,  \n            Inactive,  \n            MarkedAsSold  \n        }  \n    }  \n\n}\n```", "```cs\nusing System;  \nusing Marketplace.Domain;  \nusing Xunit;  \n\nnamespace Marketplace.Tests  \n{  \n    public class ClassifiedAd_Publish_Spec  \n    {  \n        private readonly ClassifiedAd _classifiedAd;  \n\n        public ClassifiedAd_Publish_Spec()  \n        {  \n            _classifiedAd = new ClassifiedAd(  \n                new ClassifiedAdId(Guid.NewGuid()),   \n                new UserId(Guid.NewGuid()));  \n        }  \n\n        [Fact]  \n        public void Can_publish_a_valid_ad()  \n        {  \n            _classifiedAd.SetTitle(\n                ClassifiedAdTitle.FromString(\"Test ad\"));  \n            _classifiedAd.UpdateText(\n                ClassifiedAdText.FromString(\"Please buy my stuff\"));  \n            _classifiedAd.UpdatePrice(  \n                Price.FromDecimal(100.10m, \"EUR\", \n                    new FakeCurrencyLookup()));  \n\n            _classifiedAd.RequestToPublish();  \n\n            Assert.Equal(\n                ClassifiedAd.ClassifiedAdState.PendingReview,  \n                _classifiedAd.State);  \n        }  \n\n        [Fact]  \n        public void Cannot_publish_without_title()  \n        {  \n            _classifiedAd.UpdateText(\n                ClassifiedAdText.FromString(\"Please buy my stuff\"));  \n            _classifiedAd.UpdatePrice(  \n                Price.FromDecimal(100.10m, \"EUR\", \n                    new FakeCurrencyLookup()));  \n\n            Assert.Throws<InvalidEntityStateException>(\n                () => _classifiedAd.RequestToPublish());  \n        }  \n\n        [Fact]  \n        public void Cannot_publish_without_text()  \n        {  \n            _classifiedAd.SetTitle(\n                ClassifiedAdTitle.FromString(\"Test ad\"));  \n            _classifiedAd.UpdatePrice(  \n                Price.FromDecimal(100.10m, \"EUR\", \n                    new FakeCurrencyLookup()));  \n\n            Assert.Throws<InvalidEntityStateException>(\n                () => _classifiedAd.RequestToPublish());  \n        }  \n\n        [Fact]  \n        public void Cannot_publish_without_price()  \n        {  \n            _classifiedAd.SetTitle(\n                ClassifiedAdTitle.FromString(\"Test ad\"));  \n            _classifiedAd.UpdateText(\n                ClassifiedAdText.FromString(\"Please buy my stuff\"));  \n\n            Assert.Throws<InvalidEntityStateException>(\n                () => _classifiedAd.RequestToPublish());  \n        }  \n\n        [Fact]  \n        public void Cannot_publish_with_zero_price()  \n        {  \n            _classifiedAd.SetTitle(\n                ClassifiedAdTitle.FromString(\"Test ad\"));  \n            _classifiedAd.UpdateText(\n                ClassifiedAdText.FromString(\"Please buy my stuff\"));  \n            _classifiedAd.UpdatePrice(  \n                Price.FromDecimal(0.0m, \"EUR\", \n                    new FakeCurrencyLookup()));  \n\n            Assert.Throws<InvalidEntityStateException>(\n                () => _classifiedAd.RequestToPublish());  \n        }  \n    }  \n}\n```", "```cs\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Marketplace.Framework\n{\n    public abstract class AggregateRoot<TId>\n        where TId : Value<TId>\n    {\n        public TId Id { get; protected set; }\n\n        protected abstract void When(object @event);\n\n        private readonly List<object> _changes;\n\n        protected AggregateRoot() => _changes = new List<object>();\n\n        protected void Apply(object @event)\n        {\n            When(@event);\n            EnsureValidState();\n            _changes.Add(@event);\n        }\n\n        public IEnumerable<object> GetChanges() \n            => _changes.AsEnumerable();\n\n        public void ClearChanges() => _changes.Clear();\n\n        protected abstract void EnsureValidState();\n    }\n}\n```", "```cs\nusing Marketplace.Framework;\nusing static Marketplace.Domain.Events;\n\nnamespace Marketplace.Domain\n{\n    public class ClassifiedAd : Entity<ClassifiedAdId>\n    {\n        public ClassifiedAdId Id { get; private set; }\n        public UserId OwnerId { get; private set; }\n        public ClassifiedAdTitle Title { get; private set; }\n        public ClassifiedAdText Text { get; private set; }\n        public Price Price { get; private set; }\n        public ClassifiedAdState State { get; private set; }\n        public UserId ApprovedBy { get; private set; }\n\n        public ClassifiedAd(ClassifiedAdId id, UserId ownerId) =>\n            Apply(new ClassifiedAdCreated\n            {\n                Id = id,\n                OwnerId = ownerId\n            });\n\n        public void SetTitle(ClassifiedAdTitle title) =>\n            Apply(new ClassifiedAdTitleChanged\n            {\n                Id = Id,\n                Title = title\n            });\n\n        public void UpdateText(ClassifiedAdText text) =>\n            Apply(new ClassifiedAdTextUpdated\n            {\n                Id = Id,\n                AdText = text\n            });\n\n        public void UpdatePrice(Price price) =>\n            Apply(new ClassifiedAdPriceUpdated\n            {\n                Id = Id,\n                Price = price.Amount,\n                CurrencyCode = price.Currency.CurrencyCode\n            });\n\n        public void RequestToPublish() =>\n            Apply(new ClassidiedAdSentForReview {Id = Id});\n\n        protected override void When(object @event)\n        {\n            switch (@event)\n            {\n                case ClassifiedAdCreated e:\n                    Id = new ClassifiedAdId(e.Id);\n                    OwnerId = new UserId(e.OwnerId);\n                    State = ClassifiedAdState.Inactive;\n                    break;\n                case ClassifiedAdTitleChanged e:\n                    Title = new ClassifiedAdTitle(e.Title);\n                    break;\n                case ClassifiedAdTextUpdated e:\n                    Text = new ClassifiedAdText(e.AdText);\n                    break;\n                case ClassifiedAdPriceUpdated e:\n                    Price = new Price(e.Price, e.CurrencyCode);\n                    break;\n                case ClassidiedAdSentForReview _:\n                    State = ClassifiedAdState.PendingReview;\n                    break;\n            }\n        }\n\n        protected override void EnsureValidState()\n        {\n            var valid =\n                Id != null &&\n                OwnerId != null &&\n                (State switch\n                {\n                    ClassifiedAdState.PendingReview =>\n                        Title != null\n                        && Text != null\n                        && Price?.Amount > 0,\n                    ClassifiedAdState.Active =>\n                        Title != null\n                        && Text != null\n                        && Price?.Amount > 0\n                        && ApprovedBy != null,\n                    _ => true\n                });\n\n            if (!valid)\n                throw new InvalidEntityStateException(\n                    this, $\"Post-checks failed in state {State}\");\n        }\n\n        public enum ClassifiedAdState\n        {\n            PendingReview,\n            Active,\n            Inactive,\n            MarkedAsSold\n        }\n    }\n}\n```", "```cs\nusing System;\nusing System.Collections.Generic;\nusing Marketplace.Framework;\n\nnamespace Marketplace.Domain\n{\n    public class Picture : Entity<PictureId>\n    {\n        internal PictureSize Size { get; set; }\n        internal Uri Location { get; set; }\n        internal int Order { get; set; }\n\n        protected override void When(object @event)\n        {\n        }\n    }\n\n    public class PictureId : Value<PictureId>\n    {\n        public PictureId(Guid value) => Value = value;\n\n        public Guid Value { get; }\n    }\n}\n```", "```cs\npublic void AddPicture(Uri pictureUri, PictureSize size) =>\n    Apply(new Events.PictureAddedToAClassifiedAd\n    {\n        PictureId = new Guid(),\n        ClassifiedAdId = Id,\n        Url = pictureUri.ToString(),\n        Height = size.Height,\n        Width = size.Width\n    });\n```", "```cs\nnamespace Marketplace.Domain\n{\n    public static class Events\n    {\n        // all events are still here\n\n        public class PictureAddedToAClassifiedAd\n        {\n            public Guid ClassifiedAdId { get; set; }\n            public Guid PictureId { get; set; }\n            public string Url { get; set; }\n            public int Height { get; set; }\n            public int Width { get; set; }\n        }\n    }\n}\n```", "```cs\nusing System;\nusing Marketplace.Framework;\n\nnamespace Marketplace.Domain\n{\n    public class PictureSize : Value<PictureSize>\n    {\n        public int Width { get; internal set; }\n        public int Height { get; internal set; }\n\n        public PictureSize(int width, int height)\n        {\n            if (Width <= 0)\n                throw new ArgumentOutOfRangeException(\n                    nameof(width), \n                    \"Picture width must be a positive number\");\n\n            if (Height <= 0)\n                throw new ArgumentOutOfRangeException(\n                    nameof(height), \n                    \"Picture height must be a positive number\");\n\n            Width = width;\n            Height = height;\n        }\n\n        internal PictureSize() { }\n    }\n}\n```", "```cs\nprotected override void When(object @event)\n{\n    switch (@event)\n    {\n        // previous cases as before, removed for brevity\n\n        // picture\n        case Events.PictureAddedToAClassifiedAd e:\n            var newPicture = new Picture{\n                Size = new PictureSize(e.Height, e.Width),\n                Location = new Uri(e.Url),\n                Order = Pictures.Max(x => x.Order) + 1\n            };\n            Pictures.Add(newPicture);\n            break;\n    }\n}\n```", "```cs\n    public class ClassifiedAd : AggregateRoot<ClassifiedAdId>\n    {\n        // existing code\n\n        public ClassifiedAd(ClassifiedAdId id, UserId ownerId)\n        {\n            Pictures = new List<Picture>(); // <-- this is the new line\n            Apply(new Events.ClassifiedAdCreated\n            {\n                Id = id,\n                OwnerId = ownerId\n            });\n        }\n\n        public List<Picture> Pictures { get; private set; }\n\n        // existing code\n}\n```", "```cs\nnamespace Marketplace.Framework\n{\n    public interface IInternalEventHandler\n    {\n        void Handle(object @event);\n    }\n}\n```", "```cs\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Marketplace.Framework\n{\n    public abstract class AggregateRoot<TId> \n        : IInternalEventHandler where TId : Value<TId>\n    {\n        public TId Id { get; protected set; }\n\n        protected abstract void When(object @event);\n\n        private readonly List<object> _changes;\n\n        protected AggregateRoot() => _changes = new List<object>();\n\n        protected void Apply(object @event)\n        {\n            When(@event);\n            EnsureValidState();\n            _changes.Add(@event);\n        }\n\n        public IEnumerable<object> GetChanges() \n            => _changes.AsEnumerable();\n\n        public void ClearChanges() => _changes.Clear();\n\n        protected abstract void EnsureValidState();\n\n        protected void ApplyToEntity(\n            IInternalEventHandler entity, \n            object @event)\n            => entity?.Handle(@event);\n\n        void IInternalEventHandler.Handle(object @event) \n            => When(@event);\n    }\n}\n```", "```cs\nusing System;\n\nnamespace Marketplace.Framework\n{\n    public abstract class Entity<TId> \n        : IInternalEventHandler where TId : Value<TId>\n    {\n        private readonly Action<object> _applier;\n\n        public TId Id { get; protected set; }\n\n        protected Entity(Action<object> applier) \n            => _applier = applier;\n\n        protected abstract void When(object @event);\n\n        protected void Apply(object @event)\n        {\n            When(@event);\n            _applier(@event);\n        }\n\n        void IInternalEventHandler.Handle(object @event) \n            => When(@event);\n    }\n}\n```", "```cs\nusing System;\nusing Marketplace.Framework;\n\nnamespace Marketplace.Domain\n{\n    public class Picture : Entity<PictureId>\n    {\n        internal PictureSize Size { get; private set; }\n        internal Uri Location { get; private set; }\n        internal int Order { get; private set; }\n\n        protected override void When(object @event)\n        {\n            switch (@event)\n            {\n                case Events.PictureAddedToAClassifiedAd e:\n                    Id = new PictureId(e.PictureId);\n                    Location = new Uri(e.Url);\n                    Size = new PictureSize\n                        { Height = e.Height, Width = e.Width};\n                    Order = e.Order;\n                    break;\n            }\n        }\n\n        public Picture(Action<object> applier) : base(applier) { }\n    }\n\n    // the identity class code is still here\n}\n```", "```cs\npublic void AddPicture(Uri pictureUri, PictureSize size) =>\n    Apply(new Events.PictureAddedToAClassifiedAd\n    {\n        PictureId = new Guid(),\n        ClassifiedAdId = Id,\n        Url = pictureUri.ToString(),\n        Height = size.Height,\n        Width = size.Width,\n        Order = Pictures.Max(x => x.Order)\n    });\n```", "```cs\ncase Events.PictureAddedToAClassifiedAd e:\n    var picture = new Picture(Apply);\n    ApplyToEntity(picture, e);\n    Pictures.Add(newPicture);\n    break;\n```", "```cs\npublic class ClassifiedAdPictureResized\n{\n    public Guid PictureId { get; set; }\n    public int Height { get; set; }\n    public int Width { get; set; }\n}\n```", "```cs\nprivate Picture FindPicture(PictureId id)\n    => Pictures.FirstOrDefault(x => x.Id == id);\n```", "```cs\npublic void ResizePicture(PictureId pictureId, PictureSize newSize)\n{\n    var picture = FindPicture(pictureId);\n    if (picture == null)\n        throw new InvalidOperationException(\n            \"Cannot resize a picture that I don't have\");\n\n    picture.Resize(newSize);\n}\n```", "```cs\npublic void Resize(PictureSize newSize)\n    => Apply(new Events.ClassifiedAdPictureResized\n    {\n        PictureId = Id.Value,\n        Height = newSize.Width,\n        Width = newSize.Width\n    });\n```", "```cs\ncase Events.ClassifiedAdPictureResized e:\n    Size = new PictureSize{Height = e.Height, Width = e.Width};\n    break;\n```", "```cs\nnamespace Marketplace.Domain\n{\n    public static class PictureRules\n    {\n        public static bool HasCorrectSize(this Picture picture)\n            => picture != null \n               && picture.Size.Width >= 800 \n               && picture.Size.Height >= 600;\n    }\n}\n```", "```cs\nprivate Picture FirstPicture \n    => Pictures.OrderBy(x => x.Order).FirstOrDefault();\n\nprotected override void EnsureValidState()\n{\n    var valid =\n        Id != null &&\n        OwnerId != null &&\n        (State switch\n        {\n            ClassifiedAdState.PendingReview =>\n                Title != null\n                && Text != null\n                && Price?.Amount > 0\n                && FirstPicture.HasCorrectSize(),\n            ClassifiedAdState.Active =>\n                Title != null\n                && Text != null\n                && Price?.Amount > 0\n                && FirstPicture.HasCorrectSize()\n                && ApprovedBy != null,\n            _ => true\n        });\n\n    if (!valid)\n        throw new InvalidEntityStateException(\n            this, $\"Post-checks failed in state {State}\");\n}\n\n```"]