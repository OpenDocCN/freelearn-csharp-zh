["```cs\npublic class MainPageViewModel : INotifyPropertyChanged\n{\n    private readonly IQuoteService quoteService;\n    public MainPageViewModel(IQuoteService quoteService)\n    {\n        this.quoteService = quoteService;\n    }\n...\n}\n```", "```cs\npublic static MauiApp CreateMauiApp()\n{\n    var builder = MauiApp.CreateBuilder();\n    ...\n    builder.Services.AddTransient<IQuoteService,\n      QuoteService>();\n    ...\n    return builder.Build();\n}\n```", "```cs\nbuilder.Services.AddTransient<MainPageViewModel>();\n```", "```cs\npublic static class ServiceProvider\n{\n    public static TService GetService<TService>()\n        => Current.GetService<TService>();\n    public static IServiceProvider Current\n        =>\n#if WINDOWS10_0_17763_0_OR_GREATER\n        MauiWinUIApplication.Current.Services;\n#elif ANDROID\n        MauiApplication.Current.Services;\n#elif IOS || MACCATALYST\n       MauiUIApplicationDelegate.Current.Services;\n#else\n      null;\n#endif\n}\n```", "```cs\npublic MainPage_MVVM()\n{\n    InitializeComponent();\n    BindingContext = ServiceProvider\n        .GetService<MainPageViewModel>();\n}\n```", "```cs\npublic MainPage_MVVM(MainPageViewModel vm)\n{\n    InitializeComponent();\n    BindingContext = vm;\n}\n```", "```cs\nbuilder.Services.AddTransient<MainPage_MVVM>();\n```", "```cs\n    public RecipesOverviewPage(RecipesOverviewViewModel\n      viewModel)\n    {\n        InitializeComponent();\n        BindingContext = viewModel;\n    }\n    ```", "```cs\n    public static MauiApp CreateMauiApp()\n    {\n        var builder = MauiApp.CreateBuilder();\n        builder\n            .UseMauiApp<App>()\n        ...\n        builder.Services\n            .AddTransient<RecipesOverviewPage>();\n        builder.Services\n            .AddTransient<RecipesOverviewViewModel>();\n        ...\n    }\n    ```", "```cs\n    public RecipesOverviewPage(\n        RecipesOverviewViewModel viewModel)\n    {\n        InitializeComponent();\n        BindingContext = viewModel;\n    }\n    ```", "```cs\n    public RecipeRatingDetailPage(\n        RecipeRatingsDetailViewModel viewModel)\n    {\n        InitializeComponent();\n        BindingContext = viewModel;\n    }\n    ```", "```cs\n    public static MauiApp CreateMauiApp()\n    {\n        var builder = MauiApp.CreateBuilder();\n        builder\n            .UseMauiApp<App>()\n        ...\n        builder.Services\n            .AddTransient<RecipesOverviewPage>();\n        builder.Services\n            .AddTransient<RecipesOverviewViewModel>();\n        builder.Services\n            .AddTransient<RecipeDetailPage>();\n        builder.Services\n            .AddTransient<RecipeDetailViewModel>();\n        builder.Services\n            .AddTransient<RecipeRatingDetailPage>();\n        builder.Services\n            .AddTransient<RecipeRatingsDetailViewModel>();\n    ...\n    }\n    ```", "```cs\n    private readonly IRecipeService recipeService;\n    private readonly IFavoritesService favoritesService;\n    ```", "```cs\n    public RecipesOverviewViewModel(\n        IRecipeService recipeService,\n        IFavoritesService favoritesService)\n    {\n        this.recipeService = recipeService;\n        this.favoritesService = favoritesService;\n        Recipes = new ();\n        TryLoadMoreItemsCommand =\n            new AsyncRelayCommand(TryLoadMoreItems);\n        NavigateToSelectedDetailCommand =\n            new AsyncRelayCommand\n              (NavigateToSelectedDetail);\n        LoadRecipes(7, 0);\n    }\n    ```", "```cs\n    private async Task LoadRecipes(int pageSize, int page)\n    {\n        var loadRecipesTask =\n            recipeService.LoadRecipes(pageSize, page);\n        var loadFavoritesTask =\n            favoritesService.LoadFavorites();\n       ...\n    }\n    ```", "```cs\n    string _title;\n    public string Title\n    {\n        get => _title;\n        set => SetProperty(ref _title, value);\n    }\n    string[] _allergens = new string[0];\n    public string[] Allergens\n    {\n        get => _allergens;\n        set => SetProperty(ref _allergens, value);\n    }\n    int? _calories;\n    public int? Calories\n    {\n        get => _calories;\n        set => SetProperty(ref _calories, value);\n    }\n    ```", "```cs\n    <Label\n        FontAttributes=\"Bold\"\n        FontSize=\"22\"\n        Text=\"{Binding Path=Title, Mode=OneWay}\"\n        VerticalOptions=\"Center\" />\n    ```", "```cs\n    public RecipeDetailViewModel(\n        IRecipeService recipeService,\n        IFavoritesService favoritesService,\n        IRatingsService ratingsService)\n    {\n        this.recipeService = recipeService;\n        this.favoritesService  = favoritesService;\n        this.ratingsService = ratingsService;\n    ...\n    }\n    ```", "```cs\n    private readonly IRecipeService recipeService;\n    private readonly IFavoritesService favoritesService;\n    private readonly IRatingsService ratingsService;\n    ```", "```cs\n    private async Task LoadRecipe(string recipeId)\n    {\n        var loadRecipeTask =\n            recipeService.LoadRecipe(recipeId);\n        var loadIsFavoriteTask =\n            favoritesService.IsFavorite(recipeId);\n        var loadRatingsTask =\n            ratingsService.LoadRatingsSummary(recipeId);\n        await Task.WhenAll(loadRecipeTask,\n            loadRecipeTask, loadRatingsTask);\n        if(loadRecipeTask.Result is not null)\n            MapRecipeData(\n                loadRecipeTask.Result,\n                loadRatingsTask.Result,\n                loadIsFavoriteTask.Result);\n    }\n    ```", "```cs\n    LoadRecipe(\"3\");\n    ```", "```cs\n    public RecipeRatingsDetailViewModel(\n        IRecipeService recipeService,\n        IRatingsService ratingsService)\n    {\n        this.recipeService = recipeService;\n        this.ratingsService = ratingsService;\n        ...\n    }\n    ```", "```cs\n    public class RecipeRatingsDetailViewModel :\n      ObservableObject\n    {\n        private readonly IRatingsService ratingsService;\n        private readonly IRecipeService recipeService;\n        string _recipeTitle = string.Empty;\n        public string RecipeTitle\n        {\n            get => _recipeTitle;\n            set => SetProperty(ref _recipeTitle, value);\n        }\n        …\n    }\n    ```", "```cs\n    private async Task LoadData(string recipeId)\n    {\n        var recipeTask =\n            recipeService.LoadRecipe(recipeId);\n        var ratingsTask =\n            ratingsService.LoadRatings(recipeId);\n        await Task.WhenAll(recipeTask, ratingsTask);\n        RecipeTitle =\n            recipeTask.Result?.Name ?? string.Empty;\n        GroupedReviews = ratingsTask.Result\n            ...\n            .ToList();\n    }\n    ```", "```cs\n    LoadData(\"3\");\n    ```", "```cs\nbuilder.Services.AddSingleton<IFavoritesService,\n  FavoritesService>();\n```", "```cs\npublic RecipeService(Task<Stream> recipesJsonStreamTask)\n{\n    this.recipesJsonStreamTask = recipesJsonStreamTask;\n}\n```", "```cs\nbuilder.Services.AddTransient<IRecipeService>(\n    serviceProvider => new RecipeService( FileSystem.\n      OpenAppPackageFileAsync(\"recipedetails.json\")));\n```", "```cs\nbuilder.Services.AddSingleton<IRatingsService>(\n    serviceProvider => new RatingsService( FileSystem.\n       OpenAppPackageFileAsync(\"ratings.json\")));\n```", "```cs\npublic int NumberOfServings\n{\n    get => _numberOfServings;\n    set\n    {\n        if (SetProperty(ref _numberOfServings, value))\n        {\n            Ingredients\n                .ForEach(i => i.UpdateServings(value));\n        }\n    }\n}\n```", "```cs\nusing CommunityToolkit.Mvvm.Messaging.Messages;\nnamespace Recipes.Client.Core.Messages;\npublic class ServingsChangedMessage :\n    ValueChangedMessage<int>\n{\n    public ServingsChangedMessage(int value)\n        : base(value)\n    { }\n}\n```", "```cs\npublic int NumberOfServings\n{\n    get => _numberOfServings;\n    set\n    {\n        if (SetProperty(ref _numberOfServings, value))\n        {\n            WeakReferenceMessenger.Default.Send(\n                new ServingsChangedMessage(value));\n        }\n    }\n}\n```", "```cs\npublic RecipeIngredientViewModel(...)\n{\n...\n    WeakReferenceMessenger.Default\n    .Register<ServingsChangedMessage>(this, (r, m) =>\n    ((RecipeIngredientViewModel)r)\n    .UpdateServings(m.Value));\n}\n```", "```cs\n    public class FavoriteUpdateMessage\n    {\n        public string RecipeId { get; }\n        public bool IsFavorite { get; }\n        public FavoriteUpdateMessage(string recipeId,\n            bool isFavorite)\n        {\n            RecipeId = recipeId;\n            IsFavorite = isFavorite;\n        }\n    }\n    ```", "```cs\n    public Task Add(string id)\n    {\n        if(!favorites.Contains(id))\n        {\n            favorites.Add(id);\n            WeakReferenceMessenger.Default.Send(\n                new FavoriteUpdateMessage(id, true));\n        }\n        return Task.CompletedTask;\n    }\n    ```", "```cs\n    public Task Remove(string id)\n    {\n        if (favorites.Contains(id))\n        {\n            favorites.Remove(id);\n            WeakReferenceMessenger.Default.Send(\n                new FavoriteUpdateMessage(id, false));\n        }\n        return Task.CompletedTask;\n    }\n    ```", "```cs\n    public class RecipeListItemViewModel :\n        ObservableObject,\n        IRecipient<FavoriteUpdateMessage>\n    {\n    ...\n        public RecipeListItemViewModel(...)\n        {\n            ...\n            WeakReferenceMessenger.Default.Register(this);\n        }\n        void IRecipient<FavoriteUpdateMessage>\n            .Receive(FavoriteUpdateMessage message)\n        {\n            if (message.RecipeId == Id)\n            {\n                IsFavorite = message.IsFavorite;\n            }\n        }\n    }\n    ```"]