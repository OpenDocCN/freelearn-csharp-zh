- en: '*Chapter 3*: Customizing Dependency Injection'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this third chapter, we'll take a look at ASP.NET Core **dependency injection**
    (**DI**) and how to customize it to use a different DI container, if needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will be covering the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Using a different DI container
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring the `ConfigureServices` method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a different `ServiceProvider`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing Scrutor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The topics in this chapter refer to the hosting layer of the ASP.NET Core architecture:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.1 – ASP.NET Core architecture](img/Figure_2.1_B17996.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.1 – ASP.NET Core architecture
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To follow the descriptions in this chapter, you will need to create an ASP.NET
    Core MVC application. Open your console, shell, or Bash terminal and change to
    your working directory. Use the following command to create a new MVC application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, open the project in Visual Studio by double-clicking the project file,
    or in Visual Studio Code by typing the following command in the already-open console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: All of the code samples in this chapter can be found in the GitHub repository
    for this book at [https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/tree/main/Chapter03](https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/tree/main/Chapter03).
  prefs: []
  type: TYPE_NORMAL
- en: Using a different DI container
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In most projects, you don''t really need to use a different DI container. The
    existing DI implementation in ASP.NET Core supports the main basic features and
    works both effectively and quickly. However, some other DI containers support
    a number of interesting features you might want to use in your application:'
  prefs: []
  type: TYPE_NORMAL
- en: Create an application that supports modules as lightweight dependencies using
    Ninject, for example, modules you might want to put into a specific directory
    and have them be automatically registered in your application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure the services in a configuration file outside the application, in an
    XML or JSON file instead of in C# only. This is a common feature in various DI
    containers, but not yet supported in ASP.NET Core.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add services at runtime, probably because you don't want to have an immutable
    DI container. This is also a common feature in some DI containers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's now see how the `ConfigureServices` method enables you to use alternative
    DI containers.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the ConfigureServices method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s compare the current `ConfigureServices` method with a previous long-term
    support version to see what has changed. If you created a new ASP.NET Core project
    using version 3.1 and open `Startup.cs`, you will find the method to configure
    the services, which looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In contrast, in ASP.NET Core 6.0, there is no `Startup.cs` anymore, and the
    configuring of the services is done in `Program.cs`, which looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In both cases, the method gets `IServiceCollection`, which is already filled
    with a bunch of services that are required by ASP.NET Core. This service was added
    by the hosting services and parts of ASP.NET Core that are executed before the
    `ConfigureServices` method was called.
  prefs: []
  type: TYPE_NORMAL
- en: Inside the method, some more services are added. First, a configuration class
    that contains cookie policy options is added to `ServiceCollection`. After that,
    the `AddMvc()` method adds another bunch of services required by the MVC framework.
    So far, we have around 140 services registered to `IServiceCollection`. However,
    the service collection isn't the actual DI container.
  prefs: []
  type: TYPE_NORMAL
- en: 'The actual DI container is wrapped in the so-called `IServiceCollection` has
    an extension method registered to create an `IServiceProvider` out of the service
    collection, which you can see in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '`ServiceProvider` contains the immutable container that cannot be changed at
    runtime. With the default `ConfigureServices` method, `IServiceProvider` is created
    in the background after this method is called.'
  prefs: []
  type: TYPE_NORMAL
- en: Next, we'll learn more about applying an alternative `ServiceProvider` as part
    of the DI customization process.
  prefs: []
  type: TYPE_NORMAL
- en: Using a different ServiceProvider
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Changing to a different or custom DI container is relatively easy if the other
    container already supports ASP.NET Core. Usually, the other container will use
    `IServiceCollection` to feed its own container. The third-party DI containers
    move the already-registered services to the other container by looping over the
    collection:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by using `Autofac` as a third-party container. Type the following
    command into your command line to load the NuGet package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To register a custom IoC container, you need to register a different `IServiceProviderFactory`.
    In that case, you'll want to use `AutofacServiceProviderFactory` if you use `Autofac`.
    `IServiceProviderFactory` will create a `ServiceProvider` instance. The third-party
    container should provide one, if it supports ASP.NET Core.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should place this small extension method in `Program.cs` to register `AutofacServiceProviderFactory`
    with `IHostBuilder`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Don't forget to add using statements to `Autofac` and `Autofac.Extensions.DependencyInjection`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To use this extension method, you can use `AutofacServiceProvider` in `Program.cs`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This adds the `AutofacServiceProviderFactory` function to `IHostBuilder` and
    enables the `Autofac` IoC container. If you have this in place, you will use `Autofac`
    if you add services to `IServiceCollection` using the default way.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Scrutor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You don't always need to replace the existing .NET Core DI container to get
    and use some cool features. At the beginning of this chapter, I mentioned the
    autoregistration of services, which can be done with other DI containers. This
    can also be done with a nice NuGet package called `IServiceCollection` to automatically
    register services with the .NET Core DI container.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'Andrew Lock has published a pretty detailed blog post relating to Scrutor.
    Rather than just repeating what he said, I suggest that you just go ahead and
    read that post to learn more about it: *Using Scrutor to automatically register
    your services with the ASP.NET Core DI container*, available at [https://andrewlock.net/using-scrutor-to-automatically-register-your-services-with-the-asp-net-core-di-container/](https://andrewlock.net/using-scrutor-to-automatically-register-your-services-with-the-asp-net-core-di-container/).'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using the approaches we have demonstrated in this chapter, you will be able
    to use any .NET Standard-compatible DI container to replace the existing one.
    If the container of your choice doesn't include `ServiceProvider`, create your
    own that implements `IServiceProvider` and uses the DI container inside. If the
    container of your choice doesn't provide a method to populate the registered services
    in the container, create your own method. Loop over the registered services and
    add them to the other container.
  prefs: []
  type: TYPE_NORMAL
- en: Actually, the last step sounds easy but can be a hard task, because you need
    to translate all the possible `IServiceCollection` registrations into registrations
    of the other container. The complexity of that task depends on the implementation
    details of the other DI container.
  prefs: []
  type: TYPE_NORMAL
- en: Anyway, you have the choice to use any DI container that is compatible with
    .NET Standard. You can change a lot of the default implementations in ASP.NET
    Core.
  prefs: []
  type: TYPE_NORMAL
- en: This is also something you can do with the default HTTPS behavior on Windows,
    which we will learn more about in the next chapter.
  prefs: []
  type: TYPE_NORMAL
