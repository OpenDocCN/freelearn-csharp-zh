["```cs\npublic class Startup\n{\n    ...\n\n    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n    {\n        app.UseRouting();\n        ...\n        app.UseEndpoints(endpoints =>\n {\n endpoints.MapControllers();\n });\n    }\n}\n```", "```cs\n...\npublic void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n{\n    ...\n\n    app.UseEndpoints(endpoints =>\n    {\n        endpoints.MapControllerRoute(\"default\", \"{controller}/{action}/{id?}\");\n    });\n}\n...\n\n```", "```cs\n    app.UseEndpoints(endpoints =>\n    {\n        endpoints.MapControllerRoute(\"default\", \"{controller}/{action}/{id?}\");\n    });\n```", "```cs\napp.UseEndpoints(endpoints =>\n{\n    endpoints.MapControllerRoute(\"default\", \"{controller}/{action}/{id?}\");\n\n    endpoints.MapControllerRoute(\"order\", \"order/givemeorders\", new { controller = \"Order\", action = \"Get\" });\n});\n```", "```cs\napp.UseEndpoints(endpoints =>\n{\n endpoints.MapGet(\"order\", context => context.Response.WriteAsync(\"Hi, from GET verb!\"));\n endpoints.MapPost(\"order\", context => context.Response.WriteAsync(\"Hi, from POST verb!\"));\n});\n```", "```cs\n [Route(\"api/order\")]\n     [ApiController]\n     public class OrderController : ControllerBase\n     {\n         private readonly IOrderRepository _orderRepository;\n\n         public OrderController(IOrderRepository orderRepository)\n         {\n             _orderRepository = orderRepository;\n\n         } \n     ...\n```", "```cs\n    [Route(\"api/order\")]\n    [ApiController]\n    public class OrderController : ControllerBase\n    {\n        [HttpGet]\n        public IActionResult Get() {\n            ...\n        }\n\n        [HttpGet(\"{id:guid}\")]\n        public IActionResult GetById(Guid id) {\n            ...\n        }\n\n        [HttpPost]\n        public IActionResult Post(OrderRequest request) {\n            ...\n        }\n\n        [HttpPut(\"{id:guid}\")]\n        public IActionResult Put(Guid id, OrderRequest request) {\n            ...\n        }\n\n        [HttpPatch(\"{id:guid}\")]\n        public IActionResult Patch(Guid id, JsonPatchDocument<Order> \n        requestOp) {\n            ...\n        }\n\n        [HttpDelete(\"{id:guid}\")]\n        public IActionResult Delete(Guid id) {\n            ...\n        }\n    }\n```", "```cs\nusing System;\nusing Microsoft.AspNetCore.Mvc.Routing;\n\nnamespace SampleAPI.CustomRouting\n{\n    public class CustomOrdersRoute : Attribute, IRouteTemplateProvider\n    {\n        public string Template => \"api/orders\";\n\n        public int? Order { get; set; }\n\n        public string Name => \"Orders_route\";\n    }\n}\n```", "```cs\n[CustomOrdersRoute]\n[ApiController]\npublic class OrderController : ControllerBase\n{\n    ...\n```", "```cs\napp.UseEndpoints(endpoints =>\n{\n    endpoints.MapControllerRoute(\"default\", \"{controller}/{action}/{id:guid?}\");\n});\n```", "```cs\napp.UseEndpoints(endpoints =>\n{\n    endpoints.MapControllerRoute(\"default\", \"{controller}/{action}/{id:int:min(1)}\");\n});\n```", "```cs\n    [Route(\"api/mycontroller\")]\n    [ApiController]\n    public class MyControllerController : ControllerBase\n    {\n        [HttpGet({id:int:min(1)})]\n        public IActionResult Get() {\n            ...\n    }\n```", "```cs\nusing System.Collections.Generic;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Routing;\n\nnamespace SampleAPI.CustomRouting\n{\n    public class CurrencyConstraint : IRouteConstraint\n    {\n        private static readonly IList<string> _currencies =  \n            new List<string> { \"EUR\", \"USD\", \"GBP\" };\n\n        public bool Match(HttpContext httpContext, IRouter route,\n            string routeKey, RouteValueDictionary values,\n            RouteDirection routeDirection)\n        {\n            return  _currencies.Contains(values[routeKey]?.ToString().ToLowerInvariant());\n        }\n    }\n}\n```", "```cs\npublic void ConfigureServices(IServiceCollection services)\n{\n   ...\n    services.Configure<RouteOptions>(options => {\n options.ConstraintMap.Add(\"currency\", typeof(CurrencyConstraint));\n });\n    ...\n}\n```", "```cs\nendpoints.MapControllerRoute(\"default\", \"{controller}/{action}/{currency}\");\n```"]