["```cs\n    dotnet add package Microsoft.AspNetCore.Authentication.JwtBearer\n    ```", "```cs\nvar builder = WebApplication.CreateBuilder(args);\n//...\nbuilder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme).AddJwtBearer();\nbuilder.Services.AddAuthorization();\n```", "```cs\nvar app = builder.Build();\n//..\napp.UseAuthentication();\napp.UseAuthorization();\n//...\napp.Run();\n```", "```cs\napp.MapGet(\"/api/attribute-protected\", [Authorize] () => \"This endpoint is protected using the Authorize attribute\");\napp.MapGet(\"/api/method-protected\", () => \"This endpoint is protected using the RequireAuthorization method\")\n.RequireAuthorization();\n```", "```cs\napp.MapPost(\"/api/auth/login\", (LoginRequest request) =>\n{\n    if (request.Username == \"marco\" && request.Password == \n        \"P@$$w0rd\")\n    {\n        // Generate the JWT bearer...\n    }\n    return Results.BadRequest();\n});\n```", "```cs\nvar claims = new List<Claim>()\n{\n    new(ClaimTypes.Name, request.Username)\n};\nvar securityKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(\"mysecuritystring\"));\nvar credentials = new SigningCredentials(securityKey, SecurityAlgorithms.HmacSha256);\nvar jwtSecurityToken = new JwtSecurityToken(\n    issuer: \"https://www.packtpub.com\",\n    audience: \"Minimal APIs Client\",\n    claims: claims, expires: DateTime.UtcNow.AddHours(1), \n      signingCredentials: credentials);\nvar accessToken = new JwtSecurityTokenHandler()\n  .WriteToken(jwtSecurityToken);\nreturn Results.Ok(new { AccessToken = accessToken });\n```", "```cs\n{\n  \"alg\": \"HS256\",\n  \"typ\": \"JWT\"\n}.{\n  \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name\": \"marco\",\n  \"exp\": 1644431527,\n  \"iss\": \"https://www.packtpub.com\",\n  \"aud\": \"Minimal APIs Client\"\n}.[Signature]\n```", "```cs\nbuilder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)\n.AddJwtBearer(options =>\n{\n    options.TokenValidationParameters = new TokenValidationParameters\n    {\n        ValidateIssuerSigningKey = true,\n        IssuerSigningKey = new SymmetricSecurityKey(\n          Encoding.UTF8.GetBytes(\"mysecuritystring\")),\n        ValidIssuer = \"https://www.packtpub.com\",\n        ValidAudience = \"Minimal APIs Client\"\n    };\n});\n```", "```cs\nvar builder = WebApplication.CreateBuilder(args);\n//...\nbuilder.Services.AddSwaggerGen(options =>\n{\n    options.AddSecurityDefinition(JwtBearerDefaults.AuthenticationScheme, new OpenApiSecurityScheme\n    {\n        Type = SecuritySchemeType.ApiKey,\n        In = ParameterLocation.Header,\n        Name = HeaderNames.Authorization,\n        Description = \"Insert the token with the 'Bearer ' \n                       prefix\"\n    });\n    options.AddSecurityRequirement(new\n      OpenApiSecurityRequirement\n    {\n        {\n            new OpenApiSecurityScheme\n            {\n                Reference = new OpenApiReference\n                {\n                    Type = ReferenceType.SecurityScheme,\n                    Id = \n                     JwtBearerDefaults.AuthenticationScheme\n                }\n            },\n            Array.Empty<string>()\n        }\n    });\n});\n```", "```cs\napp.MapGet(\"/api/me\", [Authorize] (ClaimsPrincipal user) => $\"Logged username: {user.Identity.Name}\");\n```", "```cs\napp.MapPost(\"/api/auth/login\", (LoginRequest request) =>\n{\n    if (request.Username == \"marco\" && request.Password == \n        \"P@$$w0rd\")\n    {\n        var claims = new List<Claim>()\n        {\n            new(ClaimTypes.Name, request.Username),\n            new(ClaimTypes.Role, \"Administrator\"),\n            new(ClaimTypes.Role, \"User\")\n        };\n\n    //...\n}\n```", "```cs\n{\n  \"alg\": \"HS256\",\n  \"typ\": \"JWT\"\n}.{\n  \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name\": \"marco\",\n  \"http://schemas.microsoft.com/ws/2008/06/identity/claims/role\": [\n    \"Administrator\",\n    \"User\"\n  ],\n  \"exp\": 1644755166,\n  \"iss\": \"https://www.packtpub.com\",\n  \"aud\": \"Minimal APIs Client\"\n}.[Signature]\n```", "```cs\napp.MapGet(\"/api/admin-attribute-protected\", [Authorize(Roles = \"Administrator\")] () => { });\napp.MapGet(\"/api/admin-method-protected\", () => { })\n.RequireAuthorization(new AuthorizeAttribute { Roles = \"Administrator\" });\n```", "```cs\napp.MapGet(\"/api/stackeholder-protected\", [Authorize(Roles = \"Stakeholder\")] () => { });\n```", "```cs\napp.MapGet(\"/api/role-check\", [Authorize] (ClaimsPrincipal user) =>\n{\n    if (user.IsInRole(\"Administrator\"))\n    {\n        return \"User is an Administrator\";\n    }\n    return \"This is a normal user\";\n});\n```", "```cs\nvar claims = new List<Claim>()\n{\n    // ...\n    new(\"tenant-id\", \"42\")\n};\n```", "```cs\nbuilder.Services.AddAuthorization(options =>\n{\n    options.AddPolicy(\"Tenant42\", policy =>\n    {\n        policy.RequireClaim(\"tenant-id\", \"42\");\n    });\n});\n```", "```cs\napp.MapGet(\"/api/policy-attribute-protected\", [Authorize(Policy = \"Tenant42\")] () => { });\napp.MapGet(\"/api/policy-method-protected\", () => { })\n.RequireAuthorization(\"Tenant42\");\n```", "```cs\npublic class MaintenanceTimeRequirement : IAuthorizationRequirement\n{\n    public TimeOnly StartTime { get; init; }\n    public TimeOnly EndTime { get; init; }\n}\n```", "```cs\npublic class MaintenanceTimeAuthorizationHandler\n    : AuthorizationHandler<MaintenanceTimeRequirement>\n{\n    protected override Task HandleRequirementAsync(\n        AuthorizationHandlerContext context,\n        MaintenanceTimeRequirement requirement)\n    {\n        var isAuthorized = true;\n        if (!context.User.IsInRole(\"Administrator\"))\n        {\n            var time = TimeOnly.FromDateTime(DateTime.Now);\n            if (time >= requirement.StartTime && time <\n                requirement.EndTime)\n            {\n                isAuthorized = false;\n            }\n        }\n        if (isAuthorized)\n        {\n            context.Succeed(requirement);\n        }\n        return Task.CompletedTask;\n    }\n}\n```", "```cs\nbuilder.Services.AddAuthorization(options =>\n{\n    options.AddPolicy(\"TimedAccessPolicy\", policy =>\n    {\n        policy.Requirements.Add(new\n          MaintenanceTimeRequirement\n        {\n            StartTime = new TimeOnly(0, 0, 0),\n            EndTime = new TimeOnly(4, 0, 0)\n        });\n    });\n});\nbuilder.Services.AddScoped<IAuthorizationHandler, MaintenanceTimeAuthorizationHandler>();\n```", "```cs\napp.MapGet(\"/api/custom-policy-protected\", [Authorize(Policy = \"TimedAccessPolicy\")] () => { });\n```", "```cs\nbuilder.Services.AddAuthorization(options =>\n{\n    var policy = new AuthorizationPolicyBuilder()\n      .RequireAuthenticatedUser()\n        .RequireClaim(\"tenant-id\").Build();\n    options.DefaultPolicy = policy;    \n});\n```", "```cs\nbuilder.Services.AddAuthorization(options =>\n{\n    options.FallbackPolicy = options.DefaultPolicy;\n});\n```", "```cs\napp.MapPost(\"/api/auth/login\", [AllowAnonymous] (LoginRequest request) => { });\n// OR\napp.MapPost(\"/api/auth/login\", (LoginRequest request) => { })\n.AllowAnonymous();\n```"]