- en: VR Build and Run
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: VR构建和运行
- en: '*Yeah well, this is cool and everything, but where''s my VR? I WANT MY VR!*'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**是的，这很酷，但我的VR在哪里？我想要我的VR！**'
- en: Hold on kid, we're getting there.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 等一下，孩子，我们快到了。
- en: 'In this chapter, we are going to set up your system and configure your project
    to build and run with a virtual reality **head-mounted display** (**HMD**). We
    will be discussing the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将设置您的系统并配置您的项目，以便使用虚拟现实**头戴式显示器**（**HMD**）进行构建和运行。我们将讨论以下主题：
- en: The levels of VR device integration software
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VR设备集成软件的级别
- en: Enabling virtual reality for your platform
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用您平台的虚拟现实功能
- en: Using device-specific camera rigs in your project
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在项目中使用特定设备的相机装置
- en: Setting up your development machine to build and run VR projects from Unity
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置您的开发机器以从Unity构建和运行VR项目
- en: 'This chapter is very nuts and bolts. Although Unity aims to provide a unified
    platform for *create once, build many*, you are always going to need to do some
    system setup, project configuration, and include object components for your specific
    target devices. After the first couple of topics in this chapter, you can jump
    to the section(s) that most concern you and your target devices. This chapter
    includes cookbook instructions for the following:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章内容非常具体。尽管Unity旨在提供一个统一的平台以实现**一次创建，多次构建**，但您始终需要做一些系统设置、项目配置，并为您的特定目标设备包含对象组件。在本章的前几个主题之后，您可以跳转到最关心您和您的目标设备的部分。本章包括以下内容的食谱说明：
- en: Building for SteamVR
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为SteamVR构建
- en: Building for Oculus Rift
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为Oculus Rift构建
- en: Building for Windows immersive MR
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为Windows沉浸式MR构建
- en: Setting up for Android devices
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为Android设备设置
- en: Building for GearVR and Oculus Go
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为GearVR和Oculus Go构建
- en: Building for Google VR
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为Google VR构建
- en: Setting up for iOS devices
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为iOS设备设置
- en: Unity VR Support and Toolkits
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Unity VR支持和工具包
- en: 'Generally, as a developer, you spend your time working on your project scene.
    As we did for the diorama in the previous chapter, you''ll add objects, attach
    materials, write scripts, and so on. When you build and run your project, the
    scene is rendered on a VR device and responds in real time to head and hand motions.
    The following diagram summarizes this Unity system VR architecture:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，作为一名开发者，您会花费时间在您的项目场景上工作。正如我们在上一章中为展览品所做的，您将添加对象、附加材质、编写脚本等。当您构建和运行项目时，场景将在VR设备上渲染，并实时响应头部和手部动作。以下图表总结了这一Unity系统VR架构：
- en: '![](img/b7b252dc-9367-455d-8e69-b77970004120.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b7b252dc-9367-455d-8e69-b77970004120.png)'
- en: Within your scene, you may include a camera rig and other higher-level toolkit
    prefabs and components. All device manufacturers provide toolkits that are tuned
    to their specific devices. At a minimum, this includes the Unity Camera component
    for rendering the VR scene. It probably also includes a whole suite of prefabs
    and components, some required and some optional, which really help you create
    interactive, responsive, and comfortable VR experiences. We will go into detail
    throughout this chapter on how to set up your scene with these specific devices.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的场景中，您可能包括相机装置和其他高级工具包预制件和组件。所有设备制造商都提供针对其特定设备的工具包。这至少包括用于渲染VR场景的Unity相机组件。可能还包括一系列预制件和组件，有些是必需的，有些是可选的，这些组件真正帮助您创建交互式、响应式和舒适的VR体验。我们将在本章中详细介绍如何使用这些特定设备设置您的场景。
- en: Unity has a growing library of built-in classes and components to support VR—what
    they call *XR*—and also to include augmented reality. Some are platform specific.
    But some are device independent. These include stereo rendering, input tracking,
    and audio spatializers, to name a few. For details, see the Unity Manual pages
    for `UnityEngine.XR` and `UnityEngine.SpatialTracking` ([https://docs.unity3d.com/ScriptReference/30_search.html?q=xr](https://docs.unity3d.com/ScriptReference/30_search.html?q=xr)).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Unity拥有一个不断增长的内置类和组件库，以支持VR——他们称之为**XR**——以及增强现实。其中一些是平台特定的。但也有一些是设备独立的。这包括立体渲染、输入跟踪和音频空间化，仅举几例。有关详细信息，请参阅Unity手册中关于`UnityEngine.XR`和`UnityEngine.SpatialTracking`的页面（[https://docs.unity3d.com/ScriptReference/30_search.html?q=xr](https://docs.unity3d.com/ScriptReference/30_search.html?q=xr)）。
- en: At the lower level, any Unity project that runs on VR must set up the **XR Player
    Settings** with **Virtual Reality Supported**, and identify the specific low-level
    SDK the application should be used to drive the VR device. We will go into detail
    throughout this chapter on how to set up your project for specific devices.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在较低级别，任何在VR上运行的Unity项目都必须设置**XR玩家设置**，选择**虚拟现实支持**，并确定应用程序应使用的特定低级SDK来驱动VR设备。在本章中，我们将详细介绍如何为特定设备设置您的项目。
- en: So, as you can see, Unity is sandwiched between the app-level toolkit components
    and the device-level SDK. It provides a device-independent glue between device-specific
    API, tools, and optimizations.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，正如您所看到的，Unity位于应用级工具组件和设备级SDK之间。它提供了一个设备无关的粘合剂，用于连接特定设备的API、工具和优化。
- en: Strategically, the team at Unity Technologies is dedicated to delivering a unified
    development platform for 2D, 3D, VR, and AR games and apps. Important new components
    are under development at Unity (and may already be available by the time you read
    this book) including the VR Foundation Toolkit and new input system. These are
    not covered in this book.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 从战略上讲，Unity Technologies团队致力于为2D、3D、VR和AR游戏和应用提供统一的开发平台。Unity（您阅读此书时可能已经可用）正在开发一些重要的新组件，包括VR基础工具包和新的输入系统。这些内容本书未涉及。
- en: Before jumping in, let's understand the possible ways to integrate our Unity
    project with virtual reality devices. Software for the integration of applications
    with VR hardware spans a spectrum, from built-in support and device-specific interfaces
    to device-independent and platform- independent ones. So, let's consider your
    options.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入之前，让我们了解将我们的Unity项目与虚拟现实设备集成的可能方式。将应用程序与VR硬件集成的软件范围很广，从内置支持和特定设备的接口到设备无关和平台无关的解决方案。因此，让我们考虑您的选择。
- en: Unity's built-in VR support
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Unity的内置VR支持
- en: In general, your Unity project must include a camera object that can render
    stereoscopic views, one for each eye on the VR headset. Since Unity 5.1, support
    for VR headsets has been built into Unity for various devices across several platforms.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，您的Unity项目必须包含一个可以渲染立体视图的相机对象，每个VR头盔的眼睛需要一个。自Unity 5.1以来，对VR头盔的支持已内置到Unity中，适用于多个平台上的各种设备。
- en: 'You can simply use a standard camera component, like the one attached to the
    default `Main Camera` when you create a new scene. As we''ll see, you can have Virtual
    Reality Supported enabled in XR Player Settings for Unity to render stereoscopic
    camera views and run your project on a VR headset (HMD). In Player Settings, you
    then choose which specific virtual reality SDK(s) to use when the project is built.
    The SDK talks to the device runtime drivers and underlying hardware. Unity''s
    support for VR devices is collected in the XR class, and is documented as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以简单地使用一个标准的相机组件，就像您在创建新场景时附加到默认的`Main Camera`的那个一样。正如我们将看到的，您可以在XR玩家设置中启用**虚拟现实支持**，以便Unity渲染立体相机视图并在VR头盔（HMD）上运行您的项目。在玩家设置中，然后选择在项目构建时使用哪些特定的虚拟现实SDK。SDK与设备运行时驱动程序和底层硬件通信。Unity对VR设备的支持收集在XR类中，如下所述：
- en: '**XR Settings**: Global XR-related settings including a list of supported devices
    in the build, and eye textures for the loaded device. See [https://docs.unity3d.com/ScriptReference/XR.XRSettings.html](https://docs.unity3d.com/ScriptReference/XR.XRSettings.html).'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**XR设置**：包括构建中支持的设备列表和加载设备的眼睛纹理在内的全局XR相关设置。见[https://docs.unity3d.com/ScriptReference/XR.XRSettings.html](https://docs.unity3d.com/ScriptReference/XR.XRSettings.html)。'
- en: '**XR Device**: Query the capabilities of the current device such as the refresh
    rate and tracking space type. See [https://docs.unity3d.com/ScriptReference/XR.XRDevice.html](https://docs.unity3d.com/ScriptReference/XR.XRDevice.html).'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**XR设备**：查询当前设备的性能，如刷新率和跟踪空间类型。见[https://docs.unity3d.com/ScriptReference/XR.XRDevice.html](https://docs.unity3d.com/ScriptReference/XR.XRDevice.html)。'
- en: '**XR Input Tracking**: Access the VR positional tracking data including the
    position and rotation of individual *nodes*. See [https://docs.unity3d.com/ScriptReference/XR.InputTracking.html](https://docs.unity3d.com/ScriptReference/XR.InputTracking.html).'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**XR输入跟踪**：访问VR位置跟踪数据，包括单个**节点**的位置和旋转。见[https://docs.unity3d.com/ScriptReference/XR.InputTracking.html](https://docs.unity3d.com/ScriptReference/XR.InputTracking.html)。'
- en: 'Input controller buttons, triggers, touchpads, and thumbsticks can also map
    generically to Unity''s Input system. For example, the OpenVR hand controller
    mappings can be found here: [https://docs.unity3d.com/Manual/OpenVRControllers.html](https://docs.unity3d.com/Manual/OpenVRControllers.html).'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 输入控制器按钮、扳机、触摸板和摇杆也可以映射到 Unity 的输入系统。例如，OpenVR 手控制器映射可以在以下位置找到：[https://docs.unity3d.com/Manual/OpenVRControllers.html](https://docs.unity3d.com/Manual/OpenVRControllers.html)。
- en: Device-specific toolkits
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设备特定工具包
- en: 'While built-in VR support may be sufficient to get started, you are advised
    to also install the device-specific Unity package provided by the manufacturer.
    The device-specific interface will provide prefab objects, lots of useful custom
    scripts, shaders, and other important optimizations that directly take advantage
    of the features of the underlying runtime and hardware. The toolkits ordinarily
    include example scenes, prefabs, components, and documentation to guide you. Toolkits
    include:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然内置的 VR 支持可能足以开始使用，但建议您还安装制造商提供的特定设备 Unity 包。特定设备接口将提供预制对象、大量有用的自定义脚本、着色器和其他直接利用底层运行时和硬件功能的重要优化。工具包通常包括示例场景、预制件、组件和文档以引导您。工具包包括：
- en: '**SteamVR Plugin**: Steam''s SteamVR toolkit ([https://assetstore.unity.com/packages/tools/steamvr-plugin-32647](https://assetstore.unity.com/packages/tools/steamvr-plugin-32647))
    was originally released for HTC VIVE only. It now has support for several VR devices
    and runtimes that have positional-tracked left and right-hand controllers. This
    includes Oculus Rift and Windows Immersive MR. You build your project using the
    OpenVR SDK and the final executable program will decide at runtime which type
    of hardware you have attached to your PC and run that app on that device. This
    way, you don''t need different versions of your app for VIVE, Rift, and IMR devices.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SteamVR 插件**: Steam 的 SteamVR 工具包 ([https://assetstore.unity.com/packages/tools/steamvr-plugin-32647](https://assetstore.unity.com/packages/tools/steamvr-plugin-32647))
    最初仅针对 HTC VIVE 发布。现在它支持多个具有位置跟踪左右手控制器的 VR 设备和运行时，包括 Oculus Rift 和 Windows Immersive
    MR。您使用 OpenVR SDK 构建项目，最终的可执行程序将在运行时决定您连接到 PC 的哪种类型硬件，并在该设备上运行该应用程序。这样，您不需要为 VIVE、Rift
    和 IMR 设备准备不同版本的应用程序。'
- en: '**Oculus Integration Toolkit**: The Oculus Integration plugin for Unity ([https://assetstore.unity.com/packages/tools/integration/oculus-integration-82022](https://assetstore.unity.com/packages/tools/integration/oculus-integration-82022))
    supports Oculus VR devices including Rift, GearVR, and GO. In addition to the
    Touch hand controllers, it supports Oculus Avatar, Spatial Audio, and network
    Rooms SDK.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Oculus 集成工具包**: Unity 的 Oculus 集成插件 ([https://assetstore.unity.com/packages/tools/integration/oculus-integration-82022](https://assetstore.unity.com/packages/tools/integration/oculus-integration-82022))
    支持包括 Rift、GearVR 和 GO 在内的 Oculus VR 设备。除了触摸手控制器外，它还支持 Oculus Avatar、空间音频和网络房间
    SDK。'
- en: '**Windows Mixed Reality Toolkit**: The Windows MRTK plugin ([https://github.com/Microsoft/MixedRealityToolkit-Unity](https://github.com/Microsoft/MixedRealityToolkit-Unity))
    supports VR and AR devices in the Windows 10 UWP Mixed Reality family, including
    immersive HMD (like those from Acer, HP, and others) as well as the wearable HoloLens
    augmented reality headset.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Windows 混合现实工具包**: Windows MRTK 插件 ([https://github.com/Microsoft/MixedRealityToolkit-Unity](https://github.com/Microsoft/MixedRealityToolkit-Unity))
    支持 Windows 10 UWP 混合现实系列中的 VR 和 AR 设备，包括沉浸式 HMD（如来自 Acer、HP 等厂商的产品）以及可穿戴的 HoloLens
    增强现实头戴设备。'
- en: '**Google VR SDK for Unity**: The GVR SDK for Unity plugin ([https://github.com/googlevr/gvr-unity-sdk/releases](https://github.com/googlevr/gvr-unity-sdk/releases))
    provides support for user input, controllers, and rendering for both Google Daydream
    and simpler Google Cardboard environments.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Unity 的 Google VR SDK**: Unity 的 GVR SDK 插件 ([https://github.com/googlevr/gvr-unity-sdk/releases](https://github.com/googlevr/gvr-unity-sdk/releases))
    为 Google Daydream 和更简单的 Google Cardboard 环境提供用户输入、控制器和渲染支持。'
- en: When you set up your VR projects in Unity, you will probably install one or
    more of these toolkits. We walk you through this later in this chapter.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在 Unity 中设置 VR 项目时，您可能会安装这些工具包中的一个或多个。我们将在本章后面引导您完成这个过程。
- en: Application toolkits
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序工具包
- en: If you require more device independence plus higher-level interactive features,
    consider the open source **Virtual Reality ToolKit** (**VRTK**) at [https://assetstore.unity.com/packages/tools/vrtk-virtual-reality-toolkit-vr-toolkit-64131](https://assetstore.unity.com/packages/tools/vrtk-virtual-reality-toolkit-vr-toolkit-64131) and
    **NewtonVR** ([https://github.com/TomorrowTodayLabs/NewtonVR](https://github.com/TomorrowTodayLabs/NewtonVR)).
    These Unity plugins provide a framework for developing VR applications with support
    for multiple platforms, locomotion, interactions, and UI controls. NewtonVR focuses
    mostly on *physics interactions*. VRTK is built on top of the Unity built-in VR
    support plus the device-specific prefabs, so it's not *instead of* but is a wrapper
    on top of those SDKs.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要更多的设备独立性和更高层次的交互功能，可以考虑开源的**Virtual Reality ToolKit**（**VRTK**），可在[https://assetstore.unity.com/packages/tools/vrtk-virtual-reality-toolkit-vr-toolkit-64131](https://assetstore.unity.com/packages/tools/vrtk-virtual-reality-toolkit-vr-toolkit-64131)找到，以及**NewtonVR**([https://github.com/TomorrowTodayLabs/NewtonVR](https://github.com/TomorrowTodayLabs/NewtonVR))。这些Unity插件提供了一个用于开发支持多个平台、移动、交互和UI控制的VR应用的框架。NewtonVR主要关注*物理交互*。VRTK建立在Unity内置的VR支持以及特定设备的预制件之上，因此它不是*替代*而是这些SDK的包装器。
- en: 'It is worth mentioning at this point that Unity is working on its own toolkit,
    the **XR Foundation Toolkit** (**XRFT**) at [https://blogs.unity3d.com/2017/02/28/updates-from-unitys-gdc-2017-keynote/](https://blogs.unity3d.com/2017/02/28/updates-from-unitys-gdc-2017-keynote/))
    which will include:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上值得提及的是，Unity正在开发自己的工具包，即**XR Foundation Toolkit**（**XRFT**），可在[https://blogs.unity3d.com/2017/02/28/updates-from-unitys-gdc-2017-keynote/](https://blogs.unity3d.com/2017/02/28/updates-from-unitys-gdc-2017-keynote/)找到，它将包括：
- en: Cross-platform controller input
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跨平台控制器输入
- en: Customizable physics systems
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可定制的物理系统
- en: AR/VR-specific shaders and camera fades
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AR/VR特定的着色器和相机淡入淡出效果
- en: Object snapping and building systems
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象吸附和构建系统
- en: Developer debugging and profiling tools
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发者调试和性能分析工具
- en: All major AR and VR hardware systems
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有主要的AR和VR硬件系统
- en: Web and JavaScript-based VR
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于Web和JavaScript的VR
- en: Important JavaScript APIs are being built directly into major web browsers,
    including special builds of Firefox, Chrome, Microsoft Edge, and other browsers
    like those from Oculus and Samsung for GearVR.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 重要JavaScript API正直接集成到主要网络浏览器中，包括Firefox、Chrome、Microsoft Edge和其他浏览器，如Oculus和Samsung的GearVR专用浏览器。
- en: WebVR, for example, is like **WebGL** (the 2D and 3D graphics markup API for
    the web), adding VR rendering and hardware support. While Unity presently has
    support for WebGL, it does not support building VR apps for WebVR (yet). But we
    hope to see this happen one day soon.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，WebVR就像**WebGL**（网页的2D和3D图形标记语言API），增加了VR渲染和硬件支持。虽然Unity目前支持WebGL，但它不支持为WebVR构建VR应用（目前还不支持）。但我们希望有一天能看到这种情况发生。
- en: The promise of Internet-based WebVR is exciting. The internet is the greatest
    content distribution system in the history of the world. The ability to build
    and distribute VR content just as easily as web pages will be revolutionary.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 基于互联网的WebVR的承诺令人兴奋。互联网是历史上最伟大的内容分发系统。能够像网页一样轻松地构建和分发VR内容将是一场革命。
- en: 'As we know, browsers run on just about any platform. So, if you target your
    game to WebVR or similar framework, you don''t even need to know the user''s operating
    system, let alone which VR hardware they''re using! That''s the idea anyway. Some
    of the tools and frameworks to watch include:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所知，浏览器几乎可以在任何平台上运行。因此，如果你将游戏针对WebVR或类似框架，你甚至不需要知道用户的操作系统，更不用说他们使用的是哪种VR硬件了！这正是这个想法。一些值得关注的工具和框架包括：
- en: '**WebVR** ([http://webvr.info/](http://webvr.info/))'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**WebVR** ([http://webvr.info/](http://webvr.info/))'
- en: '**A-Frame** ([https://aframe.io/](https://aframe.io/))'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**A-Frame** ([https://aframe.io/](https://aframe.io/))'
- en: '**Primrose** ([https://www.primrosevr.com/](https://www.primrosevr.com/))'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Primrose** ([https://www.primrosevr.com/](https://www.primrosevr.com/))'
- en: '**ReactVR** ([https://facebook.github.io/react-vr/](https://facebook.github.io/react-vr/))'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ReactVR** ([https://facebook.github.io/react-vr/](https://facebook.github.io/react-vr/))'
- en: 3D worlds
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3D世界
- en: 'There are a number of third-party 3D world platforms that provide multi-user
    social experiences in shared virtual spaces. You can chat with other players,
    move between rooms through *portals*, and even build complex interactions and
    games without having to be an expert. For examples of 3D virtual worlds, check
    out the following:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多第三方3D世界平台，在共享虚拟空间中提供多用户社交体验。你可以与其他玩家聊天，通过*传送门*在房间之间移动，甚至无需成为专家就能构建复杂交互和游戏。以下是一些3D虚拟世界的例子：
- en: '**VRChat**: [http://vrchat.net/](http://vrchat.net/)'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**VRChat**: [http://vrchat.net/](http://vrchat.net/)'
- en: '**AltspaceVR**: [http://altvr.com/](http://altvr.com/)'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AltspaceVR**: [http://altvr.com/](http://altvr.com/)'
- en: '**High Fidelity**: [https://highfidelity.com/](https://highfidelity.com/)'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**High Fidelity**: [https://highfidelity.com/](https://highfidelity.com/)'
- en: While these platforms may have their own tools for building rooms and interactions,
    in particular, VRChat lets you develop 3D spaces and avatars in Unity. Then you
    export them using their SDK and load them into VRChat for you and others to share the
    virtual spaces you created over the internet in a real-time social VR experience.
    We will explore this in [Chapter 13](721ca227-9208-4342-b6ac-a12799adbb2b.xhtml),
    *Social VR Metaverse*.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这些平台可能有自己的构建房间和交互的工具，特别是VRChat允许您在Unity中开发3D空间和虚拟形象。然后您使用他们的SDK导出它们，并将它们加载到VRChat中，以便您和其他人可以共享您在互联网上创建的虚拟空间，并在实时社交VR体验中共享。我们将在[第13章](721ca227-9208-4342-b6ac-a12799adbb2b.xhtml)，*社交VR元宇宙*中探讨这一点。
- en: Enabling Virtual Reality for your platform
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启用您平台上的虚拟现实功能
- en: 'The diorama scene we created in the previous chapter was a 3D scene using the
    Unity default `Main Camera`. As we saw, when you pressed Play in the Unity Editor
    you had the scene running in the Game window on your 2D computer monitor. The
    steps for setting up your project to run in VR include:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中我们创建的展览场景是一个使用Unity默认`Main Camera`的3D场景。正如我们所见，当你在Unity编辑器中按下Play时，场景会在你的2D计算机监视器上的游戏窗口中运行。设置项目以在VR中运行包括以下步骤：
- en: Set the target platform for your project builds
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置项目构建的目标平台
- en: Enable Virtual Reality in the XR Player Settings in Unity and set the VR SDK
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Unity的XR播放器设置中启用虚拟现实并设置VR SDK
- en: Import the device toolkit for your target device into your project (optional
    but recommended) and use the prescribed prefabs instead of the default `Main Camera`
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将您目标设备的设备工具包导入到您的项目中（可选但推荐）并使用规定的预制体而不是默认的`Main Camera`
- en: Install the system tool required to build your target device
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装构建目标设备所需的系统工具
- en: Ensure your device's operating system is enabled for development
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保您的设备操作系统已启用开发
- en: Ensure your device's VR runtime is set up and running
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保您的设备VR运行时已设置并运行
- en: 'If you are not sure, use the table to determine the target platform, virtual
    reality SDK, and Unity package to use for your VR device:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不确定，请使用表格来确定您VR设备的目标平台、虚拟现实SDK和Unity包：
- en: '| **Device** | **Target Platform** | **VR SDK** | **Unity Package** |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| **设备** | **目标平台** | **VR SDK** | **Unity Package** |'
- en: '| **HTC Vive** | Standalone | OpenVR | SteamVR Plugin |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| **HTC Vive** | Standalone | OpenVR | SteamVR Plugin |'
- en: '| **Oculus Rift** | Standalone | OpenVR | SteamVR Plugin |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| **Oculus Rift** | Standalone | OpenVR | SteamVR Plugin |'
- en: '| **Oculus Rift** | Standalone | Oculus | Oculus Integration |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| **Oculus Rift** | Standalone | Oculus | Oculus Integration |'
- en: '| **Windows IMR** | Universal Windows Platform | Windows Mixed Reality | Mixed
    Reality Toolkit Unity |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| **Windows IMR** | Universal Windows Platform | Windows Mixed Reality | Mixed
    Reality Toolkit Unity |'
- en: '| **GearVR/GO** | Android | Oculus | Oculus Integration |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| **GearVR/GO** | Android | Oculus | Oculus Integration |'
- en: '| **Daydream** | Android | Daydream | Google VR SDK for Unity and Daydream
    Elements |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| **Daydream** | Android | Daydream | Google VR SDK for Unity and Daydream
    Elements |'
- en: '| **Cardboard** | Android | Cardboard | Google VR SDK for Unity |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| **Cardboard** | Android | Cardboard | Google VR SDK for Unity |'
- en: '| **Cardboard** | iOS | Cardboard | Google VR SDK for Unity |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| **Cardboard** | iOS | Cardboard | Google VR SDK for Unity |'
- en: 'Links to the Unity packages for various integration toolkits are listed as
    follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 列出以下各种集成工具包的Unity包链接：
- en: SteamVR Plugin: [https://assetstore.unity.com/packages/tools/steamvr-plugin-32647](https://assetstore.unity.com/packages/tools/steamvr-plugin-32647)
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SteamVR Plugin: [https://assetstore.unity.com/packages/tools/steamvr-plugin-32647](https://assetstore.unity.com/packages/tools/steamvr-plugin-32647)
- en: Oculus Integration: [https://assetstore.unity.com/packages/tools/integration/oculus-integration-82022](https://assetstore.unity.com/packages/tools/integration/oculus-integration-82022)
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Oculus Integration: [https://assetstore.unity.com/packages/tools/integration/oculus-integration-82022](https://assetstore.unity.com/packages/tools/integration/oculus-integration-82022)
- en: MixedRealityToolkit-Unity: [https://github.com/Microsoft/MixedRealityToolkit-Unity](https://github.com/Microsoft/MixedRealityToolkit-Unity)
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MixedRealityToolkit-Unity: [https://github.com/Microsoft/MixedRealityToolkit-Unity](https://github.com/Microsoft/MixedRealityToolkit-Unity)
- en: Google VR SDK for Unity: [https://github.com/googlevr/gvr-unity-sdk/releases](https://github.com/googlevr/gvr-unity-sdk/releases)
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google VR SDK for Unity: [https://github.com/googlevr/gvr-unity-sdk/releases](https://github.com/googlevr/gvr-unity-sdk/releases)
- en: Google Daydream Elements: [https://github.com/googlevr/daydream-elements/releases](https://github.com/googlevr/daydream-elements/releases)
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google Daydream Elements: [https://github.com/googlevr/daydream-elements/releases](https://github.com/googlevr/daydream-elements/releases)
- en: Now, let's configure the project for your specific VR headset.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们为你的特定VR头盔配置项目。
- en: As you know, installation and setup details are subject to change. We recommend
    you double-check with the current Unity manual and your device's Unity interface
    documentation for the latest instructions and links.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所知，安装和设置细节可能会有所变化。我们建议你查阅当前的Unity手册和你的设备Unity界面文档以获取最新的说明和链接。
- en: Setting your target platform
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置你的目标平台
- en: 'New Unity projects normally default to targeting standalone desktop platforms.
    If this works for you, you do not need to change anything. Let''s see:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 新的Unity项目通常默认为针对独立桌面平台。如果你觉得这样没问题，你不需要做任何更改。让我们看看：
- en: Open the Build Settings window (File | Build Settings…) and review the Platform
    list
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开构建设置窗口（文件 | 构建设置…）并查看平台列表
- en: 'Choose your target platform. For example:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择你的目标平台。例如：
- en: If you're building for Oculus Rift or HTC VIVE, for example, choose PC, Mac
    & Linux Standalone
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例如，如果你正在为Oculus Rift或HTC VIVE构建，请选择PC, Mac & Linux Standalone
- en: If you're building for Windows MR, choose **U**niversal Windows Platform
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你正在为Windows MR构建，请选择**通用Windows平台**
- en: If you are building for Google Daydream on Android, choose **Android**
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你正在为Android上的Google Daydream构建，请选择**Android**
- en: If you are building for Google Cardboard on iOS, choose iOS
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你正在为iOS上的Google Cardboard构建，请选择iOS
- en: Then press Switch Platform
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后按“切换平台”
- en: Setting your XR SDK
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置你的XR SDK
- en: 'When your project is built with **Virtual Reality Supported** enabled in **Player
    Settings**, it renders stereoscopic camera views and runs on an HMD:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的项目在玩家设置中启用“支持虚拟现实”时构建，它将渲染立体相机视图并在HMD上运行：
- en: Go into Player Settings (Edit | Project Settings | Player).
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入玩家设置（编辑 | 项目设置 | 玩家）。
- en: In the Inspector window, find the XR Settings at the bottom and check the Virtual
    Reality Supported checkbox.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器窗口中，找到底部的XR设置并勾选“支持虚拟现实”复选框。
- en: Choose the Virtual Reality SDK you will require for your target device. Refer
    to the previous table.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择你目标设备所需的虚拟现实SDK。参考前面的表格。
- en: Depending on the target platform you are using, the Virtual Reality SDKs available
    in your Unity installation will vary. If your target VR is shown, then you're
    good to go. You can add others by pressing the ( + ) button in the list, and remove
    ones pressing the ( - ) button.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你使用的目标平台，你的Unity安装中可用的虚拟现实SDK可能会有所不同。如果你的目标VR显示出来，那么你就可以开始了。你可以通过按列表中的（+）按钮添加其他SDK，通过按（-）按钮移除SDK。
- en: For example, the following screenshot shows the Virtual Reality SDKs selected
    for the Standalone platform. With Virtual Reality Supported enabled, the app will
    use Oculus SDK if it can. If the app cannot initialize the Oculus SDK at runtime,
    it will then try the OpenVR SDK.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下截图显示了为独立平台选择的虚拟现实SDK。启用“支持虚拟现实”后，如果应用可以初始化Oculus SDK，它将使用Oculus SDK。如果应用在运行时无法初始化Oculus
    SDK，它将尝试使用OpenVR SDK。
- en: At this point, by pressing Play in the Unity Editor you may be able to preview
    your scene in VR. Different platforms support Play mode in different ways. Some
    do not support Editor previews at all.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在此阶段，通过在Unity编辑器中按“播放”，你可能能够预览你的VR场景。不同的平台以不同的方式支持播放模式。有些根本不支持编辑器预览。
- en: Installing your device toolkit
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装你的设备工具包
- en: 'Next, install your device-specific Unity package. If the toolkit is available
    in the Unity Asset Store, use the following steps:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，安装你的设备特定Unity包。如果工具包在Unity Asset Store中有提供，请按照以下步骤操作：
- en: Within Unity, open the Asset Store window (Window | Asset Store)
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Unity中，打开资产商店窗口（窗口 | 资产商店）
- en: Search for the package you want to install
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 搜索你想要安装的包
- en: On the asset's page, press Download, and then click on Install to install the
    files in your `Project Assets/` folder
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在资产的页面上，按“下载”，然后点击“安装”将文件安装到你的`Project Assets/`文件夹
- en: 'If you downloaded the package from the web separately, use the following steps:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你从网上单独下载了包，请按照以下步骤操作：
- en: Within Unity, select Assets | Import Package | Custom Package
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Unity中，选择资产 | 导入包 | 自定义包
- en: Navigate to the folder containing the `.unitypackage` file you downloaded
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到包含你下载的`.unitypackage`文件的文件夹
- en: Press Open and then click on Install to install the files into your `Project
    *Assets/*` folder
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按“打开”然后点击“安装”将文件安装到你的`Project *Assets/*`文件夹
- en: Feel free to explore the package contents files. Try opening and trying out
    any sample scenes included. And become familiar with any prefab objects (in a
    `Prefabs/` folder) that might be useful to you later in the book.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 随意探索包内容文件。尝试打开并尝试任何包含的示例场景。并熟悉任何可能对您有用的预制体对象（在“预制体/”文件夹中）。
- en: Creating the MeMyselfEye player prefab
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建MeMyselfEye玩家预制体
- en: Most VR toolkits provide a preconfigured player camera rig as a prefab that
    you can insert into your scene. This rig replaces the default `Main Camera`. For
    this book, since we do not know which particular devices and platforms you are
    targeting, we will make our own camera rig. Let's called it `MeMyselfEye` (hey,
    this is VR!). This will be helpful later on, and it will simplify our conversations
    in this book, since different VR devices may use different camera assets. *Like
    an empty vessel for your VR soul...*
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数VR工具包都提供了一个预配置的玩家相机装置作为预制体，您可以将其插入到场景中。这个装置替换了默认的“主相机”。对于这本书，由于我们不知道您针对的是哪些特定的设备和平台，我们将自己制作相机装置。让我们称它为“MeMyselfEye”（嘿，这是VR！）。这将有助于以后，它将简化本书中的对话，因为不同的VR设备可能使用不同的相机资源。*就像一个装满您VR灵魂的空容器...*
- en: We will reuse this `MeMyselfEye` prefab in chapters throughout the book as a
    convenient generic VR camera asset in our projects.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本书的各个章节中重复使用这个“MeMyselfEye”预制体，作为项目中方便的通用VR相机资源。
- en: 'A **prefab** is a reusable (prefabricated) object retained in your project''s
    Assets folder that can be added one or more times into project scenes. Let''s
    create the object using the following steps:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '**预制体**是一个可重复使用（预制）的对象，保留在您的项目“资产”文件夹中，可以将其一次或多次添加到项目场景中。让我们按照以下步骤创建对象：'
- en: Open Unity and the project from the last chapter. Then, open the diorama scene
    by navigating to File | Open Scene (or double-click on the scene object in the Project
    panel, under Assets).
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Unity和上一章的项目。然后，通过导航到文件 | 打开场景（或在“资产”面板下的场景对象上双击）来打开场景。
- en: From the main menu bar, navigate to GameObject | Create Empty.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从主菜单栏中，导航到GameObject | 创建空对象。
- en: Rename the object `MeMyselfEye`.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将对象重命名为“MeMyselfEye”。
- en: Ensure it has a reset transform (in its Inspector window's Transform pane, choose
    the gear icon in upper-right and select Reset).
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保它有一个重置变换（在其检查器窗口的变换面板中，选择右上角的齿轮图标并选择重置）。
- en: In the Hierarchy panel, drag the `Main Camera` object into `MeMyselfEye` so
    that it's a child object.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层次结构面板中，将“主相机”对象拖动到“MeMyselfEye”中，使其成为子对象。
- en: With the `Main Camera` object selected, reset its transform values (in the Transform
    panel, in the upper-right section, click on the *gear icon* and select Reset).
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择“主相机”对象后，重置其变换值（在变换面板的右上角，点击齿轮图标并选择重置）。
- en: Then position yourself near the middle of the scene. Select `MeMyselfEye` again
    and set its Position (`0`, `0`, `-1.5`).
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后将自己定位在场景中间附近。再次选择“MeMyselfEye”并设置其位置（`0`，`0`，`-1.5`）。
- en: On some VR devices, the player height is determined by the device calibration
    and sensors, that is, your height in real life, so leave the `Main Camera`'s Y-Position
    at `0`.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在某些VR设备上，玩家高度由设备校准和传感器确定，即您在现实生活中的身高，因此请将“主相机”的Y位置保持在`0`。
- en: On other VR devices, especially ones with no positional tracking, you need to
    specify the camera height. Select the `Main Camera` (or more specifically, the
    game object that has the Camera component on it) and set its Position (`0`, `1.4`,
    `0`)
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在其他VR设备上，特别是没有位置跟踪的设备上，您需要指定相机高度。选择“主相机”（或者更具体地说，具有相机组件的游戏对象）并设置其位置（`0`，`1.4`，`0`）。
- en: The Game view should show that we're inside the scene. If you recall the Ethan
    experiment that we did earlier, I picked a Y-position of `1.4` so that we'll be
    at about the eye level with Ethan.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏视图应显示我们处于场景内部。如果您还记得我们之前做的Ethan实验，我选择了`1.4`的Y位置，这样我们就会在Ethan的眼睛水平附近。
- en: 'Now, let''s save this as a reusable prefabricated object, or *prefab*, in the
    Project panel, under Assets so that we can use it again in the other scenes in
    the other chapters of this book:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将其保存为可重复使用的预制体对象，或称为“预制体”，在“资产”面板下，以便我们可以在本书的其他章节的其他场景中使用它：
- en: In Project panel, under Assets, select the top-level `Assets` folder, right-click
    and navigate to Create | Folder. Rename the folder `Prefabs`.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目面板中，在“资产”下选择顶级“资产”文件夹，右键单击并导航到创建 | 文件夹。将文件夹重命名为“预制体”。
- en: Drag the `MeMyselfEye` prefab into the Project panel, under the `Assets/Prefabs`
    folder to create a prefab.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将“MeMyselfEye”预制体拖动到项目面板中的“资产/预制体”文件夹下以创建一个预制体。
- en: 'Your hierarchy with the prefab is shown here:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 你的带有预制件的层次结构如下所示：
- en: '![](img/7cf68b49-49ad-4c21-9664-8d016486f8af.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7cf68b49-49ad-4c21-9664-8d016486f8af.png)'
- en: Now we will continue the discussion on how to build your project, on a per-platform
    basis. Please skip to the topic appropriate for your setup.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将继续讨论如何基于每个平台构建你的项目。请跳转到适合你设置的相应主题。
- en: If you want to try your projects on multiple platforms, say VIVE (Windows) and
    Daydream (Android), consider making separate prefabs for each target device, for
    example, `MeMyselfEye-SteamVR`, `MeMyselfEye-GVR`, and so on and then swap them
    in and out as needed.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要在多个平台上尝试你的项目，比如VIVE（Windows）和Daydream（Android），考虑为每个目标设备制作单独的预制件，例如，`MeMyselfEye-SteamVR`、`MeMyselfEye-GVR`等等，然后根据需要交换它们。
- en: Building for SteamVR
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为SteamVR构建
- en: 'To target your app to use *HTC VIVE* you will use the *OpenVR SDK*. This SDK
    also supports Oculus Rift with Touch controllers, and **Windows Immersive Mixed
    Reality** (**IMR**) devices:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 要将你的应用程序针对使用*HTC VIVE*，你将使用*OpenVR SDK*。此SDK还支持Oculus Rift带有触摸控制器，以及**Windows沉浸式混合现实**（**IMR**）设备：
- en: Configure your Unity Build Settings to target the Standalone platform.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置你的Unity构建设置以针对独立平台。
- en: In Player Settings, under XR Settings, set Virtual Reality to Enabled
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在玩家设置中，在XR设置下，将虚拟现实设置为启用
- en: Ensure OpenVR is at the top of the Virtual Reality SDKs list.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保OpenVR位于虚拟现实SDK列表的顶部。
- en: Download and Install the SteamVR Plugin from the Asset Store, as instructed
    previously.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照之前的说明，从资源商店下载并安装SteamVR插件。
- en: When you install SteamVR you may be prompted to accept recommended changes to
    your project settings. Unless you know better, we recommend you accept them.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你安装SteamVR时，可能会提示你接受对项目设置的推荐更改。除非你知道更好的方法，否则我们建议你接受它们。
- en: 'Now we will add the SteamVR camera rig to the `MeMyselfEye` object in our scene:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将把SteamVR相机装置添加到场景中的`MeMyselfEye`对象：
- en: Look in your Project window; under the `Assets` folder, you should have a folder
    named `SteamVR`.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的项目窗口中查看；在`Assets`文件夹下，你应该有一个名为`SteamVR`的文件夹。
- en: Within that is a subfolder called `Prefabs`. Drag the prefab named `[CameraRig]`
    from the `Assets/SteamVR/Prefabs/` folder into your hierarchy. Place it as a child
    object of `MeMyselfEy*e*`.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在其中有一个名为`Prefabs`的子文件夹。将名为`[CameraRig]`的预制件从`Assets/SteamVR/Prefabs/`文件夹拖动到你的层次结构中。将其放置为`MeMyselfEy*e*`的子对象。
- en: If necessary, reset its Transform to Position (`0`, `0`, `0`).
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果需要，将其变换位置重置为（`0`，`0`，`0`）。
- en: Disable the `Main Camera` object, also under `MeMyselfEye`; you can disable
    objects by unchecking the enable checkbox in the top-left of its Inspector window.
    Alternatively, you can just delete the `Main Camera` object.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MeMyselfEye`下禁用`Main Camera`对象；你可以通过在其检查器窗口的左上角取消选中启用复选框来禁用对象。或者，你也可以直接删除`Main
    Camera`对象。
- en: Save the prefab by selecting `MeMyselfEye` in Hierarchy, then press its Apply
    button in the Inspector.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在层次结构中选择`MeMyselfEye`并按下其检查器中的应用按钮来保存预制件。
- en: Note that the SteamVR camera rig Y position should be set to 0 as it will use
    the real-life height of the player to set the camera height in real time.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，SteamVR相机装置的Y位置应该设置为0，因为它将使用玩家的实际身高来实时设置相机高度。
- en: To test it out, make sure that the VR device is properly connected and turned
    on. You should have the SteamVR app opened on the Windows desktop. Click on the
    game Play button at the top-center of the Unity Editor. Put on the headset, and
    it should be awesome! Within VR, you can look all around—left, right, up, down,
    and behind you. You can lean over and lean in. Using the hand controller's thumb
    pad, you can make Ethan walk, run, and jump just like we did earlier.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试它，确保VR设备已经正确连接并开启。你应该在Windows桌面上打开SteamVR应用程序。点击Unity编辑器顶部的游戏播放按钮。戴上头戴式设备，它应该很棒！在VR中，你可以四处查看——左、右、上、下以及背后。你可以倾斜身体，也可以向前倾斜。使用手柄的拇指垫，你可以让Ethan像我们之前做的那样行走、奔跑和跳跃。
- en: 'Now you can build your game as a separate executable app using the following
    steps. Most likely, you''ve done this before, at least for non-VR apps. It''s
    pretty much the same:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以按照以下步骤构建你的游戏作为一个独立的可执行应用程序。很可能是你已经做过这件事了，至少对于非VR应用程序来说是这样。基本上是一样的：
- en: From the main menu bar, navigate to File | Build Settings...
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从主菜单栏，导航到文件 | 构建设置...
- en: If the current scene is not already in the Scenes to Build list, press Add Open
    Scenes.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果当前场景尚未在构建场景列表中，请按添加打开场景。
- en: Click on Build and set its name to `Diorama`.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击构建并将其名称设置为`Diorama`。
- en: I like to keep my builds in a subdirectory named `Build`; create one if you
    want to.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我喜欢将我的构建保存在名为`Build`的子目录中；如果你想要的话，可以创建一个。
- en: Click on Save.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击保存。
- en: 'An executable will be created in your Build folder. Run `Diorama` as you would
    do for any executable application: double-click on it.'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的构建文件夹中将会创建一个可执行文件。像运行任何可执行应用程序一样运行`Diorama`：双击它。
- en: For more information on Unity support for OpenVR, see [https://docs.unity3d.com/Manual/VRDevices-OpenVR.html](https://docs.unity3d.com/Manual/VRDevices-OpenVR.html).
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 关于Unity对OpenVR的支持更多信息，请参阅[https://docs.unity3d.com/Manual/VRDevices-OpenVR.html](https://docs.unity3d.com/Manual/VRDevices-OpenVR.html)。
- en: Building for Oculus Rift
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为Oculus Rift构建
- en: 'To build for Oculus Rift you can use OpenVR. But if you plan to publish in
    the Oculus Store and/or use Oculus-specific SDK for other high-value features
    offered in the Oculus ecosystem, you will need to build to the Oculus SDK, as
    follows:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 要为Oculus Rift构建，你可以使用OpenVR。但如果你计划在Oculus商店发布，或使用Oculus特定的SDK来利用Oculus生态系统中的其他高价值功能，你需要构建到Oculus
    SDK，如下所示：
- en: Configure your Unity Build Settings to target the Standalone platform
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置你的Unity构建设置以针对Standalone平台
- en: In **Player Settings**, under XR Settings, set **Virtual Reality Enabled**
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**玩家设置**中，在XR设置下，设置**虚拟现实启用**
- en: Ensure **Oculus** is at the top of the **Virtual Reality SDKs** list.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保**Oculus**位于**虚拟现实SDKs**列表的顶部。
- en: Download and **Install** the Oculus Integration package from the Asset Store,
    as instructed previously
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照之前的说明，从资源商店下载并**安装**Oculus Integration包。
- en: 'Now we will add the OVR camera rig to the `MeMyselfEye` object in our scene:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将OVR相机架添加到场景中的`MeMyselfEye`对象：
- en: Look in your Project window, under the *Assets* folder you should have a folder
    named *OVR*.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的项目窗口中，在*Assets*文件夹下你应该有一个名为*OVR*的文件夹。
- en: Within that is a subfolder called `Prefabs`. Drag the prefab named `OVRCameraRig`
    from the `Assets/OVR/Prefabs/` folder into your Hierarchy. Place it as a child
    object of `MeMyselfEye`.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在其中有一个名为`Prefabs`的子文件夹。将名为`OVRCameraRig`的预制件从`Assets/OVR/Prefabs/`文件夹拖到你的层次结构中。将其放置为`MeMyselfEye`的子对象。
- en: Set its Y position to 1.6 by setting its Transform to Position to (`0`, `1.6`,
    `0`).
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将其变换到位置（`0`，`1.6`，`0`）来将其Y位置设置为1.6。
- en: Disable the `Main Camera` object, also under `MeMyselfEye`. You can disable
    objects by unchecking the enable checkbox in the top-left of its Inspector window.
    Alternatively, you can just delete the `Main Camera` object.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MeMyselfEye`下禁用`Main Camera`对象，也可以在检查器窗口的左上角取消选中启用复选框。或者，你也可以直接删除`Main Camera`对象。
- en: Save the prefab by selecting `MeMyselfEye` in Hierarchy, then press its **Apply**
    button in the Inspector.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在层次结构中选择`MeMyselfEye`并按下检查器中的**应用**按钮来保存预制件。
- en: Note that the OVR camera rig should be set to your desired height (1.6 in this
    case), which will be accommodated at runtime based on the height you configured
    in the Oculus runtime device configuration.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，OVR相机架应该设置为你的期望高度（在这个例子中是1.6英寸），运行时会根据你在Oculus运行时设备配置中设置的高度进行调整。
- en: To test it out, make sure that the VR device is properly connected and turned
    on. You should have the Oculus runtime app opened on the Windows desktop. Click
    on the game Play button at the top-center of the Unity Editor. Put on the headset,
    and it should be awesome! Within VR, you can look all around—left, right, up,
    down, and behind you. You can lean over and lean in. Using the hand controller’s
    thumbstick, you can make Ethan walk, run, and jump just like we did earlier.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试它，确保VR设备已正确连接并开启。你应该在Windows桌面上打开Oculus运行时应用程序。在Unity编辑器的顶部中央点击游戏播放按钮。戴上头戴式设备，它应该很棒！在VR中，你可以四处查看——左、右、上、下以及背后。你可以倾斜身体，靠近或远离。使用手柄的摇杆，你可以让Ethan像我们之前做的那样行走、奔跑和跳跃。
- en: 'Note that the Oculus package installs helpful menu items on the Unity Editor
    menu bar. We won''t go into details here, and they are subject to change. We encourage
    you to explore the options and shortcuts they provide. See the screenshot:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，Oculus包会在Unity编辑器的菜单栏上安装有用的菜单项。这里我们不会详细介绍，它们可能会发生变化。我们鼓励你探索它们提供的选项和快捷方式。请参见截图：
- en: '![](img/26814764-08c4-45c6-8f1b-faae20685751.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/26814764-08c4-45c6-8f1b-faae20685751.png)'
- en: 'To include Oculus Dash support, you must use Oculus OVR version 1.19 or later
    (included with Unity 2017.3 or later). Then:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 要包含Oculus Dash支持，你必须使用Oculus OVR版本1.19或更高版本（包含在Unity 2017.3或更高版本中）。然后：
- en: In Player Settings, XR panel, unfold the Oculus SDK for additional settings
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在玩家设置中，XR面板，展开Oculus SDK以获取更多设置
- en: Check the **Shared Depth Buffer** checkbox
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选中**共享深度缓冲区**复选框
- en: 'Check the **Dash Support** checkbox:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选中**Dash支持**复选框：
- en: '![](img/1c4a3746-8d2f-4e7c-98f5-a0c584a306bf.png)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1c4a3746-8d2f-4e7c-98f5-a0c584a306bf.png)'
- en: For more information on Oculus Dash support in Unity, see [https://developer.oculus.com/documentation/unity/latest/concepts/unity-dash/](https://developer.oculus.com/documentation/unity/latest/concepts/unity-dash/).
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Unity中Oculus Dash支持的更多信息，请参阅[https://developer.oculus.com/documentation/unity/latest/concepts/unity-dash/](https://developer.oculus.com/documentation/unity/latest/concepts/unity-dash/)。
- en: 'Now you can build your game as a separate executable app using the following
    steps. Most likely, you''ve done this before, at least for non-VR apps. It''s
    pretty much the same:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以按照以下步骤构建你的游戏作为一个单独的可执行应用程序。很可能是你已经这样做过了，至少对于非VR应用程序来说是这样。基本上是一样的：
- en: From the main menu bar, navigate to File | Build Settings...
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从主菜单栏，导航到文件 | 构建设置...
- en: If the current scene is not already in the **Scenes to Build** list, press **Add
    Open Scenes**
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果当前场景尚未在**构建场景**列表中，请按**添加打开场景**
- en: Click on **Build** and set its name to `Diorama`
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**构建**并将其名称设置为`Diorama`
- en: I like to keep my builds in a subdirectory named `Build`; create one if you
    want to
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我喜欢将我的构建保存在名为`构建`的子目录中；如果你想要的话，创建一个。
- en: Click on **Save**
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**保存**
- en: 'An executable will be created in your `Build` folder. Run `Diorama` as you
    would do for any executable application: double-click on it.'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的`构建`文件夹中将会创建一个可执行文件。像运行任何可执行应用程序一样运行`Diorama`：双击它。
- en: For more information on Unity support for Oculus, see [https://developer.oculus.com/documentation/unity/latest/concepts/book-unity-gsg/.](https://developer.oculus.com/documentation/unity/latest/concepts/book-unity-gsg/)
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Unity对Oculus的支持的更多信息，请参阅[https://developer.oculus.com/documentation/unity/latest/concepts/book-unity-gsg/](https://developer.oculus.com/documentation/unity/latest/concepts/book-unity-gsg/)
- en: Building for Windows Immersive MR
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为Windows沉浸式MR构建
- en: Microsoft's 3D media **Mixed Reality** strategy is to support the spectrum of
    devices and applications from virtual reality to augmented reality. This book
    and our projects are about VR. At the other end is the Microsoft HoloLens wearable
    AR device. The MixedRealityToolkit-Unity package that we will use includes support
    for both immersive MR headsets and HoloLens.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 微软的3D媒体**混合现实**策略是支持从虚拟现实到增强现实的各种设备和应用程序。这本书和我们的项目是关于VR的。在另一端是微软的可穿戴AR设备HoloLens。我们将使用的MixedRealityToolkit-Unity包包括对沉浸式MR头戴设备和HoloLens的支持。
- en: 'To allow your app to use a **Windows immersive Mixed Reality** (**IMR**) headset,
    you will use the Window Mixed Reality SDK, as follows:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使你的应用程序能够使用**Windows沉浸式混合现实**（**IMR**）头戴设备，你将使用Window Mixed Reality SDK，如下所示：
- en: Configure your Unity **Build Settings** to target the **Universal Windows Platform** platform.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你的Unity **构建设置**配置为目标为**通用Windows平台**。
- en: In Player Settings, under XR Setting**s**, set **Virtual Reality Enabled**
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在玩家设置中，在XR设置**下**，设置**虚拟现实启用**
- en: Ensure **Windows** Mixed **Reality** is at the top of the **Virtual Reality**
    **SDKs** list.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保在**虚拟现实****SDKs**列表中**Windows**混合**现实**位于顶部。
- en: Download and install the Mixed Reality Toolkit Unity, as instructed previously.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照之前的说明下载并安装Mixed Reality Toolkit Unity。
- en: We also recommend you install its sister examples unity package from the same
    location.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还建议你安装其姐妹示例unity包，位置相同。
- en: 'Now we will add the `MixedRealityCamera` rig to the `MeMyselfEye` object in
    our scene:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将把`MixedRealityCamera`装置添加到场景中的`MeMyselfEye`对象：
- en: Look in your Project window; under the `Assets` folder, you should have a folder
    named `HoloToolkit` (or `MixedRealityToolkit`).
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目窗口中查看；在`Assets`文件夹下，你应该有一个名为`HoloToolkit`（或`MixedRealityToolkit`）的文件夹。
- en: Within that is a subfolder called `Prefabs`. Drag the prefab named `MixedRealityCameraParent`
    from the `Assets/HoloToolkit/Prefabs/` folder into your Hierarchy. Place it as
    a child object of `MeMyselfEye`.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在其中有一个名为`Prefabs`的子文件夹。将名为`MixedRealityCameraParent`的预制件从`Assets/HoloToolkit/Prefabs/`文件夹拖动到你的层次结构中。将其放置为`MeMyselfEye`的子对象。
- en: If necessary, reset its Transform to **Position** (`0`, `0`, `0`).
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果需要，将其变换重置为**位置**（`0`，`0`，`0`）。
- en: Disable the `Main Camera` object, also under `MeMyselfEye`. You can disable
    objects by unchecking the enable checkbox in the top-left of its Inspector window.
    Alternatively, you can just delete the `Main Camera` object.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MeMyselfEye`下禁用`主相机`对象。你可以通过在其检查器窗口的左上角取消选中启用复选框来禁用对象。或者，你也可以直接删除`主相机`对象。
- en: Save the prefab by selecting `MeMyselfEye` in Hierarchy, then press its Apply
    button in the Inspector.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在层次结构中选择`MeMyselfEye`并按下检查器中的应用按钮来保存预制件。
- en: Note that the `MixedRealityCameraParent` rig y position should be set to 0 as
    it will use the real-life height of the player to set the camera height in real
    time.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`MixedRealityCameraParent`装置的y位置应设置为0，因为它将使用玩家的实际身高来实时设置相机高度。
- en: To test it out, make sure that the VR device is properly connected and turned
    on. You should have the MR Portal app opened in the Windows desktop. Click on
    the game Play button at the top-center of the Unity Editor. Put on the headset,
    and it should be awesome! Within VR, you can look all around—left, right, up,
    down, and behind you. You can lean over and lean in. Using the hand controller's
    thumb pad, you can make Ethan walk, run, and jump just like we did earlier.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试它，请确保VR设备已正确连接并开启。您应该在Windows桌面上打开MR Portal应用程序。点击Unity编辑器顶部中央的游戏播放按钮。戴上头戴式设备，它应该很棒！在VR中，您可以四处查看——左、右、上、下和背后。您可以倾斜身体，并向前或向后倾斜。使用手柄的拇指垫，您可以让Ethan像我们之前做的那样行走、奔跑和跳跃。
- en: Setting up Windows 10 Developer mode
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置Windows 10开发者模式
- en: 'For Windows MR, you must be developing on Windows 10, with Developer mode enabled.
    To set Developer mode:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Windows MR，您必须在Windows 10上开发，并启用开发者模式。要设置开发者模式：
- en: Go to **Action Center** | **All Settings** | **Update & Security** | **For Developers**.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往**操作中心** | **所有设置** | **更新与安全** | **开发者**
- en: 'Select **Developer mode**, as shown:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**开发者模式**，如图所示：
- en: '![](img/33ad8bb0-ecdc-4216-9269-6d7fcc2ba72b.png)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/33ad8bb0-ecdc-4216-9269-6d7fcc2ba72b.png)'
- en: Installing UWP support in Visual Studio
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Visual Studio中安装UWP支持
- en: When you install Unity, you have the option to install *Microsoft Visual Studio
    Tools for Unity* as the default script editor. It's a great editor and debugging
    environment. However, this edition installed with Unity is not a full version
    of Visual Studio. To target your build as a separate UWP app, you will need to
    use a full version of Visual Studio.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 当您安装Unity时，您可以选择安装**Microsoft Visual Studio Tools for Unity**作为默认脚本编辑器。这是一个出色的编辑器和调试环境。然而，与Unity一起安装的这个版本并不是Visual
    Studio的完整版本。要将您的构建作为单独的UWP应用程序，您将需要使用Visual Studio的完整版本。
- en: Visual Studio is a powerful **integrated developer environment** (**IDE**) for
    all kinds of projects. When we build for UWP from Unity we will actually build
    a Visual Studio-ready project folder that you can then open in VS to complete
    the compile, build and deploy process, to run the app on your device.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio是一个强大的**集成开发环境**（**IDE**），适用于各种项目。当我们从Unity构建UWP时，我们实际上会构建一个Visual
    Studio准备好的项目文件夹，然后您可以在VS中打开它以完成编译、构建和部署过程，在您的设备上运行应用程序。
- en: 'Visual Studio comes in three editions, *Community*, *Professional*, and *Enterprise*;
    any of these are sufficient for us. The Community version is *free* and can be
    downloaded from here: [https://www.visualstudio.com/vs/.](https://www.visualstudio.com/vs/)'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio有三种版本，*社区版*、*专业版*和*企业版*；任何一种对我们来说都足够了。社区版是*免费*的，可以从这里下载：[https://www.visualstudio.com/vs/](https://www.visualstudio.com/vs/)
- en: 'Once the installer is downloaded, open it to choose which components to install.
    Under the Workloads tab we have selected:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦下载了安装程序，打开它以选择要安装的组件。在**工作负载**选项卡下，我们已选择：
- en: Universal Windows Platform development
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通用Windows平台开发
- en: Game development with Unity
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Unity进行游戏开发
- en: '![](img/d74623b1-ef69-4eeb-8a4a-44edb6d98eee.png)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d74623b1-ef69-4eeb-8a4a-44edb6d98eee.png)'
- en: 'Also, select the Game development with Unity options, as follows:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，选择**使用Unity进行游戏开发**选项，如下所示：
- en: '![](img/3e9d595c-d7f1-4074-b331-c9148e9c0620.png)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3e9d595c-d7f1-4074-b331-c9148e9c0620.png)'
- en: 'We can now go into Unity. First, we should make sure Unity knows we''re using
    Visual Studio:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以进入Unity。首先，我们应该确保Unity知道我们正在使用Visual Studio：
- en: Go to **Edit** | **Preferences**
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往**编辑** | **首选项**
- en: 'In the **External Tools** tab, make sure **Visual Studio** is selected as your
    **External Script Editor**, like so:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**外部工具**选项卡中，确保已选择**Visual Studio**作为您的**外部脚本编辑器**，如下所示：
- en: '![](img/0bcff01c-9e91-412a-97e6-3f7ddcfa0c72.png)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0bcff01c-9e91-412a-97e6-3f7ddcfa0c72.png)'
- en: UWP build
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: UWP构建
- en: 'Now, you can build your game as a separate executable app using the following
    steps:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以使用以下步骤将您的游戏构建为单独的可执行应用程序：
- en: From the main menu bar, navigate to **File** | **Build Settings...**
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从主菜单栏，导航到**文件** | **构建设置...**
- en: If the current scene is not already in the **Scenes to Build** list, press **Add
    Open Scenes**
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果当前场景尚未在**要构建的场景**列表中，请按**添加打开的场景**
- en: 'On the right side of the dialog are options:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对话框的右侧有选项：
- en: 'Target Device: PC'
  id: totrans-230
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标设备：PC
- en: 'Build Type: D3D'
  id: totrans-231
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建类型：D3D
- en: 'SDK: Latest Installed (for example, 10.0.16299.0)'
  id: totrans-232
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: SDK：最新安装的（例如，10.0.16299.0）
- en: Click on **Build** and set its name
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**构建**并设置其名称
- en: I like to keep my builds in a subdirectory named Build; create one if you want
    to
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我喜欢将我的构建保存在名为Build的子目录中；如果您想的话，可以创建一个
- en: Click on **Save**
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**保存**
- en: 'Note that the Mixed Reality ToolKit provides shortcuts to these and other settings
    and services, as shown:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，混合现实工具包提供了对这些和其他设置及服务的快捷方式，如下所示：
- en: '![](img/1b4a8785-523f-4860-aa8d-592eac9e819d.png)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1b4a8785-523f-4860-aa8d-592eac9e819d.png)'
- en: 'Now open the project in Visual Studio:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在 Visual Studio 中打开项目：
- en: An easy way is to navigate to the Build folder in File Explorer and look for
    the `.sln` file for the project (SLN is the Microsoft VS *solution* file). Double-click
    it to open the project in Visual Studio.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一种简单的方法是导航到文件资源管理器中的“构建”文件夹，查找项目的 `.sln` 文件（SLN 是 Microsoft VS *解决方案*文件）。双击它以在
    Visual Studio 中打开项目。
- en: 'Choose the solution configuration: Debug, Master or Release.'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择解决方案配置：调试、主版本或发布版本。
- en: Set the target to x64.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置目标为 x64。
- en: Press Play Local Machine to build the solution.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按“本地计算机上的播放”以构建解决方案。
- en: For more information on Unity support for Windows Mixed Reality, see [https://github.com/Microsoft/MixedRealityToolkit-Unity](https://github.com/Microsoft/MixedRealityToolkit-Unity),
    including the link to the Getting Started page.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 Unity 对 Windows 混合现实支持的信息，请参阅 [https://github.com/Microsoft/MixedRealityToolkit-Unity](https://github.com/Microsoft/MixedRealityToolkit-Unity)，包括前往“入门”页面的链接。
- en: Setting up for Android devices
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为 Android 设备设置
- en: To develop VR apps that will run on Google Daydream, Cardboard, GearVR, Oculus
    GO, or other Android devices, we will need to set up a development machine for
    Android development.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 要开发将在 Google Daydream、Cardboard、GearVR、Oculus GO 或其他 Android 设备上运行的 VR 应用程序，我们需要为
    Android 开发设置一个开发机器。
- en: This section will help you set up your Windows PC or Mac. The requirements are
    not specific to virtual reality; these are the same steps required by anyone building
    any Android app from Unity. The process is also well documented elsewhere, including
    the Unity documentation at [https://docs.unity3d.com/Manual/android-sdksetup.html](https://docs.unity3d.com/Manual/android-sdksetup.html).
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将帮助您设置您的 Windows PC 或 Mac。这些要求并不特定于虚拟现实；这些是任何从 Unity 构建Android应用的任何人所需相同步骤。该过程在其他地方也有很好的文档记录，包括
    Unity 文档 [https://docs.unity3d.com/Manual/android-sdksetup.html](https://docs.unity3d.com/Manual/android-sdksetup.html)。
- en: 'The steps include:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤包括：
- en: Install Java Development Kit
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Java 开发工具包
- en: Install Android SDK
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Android SDK
- en: Install USB device drivers and debugging
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 USB 设备驱动程序和调试
- en: Configure the Unity External Tools
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置 Unity 外部工具
- en: Configure the Unity Player Settings for Android
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置 Android Unity Player 设置
- en: OK, let's get going.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们开始吧。
- en: Installing the Java Development Kit (JDK)
  id: totrans-254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Java 开发工具包 (JDK)
- en: 'You may already have Java installed on your machine. You can check by opening
    a terminal window and running the command `java-version`. If you do not have Java
    or need to upgrade, follow the steps:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 您的计算机上可能已经安装了 Java。您可以通过打开终端窗口并运行命令 `java-version` 来检查。如果您没有 Java 或需要升级，请按照以下步骤操作：
- en: Browse on over to the Java SE Downloads web page at [http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html)
    and get it. Look for the **JDK** button icon, which takes you to the downloads
    page.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问 Java SE 下载网页 [http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html)
    并下载它。寻找 **JDK** 按钮图标，它将带您进入下载页面。
- en: Choose the package for your system. For example, for Windows choose Windows
    x64\. After the file downloads, open it and follow the installation instructions.
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择适合您系统的包。例如，对于 Windows，请选择 Windows x64。文件下载后，打开它并按照安装说明进行操作。
- en: Make a note of the installation directory for later reference.
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 记下安装目录以备后用。
- en: Once installed, open a fresh terminal window and run `java -version` once more
    to verify.
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，打开一个新的终端窗口并再次运行 `java -version` 以进行验证。
- en: Whether you just installed the JDK or it was already there, please make a note
    of its location on your disk. You will need to tell Unity this information in
    a later step.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您是刚刚安装了 JDK 还是它已经存在，请记下其在磁盘上的位置。您将在稍后的步骤中需要告诉 Unity 这个信息。
- en: 'On Windows, the path is probably something like Windows: `C:\Program Files\Java\jdk1.8.0_111\bin`.'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '在 Windows 上，路径可能类似于 Windows: `C:\Program Files\Java\jdk1.8.0_111\bin`。'
- en: 'If you can''t find it, open Windows Explorer, navigate to the `\Program Files`
    folder, look for Java, and drill down until you see its bin directory, as the
    following screenshot shows:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 如果找不到，请打开 Windows 资源管理器，导航到 `\Program Files` 文件夹，查找 Java，然后向下钻取，直到看到其 bin 目录，如下截图所示：
- en: '![](img/0aa5e5e4-16ac-472a-91a6-32338e407bb9.png)'
  id: totrans-263
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0aa5e5e4-16ac-472a-91a6-32338e407bb9.png)'
- en: 'On OS X, the path is probably something like: `/Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home`.'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 在 OS X 上，路径可能类似于：`/Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home`。
- en: 'If you can''t find it, from a terminal window, run the following command: `/usr/libexec/java_home`.'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 如果找不到，从终端窗口运行以下命令：`/usr/libexec/java_home`。
- en: Installing Android SDK
  id: totrans-266
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Android SDK
- en: You also need to install the Android SDK. Specifically, you need the **Android
    SDK Manager**. This is available by itself as a command-line tool or part of the
    full Android Studio IDE. If you can afford the disk space I recommend just installing
    Android Studio, as it provides a nice graphical interface for SDK Manager.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要安装 Android SDK。具体来说，你需要 **Android SDK 管理器**。它可以作为独立的命令行工具或 Android Studio
    IDE 的一部分使用。如果你负担得起磁盘空间，我建议只安装 Android Studio，因为它为 SDK 管理器提供了一个不错的图形界面。
- en: To install Android Studio IDE, go to [https://developer.android.com/studio/install.html](https://developer.android.com/studio/index.html)
    and click Download Android Studio. When the download is done, open it and follow
    the installation instructions.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 Android Studio IDE，请访问 [https://developer.android.com/studio/install.html](https://developer.android.com/studio/index.html)
    并点击下载 Android Studio。下载完成后，打开它并按照安装说明进行操作。
- en: 'You will be prompted for the locations of the Android Studio IDE and the SDK.
    You can accept the default locations or change them. Please make a note of the
    SDK path location; you will need to tell Unity this information in a later step:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 你将需要输入 Android Studio IDE 和 SDK 的位置。你可以接受默认位置或更改它们。请记下 SDK 路径位置；你将在稍后的步骤中需要告诉
    Unity 这个信息：
- en: '![](img/9370026a-1810-45a6-acfb-1b8dea4c623c.png)'
  id: totrans-270
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9370026a-1810-45a6-acfb-1b8dea4c623c.png)'
- en: Personally, I have more room on my `D:` drive so I installed the app into `D:\Programs\Android\Android
    Studio`. And I like to keep the SDK near the Android Studio program files, as
    it's easier to find again that way, so I change the Android SDK Installation Location
    to `D:\Programs\Android\sdk`.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 个人来说，我的 `D:` 驱动器上有更多空间，所以我将应用程序安装到了 `D:\Programs\Android\Android Studio`。我喜欢将
    SDK 放在 Android Studio 程序文件附近，这样更容易找到，所以我将 Android SDK 安装位置更改为 `D:\Programs\Android\sdk`。
- en: Via Command Line Tools
  id: totrans-272
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过命令行工具
- en: 'Unity really only needs the command-line tools to build projects for Android.
    If you prefer, you can install just that package and save disk space. Scroll to
    the section named Get just the command line tools at the bottom of the downloads
    page. Select the package for your platform:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: Unity 实际上只需要命令行工具来为 Android 构建项目。如果你愿意，你可以只安装这个包来节省磁盘空间。滚动到下载页面底部的“仅获取命令行工具”部分。选择适合你平台的包：
- en: '![](img/f4dc588f-941d-476a-a6d8-6d9bebc90b60.png)'
  id: totrans-274
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f4dc588f-941d-476a-a6d8-6d9bebc90b60.png)'
- en: This is a ZIP file; uncompress it to a folder and please remember its location.
    As mentioned, on Windows I like to use `D:\Programs\Android\sdk`. This will contain
    a `tools` subfolder.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个 ZIP 文件；解压缩到一个文件夹中，并请记住其位置。如前所述，在 Windows 上我喜欢使用 `D:\Programs\Android\sdk`。这将包含一个
    `tools` 子文件夹。
- en: The ZIP is only the tools, not the actual SDK. Use the `sdkmanager` to download
    the packages you'll need. See [https://developer.android.com/studio/command-line/sdkmanager.html](https://developer.android.com/studio/command-line/sdkmanager.html)
    for details.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: ZIP 文件只包含工具，而不是实际的 SDK。使用 `sdkmanager` 下载你需要的包。有关详细信息，请参阅 [https://developer.android.com/studio/command-line/sdkmanager.html](https://developer.android.com/studio/command-line/sdkmanager.html)。
- en: 'To list the installed and available packages, run `sdkmanager --list`. You
    can install multiple packages by listing them in quotes, delimited with a semicolon
    as follows:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 要列出已安装和可用的包，运行 `sdkmanager --list`。你可以通过在引号中列出它们并以分号分隔来安装多个包，如下所示：
- en: '[PRE0]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'As of writing, the minimum Android API levels are as follows (check the current
    documentation for changes):'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 截至撰写本文时，最低的 Android API 级别如下（请查阅当前文档以了解更改）：
- en: '**Cardboard**: API Level 19 (Android 4.4 *KitKat*)'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '**Cardboard**: API 级别 19 (Android 4.4 *KitKat*)'
- en: '**GearVR**: API Level 21 (Android 5.0 *Lollipop*)'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '**GearVR**: API 级别 21 (Android 5.0 *Lollipop*)'
- en: '**Daydream**: API Level 24 (Android 7.0 *Nougat*)'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '**Daydream**: API 级别 24 (Android 7.0 *Nougat*)'
- en: About your Android SDK root path location
  id: totrans-283
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于你的 Android SDK 根路径位置
- en: 'If you already had Android installed, or if you forget where the SDK is installed,
    you can find the root path by opening the SDK Manager GUI. While Android Studio
    is open, navigate to the main menu and **Tools** | **Android** | **SDK Manag****er**.
    You can find the path near the top:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经安装了 Android，或者忘记了 SDK 的安装位置，你可以通过打开 SDK 管理器 GUI 来找到根路径。当 Android Studio
    打开时，导航到主菜单并选择 **工具** | **Android** | **SDK 管理器**。路径通常在顶部附近：
- en: '![](img/805fd349-82c3-4910-bda9-3febea4e9e75.png)'
  id: totrans-285
  prefs: []
  type: TYPE_IMG
  zh: '![](img/805fd349-82c3-4910-bda9-3febea4e9e75.png)'
- en: 'On Windows, the path is probably something like:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 上，路径可能类似于：
- en: 'Windows: `C:\Program Files\Android\sdk`, or `C:/Users/Yourname/AppData/Local/Android/Sdk`'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Windows: `C:\Program Files\Android\sdk`，或 `C:/Users/Yourname/AppData/Local/Android/Sdk`'
- en: 'On OS X, the path is probably something like:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 在 OS X 上，路径可能类似于：
- en: 'OS X: `/Users/Yourname/Library/Android/sdk `'
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'OS X: `/Users/Yourname/Library/Android/sdk `'
- en: Installing USB device debugging and connection
  id: totrans-290
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 USB 设备调试和连接
- en: 'The next step is to enable USB debugging on your Android device. This is part
    of the Developer Options in your Android Settings. But Developer Options may not
    be visible and has to be enabled:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是在您的 Android 设备上启用 USB 调试。这是您 Android 设置中的开发者选项的一部分。但是开发者选项可能不可见，并且需要启用：
- en: Find the Build number property in **Settings** | **About** on the device. Depending
    on your device you may even need to drill down another level or two (such as **Settings**
    | **About** | **Software Information** | **More** | **Build number**).
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设备上找到 **Settings** | **About** 中的 **Build number** 属性。根据您的设备，您可能甚至需要深入另一个或两个层级（例如
    **Settings** | **About** | **Software Information** | **More** | **Build number**）。
- en: Now for the magic incantation. Tap on the build number seven times. It'll count
    down until the **Developer Options** are enabled, and will now appear as another
    choice in the Settings.
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在是时候进行魔法咒语了。点击构建编号七次。它将倒计时直到 **开发者选项** 被启用，并且现在将作为设置中的另一个选项出现。
- en: Go to Settings | Developer options, find USB debugging, and enable it.
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往 Settings | Developer options，找到 USB debugging 并启用它。
- en: Now connect the device to your development machine via USB cable.
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在通过 USB 线缆将设备连接到您的开发机器。
- en: The Android device may automatically be recognized. If you are prompted to update
    the drivers, you can do this through the Windows Device Manager.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 安卓设备可能会自动被识别。如果您被提示更新驱动程序，您可以通过 Windows 设备管理器来完成此操作。
- en: 'On Windows, if the device is not recognized, you may need to download the Google
    USB Driver. You can do this through the SDK Manager, under the SDK Tools tab.
    For more information see [https://developer.android.com/studio/run/win-usb.html](https://developer.android.com/studio/run/win-usb.html).
    The following screenshot, for example, shows the SDK Manager’s SDK Tools tab with
    the Google USB Driver selected:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 上，如果设备未被识别，您可能需要下载 Google USB Driver。您可以通过 SDK Manager 下的 SDK Tools
    选项卡来完成此操作。更多信息请参阅 [https://developer.android.com/studio/run/win-usb.html](https://developer.android.com/studio/run/win-usb.html)。例如，以下截图显示了
    SDK Manager 的 SDK Tools 选项卡，其中已选择 Google USB Driver：
- en: '![](img/8290962e-04af-4279-af5a-505b23c6df1c.png)'
  id: totrans-298
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8290962e-04af-4279-af5a-505b23c6df1c.png)'
- en: Great job so far!
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，做得很好！
- en: Configuring the Unity External Tools
  id: totrans-300
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 Unity 外部工具
- en: 'Armed with all the stuff we need and the paths to the tools we installed, we
    can now go back into Unity. We need to tell Unity where to find all the Java and
    Android stuff. Note that if you skip this step, then Unity will prompt you for
    the folders when building the app:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 凭借我们需要的所有东西以及安装的工具的路径，我们现在可以回到 Unity 中。我们需要告诉 Unity 哪里可以找到所有的 Java 和 Android
    内容。注意，如果您跳过此步骤，那么在构建应用程序时，Unity 将提示您选择文件夹：
- en: On Windows, navigate to main menu and to Edit | Preferences, then select the
    External Toolstab on the left. On OS X it’s in Unity | Preferences.
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Windows 上，导航到主菜单并选择 Edit | Preferences，然后在左侧选择 External Tools 选项卡。在 OS X 上，它在
    Unity | Preferences 中。
- en: In the Android SDK text slot, paste the path of your Android SDK.
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Android SDK 文本框中，粘贴您的 Android SDK 路径。
- en: In the Java JDK text slot, paste the path of your Java JDK.
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Java JDK 文本框中，粘贴您的 Java JDK 路径。
- en: 'The Unity Preferences with my SDK and JDK are shown here:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 这里显示了带有我的 SDK 和 JDK 的 Unity Preferences：
- en: '![](img/f7812a57-fbf9-4e6a-8cb3-9e36d0ff4175.png)'
  id: totrans-306
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f7812a57-fbf9-4e6a-8cb3-9e36d0ff4175.png)'
- en: Configuring Unity Player Settings for Android
  id: totrans-307
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 Android 的 Unity Player 设置
- en: 'We now will configure your Unity project to build for Android. First, ensure
    Android is your target platform in Build Settings. Unity provides a great deal
    of support for Android, including configuration and optimization for runtime features
    and the capabilities of mobile devices. These options can be found in Player Settings.
    We only need to set a couple of them now. The minimum required to build our demo
    project are Bundle Identifier and Minimum API Level:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将配置您的 Unity 项目以构建 Android 版本。首先，确保在 Build Settings 中 Android 是您的目标平台。Unity
    为 Android 提供了大量的支持，包括对运行时功能和移动设备功能的配置和优化。这些选项可以在 Player Settings 中找到。我们现在只需要设置其中的一些。构建我们的演示项目所需的最小要求是
    Bundle Identifier 和 Minimum API Level：
- en: In Unity, navigate to File | Build Settings and examine the Platform pane.
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Unity 中，导航到 File | Build Settings 并检查 Platform 选项卡。
- en: If Android is not presently selected, select it now and press Switch Platform.
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果Android尚未选中，请现在选中并按切换平台。
- en: If you have the Build Settings window open, press the Player Settings… button.
    Or, you can get there from the main menu and Edit | Project Settings | Player.
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您打开了构建设置窗口，请按玩家设置…按钮。或者，您可以从主菜单中通过 Edit | Project Settings | Player 获取。
- en: Look across at the Inspector panel, which now contains the Player Settings.
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 看向包含玩家设置的检查器面板。
- en: Find the Other Settings group of parameters, and click the header bar (if it’s
    not already opened) to find the Identification variables
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到其他设置参数组，并点击标题栏（如果尚未打开）以找到识别变量。
- en: Set the Bundle Identifier to a unique name for your product that resembles a
    traditional Java package name. An ID is required for all Android apps. Typically
    it is in the format `com.CompanyName.ProductName`. It must be unique on the target
    device, and eventually, unique in the Google Play store. You can choose whatever
    name you want.
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将捆绑标识符设置为类似于传统Java包名的独特产品名称。所有Android应用都需要ID。通常格式为 `com.公司名.产品名`。它必须在目标设备上是唯一的，最终在Google
    Play商店中也是唯一的。您可以选择任何名称。
- en: Set a Minimum API Level for your target platform (as listed earlier).
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为您的目标平台设置一个最低API级别（如之前列出）。
- en: Again, there are many other options in the Player Settings but we can use their
    defaults for now.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，玩家设置中还有许多其他选项，但现在我们可以使用它们的默认设置。
- en: Building for GearVR and Oculus Go
  id: totrans-317
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为GearVR和Oculus Go构建
- en: 'To build for Samsung GearVR and Oculus Go mobile devices, you will use the
    Oculus SDK. These are both Android-based devices so you must set up your development
    machine for Android development as described previously (Oculus Go is binary and
    compatible with GearVR). Then complete the following steps in Unity:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 要为三星GearVR和Oculus Go移动设备构建，您将使用Oculus SDK。这两个设备都是基于Android的，因此您必须按照之前描述的那样设置您的开发机器以进行Android开发（Oculus
    Go是二进制的，与GearVR兼容）。然后在Unity中完成以下步骤：
- en: Configure your Unity Build Settings to target the Android platform.
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置您的Unity构建设置以针对Android平台。
- en: In `Player Settings`, under XR Settings, set Virtual Reality Enabled
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `玩家设置` 中，在 XR 设置下，设置虚拟现实启用
- en: Ensure Oculus is at the top of the Virtual Reality SDKs list.
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保Oculus位于虚拟现实SDK列表的顶部。
- en: Download and Install the Oculus Integration package from the Asset Store, as
    instructed previously.
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照之前的说明，从资源商店下载并安装Oculus集成包。
- en: Now we will add the OVR camera rig to the MeMyselfEye object in our scene. These
    steps are like the Standalone Oculus Rift setup described previously. In this
    case, you can use the same MeMyselfEye prefab for both Rift and GearVR.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将向场景中的 MeMyselfEye 对象添加OVR相机装置。这些步骤类似于之前描述的独立Oculus Rift设置。在这种情况下，您可以使用相同的
    MeMyselfEye 预制件为 Rift 和 GearVR。
- en: Look in your Project window; under the *Assets* folder you should have a folder
    named OVR.
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的项目窗口中查看；在 *Assets* 文件夹下，您应该有一个名为 OVR 的文件夹。
- en: Within that is a subfolder called `Prefabs`. Drag the prefab named `OVRCameraRig`
    from the `Assets/OVR/Prefabs/` folder into your Hierarchy. Place it as a child
    object of `MeMyselfEye`.
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在其中有一个名为 `Prefabs` 的子文件夹。将 `Assets/OVR/Prefabs/` 文件夹中的名为 `OVRCameraRig` 的预制件拖放到您的层次结构中。将其放置为
    `MeMyselfEye` 的子对象。
- en: Set its height to 1.6 by setting its **Transform** to **Position** to (`0`,
    `1.6`, `0`).
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将其 **变换** 设置为 **位置** 到 (`0`, `1.6`, `0`) 来将其高度设置为 1.6。
- en: Disable the `Main Camera` object also under `MeMyselfEye`. You can disable objects
    by unchecking the enable-checkbox in the top-left of its Inspector window. Alternatively,
    you can just delete the `Main Camera` object.
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `MeMyselfEye` 下禁用 `主相机` 对象。您可以通过取消勾选其检查器窗口左上角的启用复选框来禁用对象。或者，您可以直接删除 `主相机`
    对象。
- en: Save the prefab by selecting `MeMyselfEye` in Hierarchy, then press its **Apply**
    button in the Inspector.
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在层次结构中选择 `MeMyselfEye` 并在检查器中按下其 **应用** 按钮来保存预制件。
- en: 'Now, you can build your game as a separate executable app using the following
    steps:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以使用以下步骤将您的游戏构建为一个独立的可执行应用程序：
- en: From the main menu bar, navigate to File | Build Settings...
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从主菜单栏导航到 File | Build Settings...
- en: If the current scene is not already in the **Scenes to Build** list, press **Add
    Open Scenes**
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果当前场景尚未在 **要构建的场景** 列表中，请按 **添加打开的场景**。
- en: Click on **Build and Run **and set its name to `Diorama`
  id: totrans-332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **构建和运行** 并将其名称设置为 `Diorama`。
- en: I like to keep my builds in a subdirectory named Build; create one if you want
    to.
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我喜欢将我的构建保存在名为 Build 的子目录中；如果您想的话，可以创建一个。
- en: Click on **Save**
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **保存**。
- en: An Android APK file will be created in your Build folder and uploaded to your
    attached Android device.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的构建文件夹中创建一个Android APK文件，并将其上传到您连接的Android设备。
- en: For more information on Unity support for Oculus SDK, see [https://docs.unity3d.com/Manual/VRDevices-Oculus.html.](https://docs.unity3d.com/Manual/VRDevices-Oculus.html)
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Unity对Oculus SDK的支持的更多信息，请参阅[https://docs.unity3d.com/Manual/VRDevices-Oculus.html.](https://docs.unity3d.com/Manual/VRDevices-Oculus.html)
- en: Building for Google VR
  id: totrans-337
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为 Google VR 构建
- en: The Google VR SDK supports both Daydream and Cardboard. **Daydream** is the
    higher-end version limited to faster, more capable Daydream-ready Android phones.
    **Cardboard** is lower end and supported on many more mobile devices including
    Apple iOS iPhones. You can build projects in Unity that target both.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: Google VR SDK支持Daydream和Cardboard。**Daydream**是高端版本，仅限于更快速、功能更强大的Daydream-ready
    Android手机。**Cardboard**是低端版本，支持许多移动设备，包括Apple iOS的iPhone。您可以在Unity中构建针对两者的项目。
- en: Google Daydream
  id: totrans-339
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Google Daydream
- en: 'To build for *Google Daydream* on mobile Android devices, you will use the
    Daydream SDK. You must set up your development machine for Android development
    as described above. Then complete the following steps:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 要在移动Android设备上为*Google Daydream*构建，您将使用Daydream SDK。您必须按照上述说明设置您的开发机器以进行Android开发。然后完成以下步骤：
- en: Configure your Unity **Build Settings** to target the **Android** platform
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Unity **构建设置**配置为针对**Android**平台
- en: In Player Settings, under XR Settings, set Virtual Reality Enabled
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在玩家设置中，在XR设置下设置虚拟现实启用
- en: Ensure Daydream is at the top of the Virtual Reality SDKs list
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保Daydream位于虚拟现实SDK列表的顶部
- en: Download and Install the Google VR SDK package, as instructed previously
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照之前的要求下载并安装Google VR SDK包
- en: 'We will now build the `MeMyselfEye` camera rig for our scene. At the present
    time, the best example we have is the GVRDemo example scene provided with the
    Google VR SDK (can be found in the `Assets/GoogleVR/Demos/Scenes/` folder):'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将为我们的场景构建`MeMyselfEye`相机装置。目前，我们最好的例子是Google VR SDK提供的GVRDemo示例场景（可在`Assets/GoogleVR/Demos/Scenes/`文件夹中找到）：
- en: In your scene Hierarchy, create an empty game object under the `MeMyselfEye`
    (select the `MeMyselfEye` object, right-click, select Create Empty). Name it `MyGvrRig`.
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的场景层次结构中，在`MeMyselfEye`下创建一个空的游戏对象（选择`MeMyselfEye`对象，右键单击，选择创建空对象）。将其命名为`MyGvrRig`。
- en: Set its height to 1.6 by setting its **Transform** to **Position** to (`0`,
    `1.6`, `0`).
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将其**Transform**的**Position**设置为(`0`, `1.6`, `0`)来将其高度设置为1.6。
- en: From the Project folders, locate the provided prefabs (`Assets/GoogleVR/Prefabs`).
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从项目文件夹中定位提供的预制件（`Assets/GoogleVR/Prefabs`）。
- en: 'Drag a copy of each of the following prefabs from the Project folder to Hierarchy
    as a child of `MyGvrRig`:'
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下预制件的副本从项目文件夹拖到层次结构中，作为`MyGvrRig`的子项：
- en: Headset/GvrHeadset
  id: totrans-350
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Headset/GvrHeadset
- en: Controllers/GvrControllerMain
  id: totrans-351
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Controllers/GvrControllerMain
- en: EventSystem/GvrEventSystem
  id: totrans-352
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: EventSystem/GvrEventSystem
- en: GvrEditorEmulator
  id: totrans-353
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: GvrEditorEmulator
- en: GvrInstantPreviewMain
  id: totrans-354
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: GvrInstantPreviewMain
- en: Leave the `Main Camera` object under `MeMyselfEye` and enable it. The GoogleVR
    uses the existing `Main Camera` object.
  id: totrans-355
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MeMyselfEye`下保留`Main Camera`对象并启用它。GoogleVR使用现有的`Main Camera`对象。
- en: Save the prefab by selecting `MeMyselfEye` in Hierarchy, then press its Apply
    button in the Inspector.
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在层次结构中选择`MeMyselfEye`并按下其检查器中的应用按钮来保存预制件。
- en: The `GvrHeadset` is a VR camera properties manager. The G`vrControllerMain`
    provides support for the Daydream 3DOF hand controller. We will use `GvrEventSystem`
    in later chapters; it provides a drop-in replacement for Unity's Event System
    object. The `GvrEditorEmulator` is not actually part of your app but enables previewing
    your scene in the Unity Editor when you press Play. Likewise, adding `GvrInstantPreviewMain`
    lets you preview your app on your phone when you press Play in the editor.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: '`GvrHeadset`是一个VR相机属性管理器。`GvrControllerMain`为Daydream 3DOF手控制器提供支持。我们将在后续章节中使用`GvrEventSystem`；它为Unity的事件系统对象提供即插即用的替代方案。`GvrEditorEmulator`实际上不是您应用程序的一部分，但可以在您按下Play时在Unity编辑器中预览您的场景。同样，添加`GvrInstantPreviewMain`可以让您在编辑器中按下Play时在您的手机上预览您的应用程序。'
- en: These are the prefabs that we know we’re going to want to use. Certainly, go
    ahead and explore the other prefabs provided in the SDK. See [https://developers.google.com/vr/unity/reference/](https://developers.google.com/vr/unity/reference/).
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是我们知道将要使用的预制件。当然，您可以继续探索 SDK 中提供的其他预制件。请参阅[https://developers.google.com/vr/unity/reference/](https://developers.google.com/vr/unity/reference/)。
- en: We also recommend you take a look at Google Daydream Elements which provides
    additional demos and scripts "for developing high-quality VR experiences." We
    introduce this in the next chapter. See [https://developers.google.com/vr/elements/overview.](https://developers.google.com/vr/elements/overview)
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还建议你查看 Google Daydream Elements，它提供了额外的演示和脚本“用于开发高质量的 VR 体验。”我们将在下一章介绍这个。见 [https://developers.google.com/vr/elements/overview.](https://developers.google.com/vr/elements/overview)
- en: 'When you’re ready, you can build your game as a separate executable app using
    the following steps:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 当你准备好时，你可以按照以下步骤将你的游戏构建为一个独立的可执行应用程序：
- en: From the main menu bar, navigate to File | Build Settings....
  id: totrans-361
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从主菜单栏，导航到文件 | 构建设置...
- en: If the current scene is not already in the Scenes to Build list, press Add Open
    Scenes.
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果当前场景尚未在构建场景列表中，请按添加打开场景。
- en: Click on Build and Run and set its name to `Diorama`.
  id: totrans-363
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击构建和运行，并将其名称设置为`Diorama`。
- en: I like to keep my builds in a subdirectory named Build; create one if you want
    to.
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我喜欢将我的构建保存在名为 Build 的子目录中；如果你想要的话，可以创建一个。
- en: Click on Save.
  id: totrans-365
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击保存。
- en: An Android APK file will be created in your Build folder and uploaded to your
    attached Android phone.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的构建文件夹中创建一个 Android APK 文件，并将其上传到你的附加 Android 手机。
- en: Google Cardboard
  id: totrans-367
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Google Cardboard
- en: 'Building for Google Cardboard is similar, but simpler, than Daydream. Also,
    Cardboard apps can run on iPhones. You must set up your development machine for
    Android development as described. Or if you’re developing for iOS, see the next
    section for details. Then set up your project as follows:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 为 Google Cardboard 构建与 Daydream 类似，但更简单。此外，Cardboard 应用程序可以在 iPhone 上运行。你必须按照描述设置你的开发机器以进行
    Android 开发。或者如果你正在为 iOS 开发，请参阅下一节以获取详细信息。然后按照以下方式设置你的项目：
- en: Configure your Unity Build Settings to target **Android** or **iOS** platform.
  id: totrans-369
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置你的 Unity 构建设置以针对 **Android** 或 **iOS** 平台。
- en: In Player Settings, under XR Settings, set Virtual Reality Enabled, and
  id: totrans-370
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在玩家设置中，在 XR 设置下设置虚拟现实启用，并且
- en: Ensure Cardboard is in the Virtual Reality SDKs list.
  id: totrans-371
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保Cardboard在虚拟现实 SDKs 列表中。
- en: Download and Install the Google VR SDK package, as instructed previously.
  id: totrans-372
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照之前说明的步骤下载并安装 Google VR SDK 软件包。
- en: We will now build the `MeMyselfEye` camera rig for our scene.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将为我们的场景构建`MeMyselfEye`相机装置。
- en: In your scene Hierarchy, create an empty game object under the `MeMyselfEye`
    (select the `MeMyselfEye` object, right-click, select Create Empty). Name it `MyGvrRig`.
  id: totrans-374
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的场景层次结构中，在`MeMyselfEye`（选择`MeMyselfEye`对象，右键单击，选择创建空对象）下创建一个空的游戏对象。将其命名为`MyGvrRig`。
- en: Set its height to 1.6 by setting its **Transform** to **Position** to (`0`,
    `1.6`, `0`).
  id: totrans-375
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将其变换设置为位置（`0`，`1.6`，`0`）来将其高度设置为 1.6。
- en: From the Project folders, locate the provided prefabs (`Assets/GoogleVR/Prefabs`).
  id: totrans-376
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从项目文件夹中，找到提供的预制体（`Assets/GoogleVR/Prefabs`）。
- en: 'Drag a copy of each of the following prefabs from the Project folder to Hierarchy
    as a child of MyGvrRig:'
  id: totrans-377
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下预制体的副本从项目文件夹拖到层次结构中，作为`MyGvrRig`的子对象：
- en: Headset/GvrHeadset
  id: totrans-378
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 头戴式设备/GvrHeadset
- en: GvrEditorEmulator
  id: totrans-379
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: GvrEditorEmulator
- en: Leave the `Main Camera` object under `MeMyselfEye` and enable it. The GoogleVR
    uses the existing `Main Camera` object.
  id: totrans-380
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MeMyselfEye`下保留`Main Camera`对象并启用它。GoogleVR 使用现有的`Main Camera`对象。
- en: Save the prefab by selecting `MeMyselfEye` in Hierarchy, then press its Apply
    button in the Inspector
  id: totrans-381
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在层次结构中选择`MeMyselfEye`并按下检查器中的应用按钮来保存预制体。
- en: 'When you’re ready, you can build your game as a separate executable app using
    the following steps:'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 当你准备好时，你可以按照以下步骤将你的游戏构建为一个独立的可执行应用程序：
- en: From the main menu bar, navigate to File | Build Settings....
  id: totrans-383
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从主菜单栏，导航到文件 | 构建设置...
- en: If the current scene is not already in the Scenes to Build list, press Add Open
    Scenes.
  id: totrans-384
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果当前场景尚未在构建场景列表中，请按添加打开场景。
- en: Click on Build and Run and set its name to `Diorama`.
  id: totrans-385
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击构建和运行，并将其名称设置为`Diorama`。
- en: I like to keep my builds in a subdirectory named Build; create one if you want
    to.
  id: totrans-386
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我喜欢将我的构建保存在名为 Build 的子目录中；如果你想要的话，可以创建一个。
- en: Click on Save.
  id: totrans-387
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击保存。
- en: An Android APK file will be created in your Build folder and uploaded to your
    attached Android phone.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的构建文件夹中创建一个 Android APK 文件，并将其上传到你的附加 Android 手机。
- en: Google VR Play Mode
  id: totrans-389
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Google VR 播放模式
- en: 'When your project is configured for Google VR (Daydream or Cardboard), and
    you press Play in Unity can you preview the scene and use keyboard keys to emulate
    device motion:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的项目配置为 Google VR（Daydream 或 Cardboard）时，并在 Unity 中按下播放，你可以预览场景并使用键盘键来模拟设备运动：
- en: Use *Alt* + mouse-move to pan and tilt forward or backwards.
  id: totrans-391
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 *Alt* + 鼠标移动来平移和前后倾斜。
- en: Use *Ctrl* + mouse-move to tilt your head from side to side.
  id: totrans-392
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 *Ctrl* + 鼠标移动来左右倾斜你的头部。
- en: Use *Shift* + mouse control the Daydream hand controller (Daydream only).
  id: totrans-393
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 *Shift* + 鼠标控制 Daydream 手控制器（仅限 Daydream）。
- en: Click the mouse to select.
  id: totrans-394
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击鼠标进行选择。
- en: For more details, see [https://developers.google.com/vr/unity/get-started](https://developers.google.com/vr/unity/get-started).
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 更多详细信息，请参阅 [https://developers.google.com/vr/unity/get-started](https://developers.google.com/vr/unity/get-started)。
- en: With Daydream, you also have the option to use Instant Preview which allows
    you to test your VR app instantly on your device. Follow the instructions in the
    Google VR docs ([https://developers.google.com/vr/tools/instant-preview](https://developers.google.com/vr/tools/instant-preview))
    to set up your project and device to take advantage of this feature.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Daydream，您还有使用即时预览的选项，这允许您立即在您的设备上测试您的 VR 应用。按照 Google VR 文档中的说明 ([https://developers.google.com/vr/tools/instant-preview](https://developers.google.com/vr/tools/instant-preview))
    设置您的项目和设备以利用此功能。
- en: For more information on Unity support for Google VR SDK for Daydream, see [https://docs.unity3d.com/Manual/VRDevices-GoogleVR.html](https://docs.unity3d.com/Manual/VRDevices-GoogleVR.html).
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 Unity 对 Google VR SDK for Daydream 的支持更多信息，请参阅 [https://docs.unity3d.com/Manual/VRDevices-GoogleVR.html](https://docs.unity3d.com/Manual/VRDevices-GoogleVR.html)。
- en: Setting up for iOS devices
  id: totrans-398
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为 iOS 设备设置
- en: This section will help set up your Mac for iOS development from Unity for iPhones.
    The requirements are not specific to virtual reality; these are the same steps
    required by anyone building any iOS app from Unity. The process is also well documented
    elsewhere, including the Unity documentation at [https://docs.unity3d.com/Manual/iphone-GettingStarted.html](https://docs.unity3d.com/Manual/iphone-GettingStarted.html).
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将帮助您从 Unity 为 iPhone 设置 Mac 以进行 iOS 开发。这些要求并不特定于虚拟现实；这些是任何从 Unity 构建iOS应用的人都需要遵循的相同步骤。该过程在其他地方也有很好的文档记录，包括
    Unity 文档中的 [https://docs.unity3d.com/Manual/iphone-GettingStarted.html](https://docs.unity3d.com/Manual/iphone-GettingStarted.html)。
- en: A requirement of Apple's closed ecosystem is you must use a Mac as your development
    machine to develop for iOS. That’s just the way it is. The upside is the setup
    process is very straightforward.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 苹果封闭生态系统的要求之一是您必须使用 Mac 作为您的开发机器来为 iOS 开发。就是这样。好处是设置过程非常直接。
- en: At the time of writing, the only VR apps that will run on iOS are Google Cardboard.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 截至写作时，唯一能在 iOS 上运行的 VR 应用是 Google Cardboard。
- en: 'The steps include:'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤包括：
- en: Have an Apple ID
  id: totrans-403
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拥有一个 Apple ID
- en: Install Xcode
  id: totrans-404
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Xcode
- en: Configure the Unity Player Settings for iOS
  id: totrans-405
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为 iOS 配置 Unity Player 设置
- en: Build And Run
  id: totrans-406
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建 并 运行
- en: OK, let's take a bite of this apple.
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们尝一尝这个苹果。
- en: Have an Apple ID
  id: totrans-408
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 拥有一个 Apple ID
- en: To develop for iOS you need a Mac computer to develop on, and an Apple ID to
    log into the App Store. This will permit you to build iOS apps that run on your
    personal device.
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 要为 iOS 开发，您需要一个用于开发的 Mac 电脑和一个 Apple ID 以登录 App Store。这将允许您构建在您的个人设备上运行的 iOS
    应用。
- en: 'It is also recommended that you have an Apple Developer account. It costs $99
    USD per year but is your admission ticket to the tools and services including
    setup provisioning profiles needed to share and test your app on other devices.
    You can find out more about the Apple Developer Program here: [https://developer.apple.com/programs/](https://developer.apple.com/programs/).'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 还建议您拥有一个 Apple 开发者账户。它每年收费 99 美元，但这是您进入包括设置配置文件在内的工具和服务的门票，这些工具和服务用于在其他设备上共享和测试您的应用。您可以在
    [https://developer.apple.com/programs/](https://developer.apple.com/programs/)
    了解更多关于 Apple 开发者计划的信息。
- en: Install Xcode
  id: totrans-411
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Xcode
- en: 'Xcode is the all-in-one toolkit for developing for any Apple devices. It is
    free to download from the Mac App Store here: [https://itunes.apple.com/gb/app/xcode/id497799835?mt=12](https://itunes.apple.com/gb/app/xcode/id497799835?mt=12).
    Beware: it is quite big (over 4.5 GB as of writing). Download it, open the downloaded
    `dmg` file, and follow the installation instructions.'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: Xcode 是为开发任何 Apple 设备而提供的全能工具包。您可以从 Mac App Store 免费下载它：[https://itunes.apple.com/gb/app/xcode/id497799835?mt=12](https://itunes.apple.com/gb/app/xcode/id497799835?mt=12)。请注意：它相当大（截至写作时超过
    4.5 GB）。下载它，打开下载的 `dmg` 文件，并按照安装说明进行操作。
- en: Configuring the Unity Player Settings for iOS
  id: totrans-413
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为 iOS 配置 Unity Player 设置
- en: 'We now will configure your Unity project to build for iOS. First, ensure *iOS* is
    your target platform in Build Settings. Unity provides a great deal of support
    for iOS, including configuration and optimization for runtime features and the
    capabilities of mobile devices. These options can be found in Player Settings.
    We only need to set a couple of them now (the minimum required to build our projects):'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将配置您的 Unity 项目以构建 iOS。首先，确保在构建设置中将 *iOS* 设置为目标平台。Unity 为 iOS 提供了大量的支持，包括对运行时功能和移动设备功能的配置和优化。这些选项可以在
    Player 设置中找到。我们现在只需要设置其中的一些（构建我们项目所需的最小设置）：
- en: In Unity, navigate to **F****ile** | **Build Settings** and examine the Platform
    pane. If iOS is not presently selected, select it now and press Switch Platform.
  id: totrans-415
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Unity 中，导航到 **文件** | **构建设置**，检查平台面板。如果 iOS 目前未选中，请现在选中它并按切换平台。
- en: If you have the Build Settings window open, press the Player Settings… button.
    Or, you can get there from the main menu: Edit | Project Settings | Player. Look
    across at the Inspector panel, which now contains the Player Settings.
  id: totrans-416
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您打开了构建设置窗口，请按 Player Settings… 按钮。或者，您也可以从主菜单：编辑 | 项目设置 | Player 进入。查看现在包含
    Player 设置的检查器面板。
- en: Find the Other Settings group of parameters, and click the header bar (if it's
    not already opened) to find the Identification variables.
  id: totrans-417
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到其他设置参数组，并点击标题栏（如果尚未打开）以找到身份变量。
- en: Set the Bundle Identifier to a unique name for your product that resembles a
    traditional Java package name. An ID is required for all iOS apps. Typically,
    it is in the format `com.CompanyName.ProductName`. It must be unique on the target
    device, and eventually, unique in the App Store. You can choose whatever name
    you want.
  id: totrans-418
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将捆绑标识符设置为类似于传统 Java 包名的产品唯一名称。所有 iOS 应用都需要 ID。通常，它采用 `com.公司名.产品名` 的格式。它必须在目标设备上唯一，最终在
    App Store 上也必须是唯一的。您可以选择任何想要的名称。
- en: Set the Automatic Signing Team ID to your Signing Team setup in Xcode, and check
    the Automatically Sign checkbox.
  id: totrans-419
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将自动签名团队 ID 设置为 Xcode 中的签名团队设置，并勾选自动签名复选框。
- en: To configure your Apple ID with Xcode, in Xcode go to Preferences | Accounts
    and add an Apple ID by tapping +.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Xcode 配置您的 Apple ID，请在 Xcode 中转到首选项 | 账户，并通过点击 + 添加一个 Apple ID。
- en: Build And Run
  id: totrans-421
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建和运行
- en: Xcode consists of an **integrated development environment** (**IDE**) that hosts
    your Xcode projects. When you build for iOS from Unity, it doesn't actually build
    an iOS executable. Rather, Unity builds an Xcode-ready project folder that you
    then open in Xcode to complete the compile, build, and deploy process, and to
    run the app on your device. Let's go!
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: Xcode 包含一个**集成开发环境**（**IDE**），用于托管您的 Xcode 项目。当您从 Unity 构建iOS时，实际上并没有构建iOS可执行文件。相反，Unity
    会构建一个 Xcode 准备好的项目文件夹，然后您可以在 Xcode 中打开它以完成编译、构建和部署过程，并在您的设备上运行应用程序。让我们开始吧！
- en: Be sure your device is turned on, connected, and you grant permission for the
    Mac to access.
  id: totrans-423
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您的设备已开启、连接，并且您已授权 Mac 访问。
- en: In the Build Settings, press the Build And Run button to begin building.
  id: totrans-424
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在构建设置中，按构建和运行按钮开始构建。
- en: You will be prompted for a name and location of the build files. We recommend
    you create a new folder in your project root named `Build` and specify the file
    or subfolder name under that, as needed.
  id: totrans-425
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将被提示输入构建文件的名称和位置。我们建议您在项目根目录下创建一个名为 `Build` 的新文件夹，并根据需要指定该文件夹下的文件或子文件夹名称。
- en: If all goes well, Unity will create an Xcode project and open it in Xcode. It
    will attempt to build the app, and if successful, upload it to your device. You
    now have a running VR app on your device you can show off to your friends and
    family!
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，Unity 将创建一个 Xcode 项目并在 Xcode 中打开它。它将尝试构建应用程序，如果成功，将上传到您的设备。现在您可以在设备上运行
    VR 应用程序，并向您的朋友和家人展示！
- en: Summary
  id: totrans-427
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we helped you set up your system for VR development and built
    your project for your target platform and devices. We discussed the different
    levels of device integration software and then installed software that was appropriate
    for your target VR device onto your development machine and asset packages into
    your Unity project. While we have summarized the steps, all of these steps are
    well documented on the device manufacturers sites and in the Unity manual and
    we encourage you to look at all the relevant documentation.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们帮助你设置了你的 VR 开发系统，并为你的目标平台和设备构建了你的项目。我们讨论了不同级别的设备集成软件，然后在你的开发机器上安装了适合你的目标
    VR 设备的软件，并将资产包添加到了你的 Unity 项目中。虽然我们已经总结了这些步骤，但所有这些步骤都在设备制造商的网站上以及 Unity 手册中有很好的文档记录，我们鼓励你查看所有相关的文档。
- en: At this point, you should be able to preview your VR scene in Unity Editor's
    Play mode. And you should be able to build and run your project and install and
    run it as a binary directly on your device.
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，你应该能够在 Unity 编辑器的播放模式下预览你的 VR 场景。你应该能够构建并运行你的项目，并且可以直接在你的设备上安装并运行它作为二进制文件。
- en: In the next chapter, we'll work more on the diorama scene and explore techniques
    to control objects in virtual reality. From a third-person perspective, we'll
    interact with objects in the scene (Ethan, the zombie) and implement look-based
    control.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将更深入地处理场景模型，并探索在虚拟现实中控制对象的技术。从第三人称视角，我们将与场景中的对象（伊森，僵尸）进行交互，并实现基于外观的控制。
