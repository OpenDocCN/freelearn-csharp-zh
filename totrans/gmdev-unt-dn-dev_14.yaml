- en: '*Chapter 11*: Working with Microsoft Game Dev, Azure Cloud, PlayFab, and Unity'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is the last chapter of this book. In the previous chapters, we have learned
    about the various modules that can be used to develop games with the Unity engine,
    such as the UI module, the physics module, and the animation module, and also
    covered some advanced topics – for example, Unity's rendering pipelines and the
    new Data-Oriented Technology Stack. Also, in [*Chapter 10*](B17146_10_Final_ASB_ePub.xhtml#_idTextAnchor181),
    *Serialization System and Assets Management in Unity and Azure*, we not only discussed
    Unity's serialization system and assets management but also covered some knowledge
    related to Microsoft Azure Cloud.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will continue to explore **Microsoft Game Dev** (previously known
    as Microsoft Game Stack), the **Microsoft Azure cloud**, and **Microsoft Azure
    PlayFab** because the tools needed in modern game development are not limited
    to game engines; other tools and services such as the cloud are increasingly used
    in game development.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following key topics will be included in our learning path:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Microsoft Game Dev, Microsoft Azure Cloud, and Azure PlayFab
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up Azure PlayFab for a Unity project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Signing up and logging in players using Azure PlayFab in Unity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing a leaderboard using Azure PlayFab in Unity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you will understand what Microsoft Game Dev, Microsoft
    Azure Cloud, and Microsoft Azure PlayFab are and how to set up Azure PlayFab in
    a Unity project and use Azure PlayFab's API to implement registration, login,
    and leaderboard functions in Unity.
  prefs: []
  type: TYPE_NORMAL
- en: Sounds exciting! Now, let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can find the example project that will be used in this chapter, namely
    `Chapter11-AzurePlayFabAndUnity`, in the following GitHub repository: [https://github.com/PacktPublishing/Game-Development-with-Unity-for-.NET-Developers](https://github.com/PacktPublishing/Game-Development-with-Unity-for-.NET-Developers).'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Microsoft Game Dev, Microsoft Azure Cloud, and Azure PlayFab
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have learned how to use the Unity engine to develop games. However, modern
    game development requires not only game engines but also other tools, such as
    cloud services.
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft Game Dev
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In 2019, Microsoft announced Microsoft Game Stack, now known as Microsoft Game
    Dev, which aims to provide game developers with the tools and services they need
    to easily create and operate games:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.1 – Microsoft Game Dev products (from the Game Dev website)'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.01_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.1 – Microsoft Game Dev products (from the Game Dev website)
  prefs: []
  type: TYPE_NORMAL
- en: These tools and services in Microsoft Game Dev include not only DirectX, Visual
    Studio, Xbox Services, App Center, and Havok, which are commonly used by game
    developers to complete game development and content creation, but also cloud-based
    services such as Microsoft Azure Cloud and Azure PlayFab, which all come together
    to form a powerful ecosystem that every game developer can use, as shown in *Figure
    11.1*.
  prefs: []
  type: TYPE_NORMAL
- en: The Microsoft Azure cloud and Azure PlayFab are important parts of Microsoft
    Game Dev. Not only are more and more modern games requiring multiplayer support
    but it is also becoming more common for single-player games to store player data
    in the cloud. Therefore, the cloud is becoming more and more important in game
    development.
  prefs: []
  type: TYPE_NORMAL
- en: At the Game Developers Conference in March 2022, Microsoft announced a new program,
    **ID@Azure**, designed to help game developers develop games using the Microsoft
    Azure cloud and Azure PlayFab services. Any game developer can apply to join the
    program, whether they are an independent game developer or a game studio. After
    joining the program, you can get up to $5,000 in Azure credits, so you can access
    many cloud services, get a free Azure PlayFab Standard Plan, get expert support,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If you are interested in the ID@Azure program, you can find more information
    at [https://aka.ms/idazure](https://aka.ms/idazure).
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have an understanding of what Microsoft Game Dev is, let's move
    on to exploring what the Microsoft Azure cloud and Azure PlayFab are.
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft Azure Cloud
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Microsoft Azure is a cloud computing service platform where you can find the
    following services:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Cloud computing** services, such as Azure App Service, Azure Functions, and
    Azure Virtual Machines'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Database** services, such as Cosmos DB, Azure SQL Database, and Azure Cache
    for Redis'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Storage** services, such as an Azure Storage account and Data Lake Storage'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Networking** services, such as Azure Application Gateway, Azure Firewall,
    and Azure Load Balancer'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Analytics** services, such as Azure Data Factory and Azure Synapse Analytics'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Security** services, such as Azure Defender and Azure DDoS Protection'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AI** services, such as Azure Cognitive Services and Azure Bot Service'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the game industry, game servers are usually deployed in data centers as
    close as possible to players, which not only reduces network latency but also
    meets data sovereignty requirements in certain countries and regions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.2 – The Microsoft Azure global infrastructure'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.02_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.2 – The Microsoft Azure global infrastructure
  prefs: []
  type: TYPE_NORMAL
- en: According to data from Microsoft, the Microsoft Azure cloud covers 140 countries
    and regions around the world, and the number of available areas is more than any
    other cloud platform. The huge global coverage helps game developers quickly deploy
    game services for target countries or regions.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You can find more information about the Microsoft Azure Global Infrastructure
    at [https://infrastructuremap.microsoft.com/explore](https://infrastructuremap.microsoft.com/explore).
  prefs: []
  type: TYPE_NORMAL
- en: In addition to using Azure data centers to host games, game developers can also
    develop games using Azure virtual machines on the Microsoft Azure cloud. A new
    Azure Game Development Virtual Machine was announced at the Game Developers Conference
    in March 2022, which is customized for game developers and pre-installed with
    tools such as the Microsoft Game Development Kit, Visual Studio 2019 Community
    Edition, and Blender to enable game production on the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If you are interested in the Azure Game Development Virtual Machine, you can
    find more information at [https://aka.ms/gamedevvmdocs](https://aka.ms/gamedevvmdocs).
  prefs: []
  type: TYPE_NORMAL
- en: Azure PlayFab
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PlayFab is a complete backend service for building and operating real-time games.
    In early 2018, Microsoft acquired PlayFab. Now, PlayFab has joined the Azure family
    and changed its name to Azure PlayFab, becoming a part of Azure. Azure PlayFab
    combines the Azure cloud with PlayFab; the Azure cloud brings reliability, global-scale
    accessibility, and enterprise-grade security, while PlayFab provides game developers
    with a complete game backend service.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a complete backend service solution, Azure PlayFab mainly provides the following
    functions for game developers to develop games:'
  prefs: []
  type: TYPE_NORMAL
- en: Built-in authentication that game developers can use to enable player registration,
    login, and even track players across devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ability to create dynamically scaled multiplayer servers and manage player
    data on the cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ability to easily implement a leaderboard on the backend server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Azure PlayFab also provides other services for maintaining and operating games,
    such as **Liveops** (short for **Live Operations**) and data analytics services,
    which can be used to manage game content, such as making updates to a game without
    releasing a new version, and reporting and analyzing game data daily. They are
    beyond what we need here, but if you're interested, you can find out more at [https://docs.microsoft.com/en-us/gaming/playfab](https://docs.microsoft.com/en-us/gaming/playfab).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the rest of this chapter, we will integrate Azure PlayFab into a Unity project
    to implement player registration, login, data saving, loading, and a leaderboard.
  prefs: []
  type: TYPE_NORMAL
- en: Let's move on!
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Azure PlayFab for a Unity project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this example, we will add player registration, login, data saving, loading,
    and leaderboard functions to a *Flappy Bird*-style game in Unity:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.3 – The Unity project'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.03_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.3 – The Unity project
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will first create a new Azure PlayFab account, set up a game studio
    and a game title in Azure PlayFab, and then set up the Azure PlayFab SDK in this
    Unity project.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new Azure PlayFab account
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First of all, we need a new Azure PlayFab account. To create a new Azure Playfab
    account, let''s perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Visit the home page of Microsoft Azure PlayFab at [https://playfab.com/](https://playfab.com/)
    and click the **SIGN UP** button at the upper-right corner to open the sign-up
    page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.4 – The home page of Azure PlayFab'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.04_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.4 – The home page of Azure PlayFab
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter your email address and password on the sign-up page and click the **Create
    a free account** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.5 – Creating a free account'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.05_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.5 – Creating a free account
  prefs: []
  type: TYPE_NORMAL
- en: 'You will then receive a verification email from Azure PlayFab to verify your
    email address; click **VERIFY YOUR EMAIL ADDRESS**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.6 – An email address verification from Azure PlayFab'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.06_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.6 – An email address verification from Azure PlayFab
  prefs: []
  type: TYPE_NORMAL
- en: 'After the email address verification is complete, you can log in with the Azure
    PlayFab account you just created, and you can see your game studio and a game
    title already set up in the Azure PlayFab developer portal, also known as **Game
    Manager** in Azure PlayFab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.7 – My Game Studio in Azure PlayFab'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.07_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.7 – My Game Studio in Azure PlayFab
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have created a new Azure PlayFab account, we can start looking at
    how to set up a game studio and a game title in Azure PlayFab.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a game studio and a game title in Azure PlayFab
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After creating an Azure PlayFab account, the next task is to set up your own
    game studio and game title:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The default game studio is called **My Game Studio**, which doesn''t make much
    sense, so you can click **...** | **Studio settings** on the right to open the
    **Edit Studio** page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_11.08_B17146.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.8 – Opening the Edit Studio page
  prefs: []
  type: TYPE_NORMAL
- en: 'On the `UnityBook` and click the **Save studio** button to save:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.9 – Changing the studio name to UnityBook'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.09_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.9 – Changing the studio name to UnityBook
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, the default game title is **My Game**, which also doesn''t make
    much sense. As shown in the following figure, you can click the gear button and
    then **Edit title info** to open the **Edit Title** page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.10 – Opening the Edit Title page'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.10_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.10 – Opening the Edit Title page
  prefs: []
  type: TYPE_NORMAL
- en: 'On the `Chapter11-AzurePlayfabAndUnity` and click **Save title** to save:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.11 – Changing the title name'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.11_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.11 – Changing the title name
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have set up a game studio and a game title in Azure PlayFab, let's
    turn our attention to setting up the Azure PlayFab SDK in the Unity project!
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Azure PlayFab SDK in the Unity project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to access the API in Azure PlayFab from Unity, we need to import the
    Azure PlayFab SDK into the Unity project first:'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the Azure PlayFab SDK at [https://docs.microsoft.com/en-us/gaming/playfab/sdks/unity3d/](https://docs.microsoft.com/en-us/gaming/playfab/sdks/unity3d/).
    Here, you can also find the link to the Unity PlayFab SDK GitHub repository, as
    shown in *Figure 11.12*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.12 – The Azure PlayFab SDK download links'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.12_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.12 – The Azure PlayFab SDK download links
  prefs: []
  type: TYPE_NORMAL
- en: 'Drag and drop the `UnitySDK` package you just downloaded into the Unity Editor.
    The **Import Unity Package** window will pop up, where you can preview the contents
    of the package, and then click the **Import** button to import it into this Unity
    project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.13 – Importing the Azure PlayFab SDK'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.13_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.13 – Importing the Azure PlayFab SDK
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the SDK has been imported, you will find the PlayFab menu in the Unity
    Editor toolbar. Then, you can click on **PlayFab** > **MakePlayFabSharedSettings**
    to open the **PlayFabSharedSettings** window, where you need to configure settings
    to connect this Unity project to the game title in Azure PlayFab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.14 – The PlayFab SDK has been imported'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.14_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.14 – The PlayFab SDK has been imported
  prefs: []
  type: TYPE_NORMAL
- en: 'In the **Play Fab Shared Settings** window, you should provide the game title
    ID and the developer secret key of your game title, as shown in *Figure 11.15*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.15 – The Play Fab Shared Settings window'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.15_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.15 – The Play Fab Shared Settings window
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to find out the game title ID and the developer secret key, you need
    to go back to the developer portal of Azure PlayFab, where you can find the game
    title ID on the game title item:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.16 – The game title ID'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.16_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.16 – The game title ID
  prefs: []
  type: TYPE_NORMAL
- en: 'The developer secret key is tightly coupled to the game title in Azure PlayFab,
    so on the developer portal, you first need to click on the title item to open
    the overview page of the game title. As shown in the following figure, you need
    to click on the gear button and then click **Title settings** to open the settings
    page of the game title:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.17 – The Overview page of the game title'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.17_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.17 – The Overview page of the game title
  prefs: []
  type: TYPE_NORMAL
- en: 'In the settings page of the game title, select the **Secret Keys** tab to switch
    to the secret keys settings, where you can find the default developer secret key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.18 – The Secret Keys page'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.18_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.18 – The Secret Keys page
  prefs: []
  type: TYPE_NORMAL
- en: Go back to the **Play Fab Shared Settings** window in Unity, and use the title
    ID and the developer secret key you just got from the Azure PlayFab developer
    portal to set the title ID and the developer secret key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have set up the Azure PlayFab SDK for this Unity project, you should
    now have an understanding of Azure PlayFab, including the Azure PlayFab developer
    portal, (which is also called Game Manager), how to set up a game studio and a
    game title, and how to import Azure PlayFab's SDK into a Unity project and connect
    the game title in Azure PlayFab to the project. Next, let's move on to exploring
    how to register and log in a player via Azure PlayFab.
  prefs: []
  type: TYPE_NORMAL
- en: Signing up and logging in players using Azure PlayFab in Unity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the demo project mentioned in the *Technical requirements* section, you
    can find the signup and login UI panel in **AzurePlayFabIntegration folder** |
    **StartScene**, which we will use to implement the signup and login functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.19 – The signup tab (left) and the login tab (right) on the UI
    panel'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.19_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.19 – The signup tab (left) and the login tab (right) on the UI panel
  prefs: []
  type: TYPE_NORMAL
- en: As shown in *Figure 11.19*, like many common signup and login pages, the signup
    and login UI panels in our example also have two tabs, namely the signup tab and
    the login tab, which can be switched by clicking the red reminder text on the
    panel. The signup tab requires the player to provide a username, email, and password
    to create a new player account in Azure PlayFab, while the login tab only requires
    the player to provide the email and password to log in.
  prefs: []
  type: TYPE_NORMAL
- en: Signing up players in Azure PlayFab
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Next, let''s take a look at how to implement the signup function first:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new folder in the `AzurePlayFabIntegration` folder and name it `Scripts`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.20 – Creating a Scripts folder'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.20_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.20 – Creating a Scripts folder
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new C# script in the `Scripts` folder, name it `AzurePlayFabAccountManager`,
    and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This is quite a long script; let''s break down the code as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: We add `System.Security.Cryptography` and the `System.Text` namespace with the
    `using` keyword to encrypt the password in the `Encrypt` method.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We add `PlayFab` and the `PlayFab.ClientModels` namespace with the `using` keyword
    to access the API that Azure PlayFab offers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the `fields` section, we reference three `InputField` UI elements to provide
    the username, email address, and password. Also, we get a reference to the `Text`
    UI element to display the message from Azure PlayFab.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We create a new instance of `RegisterPlayFabUserRequest` and call `PlayFabClientAPI.RegisterPlayFabUser`
    to register this user in Azure PlayFab.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We also have two callbacks – `OnRegisterSuccess`, which is called when the result
    is received, and `OnError`, which is called when an error occurs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In `OnRegisterSuccess`, we create a new instance of `UpdateUserTitleDisplayNameRequest`
    and call `PlayFabClientAPI.UpdateUserTitleDisplayName` to update the user's display
    name with the username at registration; otherwise, the user's display name is
    an empty string by default. Also, you can use this method to allow the user to
    change the account's display name in the future.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Drag and drop `AzurePlayFabAccountManager.cs` onto the **SignupAndLogin** GameObject
    in the scene, and assign the UI elements to the corresponding fields, as shown
    in *Figure 11.21*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.21 – Setting up AzurePlayFabAccountManager'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.21_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.21 – Setting up AzurePlayFabAccountManager
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the `AzurePlayFabAccountManager` is attached to, and finally, select
    the method defined in the `AzurePlayFabAccountManager` class that will be called
    when the button is clicked, namely `OnSignUpButtonClick`, as shown in *Figure
    11.22*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_11.22_B17146.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.22 – Setting up the sign-up button
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the game, and enter the username, email address, and password in the `register
    user` request to Azure PlayFab. As shown in the following figure, a new account
    is created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.23 – A new account is created'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.23_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.23 – A new account is created
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go back to the dashboard of the game title in Azure PlayFab. In the
    dashboard, you can see that there is a new API call and a new user has been created.
    Then, we can also click the **Players** button to open the **Players** page for
    more information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.24 – The dashboard of the game title'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.24_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.24 – The dashboard of the game title
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at the player list on the **Players** page; you can see the new
    account we just created. There is also some information about the account, such
    as the last login time, the time the account was created, and which country the
    player logged in from:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.25 – The Players page'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.25_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.25 – The Players page
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've implemented the registration function, it's time to implement
    the login function for the players who have accounts.
  prefs: []
  type: TYPE_NORMAL
- en: Logging in players in Azure PlayFab
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By taking the following steps, we will require players to provide an email
    and password to log in, and if the login is successful, they will jump to our
    *Flappy Bird*-style game scene:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go back to the `AzurePlayFabAccountManager` script and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s break down the newly added code as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: First of all, the `UnityEngine.SceneManagement` namespace is added with the
    `using` keyword. This is because if the player logs in successfully, we need to
    switch the scene from the login scene to the game scene, and the logic related
    to scene loading is defined in this namespace.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We create a new instance of `LoginWithEmailAddressRequest` and call `PlayFabClientAPI.LoginWithEmailAddress`
    to log the player into Azure PlayFab.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition to using email to log in, Azure PlayFab also offers multiple login
    methods, such as calling `PlayFabClientAPI .LoginWithFacebook` to log in with
    a Facebook access token, and calling `PlayFabClientAPI.LoginWithGameCenter` to
    log in with an iOS Game Center player identifier.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `SceneManager.LoadScene` method will be called when the player logs in successfully.
    The `SceneManager.LoadScene` method takes an `int` parameter, which is the index
    of the target scene.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are two scenes in this example – the first one is `StartScene`, with an
    index of `0`, which allows players to register or log in here; and the second
    is GameScene, with an index of `1`, which allows players to play the game, so
    we use an index of `1` to switch from `StartScene` to `GameScene`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Select the `AzurePlayFabAccountManager` is attached to, and finally, select
    the method defined in the `AzurePlayFabAccountManager` class that will be called
    when the `OnLoginButtonClick` method, as shown in *Figure 11.26*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_11.26_B17146.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.26 – Setting up the Login button
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the game, switch to the login tab, enter the email address and password,
    and then click the **Login** button to send a login user request to Azure PlayFab,
    as shown in the following figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.27 – The login tab'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.27_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.27 – The login tab
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, if the player logs in successfully, the game scene will be loaded and
    the game will start, as shown in the following figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.28 – Playing the game'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.28_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.28 – Playing the game
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you learned how to use the Azure PlayFab API to register a
    user, how to update a user's display name in Azure PlayFab via the Azure PlayFab
    API, and how to use that to log into Azure PlayFab from a Unity game. Next, we
    will explore how to implement a leaderboard in a Unity game using Azure PlayFab.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing a leaderboard using Azure PlayFab in Unity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most games today use leaderboards, which indicate who is the best performer
    in a game and increase gamer engagement with a game. In this section, we will
    be exploring how to implement a leaderboard using Azure PlayFab in our Unity project.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a leaderboard in Azure PlayFab
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to use Azure PlayFab''s leaderboard feature, we first need to set
    up a leaderboard in the developer portal of Azure PlayFab:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go back to the dashboard of the game title in Azure PlayFab. In the dashboard,
    you will find the **Leaderboards** option in the left column; click it to open
    the **Leaderboards** page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.29 – The Leaderboards option'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.29_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.29 – The Leaderboards option
  prefs: []
  type: TYPE_NORMAL
- en: 'As shown in the following figure, no leaderboard has been created yet, so click
    the **New leaderboard** button to create a new leaderboard in Azure PlayFab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.30 – Creating a new leaderboard'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.30_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.30 – Creating a new leaderboard
  prefs: []
  type: TYPE_NORMAL
- en: 'In the **New Leaderboard** settings panel, we will set up three properties
    for this leaderboard, namely **Statistic name**, **Reset frequency**, and **Aggregation
    method**, as shown in *Figure 11.31*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.31 – Setting up a new leaderboard'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.31_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.31 – Setting up a new leaderboard
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s explain these three properties one by one:'
  prefs: []
  type: TYPE_NORMAL
- en: '`UnityBookGame` in this example.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reset frequency** determines how often the leaderboard should be reset. There
    are five options:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Manually**: This is the default value, and we leave the reset frequency set
    to this so that the leaderboard doesn''t reset automatically.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hourly**: Automatically resets the leaderboard every hour.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Daily**: Automatically resets the leaderboard every day.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Weekly**: Automatically resets the leaderboard every week.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Monthly**: Automatically resets the leaderboard every month.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Aggregation method** determines how the scores from the players are saved.
    There are four options:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Last**: This is the default option; it is always updated with a new value,
    regardless of whether it is higher or lower than the existing value.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Minimum**: Always use the lowest value.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Maxmum**: Always use the highest value. We choose this option to save the
    highest score of a player in our game.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sum**: Add this value to the existing value.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Click the **Save** button in the **New Leaderboard** settings panel; then,
    we have an empty leaderboard set up in Azure PlayFab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.32 – A new empty leaderboard'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.32_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.32 – A new empty leaderboard
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to allow the Unity game to post player statistics requests to Azure
    PlayFab, we also need to enable the **Allow client to post player statistics**
    option in Azure PlayFab. So, click the gear icon at the upper-left corner first,
    and then select the **Title settings** option to open the settings page of the
    game title, as shown in the following figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.33 – Open the Title settings page'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.33_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.33 – Open the Title settings page
  prefs: []
  type: TYPE_NORMAL
- en: 'On the settings page, click on the **API Features** tab to switch to the **API
    Features** settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_11.34_B17146.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.34 – The API Features settings
  prefs: []
  type: TYPE_NORMAL
- en: 'Scroll down to the **ENABLE API FEATURES** section, enable the **Allow client
    to post player statistics** option, and save, as shown in *Figure 11.35*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_11.35_B17146.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.35 – Enable the Allow client to post player statistics option
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've created and set up a leaderboard in Azure PlayFab, let's move
    on to explore how to update the score of a player from Unity using the Azure PlayFab
    API.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the score of a player from Unity using the Azure PlayFab API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When a player completes a game and has a higher score than before, we want
    to update the player''s score on the leaderboard in Azure PlayFab. Let''s perform
    the following steps to implement it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new C# script in the `Scripts` folder, name it `AzurePlayFabLeaderboardManager`,
    and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s break down the code, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `UpdateLeaderboardInAzurePlayFab` method, we create a new instance of
    the `StatisticUpdate` class, which encapsulates the data that needs to be updated
    for the leaderboard. Here, we provide the name of the leaderboard and the player's
    score.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then, we create a list of `StatisticUpdate` and add the instance of `StatisticUpdate`
    that we just created to it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After that, we create a new instance of the `UpdatePlayerStatisticsRequest`
    class, which encapsulates the `StatisticUpdate` list we used to update the leaderboard,
    and call `PlayFabClientAPI.UpdatePlayerStatistics` to update the leaderboard in
    Azure PlayFab.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We also have two callbacks – `OnUpdateSuccess`, which is called when the result
    is received, and `OnError`, which is called when an error occurs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Then, we need to make sure that the `UpdateLeaderboardInAzurePlayFab` method
    will be called when the game is over. So, let''s open the example project''s **Game**
    scene in the **BasicGame** | **Scenes** folder, as shown in *Figure 11.36*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_11.36_B17146.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.36 – The example game scene
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new GameObject in the `AzurePlayFabManager`, and then drag and drop
    `AzurePlayFabLeaderboardManager.cs` onto it, as shown in *Figure 11.37*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.37 – Setting up the GameObject'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.37_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.37 – Setting up the GameObject
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to modify an existing C# script in the example project. You can
    find the `ExampleGameManager.cs` file in the **BasicGame** > **Scripts** folder;
    double-click it to open it, as shown in *Figure 11.38*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_11.38_B17146.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.38 – The ExampleGameManager.cs file
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code to the `ExampleGameManager` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s break down the added code, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we add a new field to get the reference to the instance of `AzurePlayFabLeaderboardManager`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then, we call the `UpdateLeaderboardInAzurePlayFab` method in `GameOver` to
    update the leaderboard.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Remember to assign the reference to the `AzurePlayFabLeaderboardManager` instance
    to the field we just added:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.39 – Assigning the reference to the field'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.39_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.39 – Assigning the reference to the field
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go back to the **Start** scene and run the game in the Editor, using
    the player account we created in the previous section to log in and play. In the
    following screenshot, we have **4** points at the end of the game:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_11.40_B17146.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.40 – We have 4 points in the game
  prefs: []
  type: TYPE_NORMAL
- en: 'At the same time, go to the **Leaderboard** dashboard of Azure PlayFab, where
    you can see that the player''s highest score is **4** points and they rank first:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.41 – The leaderboard in Azure PlayFab'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.41_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.41 – The leaderboard in Azure PlayFab
  prefs: []
  type: TYPE_NORMAL
- en: We have called the API to update the score of a player on the leaderboard in
    Azure PlayFab from Unity. Our next challenge will be to load the leaderboard data
    from it.
  prefs: []
  type: TYPE_NORMAL
- en: Loading the leaderboard data from Azure PlayFab in Unity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the example project, you also can find the leaderboard panel in **BasicGame**
    | **Scenes** | **GameScene**, which we will use to display the top 10 players
    on the leaderboard loaded from Azure PlayFab. By default, this UI panel is not
    activated, so now, we can''t see it in the **Game** view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.42 – The leaderboard panel'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.42_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.42 – The leaderboard panel
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we start exploring how to load leaderboard information from Azure PlayFab,
    let''s register more players and add more items to the **UnityBookGame** leaderboard,
    as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.43 – The UnityBookGame leaderboard'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.43_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.43 – The UnityBookGame leaderboard
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, our first task is to call the Azure PlayFab API in Unity to get leaderboard
    data. To do so, proceed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go back to the `AzurePlayFabLeaderboardManager` script and add the code, as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s break down the added code, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: We create a new method and name it `LoadLeaderboardDataFromAzurePlayFab`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the `LoadLeaderboardDataFromAzurePlayFab` method, we create a new instance
    of `GetLeaderboardRequest` and call `PlayFabClientAPI.` `GetLeaderboard` to retrieve
    up to `10` entries from the `UnityBookGame` leaderboard, starting at index `0`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We also add a new callback, `OnLoadSuccess`, which is called when the result
    is received to print "`Load Success!`" in the console window.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Then, go back to `ExampleGameManager.cs` and update the code as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The newly added code will get leaderboard information from Azure PlayFab when
    the game is over.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the game and take a look at the console window when the game is over; we
    successfully load leaderboard data from Azure PlayFab, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.44 – Load Success!'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.44_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.44 – Load Success!
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we''ve received successful results from Azure PlayFab, our next task
    is display this data in the leaderboard UI panel in our Unity project:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go back to the `AzurePlayFabLeaderboardManager` script again and update the
    code, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s break down the newly added code, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `fields` section, we reference the `Leaderboard` GameObject in the scene;
    this is because the leaderboard panel is not activated by default, and we want
    to activate it at the end of the game to display leaderboard information from
    Azure PlayFab. Additionally, we get a reference to the list of `Text` UI elements
    used to display each item on the leaderboard.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In `OnLoadSuccess`, we activate the `Leaderboard` GameObject in the scene and
    receive the leaderboard information from Azure PlayFab. Then, call the `CreateRankingItemsInUnity`
    method, which takes `List<PlayerLeaderboardEntry>` as a parameter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In `CreateRankingItemsInUnity`, we update the `Text` UI elements to display
    information about each item, including the player's rank, display name, and score.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Don''t forget to assign these UI elements to these newly added fields accordingly
    in the `AzurePlayFabManager` GameObject in the **Game** scene, as shown in *Figure
    11.45*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_11.45_B17146.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.45 – Assigning the UI elements to the newly added fields
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go back to the **Start** scene and run the game. In the following screenshot,
    we can see that the leaderboard UI panel appears at the end of the game and displays
    the ranking information for the top 10 players:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.46 – The leaderboard in Unity'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.46_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.46 – The leaderboard in Unity
  prefs: []
  type: TYPE_NORMAL
- en: By reading this section, you should now know how to set up a leaderboard in
    Azure PlayFab, how to update leaderboard data from a Unity game using the Azure
    PlayFab API, and how to use the Azure PlayFab API to get leaderboard data from
    Azure PlayFab and display it in Unity.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter is the last chapter of the book and the final level of our long
    adventure. Along the way, you've learned a lot of different topics on how to develop
    games with the Unity game engine, which may include areas you're familiar with,
    such as how to implement UI in Unity using the MVVM architectural pattern, or
    there may be content that you have never touched upon before, such as rendering
    pipelines and related mathematical knowledge. I hope you enjoyed the journey and
    are ready for the new challenges ahead.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the Unity engine itself, this chapter also focuses on Microsoft
    Game Dev, the Microsoft Azure cloud, and Azure PlayFab. We discussed what they
    are and why we should consider using them in game development. Then, we used an
    example project to demonstrate how to create a new Azure PlayFab developer account,
    set up the Azure PlayFab SDK in the Unity project, and implement the registration,
    login and leaderboard functions in Unity through the Azure PlayFab API.
  prefs: []
  type: TYPE_NORMAL
- en: By reading this chapter and this book, I hope that you now understand that the
    knowledge required for game development is not limited to how to use a game engine;
    it also involves knowledge of programming, computer graphics, and even cloud services.
  prefs: []
  type: TYPE_NORMAL
- en: While this chapter is the end of the book, this book is only the beginning of
    your game developer journey. Keep learning, and keep growing!
  prefs: []
  type: TYPE_NORMAL
